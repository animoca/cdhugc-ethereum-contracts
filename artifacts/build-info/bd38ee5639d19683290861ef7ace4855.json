{"id":"bd38ee5639d19683290861ef7ace4855","_format":"hh-sol-build-info-1","solcVersion":"0.8.22","solcLongVersion":"0.8.22+commit.4fc1097e","input":{"language":"Solidity","sources":{"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC173 Contract Ownership Standard (proxiable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ContractOwnershipBase is IERC173, Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc IERC173\n    function owner() public view virtual returns (address) {\n        return ContractOwnershipStorage.layout().owner();\n    }\n\n    /// @inheritdoc IERC173\n    function transferOwnership(address newOwner) public virtual {\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {ContractOwnershipStorage} from \"./libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnershipBase} from \"./base/ContractOwnershipBase.sol\";\nimport {InterfaceDetection} from \"./../introspection/InterfaceDetection.sol\";\n\n/// @title ERC173 Contract Ownership Standard (immutable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Initializes the storage with an initial contract owner.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner the initial contract owner.\n    constructor(address initialOwner) {\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when the target contract is actually not a contract.\n/// @param targetContract The contract that was checked\nerror TargetIsNotAContract(address targetContract);\n"},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when an account is not the contract owner but is required to.\n/// @param account The account that was checked.\nerror NotContractOwner(address account);\n\n/// @notice Thrown when an account is not the target contract owner but is required to.\n/// @param targetContract The contract that was checked.\n/// @param account The account that was checked.\nerror NotTargetContractOwner(address targetContract, address account);\n"},"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Emitted when the contract ownership changes.\n/// @param previousOwner the previous contract owner.\n/// @param newOwner the new contract owner.\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC-173 Contract Ownership Standard (functions)\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173 {\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(address newOwner) external;\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner() external view returns (address contractOwner);\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {NotContractOwner, NotTargetContractOwner} from \"./../errors/ContractOwnershipErrors.sol\";\nimport {TargetIsNotAContract} from \"./../errors/Common.sol\";\nimport {OwnershipTransferred} from \"./../events/ERC173Events.sol\";\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ContractOwnershipStorage {\n    using Address for address;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        address contractOwner;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.phase\")) - 1);\n\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function constructorInit(Layout storage s, address initialOwner) internal {\n        if (initialOwner != address(0)) {\n            s.contractOwner = initialOwner;\n            emit OwnershipTransferred(address(0), initialOwner);\n        }\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function proxyInit(Layout storage s, address initialOwner) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(initialOwner);\n    }\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\n        address previousOwner = s.contractOwner;\n        if (sender != previousOwner) revert NotContractOwner(sender);\n        if (previousOwner != newOwner) {\n            s.contractOwner = newOwner;\n            emit OwnershipTransferred(previousOwner, newOwner);\n        }\n    }\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner(Layout storage s) internal view returns (address contractOwner) {\n        return s.contractOwner;\n    }\n\n    /// @notice Checks whether an account is the owner of a target contract.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\n        return IERC173(targetContract).owner() == account;\n    }\n\n    /// @notice Ensures that an account is the contract owner.\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n    /// @param account The account.\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\n        if (account != s.contractOwner) revert NotContractOwner(account);\n    }\n\n    /// @notice Enforces that an account is the owner of a target contract.\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\nerror IllegalInterfaceId();\n"},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC165} from \"./interfaces/IERC165.sol\";\nimport {InterfaceDetectionStorage} from \"./libraries/InterfaceDetectionStorage.sol\";\n\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\nabstract contract InterfaceDetection is IERC165 {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC165 Interface Detection Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\ninterface IERC165 {\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId the interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IllegalInterfaceId} from \"./../errors/InterfaceDetectionErrors.sol\";\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\n\nlibrary InterfaceDetectionStorage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.introspection.InterfaceDetection.storage\")) - 1);\n\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\n\n    /// @notice Sets or unsets an ERC165 interface.\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n    /// @param interfaceId the interface identifier.\n    /// @param supported True to set the interface, false to unset it.\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\n        s.supportedInterfaces[interfaceId] = supported;\n    }\n\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId The interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return s.supportedInterfaces[interfaceId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IForwarderRegistry} from \"./../interfaces/IForwarderRegistry.sol\";\nimport {ERC2771Calldata} from \"./../libraries/ERC2771Calldata.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContextBase {\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\n\n    constructor(IForwarderRegistry forwarderRegistry) {\n        _FORWARDER_REGISTRY = forwarderRegistry;\n    }\n\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgSender() internal view virtual returns (address) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.sender;\n        }\n\n        address sender = ERC2771Calldata.msgSender();\n\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\n            return sender;\n        }\n\n        return msg.sender;\n    }\n\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgData() internal view virtual returns (bytes calldata) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.data;\n        }\n\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\n            return ERC2771Calldata.msgData();\n        }\n\n        return msg.data;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IForwarderRegistry} from \"./interfaces/IForwarderRegistry.sol\";\nimport {IERC2771} from \"./interfaces/IERC2771.sol\";\nimport {ForwarderRegistryContextBase} from \"./base/ForwarderRegistryContextBase.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\n\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\n        return _FORWARDER_REGISTRY;\n    }\n\n    /// @inheritdoc IERC2771\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\n        return forwarder == address(_FORWARDER_REGISTRY);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title Secure Protocol for Native Meta Transactions.\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\ninterface IERC2771 {\n    /// @notice Checks whether a forwarder is trusted.\n    /// @param forwarder The forwarder to check.\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title Universal Meta-Transactions Forwarder Registry.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\ninterface IForwarderRegistry {\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\n    /// @param sender The sender account.\n    /// @param forwarder The forwarder account.\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\nlibrary ERC2771Calldata {\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\n    function msgSender() internal pure returns (address sender) {\n        assembly {\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\n        }\n    }\n\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\n    function msgData() internal pure returns (bytes calldata data) {\n        unchecked {\n            return msg.data[:msg.data.length - 20];\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Emitted when trying to set a phase value that has already been reached.\n/// @param currentPhase The current phase.\n/// @param newPhase The new phase trying to be set.\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\n"},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {InitializationPhaseAlreadyReached} from \"./../errors/ProxyInitializationErrors.sol\";\nimport {StorageSlot} from \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\nlibrary ProxyInitialization {\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n    /// @param storageSlot the storage slot where `phase` is stored.\n    /// @param phase the initialization phase.\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\n        uint256 currentPhase = currentVersion.value;\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\n        currentVersion.value = phase;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.22;\n\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\ninterface IERC1155Mintable {\n    /// @notice Safely mints some token.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `to`'s balance of `id` overflows.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n    /// @dev Emits an {IERC1155-TransferSingle} event.\n    /// @param to Address of the new token owner.\n    /// @param id Identifier of the token to mint.\n    /// @param value Amount of token to mint.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /// @notice Safely mints a batch of tokens.\n    /// @dev Reverts if `ids` and `values` have different lengths.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\n    /// @dev Emits an {IERC1155-TransferBatch} event.\n    /// @param to Address of the new tokens owner.\n    /// @param ids Identifiers of the tokens to mint.\n    /// @param values Amounts of tokens to mint.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC20Receiver} from \"./interfaces/IERC20Receiver.sol\";\nimport {InterfaceDetectionStorage} from \"../../introspection/libraries/InterfaceDetectionStorage.sol\";\nimport {InterfaceDetection} from \"../../introspection/InterfaceDetection.sol\";\n\n/// @title ERC20 Fungible Token Standard, Receiver (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC20Receiver is IERC20Receiver, InterfaceDetection {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Receiver.\n    constructor() {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Receiver).interfaceId, true);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC20 Token Standard, basic interface (functions).\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\ninterface IERC20 {\n    /// @notice Sets the allowance to an account from the sender.\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    /// @dev Reverts if `spender` is the zero address.\n    /// @dev Emits an {Approval} event.\n    /// @param spender The account being granted the allowance by the message caller.\n    /// @param value The allowance amount to grant.\n    /// @return result Whether the operation succeeded.\n    function approve(address spender, uint256 value) external returns (bool result);\n\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if the sender does not have at least `value` of balance.\n    /// @dev Emits a {Transfer} event.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @return result Whether the operation succeeded.\n    function transfer(address to, uint256 value) external returns (bool result);\n\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` does not have at least `value` of balance.\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\n    /// @dev Emits a {Transfer} event.\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\n    /// @param from The account which owns the tokens to transfer.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @return result Whether the operation succeeded.\n    function transferFrom(address from, address to, uint256 value) external returns (bool result);\n\n    /// @notice Gets the total token supply.\n    /// @return supply The total token supply.\n    function totalSupply() external view returns (uint256 supply);\n\n    /// @notice Gets an account balance.\n    /// @param owner The account whose balance will be returned.\n    /// @return balance The account balance.\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\n    /// @param owner The account that has granted an allowance to `spender`.\n    /// @param spender The account that was granted an allowance by `owner`.\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\n    function allowance(address owner, address spender) external view returns (uint256 value);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC20 Token Standard, Tokens Receiver.\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\ninterface IERC20Receiver {\n    /// @notice Handles the receipt of ERC20 tokens.\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\n    /// @param operator The initiator of the safe transfer.\n    /// @param from The previous tokens owner.\n    /// @param value The amount of tokens transferred.\n    /// @param data Optional additional data with no specified format.\n    /// @return magicValue `bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse.\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proofLen - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            require(proofPos == proofLen, \"MerkleProof: invalid multiproof\");\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proofLen - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            require(proofPos == proofLen, \"MerkleProof: invalid multiproof\");\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"},"contracts/mocks/ChaosKingdomResourcesClaimMock.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport {IERC20} from \"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\";\nimport {IERC1155Mintable} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {ChaosKingdomResourcesClaim} from \"../payment/ChaosKingdomResourcesClaim.sol\";\n\ncontract ChaosKingdomResourcesClaimMock is ChaosKingdomResourcesClaim {\n    constructor(\n        IERC20 feeContract_,\n        IERC1155Mintable rewardContract_,\n        IForwarderRegistry forwarderRegistry\n    ) ChaosKingdomResourcesClaim(feeContract_, rewardContract_, forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"},"contracts/payment/ChaosKingdomResourcesClaim.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport {ContractOwnershipStorage} from \"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnership} from \"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\";\nimport {IERC20} from \"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\";\nimport {IERC20Receiver} from \"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\";\nimport {ERC20Receiver} from \"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\";\nimport {IERC1155Mintable} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\";\nimport {ForwarderRegistryContext} from \"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\";\nimport {ForwarderRegistryContextBase} from \"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\n\ncontract ChaosKingdomResourcesClaim is ContractOwnership, ERC20Receiver, ForwarderRegistryContext {\n    using MerkleProof for bytes32[];\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    mapping(bytes32 => bool) public roots;\n    mapping(bytes32 => bool) public claimed;\n\n    IERC1155Mintable public immutable REWARD_CONTRACT;\n    IERC20 public immutable FEE_CONTRACT;\n\n    event MerkleRootAdded(bytes32 indexed root);\n\n    event MerkleRootDeprecated(bytes32 indexed root);\n\n    event PayoutClaimed(bytes32 indexed root, bytes32 indexed epochId, uint256 fee, address indexed recipient, uint256[] ids, uint256[] values);\n\n    error MerkleRootAlreadyExists(bytes32 merkleRoot);\n\n    error InvalidMerkleRoot(bytes32 merkleRoot);\n\n    error AlreadyClaimed(address recipient, uint256[] ids, uint256[] values, uint256 fee, bytes32 epochId);\n\n    error InvalidProof(address recipient, uint256[] ids, uint256[] values, uint256 fee, bytes32 epochId);\n\n    error FeeContractMismatch(address sender, address expectedContract);\n\n    constructor(\n        IERC20 feeContract,\n        IERC1155Mintable rewardContract,\n        IForwarderRegistry forwarderRegistry\n    ) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {\n        FEE_CONTRACT = feeContract;\n        REWARD_CONTRACT = rewardContract;\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external override returns (bytes4 magicValue) {\n        if (address(FEE_CONTRACT) != msg.sender) revert FeeContractMismatch(msg.sender, address(FEE_CONTRACT));\n\n        uint256 fee = value;\n\n        (uint256[] memory ids, uint256[] memory values) = _processClaimData(from, data, fee);\n\n        REWARD_CONTRACT.safeBatchMint(from, ids, values, \"\");\n\n        return IERC20Receiver.onERC20Received.selector;\n    }\n\n    function _processClaimData(\n        address recipient,\n        bytes calldata claimData,\n        uint256 fee\n    ) internal returns (uint256[] memory ids, uint256[] memory values) {\n        (bytes32 merkleRoot, bytes32 epochId, bytes32[] memory proof, uint256[] memory _ids, uint256[] memory _values) = abi.decode(\n            claimData,\n            (bytes32, bytes32, bytes32[], uint256[], uint256[])\n        );\n        if (!roots[merkleRoot]) revert InvalidMerkleRoot(merkleRoot);\n\n        bytes32 leaf = keccak256(abi.encodePacked(recipient, _ids, _values, fee, epochId));\n\n        if (claimed[leaf]) revert AlreadyClaimed(recipient, _ids, _values, fee, epochId);\n        if (!proof.verify(merkleRoot, leaf)) revert InvalidProof(recipient, _ids, _values, fee, epochId);\n\n        claimed[leaf] = true;\n\n        emit PayoutClaimed(merkleRoot, epochId, fee, recipient, _ids, _values);\n\n        return (_ids, _values);\n    }\n\n    function claim(address recipient, bytes calldata claimData, uint256 fee) external {\n        (uint256[] memory ids, uint256[] memory values) = _processClaimData(recipient, claimData, fee);\n\n        FEE_CONTRACT.transferFrom(recipient, address(this), fee);\n        REWARD_CONTRACT.safeBatchMint(recipient, ids, values, \"\");\n    }\n\n    function addMerkleRoot(bytes32 merkleRoot) public {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        if (roots[merkleRoot]) revert MerkleRootAlreadyExists(merkleRoot);\n\n        roots[merkleRoot] = true;\n        emit MerkleRootAdded(merkleRoot);\n    }\n\n    function deprecateMerkleRoot(bytes32 merkleRoot) public {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        if (!roots[merkleRoot]) revert InvalidMerkleRoot(merkleRoot);\n\n        roots[merkleRoot] = false;\n        emit MerkleRootDeprecated(merkleRoot);\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":99999},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/payment/ChaosKingdomResourcesClaim.sol:61:30:\n   |\n61 |     function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external override returns (bytes4 magicValue) {\n   |                              ^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":3076,"file":"contracts/payment/ChaosKingdomResourcesClaim.sol","start":3060},"type":"Warning"}],"sources":{"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","exportedSymbols":{"ContractOwnership":[32],"ContractOwnershipBase":[80],"ContractOwnershipStorage":[384],"InterfaceDetection":[414]},"id":33,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:0"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./libraries/ContractOwnershipStorage.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":385,"src":"58:82:0","symbolAliases":[{"foreign":{"id":2,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"66:24:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","file":"./base/ContractOwnershipBase.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":81,"src":"141:71:0","symbolAliases":[{"foreign":{"id":4,"name":"ContractOwnershipBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"149:21:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../introspection/InterfaceDetection.sol","id":7,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":415,"src":"213:77:0","symbolAliases":[{"foreign":{"id":6,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"221:18:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":9,"name":"ContractOwnershipBase","nameLocations":["549:21:0"],"nodeType":"IdentifierPath","referencedDeclaration":80,"src":"549:21:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"549:21:0"},{"baseName":{"id":11,"name":"InterfaceDetection","nameLocations":["572:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":414,"src":"572:18:0"},"id":12,"nodeType":"InheritanceSpecifier","src":"572:18:0"}],"canonicalName":"ContractOwnership","contractDependencies":[],"contractKind":"contract","documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"292:218:0","text":"@title ERC173 Contract Ownership Standard (immutable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":32,"linearizedBaseContracts":[32,414,431,80,1307,126],"name":"ContractOwnership","nameLocation":"528:17:0","nodeType":"ContractDefinition","nodes":[{"global":false,"id":16,"libraryName":{"id":13,"name":"ContractOwnershipStorage","nameLocations":["603:24:0"],"nodeType":"IdentifierPath","referencedDeclaration":384,"src":"603:24:0"},"nodeType":"UsingForDirective","src":"597:67:0","typeName":{"id":15,"nodeType":"UserDefinedTypeName","pathNode":{"id":14,"name":"ContractOwnershipStorage.Layout","nameLocations":["632:24:0","657:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"632:31:0"},"referencedDeclaration":157,"src":"632:31:0","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":30,"nodeType":"Block","src":"998:80:0","statements":[{"expression":{"arguments":[{"id":27,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19,"src":"1058:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":22,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"1008:24:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$384_$","typeString":"type(library ContractOwnershipStorage)"}},"id":24,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1033:6:0","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":383,"src":"1008:31:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":25,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":26,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1042:15:0","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":227,"src":"1008:49:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$157_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":28,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:63:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":29,"nodeType":"ExpressionStatement","src":"1008:63:0"}]},"documentation":{"id":17,"nodeType":"StructuredDocumentation","src":"670:289:0","text":"@notice Initializes the storage with an initial contract owner.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner the initial contract owner."},"id":31,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":20,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19,"mutability":"mutable","name":"initialOwner","nameLocation":"984:12:0","nodeType":"VariableDeclaration","scope":31,"src":"976:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":18,"name":"address","nodeType":"ElementaryTypeName","src":"976:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"975:22:0"},"returnParameters":{"id":21,"nodeType":"ParameterList","parameters":[],"src":"998:0:0"},"scope":32,"src":"964:114:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":33,"src":"510:570:0","usedErrors":[94,419],"usedEvents":[110]}],"src":"32:1049:0"},"id":0},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","exportedSymbols":{"Context":[1307],"ContractOwnershipBase":[80],"ContractOwnershipStorage":[384],"IERC173":[126]},"id":81,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":34,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:1"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":36,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":81,"sourceUnit":127,"src":"58:52:1","symbolAliases":[{"foreign":{"id":35,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"66:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":38,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":81,"sourceUnit":385,"src":"111:85:1","symbolAliases":[{"foreign":{"id":37,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"119:24:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":40,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":81,"sourceUnit":1308,"src":"197:66:1","symbolAliases":[{"foreign":{"id":39,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1307,"src":"205:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":42,"name":"IERC173","nameLocations":["586:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":126,"src":"586:7:1"},"id":43,"nodeType":"InheritanceSpecifier","src":"586:7:1"},{"baseName":{"id":44,"name":"Context","nameLocations":["595:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":1307,"src":"595:7:1"},"id":45,"nodeType":"InheritanceSpecifier","src":"595:7:1"}],"canonicalName":"ContractOwnershipBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"265:278:1","text":"@title ERC173 Contract Ownership Standard (proxiable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC165 (Interface Detection Standard)."},"fullyImplemented":true,"id":80,"linearizedBaseContracts":[80,1307,126],"name":"ContractOwnershipBase","nameLocation":"561:21:1","nodeType":"ContractDefinition","nodes":[{"global":false,"id":49,"libraryName":{"id":46,"name":"ContractOwnershipStorage","nameLocations":["615:24:1"],"nodeType":"IdentifierPath","referencedDeclaration":384,"src":"615:24:1"},"nodeType":"UsingForDirective","src":"609:67:1","typeName":{"id":48,"nodeType":"UserDefinedTypeName","pathNode":{"id":47,"name":"ContractOwnershipStorage.Layout","nameLocations":["644:24:1","669:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"644:31:1"},"referencedDeclaration":157,"src":"644:31:1","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"baseFunctions":[125],"body":{"id":61,"nodeType":"Block","src":"765:65:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":55,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"782:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$384_$","typeString":"type(library ContractOwnershipStorage)"}},"id":56,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"807:6:1","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":383,"src":"782:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":57,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":58,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"816:5:1","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":304,"src":"782:39:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$157_storage_ptr_$returns$_t_address_$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer) view returns (address)"}},"id":59,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":54,"id":60,"nodeType":"Return","src":"775:48:1"}]},"documentation":{"id":50,"nodeType":"StructuredDocumentation","src":"682:23:1","text":"@inheritdoc IERC173"},"functionSelector":"8da5cb5b","id":62,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"719:5:1","nodeType":"FunctionDefinition","parameters":{"id":51,"nodeType":"ParameterList","parameters":[],"src":"724:2:1"},"returnParameters":{"id":54,"nodeType":"ParameterList","parameters":[{"constant":false,"id":53,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":62,"src":"756:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":52,"name":"address","nodeType":"ElementaryTypeName","src":"756:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"755:9:1"},"scope":80,"src":"710:120:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[119],"body":{"id":78,"nodeType":"Block","src":"924:92:1","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":73,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1297,"src":"986:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":74,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"986:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":75,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65,"src":"1000:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":68,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"934:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$384_$","typeString":"type(library ContractOwnershipStorage)"}},"id":70,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"959:6:1","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":383,"src":"934:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":71,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":72,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"968:17:1","memberName":"transferOwnership","nodeType":"MemberAccess","referencedDeclaration":291,"src":"934:51:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$157_storage_ptr_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address,address)"}},"id":76,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:75:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":77,"nodeType":"ExpressionStatement","src":"934:75:1"}]},"documentation":{"id":63,"nodeType":"StructuredDocumentation","src":"836:23:1","text":"@inheritdoc IERC173"},"functionSelector":"f2fde38b","id":79,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"873:17:1","nodeType":"FunctionDefinition","parameters":{"id":66,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65,"mutability":"mutable","name":"newOwner","nameLocation":"899:8:1","nodeType":"VariableDeclaration","scope":79,"src":"891:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":64,"name":"address","nodeType":"ElementaryTypeName","src":"891:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"890:18:1"},"returnParameters":{"id":67,"nodeType":"ParameterList","parameters":[],"src":"924:0:1"},"scope":80,"src":"864:152:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":81,"src":"543:475:1","usedErrors":[94],"usedEvents":[110]}],"src":"32:987:1"},"id":1},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","exportedSymbols":{"TargetIsNotAContract":[87]},"id":88,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":82,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:2"},{"documentation":{"id":83,"nodeType":"StructuredDocumentation","src":"58:128:2","text":"@notice Thrown when the target contract is actually not a contract.\n @param targetContract The contract that was checked"},"errorSelector":"73a5b5e3","id":87,"name":"TargetIsNotAContract","nameLocation":"192:20:2","nodeType":"ErrorDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[{"constant":false,"id":85,"mutability":"mutable","name":"targetContract","nameLocation":"221:14:2","nodeType":"VariableDeclaration","scope":87,"src":"213:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":84,"name":"address","nodeType":"ElementaryTypeName","src":"213:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"212:24:2"},"src":"186:51:2"}],"src":"32:206:2"},"id":2},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","exportedSymbols":{"NotContractOwner":[94],"NotTargetContractOwner":[101]},"id":102,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":89,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:3"},{"documentation":{"id":90,"nodeType":"StructuredDocumentation","src":"58:130:3","text":"@notice Thrown when an account is not the contract owner but is required to.\n @param account The account that was checked."},"errorSelector":"2ef4875e","id":94,"name":"NotContractOwner","nameLocation":"194:16:3","nodeType":"ErrorDefinition","parameters":{"id":93,"nodeType":"ParameterList","parameters":[{"constant":false,"id":92,"mutability":"mutable","name":"account","nameLocation":"219:7:3","nodeType":"VariableDeclaration","scope":94,"src":"211:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":91,"name":"address","nodeType":"ElementaryTypeName","src":"211:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"210:17:3"},"src":"188:40:3"},{"documentation":{"id":95,"nodeType":"StructuredDocumentation","src":"230:194:3","text":"@notice Thrown when an account is not the target contract owner but is required to.\n @param targetContract The contract that was checked.\n @param account The account that was checked."},"errorSelector":"29b9b08b","id":101,"name":"NotTargetContractOwner","nameLocation":"430:22:3","nodeType":"ErrorDefinition","parameters":{"id":100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":97,"mutability":"mutable","name":"targetContract","nameLocation":"461:14:3","nodeType":"VariableDeclaration","scope":101,"src":"453:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":96,"name":"address","nodeType":"ElementaryTypeName","src":"453:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":99,"mutability":"mutable","name":"account","nameLocation":"485:7:3","nodeType":"VariableDeclaration","scope":101,"src":"477:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":98,"name":"address","nodeType":"ElementaryTypeName","src":"477:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"452:41:3"},"src":"424:70:3"}],"src":"32:463:3"},"id":3},"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol","exportedSymbols":{"OwnershipTransferred":[110]},"id":111,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":103,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:4"},{"anonymous":false,"documentation":{"id":104,"nodeType":"StructuredDocumentation","src":"58:155:4","text":"@notice Emitted when the contract ownership changes.\n @param previousOwner the previous contract owner.\n @param newOwner the new contract owner."},"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":110,"name":"OwnershipTransferred","nameLocation":"219:20:4","nodeType":"EventDefinition","parameters":{"id":109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":106,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"256:13:4","nodeType":"VariableDeclaration","scope":110,"src":"240:29:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":105,"name":"address","nodeType":"ElementaryTypeName","src":"240:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":108,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"287:8:4","nodeType":"VariableDeclaration","scope":110,"src":"271:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"271:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"239:57:4"},"src":"213:84:4"}],"src":"32:269:4"},"id":4},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","exportedSymbols":{"IERC173":[126]},"id":127,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":112,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC173","contractDependencies":[],"contractKind":"interface","documentation":{"id":113,"nodeType":"StructuredDocumentation","src":"58:182:5","text":"@title ERC-173 Contract Ownership Standard (functions)\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0"},"fullyImplemented":false,"id":126,"linearizedBaseContracts":[126],"name":"IERC173","nameLocation":"250:7:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":114,"nodeType":"StructuredDocumentation","src":"264:342:5","text":"@notice Sets the address of the new contract owner.\n @dev Reverts if the sender is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"functionSelector":"f2fde38b","id":119,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"620:17:5","nodeType":"FunctionDefinition","parameters":{"id":117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":116,"mutability":"mutable","name":"newOwner","nameLocation":"646:8:5","nodeType":"VariableDeclaration","scope":119,"src":"638:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":115,"name":"address","nodeType":"ElementaryTypeName","src":"638:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"637:18:5"},"returnParameters":{"id":118,"nodeType":"ParameterList","parameters":[],"src":"664:0:5"},"scope":126,"src":"611:54:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":120,"nodeType":"StructuredDocumentation","src":"671:116:5","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"functionSelector":"8da5cb5b","id":125,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"801:5:5","nodeType":"FunctionDefinition","parameters":{"id":121,"nodeType":"ParameterList","parameters":[],"src":"806:2:5"},"returnParameters":{"id":124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":123,"mutability":"mutable","name":"contractOwner","nameLocation":"840:13:5","nodeType":"VariableDeclaration","scope":125,"src":"832:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":122,"name":"address","nodeType":"ElementaryTypeName","src":"832:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"831:23:5"},"scope":126,"src":"792:63:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":127,"src":"240:617:5","usedErrors":[],"usedEvents":[]}],"src":"32:826:5"},"id":5},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","exportedSymbols":{"Address":[1285],"ContractOwnershipStorage":[384],"IERC173":[126],"InterfaceDetectionStorage":[532],"NotContractOwner":[94],"NotTargetContractOwner":[101],"OwnershipTransferred":[110],"ProxyInitialization":[812],"TargetIsNotAContract":[87]},"id":385,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":128,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:6"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","file":"./../errors/ContractOwnershipErrors.sol","id":131,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":102,"src":"58:97:6","symbolAliases":[{"foreign":{"id":129,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"66:16:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":130,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"84:22:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","file":"./../errors/Common.sol","id":133,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":88,"src":"156:60:6","symbolAliases":[{"foreign":{"id":132,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"164:20:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol","file":"./../events/ERC173Events.sol","id":135,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":111,"src":"217:66:6","symbolAliases":[{"foreign":{"id":134,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"225:20:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":137,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":127,"src":"284:52:6","symbolAliases":[{"foreign":{"id":136,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"292:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":139,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":1286,"src":"337:66:6","symbolAliases":[{"foreign":{"id":138,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1285,"src":"345:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../proxy/libraries/ProxyInitialization.sol","id":141,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":813,"src":"404:84:6","symbolAliases":[{"foreign":{"id":140,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":812,"src":"412:19:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":143,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":533,"src":"489:104:6","symbolAliases":[{"foreign":{"id":142,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"497:25:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ContractOwnershipStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":384,"linearizedBaseContracts":[384],"name":"ContractOwnershipStorage","nameLocation":"603:24:6","nodeType":"ContractDefinition","nodes":[{"global":false,"id":146,"libraryName":{"id":144,"name":"Address","nameLocations":["640:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":1285,"src":"640:7:6"},"nodeType":"UsingForDirective","src":"634:26:6","typeName":{"id":145,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":150,"libraryName":{"id":147,"name":"ContractOwnershipStorage","nameLocations":["671:24:6"],"nodeType":"IdentifierPath","referencedDeclaration":384,"src":"671:24:6"},"nodeType":"UsingForDirective","src":"665:67:6","typeName":{"id":149,"nodeType":"UserDefinedTypeName","pathNode":{"id":148,"name":"ContractOwnershipStorage.Layout","nameLocations":["700:24:6","725:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"700:31:6"},"referencedDeclaration":157,"src":"700:31:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":154,"libraryName":{"id":151,"name":"InterfaceDetectionStorage","nameLocations":["743:25:6"],"nodeType":"IdentifierPath","referencedDeclaration":532,"src":"743:25:6"},"nodeType":"UsingForDirective","src":"737:69:6","typeName":{"id":153,"nodeType":"UserDefinedTypeName","pathNode":{"id":152,"name":"InterfaceDetectionStorage.Layout","nameLocations":["773:25:6","799:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"773:32:6"},"referencedDeclaration":442,"src":"773:32:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ContractOwnershipStorage.Layout","id":157,"members":[{"constant":false,"id":156,"mutability":"mutable","name":"contractOwner","nameLocation":"844:13:6","nodeType":"VariableDeclaration","scope":157,"src":"836:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":155,"name":"address","nodeType":"ElementaryTypeName","src":"836:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"Layout","nameLocation":"819:6:6","nodeType":"StructDefinition","scope":384,"src":"812:52:6","visibility":"public"},{"constant":true,"id":170,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"896:19:6","nodeType":"VariableDeclaration","scope":384,"src":"870:128:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":158,"name":"bytes32","nodeType":"ElementaryTypeName","src":"870:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":168,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e73746f72616765","id":164,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"944:47:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""},"value":"animoca.core.access.ContractOwnership.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""}],"id":163,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"934:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:58:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":162,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"926:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":161,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:6","typeDescriptions":{}}},"id":166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"926:67:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"996:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"926:71:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":160,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"918:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":159,"name":"bytes32","nodeType":"ElementaryTypeName","src":"918:7:6","typeDescriptions":{}}},"id":169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"918:80:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":183,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"1030:21:6","nodeType":"VariableDeclaration","scope":384,"src":"1004:128:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":171,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1004:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":181,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e7068617365","id":177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1080:45:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""},"value":"animoca.core.access.ContractOwnership.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""}],"id":176,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1070:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1070:56:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":175,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1062:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":174,"name":"uint256","nodeType":"ElementaryTypeName","src":"1062:7:6","typeDescriptions":{}}},"id":179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1062:65:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1130:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1062:69:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":173,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1054:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":172,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1054:7:6","typeDescriptions":{}}},"id":182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1054:78:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":226,"nodeType":"Block","src":"1641:267:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":192,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"1655:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1679:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":194,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1671:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":193,"name":"address","nodeType":"ElementaryTypeName","src":"1671:7:6","typeDescriptions":{}}},"id":196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1671:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1655:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":213,"nodeType":"IfStatement","src":"1651:152:6","trueBody":{"id":212,"nodeType":"Block","src":"1683:120:6","statements":[{"expression":{"id":202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":198,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"1697:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":200,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1699:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"1697:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":201,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"1715:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1697:30:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":203,"nodeType":"ExpressionStatement","src":"1697:30:6"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1775:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":206,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1767:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":205,"name":"address","nodeType":"ElementaryTypeName","src":"1767:7:6","typeDescriptions":{}}},"id":208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1767:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":209,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"1779:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":204,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"1746:20:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1746:46:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":211,"nodeType":"EmitStatement","src":"1741:51:6"}]}},{"expression":{"arguments":[{"expression":{"arguments":[{"id":220,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"1874:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$126_$","typeString":"type(contract IERC173)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC173_$126_$","typeString":"type(contract IERC173)"}],"id":219,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1869:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1869:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC173_$126","typeString":"type(contract IERC173)"}},"id":222,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1883:11:6","memberName":"interfaceId","nodeType":"MemberAccess","src":"1869:25:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1896:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":214,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"1812:25:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$532_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1838:6:6","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":531,"src":"1812:32:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1812:34:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":218,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1847:21:6","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":485,"src":"1812:56:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$442_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1812:89:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":225,"nodeType":"ExpressionStatement","src":"1812:89:6"}]},"documentation":{"id":184,"nodeType":"StructuredDocumentation","src":"1139:423:6","text":"@notice Initializes the storage with an initial contract owner (immutable version).\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":227,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1576:15:6","nodeType":"FunctionDefinition","parameters":{"id":190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":187,"mutability":"mutable","name":"s","nameLocation":"1607:1:6","nodeType":"VariableDeclaration","scope":227,"src":"1592:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":186,"nodeType":"UserDefinedTypeName","pathNode":{"id":185,"name":"Layout","nameLocations":["1592:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"1592:6:6"},"referencedDeclaration":157,"src":"1592:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":189,"mutability":"mutable","name":"initialOwner","nameLocation":"1618:12:6","nodeType":"VariableDeclaration","scope":227,"src":"1610:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":188,"name":"address","nodeType":"ElementaryTypeName","src":"1610:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1591:40:6"},"returnParameters":{"id":191,"nodeType":"ParameterList","parameters":[],"src":"1641:0:6"},"scope":384,"src":"1567:341:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":249,"nodeType":"Block","src":"2573:112:6","statements":[{"expression":{"arguments":[{"id":239,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"2612:21:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2635:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":236,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":812,"src":"2583:19:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$812_$","typeString":"type(library ProxyInitialization)"}},"id":238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2603:8:6","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":811,"src":"2583:28:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2583:54:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":242,"nodeType":"ExpressionStatement","src":"2583:54:6"},{"expression":{"arguments":[{"id":246,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"2665:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":243,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"2647:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":245,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2649:15:6","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":227,"src":"2647:17:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$157_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2647:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":248,"nodeType":"ExpressionStatement","src":"2647:31:6"}]},"documentation":{"id":228,"nodeType":"StructuredDocumentation","src":"1914:586:6","text":"@notice Initializes the storage with an initial contract owner (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":250,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"2514:9:6","nodeType":"FunctionDefinition","parameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":231,"mutability":"mutable","name":"s","nameLocation":"2539:1:6","nodeType":"VariableDeclaration","scope":250,"src":"2524:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":230,"nodeType":"UserDefinedTypeName","pathNode":{"id":229,"name":"Layout","nameLocations":["2524:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"2524:6:6"},"referencedDeclaration":157,"src":"2524:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":233,"mutability":"mutable","name":"initialOwner","nameLocation":"2550:12:6","nodeType":"VariableDeclaration","scope":250,"src":"2542:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":232,"name":"address","nodeType":"ElementaryTypeName","src":"2542:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2523:40:6"},"returnParameters":{"id":235,"nodeType":"ParameterList","parameters":[],"src":"2573:0:6"},"scope":384,"src":"2505:180:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":290,"nodeType":"Block","src":"3148:281:6","statements":[{"assignments":[262],"declarations":[{"constant":false,"id":262,"mutability":"mutable","name":"previousOwner","nameLocation":"3166:13:6","nodeType":"VariableDeclaration","scope":290,"src":"3158:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":261,"name":"address","nodeType":"ElementaryTypeName","src":"3158:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":265,"initialValue":{"expression":{"id":263,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"3182:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":264,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3184:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"3182:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3158:39:6"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":266,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"3211:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":267,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"3221:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3211:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":273,"nodeType":"IfStatement","src":"3207:60:6","trueBody":{"errorCall":{"arguments":[{"id":270,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"3260:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":269,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"3243:16:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":271,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3243:24:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":272,"nodeType":"RevertStatement","src":"3236:31:6"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":274,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"3281:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":275,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3298:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3281:25:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":289,"nodeType":"IfStatement","src":"3277:146:6","trueBody":{"id":288,"nodeType":"Block","src":"3308:115:6","statements":[{"expression":{"id":281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":277,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"3322:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":279,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3324:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"3322:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":280,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3340:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3322:26:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":282,"nodeType":"ExpressionStatement","src":"3322:26:6"},{"eventCall":{"arguments":[{"id":284,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"3388:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":285,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3403:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":283,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"3367:20:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3367:45:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":287,"nodeType":"EmitStatement","src":"3362:50:6"}]}}]},"documentation":{"id":251,"nodeType":"StructuredDocumentation","src":"2691:364:6","text":"@notice Sets the address of the new contract owner.\n @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"id":291,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"3069:17:6","nodeType":"FunctionDefinition","parameters":{"id":259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":254,"mutability":"mutable","name":"s","nameLocation":"3102:1:6","nodeType":"VariableDeclaration","scope":291,"src":"3087:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":253,"nodeType":"UserDefinedTypeName","pathNode":{"id":252,"name":"Layout","nameLocations":["3087:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"3087:6:6"},"referencedDeclaration":157,"src":"3087:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":256,"mutability":"mutable","name":"sender","nameLocation":"3113:6:6","nodeType":"VariableDeclaration","scope":291,"src":"3105:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":255,"name":"address","nodeType":"ElementaryTypeName","src":"3105:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":258,"mutability":"mutable","name":"newOwner","nameLocation":"3129:8:6","nodeType":"VariableDeclaration","scope":291,"src":"3121:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":257,"name":"address","nodeType":"ElementaryTypeName","src":"3121:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3086:52:6"},"returnParameters":{"id":260,"nodeType":"ParameterList","parameters":[],"src":"3148:0:6"},"scope":384,"src":"3060:369:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":303,"nodeType":"Block","src":"3635:39:6","statements":[{"expression":{"expression":{"id":300,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":295,"src":"3652:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":301,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3654:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"3652:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":299,"id":302,"nodeType":"Return","src":"3645:22:6"}]},"documentation":{"id":292,"nodeType":"StructuredDocumentation","src":"3435:116:6","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"id":304,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"3565:5:6","nodeType":"FunctionDefinition","parameters":{"id":296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":295,"mutability":"mutable","name":"s","nameLocation":"3586:1:6","nodeType":"VariableDeclaration","scope":304,"src":"3571:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":294,"nodeType":"UserDefinedTypeName","pathNode":{"id":293,"name":"Layout","nameLocations":["3571:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"3571:6:6"},"referencedDeclaration":157,"src":"3571:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"3570:18:6"},"returnParameters":{"id":299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":298,"mutability":"mutable","name":"contractOwner","nameLocation":"3620:13:6","nodeType":"VariableDeclaration","scope":304,"src":"3612:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":297,"name":"address","nodeType":"ElementaryTypeName","src":"3612:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3611:23:6"},"scope":384,"src":"3556:118:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":331,"nodeType":"Block","src":"4070:153:6","statements":[{"condition":{"id":317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4084:28:6","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":314,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"4085:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4100:10:6","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":973,"src":"4085:25:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4085:27:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":322,"nodeType":"IfStatement","src":"4080:77:6","trueBody":{"errorCall":{"arguments":[{"id":319,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"4142:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":318,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"4121:20:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4121:36:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":321,"nodeType":"RevertStatement","src":"4114:43:6"}},{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":324,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"4182:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":323,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"4174:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$126_$","typeString":"type(contract IERC173)"}},"id":325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4174:23:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC173_$126","typeString":"contract IERC173"}},"id":326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4198:5:6","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":125,"src":"4174:29:6","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4174:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":328,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":309,"src":"4209:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4174:42:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":313,"id":330,"nodeType":"Return","src":"4167:49:6"}]},"documentation":{"id":305,"nodeType":"StructuredDocumentation","src":"3680:261:6","text":"@notice Checks whether an account is the owner of a target contract.\n @param targetContract The contract to check.\n @param account The account to check.\n @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`."},"id":332,"implemented":true,"kind":"function","modifiers":[],"name":"isTargetContractOwner","nameLocation":"3955:21:6","nodeType":"FunctionDefinition","parameters":{"id":310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":307,"mutability":"mutable","name":"targetContract","nameLocation":"3985:14:6","nodeType":"VariableDeclaration","scope":332,"src":"3977:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":306,"name":"address","nodeType":"ElementaryTypeName","src":"3977:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":309,"mutability":"mutable","name":"account","nameLocation":"4009:7:6","nodeType":"VariableDeclaration","scope":332,"src":"4001:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":308,"name":"address","nodeType":"ElementaryTypeName","src":"4001:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3976:41:6"},"returnParameters":{"id":313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":312,"mutability":"mutable","name":"isTargetContractOwner_","nameLocation":"4046:22:6","nodeType":"VariableDeclaration","scope":332,"src":"4041:27:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":311,"name":"bool","nodeType":"ElementaryTypeName","src":"4041:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4040:29:6"},"scope":384,"src":"3946:277:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":350,"nodeType":"Block","src":"4494:81:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":341,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":338,"src":"4508:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":342,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":336,"src":"4519:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":343,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4521:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"4519:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4508:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":349,"nodeType":"IfStatement","src":"4504:64:6","trueBody":{"errorCall":{"arguments":[{"id":346,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":338,"src":"4560:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":345,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"4543:16:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4543:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":348,"nodeType":"RevertStatement","src":"4536:32:6"}}]},"documentation":{"id":333,"nodeType":"StructuredDocumentation","src":"4229:179:6","text":"@notice Ensures that an account is the contract owner.\n @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n @param account The account."},"id":351,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsContractOwner","nameLocation":"4422:22:6","nodeType":"FunctionDefinition","parameters":{"id":339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":336,"mutability":"mutable","name":"s","nameLocation":"4460:1:6","nodeType":"VariableDeclaration","scope":351,"src":"4445:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":335,"nodeType":"UserDefinedTypeName","pathNode":{"id":334,"name":"Layout","nameLocations":["4445:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"4445:6:6"},"referencedDeclaration":157,"src":"4445:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":338,"mutability":"mutable","name":"account","nameLocation":"4471:7:6","nodeType":"VariableDeclaration","scope":351,"src":"4463:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":337,"name":"address","nodeType":"ElementaryTypeName","src":"4463:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4444:35:6"},"returnParameters":{"id":340,"nodeType":"ParameterList","parameters":[],"src":"4494:0:6"},"scope":384,"src":"4413:162:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":370,"nodeType":"Block","src":"4935:124:6","statements":[{"condition":{"id":363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4949:47:6","subExpression":{"arguments":[{"id":360,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":354,"src":"4972:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":361,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"4988:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":359,"name":"isTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":332,"src":"4950:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4950:46:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":369,"nodeType":"IfStatement","src":"4945:107:6","trueBody":{"errorCall":{"arguments":[{"id":365,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":354,"src":"5028:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":366,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"5044:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":364,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"5005:22:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5005:47:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":368,"nodeType":"RevertStatement","src":"4998:54:6"}}]},"documentation":{"id":352,"nodeType":"StructuredDocumentation","src":"4581:256:6","text":"@notice Enforces that an account is the owner of a target contract.\n @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n @param targetContract The contract to check.\n @param account The account to check."},"id":371,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsTargetContractOwner","nameLocation":"4851:28:6","nodeType":"FunctionDefinition","parameters":{"id":357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":354,"mutability":"mutable","name":"targetContract","nameLocation":"4888:14:6","nodeType":"VariableDeclaration","scope":371,"src":"4880:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":353,"name":"address","nodeType":"ElementaryTypeName","src":"4880:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":356,"mutability":"mutable","name":"account","nameLocation":"4912:7:6","nodeType":"VariableDeclaration","scope":371,"src":"4904:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":355,"name":"address","nodeType":"ElementaryTypeName","src":"4904:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4879:41:6"},"returnParameters":{"id":358,"nodeType":"ParameterList","parameters":[],"src":"4935:0:6"},"scope":384,"src":"4842:217:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":382,"nodeType":"Block","src":"5124:115:6","statements":[{"assignments":[378],"declarations":[{"constant":false,"id":378,"mutability":"mutable","name":"position","nameLocation":"5142:8:6","nodeType":"VariableDeclaration","scope":382,"src":"5134:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5134:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":380,"initialValue":{"id":379,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":170,"src":"5153:19:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5134:38:6"},{"AST":{"nativeSrc":"5191:42:6","nodeType":"YulBlock","src":"5191:42:6","statements":[{"nativeSrc":"5205:18:6","nodeType":"YulAssignment","src":"5205:18:6","value":{"name":"position","nativeSrc":"5215:8:6","nodeType":"YulIdentifier","src":"5215:8:6"},"variableNames":[{"name":"s.slot","nativeSrc":"5205:6:6","nodeType":"YulIdentifier","src":"5205:6:6"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":378,"isOffset":false,"isSlot":false,"src":"5215:8:6","valueSize":1},{"declaration":375,"isOffset":false,"isSlot":true,"src":"5205:6:6","suffix":"slot","valueSize":1}],"id":381,"nodeType":"InlineAssembly","src":"5182:51:6"}]},"id":383,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"5074:6:6","nodeType":"FunctionDefinition","parameters":{"id":372,"nodeType":"ParameterList","parameters":[],"src":"5080:2:6"},"returnParameters":{"id":376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":375,"mutability":"mutable","name":"s","nameLocation":"5121:1:6","nodeType":"VariableDeclaration","scope":383,"src":"5106:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":374,"nodeType":"UserDefinedTypeName","pathNode":{"id":373,"name":"Layout","nameLocations":["5106:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"5106:6:6"},"referencedDeclaration":157,"src":"5106:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"5105:18:6"},"scope":384,"src":"5065:174:6","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":385,"src":"595:4646:6","usedErrors":[],"usedEvents":[]}],"src":"32:5210:6"},"id":6},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","exportedSymbols":{"IERC165":[431],"InterfaceDetection":[414],"InterfaceDetectionStorage":[532]},"id":415,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":386,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:7"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./interfaces/IERC165.sol","id":388,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":415,"sourceUnit":432,"src":"58:49:7","symbolAliases":[{"foreign":{"id":387,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"66:7:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./libraries/InterfaceDetectionStorage.sol","id":390,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":415,"sourceUnit":533,"src":"108:84:7","symbolAliases":[{"foreign":{"id":389,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"116:25:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":392,"name":"IERC165","nameLocations":["425:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":431,"src":"425:7:7"},"id":393,"nodeType":"InheritanceSpecifier","src":"425:7:7"}],"canonicalName":"InterfaceDetection","contractDependencies":[],"contractKind":"contract","documentation":{"id":391,"nodeType":"StructuredDocumentation","src":"194:191:7","text":"@title ERC165 Interface Detection Standard (immutable or proxiable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation."},"fullyImplemented":true,"id":414,"linearizedBaseContracts":[414,431],"name":"InterfaceDetection","nameLocation":"403:18:7","nodeType":"ContractDefinition","nodes":[{"global":false,"id":397,"libraryName":{"id":394,"name":"InterfaceDetectionStorage","nameLocations":["445:25:7"],"nodeType":"IdentifierPath","referencedDeclaration":532,"src":"445:25:7"},"nodeType":"UsingForDirective","src":"439:69:7","typeName":{"id":396,"nodeType":"UserDefinedTypeName","pathNode":{"id":395,"name":"InterfaceDetectionStorage.Layout","nameLocations":["475:25:7","501:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"475:32:7"},"referencedDeclaration":442,"src":"475:32:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"baseFunctions":[430],"body":{"id":412,"nodeType":"Block","src":"618:89:7","statements":[{"expression":{"arguments":[{"id":409,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"688:11:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":405,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"635:25:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$532_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"661:6:7","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":531,"src":"635:32:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:34:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":408,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"670:17:7","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":519,"src":"635:52:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$442_storage_ptr_$_t_bytes4_$returns$_t_bool_$attached_to$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4) view returns (bool)"}},"id":410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:65:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":404,"id":411,"nodeType":"Return","src":"628:72:7"}]},"documentation":{"id":398,"nodeType":"StructuredDocumentation","src":"514:23:7","text":"@inheritdoc IERC165"},"functionSelector":"01ffc9a7","id":413,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"551:17:7","nodeType":"FunctionDefinition","parameters":{"id":401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":400,"mutability":"mutable","name":"interfaceId","nameLocation":"576:11:7","nodeType":"VariableDeclaration","scope":413,"src":"569:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":399,"name":"bytes4","nodeType":"ElementaryTypeName","src":"569:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"568:20:7"},"returnParameters":{"id":404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":403,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":413,"src":"612:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":402,"name":"bool","nodeType":"ElementaryTypeName","src":"612:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"611:6:7"},"scope":414,"src":"542:165:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":415,"src":"385:324:7","usedErrors":[],"usedEvents":[]}],"src":"32:678:7"},"id":7},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","exportedSymbols":{"IllegalInterfaceId":[419]},"id":420,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":416,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:8"},{"documentation":{"id":417,"nodeType":"StructuredDocumentation","src":"58:68:8","text":"@notice Thrown when setting the illegal interfaceId 0xffffffff."},"errorSelector":"72c683bb","id":419,"name":"IllegalInterfaceId","nameLocation":"132:18:8","nodeType":"ErrorDefinition","parameters":{"id":418,"nodeType":"ParameterList","parameters":[],"src":"150:2:8"},"src":"126:27:8"}],"src":"32:122:8"},"id":8},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[431]},"id":432,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":421,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:9"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":422,"nodeType":"StructuredDocumentation","src":"58:173:9","text":"@title ERC165 Interface Detection Standard.\n @dev See https://eips.ethereum.org/EIPS/eip-165.\n @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7."},"fullyImplemented":false,"id":431,"linearizedBaseContracts":[431],"name":"IERC165","nameLocation":"241:7:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":423,"nodeType":"StructuredDocumentation","src":"255:340:9","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId the interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"functionSelector":"01ffc9a7","id":430,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"609:17:9","nodeType":"FunctionDefinition","parameters":{"id":426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":425,"mutability":"mutable","name":"interfaceId","nameLocation":"634:11:9","nodeType":"VariableDeclaration","scope":430,"src":"627:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":424,"name":"bytes4","nodeType":"ElementaryTypeName","src":"627:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"626:20:9"},"returnParameters":{"id":429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":428,"mutability":"mutable","name":"supported","nameLocation":"675:9:9","nodeType":"VariableDeclaration","scope":430,"src":"670:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":427,"name":"bool","nodeType":"ElementaryTypeName","src":"670:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"669:16:9"},"scope":431,"src":"600:86:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":432,"src":"231:457:9","usedErrors":[],"usedEvents":[]}],"src":"32:657:9"},"id":9},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","exportedSymbols":{"IERC165":[431],"IllegalInterfaceId":[419],"InterfaceDetectionStorage":[532]},"id":533,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":433,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:10"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","file":"./../errors/InterfaceDetectionErrors.sol","id":435,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":533,"sourceUnit":420,"src":"58:76:10","symbolAliases":[{"foreign":{"id":434,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":419,"src":"66:18:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./../interfaces/IERC165.sol","id":437,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":533,"sourceUnit":432,"src":"135:52:10","symbolAliases":[{"foreign":{"id":436,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"143:7:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"InterfaceDetectionStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":532,"linearizedBaseContracts":[532],"name":"InterfaceDetectionStorage","nameLocation":"197:25:10","nodeType":"ContractDefinition","nodes":[{"canonicalName":"InterfaceDetectionStorage.Layout","id":442,"members":[{"constant":false,"id":441,"mutability":"mutable","name":"supportedInterfaces","nameLocation":"277:19:10","nodeType":"VariableDeclaration","scope":442,"src":"253:43:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"typeName":{"id":440,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":438,"name":"bytes4","nodeType":"ElementaryTypeName","src":"261:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"253:23:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":439,"name":"bool","nodeType":"ElementaryTypeName","src":"271:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"}],"name":"Layout","nameLocation":"236:6:10","nodeType":"StructDefinition","scope":532,"src":"229:74:10","visibility":"public"},{"constant":true,"id":455,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"335:19:10","nodeType":"VariableDeclaration","scope":532,"src":"309:136:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":443,"name":"bytes32","nodeType":"ElementaryTypeName","src":"309:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":453,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e696e74726f7370656374696f6e2e496e74657266616365446574656374696f6e2e73746f72616765","id":449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"383:55:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""},"value":"animoca.core.introspection.InterfaceDetection.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""}],"id":448,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"373:9:10","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"373:66:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":447,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"365:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":446,"name":"uint256","nodeType":"ElementaryTypeName","src":"365:7:10","typeDescriptions":{}}},"id":451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"365:75:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"443:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"365:79:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":445,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"357:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":444,"name":"bytes32","nodeType":"ElementaryTypeName","src":"357:7:10","typeDescriptions":{}}},"id":454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"357:88:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":458,"mutability":"constant","name":"ILLEGAL_INTERFACE_ID","nameLocation":"477:20:10","nodeType":"VariableDeclaration","scope":532,"src":"452:58:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":456,"name":"bytes4","nodeType":"ElementaryTypeName","src":"452:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"500:10:10","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"internal"},{"body":{"id":484,"nodeType":"Block","src":"867:141:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":469,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"881:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":470,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"896:20:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"881:35:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":475,"nodeType":"IfStatement","src":"877:68:10","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":472,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":419,"src":"925:18:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:20:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":474,"nodeType":"RevertStatement","src":"918:27:10"}},{"expression":{"id":482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":476,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"955:1:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":479,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"957:19:10","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":441,"src":"955:21:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":480,"indexExpression":{"id":478,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"977:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"955:34:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":481,"name":"supported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"992:9:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"955:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":483,"nodeType":"ExpressionStatement","src":"955:46:10"}]},"documentation":{"id":459,"nodeType":"StructuredDocumentation","src":"517:251:10","text":"@notice Sets or unsets an ERC165 interface.\n @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n @param interfaceId the interface identifier.\n @param supported True to set the interface, false to unset it."},"id":485,"implemented":true,"kind":"function","modifiers":[],"name":"setSupportedInterface","nameLocation":"782:21:10","nodeType":"FunctionDefinition","parameters":{"id":467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":462,"mutability":"mutable","name":"s","nameLocation":"819:1:10","nodeType":"VariableDeclaration","scope":485,"src":"804:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":461,"nodeType":"UserDefinedTypeName","pathNode":{"id":460,"name":"Layout","nameLocations":["804:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"804:6:10"},"referencedDeclaration":442,"src":"804:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":464,"mutability":"mutable","name":"interfaceId","nameLocation":"829:11:10","nodeType":"VariableDeclaration","scope":485,"src":"822:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":463,"name":"bytes4","nodeType":"ElementaryTypeName","src":"822:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":466,"mutability":"mutable","name":"supported","nameLocation":"847:9:10","nodeType":"VariableDeclaration","scope":485,"src":"842:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":465,"name":"bool","nodeType":"ElementaryTypeName","src":"842:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"803:54:10"},"returnParameters":{"id":468,"nodeType":"ParameterList","parameters":[],"src":"867:0:10"},"scope":532,"src":"773:235:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":518,"nodeType":"Block","src":"1463:236:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":496,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":491,"src":"1477:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":497,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"1492:20:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1477:35:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":502,"nodeType":"IfStatement","src":"1473:78:10","trueBody":{"id":501,"nodeType":"Block","src":"1514:37:10","statements":[{"expression":{"hexValue":"66616c7365","id":499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1535:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":495,"id":500,"nodeType":"Return","src":"1528:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":503,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":491,"src":"1564:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":505,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"1584:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$431_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$431_$","typeString":"type(contract IERC165)"}],"id":504,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1579:4:10","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1579:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$431","typeString":"type(contract IERC165)"}},"id":507,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1593:11:10","memberName":"interfaceId","nodeType":"MemberAccess","src":"1579:25:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1564:40:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":512,"nodeType":"IfStatement","src":"1560:82:10","trueBody":{"id":511,"nodeType":"Block","src":"1606:36:10","statements":[{"expression":{"hexValue":"74727565","id":509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1627:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":495,"id":510,"nodeType":"Return","src":"1620:11:10"}]}},{"expression":{"baseExpression":{"expression":{"id":513,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"1658:1:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":514,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1660:19:10","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":441,"src":"1658:21:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":516,"indexExpression":{"id":515,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":491,"src":"1680:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1658:34:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":495,"id":517,"nodeType":"Return","src":"1651:41:10"}]},"documentation":{"id":486,"nodeType":"StructuredDocumentation","src":"1014:340:10","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId The interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"id":519,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1368:17:10","nodeType":"FunctionDefinition","parameters":{"id":492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":489,"mutability":"mutable","name":"s","nameLocation":"1401:1:10","nodeType":"VariableDeclaration","scope":519,"src":"1386:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":488,"nodeType":"UserDefinedTypeName","pathNode":{"id":487,"name":"Layout","nameLocations":["1386:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"1386:6:10"},"referencedDeclaration":442,"src":"1386:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":491,"mutability":"mutable","name":"interfaceId","nameLocation":"1411:11:10","nodeType":"VariableDeclaration","scope":519,"src":"1404:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":490,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1404:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1385:38:10"},"returnParameters":{"id":495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":494,"mutability":"mutable","name":"supported","nameLocation":"1452:9:10","nodeType":"VariableDeclaration","scope":519,"src":"1447:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":493,"name":"bool","nodeType":"ElementaryTypeName","src":"1447:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1446:16:10"},"scope":532,"src":"1359:340:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":530,"nodeType":"Block","src":"1764:115:10","statements":[{"assignments":[526],"declarations":[{"constant":false,"id":526,"mutability":"mutable","name":"position","nameLocation":"1782:8:10","nodeType":"VariableDeclaration","scope":530,"src":"1774:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":525,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1774:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":528,"initialValue":{"id":527,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"1793:19:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1774:38:10"},{"AST":{"nativeSrc":"1831:42:10","nodeType":"YulBlock","src":"1831:42:10","statements":[{"nativeSrc":"1845:18:10","nodeType":"YulAssignment","src":"1845:18:10","value":{"name":"position","nativeSrc":"1855:8:10","nodeType":"YulIdentifier","src":"1855:8:10"},"variableNames":[{"name":"s.slot","nativeSrc":"1845:6:10","nodeType":"YulIdentifier","src":"1845:6:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":526,"isOffset":false,"isSlot":false,"src":"1855:8:10","valueSize":1},{"declaration":523,"isOffset":false,"isSlot":true,"src":"1845:6:10","suffix":"slot","valueSize":1}],"id":529,"nodeType":"InlineAssembly","src":"1822:51:10"}]},"id":531,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"1714:6:10","nodeType":"FunctionDefinition","parameters":{"id":520,"nodeType":"ParameterList","parameters":[],"src":"1720:2:10"},"returnParameters":{"id":524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":523,"mutability":"mutable","name":"s","nameLocation":"1761:1:10","nodeType":"VariableDeclaration","scope":531,"src":"1746:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":522,"nodeType":"UserDefinedTypeName","pathNode":{"id":521,"name":"Layout","nameLocations":["1746:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"1746:6:10"},"referencedDeclaration":442,"src":"1746:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"}],"src":"1745:18:10"},"scope":532,"src":"1705:174:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":533,"src":"189:1692:10","usedErrors":[],"usedEvents":[]}],"src":"32:1850:10"},"id":10},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","exportedSymbols":{"ForwarderRegistryContext":[581],"ForwarderRegistryContextBase":[701],"IERC2771":[713],"IForwarderRegistry":[727]},"id":582,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":534,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:11"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./interfaces/IForwarderRegistry.sol","id":536,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":582,"sourceUnit":728,"src":"58:71:11","symbolAliases":[{"foreign":{"id":535,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"66:18:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","file":"./interfaces/IERC2771.sol","id":538,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":582,"sourceUnit":714,"src":"130:51:11","symbolAliases":[{"foreign":{"id":537,"name":"IERC2771","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"138:8:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"./base/ForwarderRegistryContextBase.sol","id":540,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":582,"sourceUnit":702,"src":"182:85:11","symbolAliases":[{"foreign":{"id":539,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"190:28:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":542,"name":"ForwarderRegistryContextBase","nameLocations":["575:28:11"],"nodeType":"IdentifierPath","referencedDeclaration":701,"src":"575:28:11"},"id":543,"nodeType":"InheritanceSpecifier","src":"575:28:11"},{"baseName":{"id":544,"name":"IERC2771","nameLocations":["605:8:11"],"nodeType":"IdentifierPath","referencedDeclaration":713,"src":"605:8:11"},"id":545,"nodeType":"InheritanceSpecifier","src":"605:8:11"}],"canonicalName":"ForwarderRegistryContext","contractDependencies":[],"contractKind":"contract","documentation":{"id":541,"nodeType":"StructuredDocumentation","src":"269:260:11","text":"@title Meta-Transactions Forwarder Registry Context (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":581,"linearizedBaseContracts":[581,713,701],"name":"ForwarderRegistryContext","nameLocation":"547:24:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":554,"nodeType":"Block","src":"720:2:11","statements":[]},"id":555,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":551,"name":"forwarderRegistry_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":548,"src":"700:18:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}}],"id":552,"kind":"baseConstructorSpecifier","modifierName":{"id":550,"name":"ForwarderRegistryContextBase","nameLocations":["671:28:11"],"nodeType":"IdentifierPath","referencedDeclaration":701,"src":"671:28:11"},"nodeType":"ModifierInvocation","src":"671:48:11"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":548,"mutability":"mutable","name":"forwarderRegistry_","nameLocation":"651:18:11","nodeType":"VariableDeclaration","scope":555,"src":"632:37:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"},"typeName":{"id":547,"nodeType":"UserDefinedTypeName","pathNode":{"id":546,"name":"IForwarderRegistry","nameLocations":["632:18:11"],"nodeType":"IdentifierPath","referencedDeclaration":727,"src":"632:18:11"},"referencedDeclaration":727,"src":"632:18:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"631:39:11"},"returnParameters":{"id":553,"nodeType":"ParameterList","parameters":[],"src":"720:0:11"},"scope":581,"src":"620:102:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":563,"nodeType":"Block","src":"800:43:11","statements":[{"expression":{"id":561,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"817:19:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"functionReturnParameters":560,"id":562,"nodeType":"Return","src":"810:26:11"}]},"functionSelector":"2b4c9f16","id":564,"implemented":true,"kind":"function","modifiers":[],"name":"forwarderRegistry","nameLocation":"737:17:11","nodeType":"FunctionDefinition","parameters":{"id":556,"nodeType":"ParameterList","parameters":[],"src":"754:2:11"},"returnParameters":{"id":560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":559,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":564,"src":"780:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"},"typeName":{"id":558,"nodeType":"UserDefinedTypeName","pathNode":{"id":557,"name":"IForwarderRegistry","nameLocations":["780:18:11"],"nodeType":"IdentifierPath","referencedDeclaration":727,"src":"780:18:11"},"referencedDeclaration":727,"src":"780:18:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"779:20:11"},"scope":581,"src":"728:115:11","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[712],"body":{"id":579,"nodeType":"Block","src":"962:65:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":572,"name":"forwarder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"979:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":575,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"1000:19:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}],"id":574,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"992:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":573,"name":"address","nodeType":"ElementaryTypeName","src":"992:7:11","typeDescriptions":{}}},"id":576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"992:28:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"979:41:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":571,"id":578,"nodeType":"Return","src":"972:48:11"}]},"documentation":{"id":565,"nodeType":"StructuredDocumentation","src":"849:24:11","text":"@inheritdoc IERC2771"},"functionSelector":"572b6c05","id":580,"implemented":true,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"887:18:11","nodeType":"FunctionDefinition","parameters":{"id":568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":567,"mutability":"mutable","name":"forwarder","nameLocation":"914:9:11","nodeType":"VariableDeclaration","scope":580,"src":"906:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":566,"name":"address","nodeType":"ElementaryTypeName","src":"906:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"905:19:11"},"returnParameters":{"id":571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":570,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":580,"src":"956:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":569,"name":"bool","nodeType":"ElementaryTypeName","src":"956:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"955:6:11"},"scope":581,"src":"878:149:11","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":582,"src":"529:500:11","usedErrors":[],"usedEvents":[]}],"src":"32:998:11"},"id":11},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","exportedSymbols":{"ERC2771Calldata":[756],"ForwarderRegistryContextBase":[701],"IForwarderRegistry":[727]},"id":702,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":583,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:12"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./../interfaces/IForwarderRegistry.sol","id":585,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":702,"sourceUnit":728,"src":"58:74:12","symbolAliases":[{"foreign":{"id":584,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"66:18:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","file":"./../libraries/ERC2771Calldata.sol","id":587,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":702,"sourceUnit":757,"src":"133:67:12","symbolAliases":[{"foreign":{"id":586,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"141:15:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"ForwarderRegistryContextBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":588,"nodeType":"StructuredDocumentation","src":"202:243:12","text":"@title Meta-Transactions Forwarder Registry Context (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":701,"linearizedBaseContracts":[701],"name":"ForwarderRegistryContextBase","nameLocation":"463:28:12","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":591,"mutability":"immutable","name":"_FORWARDER_REGISTRY","nameLocation":"536:19:12","nodeType":"VariableDeclaration","scope":701,"src":"498:57:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"},"typeName":{"id":590,"nodeType":"UserDefinedTypeName","pathNode":{"id":589,"name":"IForwarderRegistry","nameLocations":["498:18:12"],"nodeType":"IdentifierPath","referencedDeclaration":727,"src":"498:18:12"},"referencedDeclaration":727,"src":"498:18:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"visibility":"internal"},{"body":{"id":601,"nodeType":"Block","src":"612:56:12","statements":[{"expression":{"id":599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":597,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"622:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":598,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"644:17:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"src":"622:39:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"id":600,"nodeType":"ExpressionStatement","src":"622:39:12"}]},"id":602,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":594,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"593:17:12","nodeType":"VariableDeclaration","scope":602,"src":"574:36:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"},"typeName":{"id":593,"nodeType":"UserDefinedTypeName","pathNode":{"id":592,"name":"IForwarderRegistry","nameLocations":["574:18:12"],"nodeType":"IdentifierPath","referencedDeclaration":727,"src":"574:18:12"},"referencedDeclaration":727,"src":"574:18:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"573:38:12"},"returnParameters":{"id":596,"nodeType":"ParameterList","parameters":[],"src":"612:0:12"},"scope":701,"src":"562:106:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":651,"nodeType":"Block","src":"846:683:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":608,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1047:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1051:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1047:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":610,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"1061:2:12","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1064:6:12","memberName":"origin","nodeType":"MemberAccess","src":"1061:9:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1047:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":613,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1074:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1078:4:12","memberName":"data","nodeType":"MemberAccess","src":"1074:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1083:6:12","memberName":"length","nodeType":"MemberAccess","src":"1074:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1092:2:12","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1074:20:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1047:47:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":623,"nodeType":"IfStatement","src":"1043:95:12","trueBody":{"id":622,"nodeType":"Block","src":"1096:42:12","statements":[{"expression":{"expression":{"id":619,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1117:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1121:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1117:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":607,"id":621,"nodeType":"Return","src":"1110:17:12"}]}},{"assignments":[625],"declarations":[{"constant":false,"id":625,"mutability":"mutable","name":"sender","nameLocation":"1156:6:12","nodeType":"VariableDeclaration","scope":651,"src":"1148:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":624,"name":"address","nodeType":"ElementaryTypeName","src":"1148:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":629,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":626,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"1165:15:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$756_$","typeString":"type(library ERC2771Calldata)"}},"id":627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1181:9:12","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":738,"src":"1165:25:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1165:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1148:44:12"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":630,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1350:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1354:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1350:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":634,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"1372:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}],"id":633,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1364:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":632,"name":"address","nodeType":"ElementaryTypeName","src":"1364:7:12","typeDescriptions":{}}},"id":635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1364:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1350:42:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":639,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"1436:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":640,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1444:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1448:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1444:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":637,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"1396:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"id":638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1416:19:12","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":726,"src":"1396:39:12","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view external returns (bool)"}},"id":642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1396:59:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1350:105:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":647,"nodeType":"IfStatement","src":"1346:149:12","trueBody":{"id":646,"nodeType":"Block","src":"1457:38:12","statements":[{"expression":{"id":644,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"1478:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":607,"id":645,"nodeType":"Return","src":"1471:13:12"}]}},{"expression":{"expression":{"id":648,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1512:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1516:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1512:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":607,"id":650,"nodeType":"Return","src":"1505:17:12"}]},"documentation":{"id":603,"nodeType":"StructuredDocumentation","src":"674:105:12","text":"@notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context."},"id":652,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"793:10:12","nodeType":"FunctionDefinition","parameters":{"id":604,"nodeType":"ParameterList","parameters":[],"src":"803:2:12"},"returnParameters":{"id":607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":606,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":652,"src":"837:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":605,"name":"address","nodeType":"ElementaryTypeName","src":"837:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"836:9:12"},"scope":701,"src":"784:745:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":699,"nodeType":"Block","src":"1710:668:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":658,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1911:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1915:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1911:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":660,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"1925:2:12","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1928:6:12","memberName":"origin","nodeType":"MemberAccess","src":"1925:9:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1911:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":663,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1938:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1942:4:12","memberName":"data","nodeType":"MemberAccess","src":"1938:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1947:6:12","memberName":"length","nodeType":"MemberAccess","src":"1938:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1956:2:12","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1938:20:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1911:47:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":673,"nodeType":"IfStatement","src":"1907:93:12","trueBody":{"id":672,"nodeType":"Block","src":"1960:40:12","statements":[{"expression":{"expression":{"id":669,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1981:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1985:4:12","memberName":"data","nodeType":"MemberAccess","src":"1981:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":657,"id":671,"nodeType":"Return","src":"1974:15:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":674,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2161:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2165:6:12","memberName":"sender","nodeType":"MemberAccess","src":"2161:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":678,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"2183:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}],"id":677,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2175:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":676,"name":"address","nodeType":"ElementaryTypeName","src":"2175:7:12","typeDescriptions":{}}},"id":679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2175:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2161:42:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":683,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"2247:15:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$756_$","typeString":"type(library ERC2771Calldata)"}},"id":684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2263:9:12","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":738,"src":"2247:25:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2247:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":686,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2276:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2280:6:12","memberName":"sender","nodeType":"MemberAccess","src":"2276:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":681,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"2207:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"id":682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2227:19:12","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":726,"src":"2207:39:12","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view external returns (bool)"}},"id":688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2207:80:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2161:126:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":695,"nodeType":"IfStatement","src":"2157:189:12","trueBody":{"id":694,"nodeType":"Block","src":"2289:57:12","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":690,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"2310:15:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$756_$","typeString":"type(library ERC2771Calldata)"}},"id":691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2326:7:12","memberName":"msgData","nodeType":"MemberAccess","referencedDeclaration":755,"src":"2310:23:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () pure returns (bytes calldata)"}},"id":692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2310:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":657,"id":693,"nodeType":"Return","src":"2303:32:12"}]}},{"expression":{"expression":{"id":696,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2363:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2367:4:12","memberName":"data","nodeType":"MemberAccess","src":"2363:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":657,"id":698,"nodeType":"Return","src":"2356:15:12"}]},"documentation":{"id":653,"nodeType":"StructuredDocumentation","src":"1535:103:12","text":"@notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context."},"id":700,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"1652:8:12","nodeType":"FunctionDefinition","parameters":{"id":654,"nodeType":"ParameterList","parameters":[],"src":"1660:2:12"},"returnParameters":{"id":657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":656,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":700,"src":"1694:14:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":655,"name":"bytes","nodeType":"ElementaryTypeName","src":"1694:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1693:16:12"},"scope":701,"src":"1643:735:12","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":702,"src":"445:1935:12","usedErrors":[],"usedEvents":[]}],"src":"32:2349:12"},"id":12},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","exportedSymbols":{"IERC2771":[713]},"id":714,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":703,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:13"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC2771","contractDependencies":[],"contractKind":"interface","documentation":{"id":704,"nodeType":"StructuredDocumentation","src":"58:110:13","text":"@title Secure Protocol for Native Meta Transactions.\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":false,"id":713,"linearizedBaseContracts":[713],"name":"IERC2771","nameLocation":"178:8:13","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":705,"nodeType":"StructuredDocumentation","src":"193:171:13","text":"@notice Checks whether a forwarder is trusted.\n @param forwarder The forwarder to check.\n @return isTrusted True if `forwarder` is trusted, false if not."},"functionSelector":"572b6c05","id":712,"implemented":false,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"378:18:13","nodeType":"FunctionDefinition","parameters":{"id":708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":707,"mutability":"mutable","name":"forwarder","nameLocation":"405:9:13","nodeType":"VariableDeclaration","scope":712,"src":"397:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":706,"name":"address","nodeType":"ElementaryTypeName","src":"397:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"396:19:13"},"returnParameters":{"id":711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":710,"mutability":"mutable","name":"isTrusted","nameLocation":"444:9:13","nodeType":"VariableDeclaration","scope":712,"src":"439:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":709,"name":"bool","nodeType":"ElementaryTypeName","src":"439:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"438:16:13"},"scope":713,"src":"369:86:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":714,"src":"168:289:13","usedErrors":[],"usedEvents":[]}],"src":"32:426:13"},"id":13},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","exportedSymbols":{"IForwarderRegistry":[727]},"id":728,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":715,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:14"},{"abstract":false,"baseContracts":[],"canonicalName":"IForwarderRegistry","contractDependencies":[],"contractKind":"interface","documentation":{"id":716,"nodeType":"StructuredDocumentation","src":"58:143:14","text":"@title Universal Meta-Transactions Forwarder Registry.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":false,"id":727,"linearizedBaseContracts":[727],"name":"IForwarderRegistry","nameLocation":"211:18:14","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":717,"nodeType":"StructuredDocumentation","src":"236:314:14","text":"@notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\n @param sender The sender account.\n @param forwarder The forwarder account.\n @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise."},"functionSelector":"8929a8ca","id":726,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForwarder","nameLocation":"564:19:14","nodeType":"FunctionDefinition","parameters":{"id":722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":719,"mutability":"mutable","name":"sender","nameLocation":"592:6:14","nodeType":"VariableDeclaration","scope":726,"src":"584:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":718,"name":"address","nodeType":"ElementaryTypeName","src":"584:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":721,"mutability":"mutable","name":"forwarder","nameLocation":"608:9:14","nodeType":"VariableDeclaration","scope":726,"src":"600:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":720,"name":"address","nodeType":"ElementaryTypeName","src":"600:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"583:35:14"},"returnParameters":{"id":725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":724,"mutability":"mutable","name":"isApproved","nameLocation":"647:10:14","nodeType":"VariableDeclaration","scope":726,"src":"642:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":723,"name":"bool","nodeType":"ElementaryTypeName","src":"642:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"641:17:14"},"scope":727,"src":"555:104:14","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":728,"src":"201:460:14","usedErrors":[],"usedEvents":[]}],"src":"32:630:14"},"id":14},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","exportedSymbols":{"ERC2771Calldata":[756]},"id":757,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":729,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:15"},{"abstract":false,"baseContracts":[],"canonicalName":"ERC2771Calldata","contractDependencies":[],"contractKind":"library","documentation":{"id":730,"nodeType":"StructuredDocumentation","src":"58:144:15","text":"@dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":true,"id":756,"linearizedBaseContracts":[756],"name":"ERC2771Calldata","nameLocation":"210:15:15","nodeType":"ContractDefinition","nodes":[{"body":{"id":737,"nodeType":"Block","src":"398:105:15","statements":[{"AST":{"nativeSrc":"417:80:15","nodeType":"YulBlock","src":"417:80:15","statements":[{"nativeSrc":"431:56:15","nodeType":"YulAssignment","src":"431:56:15","value":{"arguments":[{"kind":"number","nativeSrc":"445:2:15","nodeType":"YulLiteral","src":"445:2:15","type":"","value":"96"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"466:12:15","nodeType":"YulIdentifier","src":"466:12:15"},"nativeSrc":"466:14:15","nodeType":"YulFunctionCall","src":"466:14:15"},{"kind":"number","nativeSrc":"482:2:15","nodeType":"YulLiteral","src":"482:2:15","type":"","value":"20"}],"functionName":{"name":"sub","nativeSrc":"462:3:15","nodeType":"YulIdentifier","src":"462:3:15"},"nativeSrc":"462:23:15","nodeType":"YulFunctionCall","src":"462:23:15"}],"functionName":{"name":"calldataload","nativeSrc":"449:12:15","nodeType":"YulIdentifier","src":"449:12:15"},"nativeSrc":"449:37:15","nodeType":"YulFunctionCall","src":"449:37:15"}],"functionName":{"name":"shr","nativeSrc":"441:3:15","nodeType":"YulIdentifier","src":"441:3:15"},"nativeSrc":"441:46:15","nodeType":"YulFunctionCall","src":"441:46:15"},"variableNames":[{"name":"sender","nativeSrc":"431:6:15","nodeType":"YulIdentifier","src":"431:6:15"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":734,"isOffset":false,"isSlot":false,"src":"431:6:15","valueSize":1}],"id":736,"nodeType":"InlineAssembly","src":"408:89:15"}]},"documentation":{"id":731,"nodeType":"StructuredDocumentation","src":"232:101:15","text":"@notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771."},"id":738,"implemented":true,"kind":"function","modifiers":[],"name":"msgSender","nameLocation":"347:9:15","nodeType":"FunctionDefinition","parameters":{"id":732,"nodeType":"ParameterList","parameters":[],"src":"356:2:15"},"returnParameters":{"id":735,"nodeType":"ParameterList","parameters":[{"constant":false,"id":734,"mutability":"mutable","name":"sender","nameLocation":"390:6:15","nodeType":"VariableDeclaration","scope":738,"src":"382:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":733,"name":"address","nodeType":"ElementaryTypeName","src":"382:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"381:16:15"},"scope":756,"src":"338:165:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":754,"nodeType":"Block","src":"679:89:15","statements":[{"id":753,"nodeType":"UncheckedBlock","src":"689:73:15","statements":[{"expression":{"baseExpression":{"expression":{"id":744,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"720:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"724:4:15","memberName":"data","nodeType":"MemberAccess","src":"720:8:15","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":746,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"730:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"734:4:15","memberName":"data","nodeType":"MemberAccess","src":"730:8:15","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:15","memberName":"length","nodeType":"MemberAccess","src":"730:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"3230","id":749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"748:2:15","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"730:20:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"720:31:15","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}},"functionReturnParameters":743,"id":752,"nodeType":"Return","src":"713:38:15"}]}]},"documentation":{"id":739,"nodeType":"StructuredDocumentation","src":"509:102:15","text":"@notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771."},"id":755,"implemented":true,"kind":"function","modifiers":[],"name":"msgData","nameLocation":"625:7:15","nodeType":"FunctionDefinition","parameters":{"id":740,"nodeType":"ParameterList","parameters":[],"src":"632:2:15"},"returnParameters":{"id":743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":742,"mutability":"mutable","name":"data","nameLocation":"673:4:15","nodeType":"VariableDeclaration","scope":755,"src":"658:19:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":741,"name":"bytes","nodeType":"ElementaryTypeName","src":"658:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"657:21:15"},"scope":756,"src":"616:152:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":757,"src":"202:568:15","usedErrors":[],"usedEvents":[]}],"src":"32:739:15"},"id":15},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[765]},"id":766,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":758,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:16"},{"documentation":{"id":759,"nodeType":"StructuredDocumentation","src":"58:179:16","text":"@notice Emitted when trying to set a phase value that has already been reached.\n @param currentPhase The current phase.\n @param newPhase The new phase trying to be set."},"errorSelector":"bf0c18ec","id":765,"name":"InitializationPhaseAlreadyReached","nameLocation":"243:33:16","nodeType":"ErrorDefinition","parameters":{"id":764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":761,"mutability":"mutable","name":"currentPhase","nameLocation":"285:12:16","nodeType":"VariableDeclaration","scope":765,"src":"277:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":760,"name":"uint256","nodeType":"ElementaryTypeName","src":"277:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":763,"mutability":"mutable","name":"newPhase","nameLocation":"307:8:16","nodeType":"VariableDeclaration","scope":765,"src":"299:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":762,"name":"uint256","nodeType":"ElementaryTypeName","src":"299:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"276:40:16"},"src":"237:80:16"}],"src":"32:286:16"},"id":16},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[765],"ProxyInitialization":[812],"StorageSlot":[1417]},"id":813,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":767,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:17"},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","file":"./../errors/ProxyInitializationErrors.sol","id":769,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":813,"sourceUnit":766,"src":"58:92:17","symbolAliases":[{"foreign":{"id":768,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"66:33:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"@openzeppelin/contracts/utils/StorageSlot.sol","id":771,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":813,"sourceUnit":1418,"src":"151:74:17","symbolAliases":[{"foreign":{"id":770,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"159:11:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ProxyInitialization","contractDependencies":[],"contractKind":"library","documentation":{"id":772,"nodeType":"StructuredDocumentation","src":"227:92:17","text":"@notice Multiple calls protection for storage-modifying proxy initialization functions."},"fullyImplemented":true,"id":812,"linearizedBaseContracts":[812],"name":"ProxyInitialization","nameLocation":"327:19:17","nodeType":"ContractDefinition","nodes":[{"body":{"id":810,"nodeType":"Block","src":"735:294:17","statements":[{"assignments":[784],"declarations":[{"constant":false,"id":784,"mutability":"mutable","name":"currentVersion","nameLocation":"777:14:17","nodeType":"VariableDeclaration","scope":810,"src":"745:46:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1322_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":783,"nodeType":"UserDefinedTypeName","pathNode":{"id":782,"name":"StorageSlot.Uint256Slot","nameLocations":["745:11:17","757:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":1322,"src":"745:23:17"},"referencedDeclaration":1322,"src":"745:23:17","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1322_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"id":789,"initialValue":{"arguments":[{"id":787,"name":"storageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"821:11:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":785,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"794:11:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$1417_$","typeString":"type(library StorageSlot)"}},"id":786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"806:14:17","memberName":"getUint256Slot","nodeType":"MemberAccess","referencedDeclaration":1372,"src":"794:26:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Uint256Slot_$1322_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.Uint256Slot storage pointer)"}},"id":788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"794:39:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1322_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"745:88:17"},{"assignments":[791],"declarations":[{"constant":false,"id":791,"mutability":"mutable","name":"currentPhase","nameLocation":"851:12:17","nodeType":"VariableDeclaration","scope":810,"src":"843:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":790,"name":"uint256","nodeType":"ElementaryTypeName","src":"843:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":794,"initialValue":{"expression":{"id":792,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":784,"src":"866:14:17","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1322_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":793,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"881:5:17","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1321,"src":"866:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"843:43:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":795,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"900:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":796,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"916:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"900:21:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":803,"nodeType":"IfStatement","src":"896:88:17","trueBody":{"errorCall":{"arguments":[{"id":799,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"964:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":800,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"978:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":798,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"930:33:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":801,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"930:54:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":802,"nodeType":"RevertStatement","src":"923:61:17"}},{"expression":{"id":808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":804,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":784,"src":"994:14:17","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1322_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":806,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1009:5:17","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1321,"src":"994:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":807,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"1017:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"994:28:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":809,"nodeType":"ExpressionStatement","src":"994:28:17"}]},"documentation":{"id":773,"nodeType":"StructuredDocumentation","src":"353:314:17","text":"@notice Sets the initialization phase during a storage-modifying proxy initialization function.\n @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n @param storageSlot the storage slot where `phase` is stored.\n @param phase the initialization phase."},"id":811,"implemented":true,"kind":"function","modifiers":[],"name":"setPhase","nameLocation":"681:8:17","nodeType":"FunctionDefinition","parameters":{"id":778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":775,"mutability":"mutable","name":"storageSlot","nameLocation":"698:11:17","nodeType":"VariableDeclaration","scope":811,"src":"690:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":774,"name":"bytes32","nodeType":"ElementaryTypeName","src":"690:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":777,"mutability":"mutable","name":"phase","nameLocation":"719:5:17","nodeType":"VariableDeclaration","scope":811,"src":"711:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":776,"name":"uint256","nodeType":"ElementaryTypeName","src":"711:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"689:36:17"},"returnParameters":{"id":779,"nodeType":"ParameterList","parameters":[],"src":"735:0:17"},"scope":812,"src":"672:357:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":813,"src":"319:712:17","usedErrors":[],"usedEvents":[]}],"src":"32:1000:17"},"id":17},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","exportedSymbols":{"IERC1155Mintable":[842]},"id":843,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":814,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"33:24:18"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Mintable","contractDependencies":[],"contractKind":"interface","documentation":{"id":815,"nodeType":"StructuredDocumentation","src":"59:196:18","text":"@title ERC1155 Multi Token Standard, optional extension: Mintable.\n @dev See https://eips.ethereum.org/EIPS/eip-1155\n @dev Note: The ERC-165 identifier for this interface is 0x5190c92c."},"fullyImplemented":false,"id":842,"linearizedBaseContracts":[842],"name":"IERC1155Mintable","nameLocation":"265:16:18","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":816,"nodeType":"StructuredDocumentation","src":"288:550:18","text":"@notice Safely mints some token.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `to`'s balance of `id` overflows.\n @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n @dev Emits an {IERC1155-TransferSingle} event.\n @param to Address of the new token owner.\n @param id Identifier of the token to mint.\n @param value Amount of token to mint.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"5cfa9297","id":827,"implemented":false,"kind":"function","modifiers":[],"name":"safeMint","nameLocation":"852:8:18","nodeType":"FunctionDefinition","parameters":{"id":825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":818,"mutability":"mutable","name":"to","nameLocation":"869:2:18","nodeType":"VariableDeclaration","scope":827,"src":"861:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":817,"name":"address","nodeType":"ElementaryTypeName","src":"861:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":820,"mutability":"mutable","name":"id","nameLocation":"881:2:18","nodeType":"VariableDeclaration","scope":827,"src":"873:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":819,"name":"uint256","nodeType":"ElementaryTypeName","src":"873:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":822,"mutability":"mutable","name":"value","nameLocation":"893:5:18","nodeType":"VariableDeclaration","scope":827,"src":"885:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":821,"name":"uint256","nodeType":"ElementaryTypeName","src":"885:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":824,"mutability":"mutable","name":"data","nameLocation":"915:4:18","nodeType":"VariableDeclaration","scope":827,"src":"900:19:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":823,"name":"bytes","nodeType":"ElementaryTypeName","src":"900:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"860:60:18"},"returnParameters":{"id":826,"nodeType":"ParameterList","parameters":[],"src":"929:0:18"},"scope":842,"src":"843:87:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":828,"nodeType":"StructuredDocumentation","src":"936:644:18","text":"@notice Safely mints a batch of tokens.\n @dev Reverts if `ids` and `values` have different lengths.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `to`'s balance overflows for one of `ids`.\n @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\n @dev Emits an {IERC1155-TransferBatch} event.\n @param to Address of the new tokens owner.\n @param ids Identifiers of the tokens to mint.\n @param values Amounts of tokens to mint.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"0d6a5bbb","id":841,"implemented":false,"kind":"function","modifiers":[],"name":"safeBatchMint","nameLocation":"1594:13:18","nodeType":"FunctionDefinition","parameters":{"id":839,"nodeType":"ParameterList","parameters":[{"constant":false,"id":830,"mutability":"mutable","name":"to","nameLocation":"1616:2:18","nodeType":"VariableDeclaration","scope":841,"src":"1608:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":829,"name":"address","nodeType":"ElementaryTypeName","src":"1608:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":833,"mutability":"mutable","name":"ids","nameLocation":"1639:3:18","nodeType":"VariableDeclaration","scope":841,"src":"1620:22:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":831,"name":"uint256","nodeType":"ElementaryTypeName","src":"1620:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":832,"nodeType":"ArrayTypeName","src":"1620:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":836,"mutability":"mutable","name":"values","nameLocation":"1663:6:18","nodeType":"VariableDeclaration","scope":841,"src":"1644:25:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":834,"name":"uint256","nodeType":"ElementaryTypeName","src":"1644:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":835,"nodeType":"ArrayTypeName","src":"1644:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":838,"mutability":"mutable","name":"data","nameLocation":"1686:4:18","nodeType":"VariableDeclaration","scope":841,"src":"1671:19:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":837,"name":"bytes","nodeType":"ElementaryTypeName","src":"1671:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1607:84:18"},"returnParameters":{"id":840,"nodeType":"ParameterList","parameters":[],"src":"1700:0:18"},"scope":842,"src":"1585:116:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":843,"src":"255:1448:18","usedErrors":[],"usedEvents":[]}],"src":"33:1671:18"},"id":18},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol","exportedSymbols":{"ERC20Receiver":[877],"IERC20Receiver":[955],"InterfaceDetection":[414],"InterfaceDetectionStorage":[532]},"id":878,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":844,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:19"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol","file":"./interfaces/IERC20Receiver.sol","id":846,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":878,"sourceUnit":956,"src":"58:63:19","symbolAliases":[{"foreign":{"id":845,"name":"IERC20Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":955,"src":"66:14:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"../../introspection/libraries/InterfaceDetectionStorage.sol","id":848,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":878,"sourceUnit":533,"src":"122:102:19","symbolAliases":[{"foreign":{"id":847,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"130:25:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"../../introspection/InterfaceDetection.sol","id":850,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":878,"sourceUnit":415,"src":"225:78:19","symbolAliases":[{"foreign":{"id":849,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"233:18:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":852,"name":"IERC20Receiver","nameLocations":["511:14:19"],"nodeType":"IdentifierPath","referencedDeclaration":955,"src":"511:14:19"},"id":853,"nodeType":"InheritanceSpecifier","src":"511:14:19"},{"baseName":{"id":854,"name":"InterfaceDetection","nameLocations":["527:18:19"],"nodeType":"IdentifierPath","referencedDeclaration":414,"src":"527:18:19"},"id":855,"nodeType":"InheritanceSpecifier","src":"527:18:19"}],"canonicalName":"ERC20Receiver","contractDependencies":[],"contractKind":"contract","documentation":{"id":851,"nodeType":"StructuredDocumentation","src":"305:171:19","text":"@title ERC20 Fungible Token Standard, Receiver (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":false,"id":877,"linearizedBaseContracts":[877,414,431,955],"name":"ERC20Receiver","nameLocation":"494:13:19","nodeType":"ContractDefinition","nodes":[{"global":false,"id":859,"libraryName":{"id":856,"name":"InterfaceDetectionStorage","nameLocations":["558:25:19"],"nodeType":"IdentifierPath","referencedDeclaration":532,"src":"558:25:19"},"nodeType":"UsingForDirective","src":"552:69:19","typeName":{"id":858,"nodeType":"UserDefinedTypeName","pathNode":{"id":857,"name":"InterfaceDetectionStorage.Layout","nameLocations":["588:25:19","614:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"588:32:19"},"referencedDeclaration":442,"src":"588:32:19","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"body":{"id":875,"nodeType":"Block","src":"726:113:19","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":869,"name":"IERC20Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":955,"src":"798:14:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Receiver_$955_$","typeString":"type(contract IERC20Receiver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC20Receiver_$955_$","typeString":"type(contract IERC20Receiver)"}],"id":868,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"793:4:19","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":870,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"793:20:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC20Receiver_$955","typeString":"type(contract IERC20Receiver)"}},"id":871,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"814:11:19","memberName":"interfaceId","nodeType":"MemberAccess","src":"793:32:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"827:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":863,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"736:25:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$532_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"762:6:19","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":531,"src":"736:32:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"736:34:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":867,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"771:21:19","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":485,"src":"736:56:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$442_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"736:96:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":874,"nodeType":"ExpressionStatement","src":"736:96:19"}]},"documentation":{"id":860,"nodeType":"StructuredDocumentation","src":"627:80:19","text":"@notice Marks the following ERC165 interface(s) as supported: ERC20Receiver."},"id":876,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":861,"nodeType":"ParameterList","parameters":[],"src":"723:2:19"},"returnParameters":{"id":862,"nodeType":"ParameterList","parameters":[],"src":"726:0:19"},"scope":877,"src":"712:127:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":878,"src":"476:365:19","usedErrors":[419],"usedEvents":[]}],"src":"32:810:19"},"id":19},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol","exportedSymbols":{"IERC20":[937]},"id":938,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":879,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:20"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":880,"nodeType":"StructuredDocumentation","src":"58:185:20","text":"@title ERC20 Token Standard, basic interface (functions).\n @dev See https://eips.ethereum.org/EIPS/eip-20\n @dev Note: The ERC-165 identifier for this interface is 0x36372b07."},"fullyImplemented":false,"id":937,"linearizedBaseContracts":[937],"name":"IERC20","nameLocation":"253:6:20","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":881,"nodeType":"StructuredDocumentation","src":"266:759:20","text":"@notice Sets the allowance to an account from the sender.\n @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\n  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\n  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n @dev Reverts if `spender` is the zero address.\n @dev Emits an {Approval} event.\n @param spender The account being granted the allowance by the message caller.\n @param value The allowance amount to grant.\n @return result Whether the operation succeeded."},"functionSelector":"095ea7b3","id":890,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"1039:7:20","nodeType":"FunctionDefinition","parameters":{"id":886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":883,"mutability":"mutable","name":"spender","nameLocation":"1055:7:20","nodeType":"VariableDeclaration","scope":890,"src":"1047:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":882,"name":"address","nodeType":"ElementaryTypeName","src":"1047:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":885,"mutability":"mutable","name":"value","nameLocation":"1072:5:20","nodeType":"VariableDeclaration","scope":890,"src":"1064:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":884,"name":"uint256","nodeType":"ElementaryTypeName","src":"1064:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1046:32:20"},"returnParameters":{"id":889,"nodeType":"ParameterList","parameters":[{"constant":false,"id":888,"mutability":"mutable","name":"result","nameLocation":"1102:6:20","nodeType":"VariableDeclaration","scope":890,"src":"1097:11:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":887,"name":"bool","nodeType":"ElementaryTypeName","src":"1097:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1096:13:20"},"scope":937,"src":"1030:80:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":891,"nodeType":"StructuredDocumentation","src":"1116:408:20","text":"@notice Transfers an amount of tokens to a recipient from the sender.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if the sender does not have at least `value` of balance.\n @dev Emits a {Transfer} event.\n @param to The account to transfer the tokens to.\n @param value The amount of tokens to transfer.\n @return result Whether the operation succeeded."},"functionSelector":"a9059cbb","id":900,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1538:8:20","nodeType":"FunctionDefinition","parameters":{"id":896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":893,"mutability":"mutable","name":"to","nameLocation":"1555:2:20","nodeType":"VariableDeclaration","scope":900,"src":"1547:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":892,"name":"address","nodeType":"ElementaryTypeName","src":"1547:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":895,"mutability":"mutable","name":"value","nameLocation":"1567:5:20","nodeType":"VariableDeclaration","scope":900,"src":"1559:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":894,"name":"uint256","nodeType":"ElementaryTypeName","src":"1559:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1546:27:20"},"returnParameters":{"id":899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":898,"mutability":"mutable","name":"result","nameLocation":"1597:6:20","nodeType":"VariableDeclaration","scope":900,"src":"1592:11:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":897,"name":"bool","nodeType":"ElementaryTypeName","src":"1592:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1591:13:20"},"scope":937,"src":"1529:76:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":901,"nodeType":"StructuredDocumentation","src":"1611:682:20","text":"@notice Transfers an amount of tokens to a recipient from a specified address.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` does not have at least `value` of balance.\n @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\n @dev Emits a {Transfer} event.\n @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\n @param from The account which owns the tokens to transfer.\n @param to The account to transfer the tokens to.\n @param value The amount of tokens to transfer.\n @return result Whether the operation succeeded."},"functionSelector":"23b872dd","id":912,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2307:12:20","nodeType":"FunctionDefinition","parameters":{"id":908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":903,"mutability":"mutable","name":"from","nameLocation":"2328:4:20","nodeType":"VariableDeclaration","scope":912,"src":"2320:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":902,"name":"address","nodeType":"ElementaryTypeName","src":"2320:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":905,"mutability":"mutable","name":"to","nameLocation":"2342:2:20","nodeType":"VariableDeclaration","scope":912,"src":"2334:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":904,"name":"address","nodeType":"ElementaryTypeName","src":"2334:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":907,"mutability":"mutable","name":"value","nameLocation":"2354:5:20","nodeType":"VariableDeclaration","scope":912,"src":"2346:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":906,"name":"uint256","nodeType":"ElementaryTypeName","src":"2346:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2319:41:20"},"returnParameters":{"id":911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":910,"mutability":"mutable","name":"result","nameLocation":"2384:6:20","nodeType":"VariableDeclaration","scope":912,"src":"2379:11:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":909,"name":"bool","nodeType":"ElementaryTypeName","src":"2379:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2378:13:20"},"scope":937,"src":"2298:94:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":913,"nodeType":"StructuredDocumentation","src":"2398:87:20","text":"@notice Gets the total token supply.\n @return supply The total token supply."},"functionSelector":"18160ddd","id":918,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"2499:11:20","nodeType":"FunctionDefinition","parameters":{"id":914,"nodeType":"ParameterList","parameters":[],"src":"2510:2:20"},"returnParameters":{"id":917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":916,"mutability":"mutable","name":"supply","nameLocation":"2544:6:20","nodeType":"VariableDeclaration","scope":918,"src":"2536:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":915,"name":"uint256","nodeType":"ElementaryTypeName","src":"2536:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2535:16:20"},"scope":937,"src":"2490:62:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":919,"nodeType":"StructuredDocumentation","src":"2558:146:20","text":"@notice Gets an account balance.\n @param owner The account whose balance will be returned.\n @return balance The account balance."},"functionSelector":"70a08231","id":926,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"2718:9:20","nodeType":"FunctionDefinition","parameters":{"id":922,"nodeType":"ParameterList","parameters":[{"constant":false,"id":921,"mutability":"mutable","name":"owner","nameLocation":"2736:5:20","nodeType":"VariableDeclaration","scope":926,"src":"2728:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":920,"name":"address","nodeType":"ElementaryTypeName","src":"2728:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2727:15:20"},"returnParameters":{"id":925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":924,"mutability":"mutable","name":"balance","nameLocation":"2774:7:20","nodeType":"VariableDeclaration","scope":926,"src":"2766:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":923,"name":"uint256","nodeType":"ElementaryTypeName","src":"2766:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2765:17:20"},"scope":937,"src":"2709:74:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":927,"nodeType":"StructuredDocumentation","src":"2789:330:20","text":"@notice Gets the amount that an account is allowed to spend on behalf of another.\n @param owner The account that has granted an allowance to `spender`.\n @param spender The account that was granted an allowance by `owner`.\n @return value The amount which `spender` is allowed to spend on behalf of `owner`."},"functionSelector":"dd62ed3e","id":936,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"3133:9:20","nodeType":"FunctionDefinition","parameters":{"id":932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":929,"mutability":"mutable","name":"owner","nameLocation":"3151:5:20","nodeType":"VariableDeclaration","scope":936,"src":"3143:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":928,"name":"address","nodeType":"ElementaryTypeName","src":"3143:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":931,"mutability":"mutable","name":"spender","nameLocation":"3166:7:20","nodeType":"VariableDeclaration","scope":936,"src":"3158:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":930,"name":"address","nodeType":"ElementaryTypeName","src":"3158:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3142:32:20"},"returnParameters":{"id":935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":934,"mutability":"mutable","name":"value","nameLocation":"3206:5:20","nodeType":"VariableDeclaration","scope":936,"src":"3198:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":933,"name":"uint256","nodeType":"ElementaryTypeName","src":"3198:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3197:15:20"},"scope":937,"src":"3124:89:20","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":938,"src":"243:2972:20","usedErrors":[],"usedEvents":[]}],"src":"32:3184:20"},"id":20},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol","exportedSymbols":{"IERC20Receiver":[955]},"id":956,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":939,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:21"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":940,"nodeType":"StructuredDocumentation","src":"58:281:21","text":"@title ERC20 Token Standard, Tokens Receiver.\n @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\n @dev See https://eips.ethereum.org/EIPS/eip-20\n @dev Note: the ERC-165 identifier for this interface is 0x4fc35859."},"fullyImplemented":false,"id":955,"linearizedBaseContracts":[955],"name":"IERC20Receiver","nameLocation":"349:14:21","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":941,"nodeType":"StructuredDocumentation","src":"370:532:21","text":"@notice Handles the receipt of ERC20 tokens.\n @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\n @param operator The initiator of the safe transfer.\n @param from The previous tokens owner.\n @param value The amount of tokens transferred.\n @param data Optional additional data with no specified format.\n @return magicValue `bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse."},"functionSelector":"4fc35859","id":954,"implemented":false,"kind":"function","modifiers":[],"name":"onERC20Received","nameLocation":"916:15:21","nodeType":"FunctionDefinition","parameters":{"id":950,"nodeType":"ParameterList","parameters":[{"constant":false,"id":943,"mutability":"mutable","name":"operator","nameLocation":"940:8:21","nodeType":"VariableDeclaration","scope":954,"src":"932:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":942,"name":"address","nodeType":"ElementaryTypeName","src":"932:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":945,"mutability":"mutable","name":"from","nameLocation":"958:4:21","nodeType":"VariableDeclaration","scope":954,"src":"950:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":944,"name":"address","nodeType":"ElementaryTypeName","src":"950:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":947,"mutability":"mutable","name":"value","nameLocation":"972:5:21","nodeType":"VariableDeclaration","scope":954,"src":"964:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":946,"name":"uint256","nodeType":"ElementaryTypeName","src":"964:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":949,"mutability":"mutable","name":"data","nameLocation":"994:4:21","nodeType":"VariableDeclaration","scope":954,"src":"979:19:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":948,"name":"bytes","nodeType":"ElementaryTypeName","src":"979:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"931:68:21"},"returnParameters":{"id":953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":952,"mutability":"mutable","name":"magicValue","nameLocation":"1025:10:21","nodeType":"VariableDeclaration","scope":954,"src":"1018:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":951,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1018:6:21","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1017:19:21"},"scope":955,"src":"907:130:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":956,"src":"339:700:21","usedErrors":[],"usedEvents":[]}],"src":"32:1008:21"},"id":21},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[1285]},"id":1286,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":957,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:22"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":958,"nodeType":"StructuredDocumentation","src":"126:67:22","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1285,"linearizedBaseContracts":[1285],"name":"Address","nameLocation":"202:7:22","nodeType":"ContractDefinition","nodes":[{"body":{"id":972,"nodeType":"Block","src":"1478:254:22","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":966,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":961,"src":"1702:7:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1710:4:22","memberName":"code","nodeType":"MemberAccess","src":"1702:12:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1715:6:22","memberName":"length","nodeType":"MemberAccess","src":"1702:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":969,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1724:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1702:23:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":965,"id":971,"nodeType":"Return","src":"1695:30:22"}]},"documentation":{"id":959,"nodeType":"StructuredDocumentation","src":"216:1191:22","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":973,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1421:10:22","nodeType":"FunctionDefinition","parameters":{"id":962,"nodeType":"ParameterList","parameters":[{"constant":false,"id":961,"mutability":"mutable","name":"account","nameLocation":"1440:7:22","nodeType":"VariableDeclaration","scope":973,"src":"1432:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":960,"name":"address","nodeType":"ElementaryTypeName","src":"1432:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1431:17:22"},"returnParameters":{"id":965,"nodeType":"ParameterList","parameters":[{"constant":false,"id":964,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":973,"src":"1472:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":963,"name":"bool","nodeType":"ElementaryTypeName","src":"1472:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1471:6:22"},"scope":1285,"src":"1412:320:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1006,"nodeType":"Block","src":"2718:241:22","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":984,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2744:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1285","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1285","typeString":"library Address"}],"id":983,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2736:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":982,"name":"address","nodeType":"ElementaryTypeName","src":"2736:7:22","typeDescriptions":{}}},"id":985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2750:7:22","memberName":"balance","nodeType":"MemberAccess","src":"2736:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":987,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":978,"src":"2761:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2736:31:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2769:31:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":981,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2728:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:73:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":991,"nodeType":"ExpressionStatement","src":"2728:73:22"},{"assignments":[993,null],"declarations":[{"constant":false,"id":993,"mutability":"mutable","name":"success","nameLocation":"2818:7:22","nodeType":"VariableDeclaration","scope":1006,"src":"2813:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":992,"name":"bool","nodeType":"ElementaryTypeName","src":"2813:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1000,"initialValue":{"arguments":[{"hexValue":"","id":998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2861:2:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":994,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":976,"src":"2831:9:22","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2841:4:22","memberName":"call","nodeType":"MemberAccess","src":"2831:14:22","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":996,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":978,"src":"2853:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2831:29:22","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2831:33:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2812:52:22"},{"expression":{"arguments":[{"id":1002,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":993,"src":"2882:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1003,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2891:60:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1001,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2874:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1004,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2874:78:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1005,"nodeType":"ExpressionStatement","src":"2874:78:22"}]},"documentation":{"id":974,"nodeType":"StructuredDocumentation","src":"1738:904:22","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1007,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2656:9:22","nodeType":"FunctionDefinition","parameters":{"id":979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":976,"mutability":"mutable","name":"recipient","nameLocation":"2682:9:22","nodeType":"VariableDeclaration","scope":1007,"src":"2666:25:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":975,"name":"address","nodeType":"ElementaryTypeName","src":"2666:15:22","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":978,"mutability":"mutable","name":"amount","nameLocation":"2701:6:22","nodeType":"VariableDeclaration","scope":1007,"src":"2693:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":977,"name":"uint256","nodeType":"ElementaryTypeName","src":"2693:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:43:22"},"returnParameters":{"id":980,"nodeType":"ParameterList","parameters":[],"src":"2718:0:22"},"scope":1285,"src":"2647:312:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1024,"nodeType":"Block","src":"3790:96:22","statements":[{"expression":{"arguments":[{"id":1018,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"3829:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1019,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"3837:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3843:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1021,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3846:32:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1017,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1065,1109],"referencedDeclaration":1109,"src":"3807:21:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3807:72:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1016,"id":1023,"nodeType":"Return","src":"3800:79:22"}]},"documentation":{"id":1008,"nodeType":"StructuredDocumentation","src":"2965:731:22","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1025,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3710:12:22","nodeType":"FunctionDefinition","parameters":{"id":1013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1010,"mutability":"mutable","name":"target","nameLocation":"3731:6:22","nodeType":"VariableDeclaration","scope":1025,"src":"3723:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1009,"name":"address","nodeType":"ElementaryTypeName","src":"3723:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1012,"mutability":"mutable","name":"data","nameLocation":"3752:4:22","nodeType":"VariableDeclaration","scope":1025,"src":"3739:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1011,"name":"bytes","nodeType":"ElementaryTypeName","src":"3739:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3722:35:22"},"returnParameters":{"id":1016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1015,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1025,"src":"3776:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1014,"name":"bytes","nodeType":"ElementaryTypeName","src":"3776:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:14:22"},"scope":1285,"src":"3701:185:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1044,"nodeType":"Block","src":"4255:76:22","statements":[{"expression":{"arguments":[{"id":1038,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"4294:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1039,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1030,"src":"4302:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4308:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1041,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"4311:12:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1037,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1065,1109],"referencedDeclaration":1109,"src":"4272:21:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:52:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1036,"id":1043,"nodeType":"Return","src":"4265:59:22"}]},"documentation":{"id":1026,"nodeType":"StructuredDocumentation","src":"3892:211:22","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1045,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4117:12:22","nodeType":"FunctionDefinition","parameters":{"id":1033,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1028,"mutability":"mutable","name":"target","nameLocation":"4147:6:22","nodeType":"VariableDeclaration","scope":1045,"src":"4139:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1027,"name":"address","nodeType":"ElementaryTypeName","src":"4139:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1030,"mutability":"mutable","name":"data","nameLocation":"4176:4:22","nodeType":"VariableDeclaration","scope":1045,"src":"4163:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1029,"name":"bytes","nodeType":"ElementaryTypeName","src":"4163:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1032,"mutability":"mutable","name":"errorMessage","nameLocation":"4204:12:22","nodeType":"VariableDeclaration","scope":1045,"src":"4190:26:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1031,"name":"string","nodeType":"ElementaryTypeName","src":"4190:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4129:93:22"},"returnParameters":{"id":1036,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1035,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1045,"src":"4241:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1034,"name":"bytes","nodeType":"ElementaryTypeName","src":"4241:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4240:14:22"},"scope":1285,"src":"4108:223:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1064,"nodeType":"Block","src":"4806:111:22","statements":[{"expression":{"arguments":[{"id":1058,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"4845:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1059,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"4853:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1060,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1052,"src":"4859:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4866:43:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1057,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1065,1109],"referencedDeclaration":1109,"src":"4823:21:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4823:87:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1056,"id":1063,"nodeType":"Return","src":"4816:94:22"}]},"documentation":{"id":1046,"nodeType":"StructuredDocumentation","src":"4337:351:22","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1065,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4702:21:22","nodeType":"FunctionDefinition","parameters":{"id":1053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1048,"mutability":"mutable","name":"target","nameLocation":"4732:6:22","nodeType":"VariableDeclaration","scope":1065,"src":"4724:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1047,"name":"address","nodeType":"ElementaryTypeName","src":"4724:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1050,"mutability":"mutable","name":"data","nameLocation":"4753:4:22","nodeType":"VariableDeclaration","scope":1065,"src":"4740:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1049,"name":"bytes","nodeType":"ElementaryTypeName","src":"4740:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1052,"mutability":"mutable","name":"value","nameLocation":"4767:5:22","nodeType":"VariableDeclaration","scope":1065,"src":"4759:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1051,"name":"uint256","nodeType":"ElementaryTypeName","src":"4759:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4723:50:22"},"returnParameters":{"id":1056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1055,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1065,"src":"4792:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1054,"name":"bytes","nodeType":"ElementaryTypeName","src":"4792:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4791:14:22"},"scope":1285,"src":"4693:224:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1108,"nodeType":"Block","src":"5344:267:22","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1082,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5370:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1285","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1285","typeString":"library Address"}],"id":1081,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5362:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1080,"name":"address","nodeType":"ElementaryTypeName","src":"5362:7:22","typeDescriptions":{}}},"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5362:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5376:7:22","memberName":"balance","nodeType":"MemberAccess","src":"5362:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1085,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1072,"src":"5387:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5362:30:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5394:40:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1079,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5354:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5354:81:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1089,"nodeType":"ExpressionStatement","src":"5354:81:22"},{"assignments":[1091,1093],"declarations":[{"constant":false,"id":1091,"mutability":"mutable","name":"success","nameLocation":"5451:7:22","nodeType":"VariableDeclaration","scope":1108,"src":"5446:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1090,"name":"bool","nodeType":"ElementaryTypeName","src":"5446:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1093,"mutability":"mutable","name":"returndata","nameLocation":"5473:10:22","nodeType":"VariableDeclaration","scope":1108,"src":"5460:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1092,"name":"bytes","nodeType":"ElementaryTypeName","src":"5460:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1100,"initialValue":{"arguments":[{"id":1098,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1070,"src":"5513:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1094,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1068,"src":"5487:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5494:4:22","memberName":"call","nodeType":"MemberAccess","src":"5487:11:22","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1096,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1072,"src":"5506:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5487:25:22","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5487:31:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5445:73:22"},{"expression":{"arguments":[{"id":1102,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1068,"src":"5562:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1103,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1091,"src":"5570:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1104,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1093,"src":"5579:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1105,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1074,"src":"5591:12:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1101,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1240,"src":"5535:26:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5535:69:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1078,"id":1107,"nodeType":"Return","src":"5528:76:22"}]},"documentation":{"id":1066,"nodeType":"StructuredDocumentation","src":"4923:237:22","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1109,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5174:21:22","nodeType":"FunctionDefinition","parameters":{"id":1075,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1068,"mutability":"mutable","name":"target","nameLocation":"5213:6:22","nodeType":"VariableDeclaration","scope":1109,"src":"5205:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1067,"name":"address","nodeType":"ElementaryTypeName","src":"5205:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1070,"mutability":"mutable","name":"data","nameLocation":"5242:4:22","nodeType":"VariableDeclaration","scope":1109,"src":"5229:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1069,"name":"bytes","nodeType":"ElementaryTypeName","src":"5229:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1072,"mutability":"mutable","name":"value","nameLocation":"5264:5:22","nodeType":"VariableDeclaration","scope":1109,"src":"5256:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1071,"name":"uint256","nodeType":"ElementaryTypeName","src":"5256:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1074,"mutability":"mutable","name":"errorMessage","nameLocation":"5293:12:22","nodeType":"VariableDeclaration","scope":1109,"src":"5279:26:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1073,"name":"string","nodeType":"ElementaryTypeName","src":"5279:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5195:116:22"},"returnParameters":{"id":1078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1077,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1109,"src":"5330:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1076,"name":"bytes","nodeType":"ElementaryTypeName","src":"5330:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5329:14:22"},"scope":1285,"src":"5165:446:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1125,"nodeType":"Block","src":"5888:97:22","statements":[{"expression":{"arguments":[{"id":1120,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1112,"src":"5924:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1121,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1114,"src":"5932:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5938:39:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1119,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1126,1155],"referencedDeclaration":1155,"src":"5905:18:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5905:73:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1118,"id":1124,"nodeType":"Return","src":"5898:80:22"}]},"documentation":{"id":1110,"nodeType":"StructuredDocumentation","src":"5617:166:22","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1126,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5797:18:22","nodeType":"FunctionDefinition","parameters":{"id":1115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1112,"mutability":"mutable","name":"target","nameLocation":"5824:6:22","nodeType":"VariableDeclaration","scope":1126,"src":"5816:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1111,"name":"address","nodeType":"ElementaryTypeName","src":"5816:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1114,"mutability":"mutable","name":"data","nameLocation":"5845:4:22","nodeType":"VariableDeclaration","scope":1126,"src":"5832:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1113,"name":"bytes","nodeType":"ElementaryTypeName","src":"5832:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5815:35:22"},"returnParameters":{"id":1118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1117,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1126,"src":"5874:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1116,"name":"bytes","nodeType":"ElementaryTypeName","src":"5874:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5873:14:22"},"scope":1285,"src":"5788:197:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1154,"nodeType":"Block","src":"6327:168:22","statements":[{"assignments":[1139,1141],"declarations":[{"constant":false,"id":1139,"mutability":"mutable","name":"success","nameLocation":"6343:7:22","nodeType":"VariableDeclaration","scope":1154,"src":"6338:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1138,"name":"bool","nodeType":"ElementaryTypeName","src":"6338:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1141,"mutability":"mutable","name":"returndata","nameLocation":"6365:10:22","nodeType":"VariableDeclaration","scope":1154,"src":"6352:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1140,"name":"bytes","nodeType":"ElementaryTypeName","src":"6352:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1146,"initialValue":{"arguments":[{"id":1144,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1131,"src":"6397:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1142,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"6379:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6386:10:22","memberName":"staticcall","nodeType":"MemberAccess","src":"6379:17:22","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6379:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6337:65:22"},{"expression":{"arguments":[{"id":1148,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"6446:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1149,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"6454:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1150,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"6463:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1151,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1133,"src":"6475:12:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1147,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1240,"src":"6419:26:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6419:69:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1137,"id":1153,"nodeType":"Return","src":"6412:76:22"}]},"documentation":{"id":1127,"nodeType":"StructuredDocumentation","src":"5991:173:22","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1155,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6178:18:22","nodeType":"FunctionDefinition","parameters":{"id":1134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1129,"mutability":"mutable","name":"target","nameLocation":"6214:6:22","nodeType":"VariableDeclaration","scope":1155,"src":"6206:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1128,"name":"address","nodeType":"ElementaryTypeName","src":"6206:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1131,"mutability":"mutable","name":"data","nameLocation":"6243:4:22","nodeType":"VariableDeclaration","scope":1155,"src":"6230:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1130,"name":"bytes","nodeType":"ElementaryTypeName","src":"6230:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1133,"mutability":"mutable","name":"errorMessage","nameLocation":"6271:12:22","nodeType":"VariableDeclaration","scope":1155,"src":"6257:26:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1132,"name":"string","nodeType":"ElementaryTypeName","src":"6257:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6196:93:22"},"returnParameters":{"id":1137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1136,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1155,"src":"6313:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1135,"name":"bytes","nodeType":"ElementaryTypeName","src":"6313:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6312:14:22"},"scope":1285,"src":"6169:326:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1171,"nodeType":"Block","src":"6771:101:22","statements":[{"expression":{"arguments":[{"id":1166,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1158,"src":"6809:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1167,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"6817:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6823:41:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1165,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1172,1201],"referencedDeclaration":1201,"src":"6788:20:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6788:77:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1164,"id":1170,"nodeType":"Return","src":"6781:84:22"}]},"documentation":{"id":1156,"nodeType":"StructuredDocumentation","src":"6501:168:22","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1172,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6683:20:22","nodeType":"FunctionDefinition","parameters":{"id":1161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1158,"mutability":"mutable","name":"target","nameLocation":"6712:6:22","nodeType":"VariableDeclaration","scope":1172,"src":"6704:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1157,"name":"address","nodeType":"ElementaryTypeName","src":"6704:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1160,"mutability":"mutable","name":"data","nameLocation":"6733:4:22","nodeType":"VariableDeclaration","scope":1172,"src":"6720:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1159,"name":"bytes","nodeType":"ElementaryTypeName","src":"6720:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6703:35:22"},"returnParameters":{"id":1164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1163,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1172,"src":"6757:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1162,"name":"bytes","nodeType":"ElementaryTypeName","src":"6757:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6756:14:22"},"scope":1285,"src":"6674:198:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1200,"nodeType":"Block","src":"7213:170:22","statements":[{"assignments":[1185,1187],"declarations":[{"constant":false,"id":1185,"mutability":"mutable","name":"success","nameLocation":"7229:7:22","nodeType":"VariableDeclaration","scope":1200,"src":"7224:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1184,"name":"bool","nodeType":"ElementaryTypeName","src":"7224:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1187,"mutability":"mutable","name":"returndata","nameLocation":"7251:10:22","nodeType":"VariableDeclaration","scope":1200,"src":"7238:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1186,"name":"bytes","nodeType":"ElementaryTypeName","src":"7238:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1192,"initialValue":{"arguments":[{"id":1190,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"7285:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1188,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1175,"src":"7265:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7272:12:22","memberName":"delegatecall","nodeType":"MemberAccess","src":"7265:19:22","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7265:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7223:67:22"},{"expression":{"arguments":[{"id":1194,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1175,"src":"7334:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1195,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1185,"src":"7342:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1196,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1187,"src":"7351:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1197,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"7363:12:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1193,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1240,"src":"7307:26:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7307:69:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1183,"id":1199,"nodeType":"Return","src":"7300:76:22"}]},"documentation":{"id":1173,"nodeType":"StructuredDocumentation","src":"6878:175:22","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1201,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7067:20:22","nodeType":"FunctionDefinition","parameters":{"id":1180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1175,"mutability":"mutable","name":"target","nameLocation":"7105:6:22","nodeType":"VariableDeclaration","scope":1201,"src":"7097:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1174,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1177,"mutability":"mutable","name":"data","nameLocation":"7134:4:22","nodeType":"VariableDeclaration","scope":1201,"src":"7121:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1176,"name":"bytes","nodeType":"ElementaryTypeName","src":"7121:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1179,"mutability":"mutable","name":"errorMessage","nameLocation":"7162:12:22","nodeType":"VariableDeclaration","scope":1201,"src":"7148:26:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1178,"name":"string","nodeType":"ElementaryTypeName","src":"7148:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7087:93:22"},"returnParameters":{"id":1183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1182,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1201,"src":"7199:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1181,"name":"bytes","nodeType":"ElementaryTypeName","src":"7199:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7198:14:22"},"scope":1285,"src":"7058:325:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1239,"nodeType":"Block","src":"7865:434:22","statements":[{"condition":{"id":1215,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"7879:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1237,"nodeType":"Block","src":"8235:58:22","statements":[{"expression":{"arguments":[{"id":1233,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"8257:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1234,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"8269:12:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1232,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1284,"src":"8249:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8249:33:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1236,"nodeType":"ExpressionStatement","src":"8249:33:22"}]},"id":1238,"nodeType":"IfStatement","src":"7875:418:22","trueBody":{"id":1231,"nodeType":"Block","src":"7888:341:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1216,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"7906:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7917:6:22","memberName":"length","nodeType":"MemberAccess","src":"7906:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7927:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7906:22:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1228,"nodeType":"IfStatement","src":"7902:286:22","trueBody":{"id":1227,"nodeType":"Block","src":"7930:258:22","statements":[{"expression":{"arguments":[{"arguments":[{"id":1222,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"8132:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1221,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":973,"src":"8121:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8121:18:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8141:31:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1220,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8113:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8113:60:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1226,"nodeType":"ExpressionStatement","src":"8113:60:22"}]}},{"expression":{"id":1229,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"8208:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1214,"id":1230,"nodeType":"Return","src":"8201:17:22"}]}}]},"documentation":{"id":1202,"nodeType":"StructuredDocumentation","src":"7389:277:22","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1240,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7680:26:22","nodeType":"FunctionDefinition","parameters":{"id":1211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1204,"mutability":"mutable","name":"target","nameLocation":"7724:6:22","nodeType":"VariableDeclaration","scope":1240,"src":"7716:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1203,"name":"address","nodeType":"ElementaryTypeName","src":"7716:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1206,"mutability":"mutable","name":"success","nameLocation":"7745:7:22","nodeType":"VariableDeclaration","scope":1240,"src":"7740:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1205,"name":"bool","nodeType":"ElementaryTypeName","src":"7740:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1208,"mutability":"mutable","name":"returndata","nameLocation":"7775:10:22","nodeType":"VariableDeclaration","scope":1240,"src":"7762:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1207,"name":"bytes","nodeType":"ElementaryTypeName","src":"7762:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1210,"mutability":"mutable","name":"errorMessage","nameLocation":"7809:12:22","nodeType":"VariableDeclaration","scope":1240,"src":"7795:26:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1209,"name":"string","nodeType":"ElementaryTypeName","src":"7795:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7706:121:22"},"returnParameters":{"id":1214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1213,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1240,"src":"7851:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1212,"name":"bytes","nodeType":"ElementaryTypeName","src":"7851:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7850:14:22"},"scope":1285,"src":"7671:628:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1263,"nodeType":"Block","src":"8680:135:22","statements":[{"condition":{"id":1252,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"8694:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1261,"nodeType":"Block","src":"8751:58:22","statements":[{"expression":{"arguments":[{"id":1257,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"8773:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1258,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1247,"src":"8785:12:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1256,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1284,"src":"8765:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8765:33:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1260,"nodeType":"ExpressionStatement","src":"8765:33:22"}]},"id":1262,"nodeType":"IfStatement","src":"8690:119:22","trueBody":{"id":1255,"nodeType":"Block","src":"8703:42:22","statements":[{"expression":{"id":1253,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"8724:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1251,"id":1254,"nodeType":"Return","src":"8717:17:22"}]}}]},"documentation":{"id":1241,"nodeType":"StructuredDocumentation","src":"8305:210:22","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1264,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8529:16:22","nodeType":"FunctionDefinition","parameters":{"id":1248,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1243,"mutability":"mutable","name":"success","nameLocation":"8560:7:22","nodeType":"VariableDeclaration","scope":1264,"src":"8555:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1242,"name":"bool","nodeType":"ElementaryTypeName","src":"8555:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1245,"mutability":"mutable","name":"returndata","nameLocation":"8590:10:22","nodeType":"VariableDeclaration","scope":1264,"src":"8577:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1244,"name":"bytes","nodeType":"ElementaryTypeName","src":"8577:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1247,"mutability":"mutable","name":"errorMessage","nameLocation":"8624:12:22","nodeType":"VariableDeclaration","scope":1264,"src":"8610:26:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1246,"name":"string","nodeType":"ElementaryTypeName","src":"8610:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8545:97:22"},"returnParameters":{"id":1251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1250,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1264,"src":"8666:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1249,"name":"bytes","nodeType":"ElementaryTypeName","src":"8666:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8665:14:22"},"scope":1285,"src":"8520:295:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1283,"nodeType":"Block","src":"8904:457:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1271,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1266,"src":"8980:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8991:6:22","memberName":"length","nodeType":"MemberAccess","src":"8980:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9000:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8980:21:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1281,"nodeType":"Block","src":"9310:45:22","statements":[{"expression":{"arguments":[{"id":1278,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1268,"src":"9331:12:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1277,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9324:6:22","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9324:20:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1280,"nodeType":"ExpressionStatement","src":"9324:20:22"}]},"id":1282,"nodeType":"IfStatement","src":"8976:379:22","trueBody":{"id":1276,"nodeType":"Block","src":"9003:301:22","statements":[{"AST":{"nativeSrc":"9161:133:22","nodeType":"YulBlock","src":"9161:133:22","statements":[{"nativeSrc":"9179:40:22","nodeType":"YulVariableDeclaration","src":"9179:40:22","value":{"arguments":[{"name":"returndata","nativeSrc":"9208:10:22","nodeType":"YulIdentifier","src":"9208:10:22"}],"functionName":{"name":"mload","nativeSrc":"9202:5:22","nodeType":"YulIdentifier","src":"9202:5:22"},"nativeSrc":"9202:17:22","nodeType":"YulFunctionCall","src":"9202:17:22"},"variables":[{"name":"returndata_size","nativeSrc":"9183:15:22","nodeType":"YulTypedName","src":"9183:15:22","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"9247:2:22","nodeType":"YulLiteral","src":"9247:2:22","type":"","value":"32"},{"name":"returndata","nativeSrc":"9251:10:22","nodeType":"YulIdentifier","src":"9251:10:22"}],"functionName":{"name":"add","nativeSrc":"9243:3:22","nodeType":"YulIdentifier","src":"9243:3:22"},"nativeSrc":"9243:19:22","nodeType":"YulFunctionCall","src":"9243:19:22"},{"name":"returndata_size","nativeSrc":"9264:15:22","nodeType":"YulIdentifier","src":"9264:15:22"}],"functionName":{"name":"revert","nativeSrc":"9236:6:22","nodeType":"YulIdentifier","src":"9236:6:22"},"nativeSrc":"9236:44:22","nodeType":"YulFunctionCall","src":"9236:44:22"},"nativeSrc":"9236:44:22","nodeType":"YulExpressionStatement","src":"9236:44:22"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1266,"isOffset":false,"isSlot":false,"src":"9208:10:22","valueSize":1},{"declaration":1266,"isOffset":false,"isSlot":false,"src":"9251:10:22","valueSize":1}],"id":1275,"nodeType":"InlineAssembly","src":"9152:142:22"}]}}]},"id":1284,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8830:7:22","nodeType":"FunctionDefinition","parameters":{"id":1269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1266,"mutability":"mutable","name":"returndata","nameLocation":"8851:10:22","nodeType":"VariableDeclaration","scope":1284,"src":"8838:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1265,"name":"bytes","nodeType":"ElementaryTypeName","src":"8838:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1268,"mutability":"mutable","name":"errorMessage","nameLocation":"8877:12:22","nodeType":"VariableDeclaration","scope":1284,"src":"8863:26:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1267,"name":"string","nodeType":"ElementaryTypeName","src":"8863:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8837:53:22"},"returnParameters":{"id":1270,"nodeType":"ParameterList","parameters":[],"src":"8904:0:22"},"scope":1285,"src":"8821:540:22","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1286,"src":"194:9169:22","usedErrors":[],"usedEvents":[]}],"src":"101:9263:22"},"id":22},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1307]},"id":1308,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1287,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:23"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1288,"nodeType":"StructuredDocumentation","src":"111:496:23","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1307,"linearizedBaseContracts":[1307],"name":"Context","nameLocation":"626:7:23","nodeType":"ContractDefinition","nodes":[{"body":{"id":1296,"nodeType":"Block","src":"702:34:23","statements":[{"expression":{"expression":{"id":1293,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:23","memberName":"sender","nodeType":"MemberAccess","src":"719:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1292,"id":1295,"nodeType":"Return","src":"712:17:23"}]},"id":1297,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:23","nodeType":"FunctionDefinition","parameters":{"id":1289,"nodeType":"ParameterList","parameters":[],"src":"659:2:23"},"returnParameters":{"id":1292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1291,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1297,"src":"693:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1290,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:23"},"scope":1307,"src":"640:96:23","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1305,"nodeType":"Block","src":"809:32:23","statements":[{"expression":{"expression":{"id":1302,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:23","memberName":"data","nodeType":"MemberAccess","src":"826:8:23","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1301,"id":1304,"nodeType":"Return","src":"819:15:23"}]},"id":1306,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:23","nodeType":"FunctionDefinition","parameters":{"id":1298,"nodeType":"ParameterList","parameters":[],"src":"759:2:23"},"returnParameters":{"id":1301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1300,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1306,"src":"793:14:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1299,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:23"},"scope":1307,"src":"742:99:23","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1308,"src":"608:235:23","usedErrors":[],"usedEvents":[]}],"src":"86:758:23"},"id":23},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[1417]},"id":1418,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1309,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"193:23:24"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":1310,"nodeType":"StructuredDocumentation","src":"218:1201:24","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n _Available since v4.9 for `string`, `bytes`._"},"fullyImplemented":true,"id":1417,"linearizedBaseContracts":[1417],"name":"StorageSlot","nameLocation":"1428:11:24","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":1313,"members":[{"constant":false,"id":1312,"mutability":"mutable","name":"value","nameLocation":"1483:5:24","nodeType":"VariableDeclaration","scope":1313,"src":"1475:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1311,"name":"address","nodeType":"ElementaryTypeName","src":"1475:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1453:11:24","nodeType":"StructDefinition","scope":1417,"src":"1446:49:24","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":1316,"members":[{"constant":false,"id":1315,"mutability":"mutable","name":"value","nameLocation":"1535:5:24","nodeType":"VariableDeclaration","scope":1316,"src":"1530:10:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1314,"name":"bool","nodeType":"ElementaryTypeName","src":"1530:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1508:11:24","nodeType":"StructDefinition","scope":1417,"src":"1501:46:24","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":1319,"members":[{"constant":false,"id":1318,"mutability":"mutable","name":"value","nameLocation":"1590:5:24","nodeType":"VariableDeclaration","scope":1319,"src":"1582:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1317,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1582:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1560:11:24","nodeType":"StructDefinition","scope":1417,"src":"1553:49:24","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":1322,"members":[{"constant":false,"id":1321,"mutability":"mutable","name":"value","nameLocation":"1645:5:24","nodeType":"VariableDeclaration","scope":1322,"src":"1637:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1320,"name":"uint256","nodeType":"ElementaryTypeName","src":"1637:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1615:11:24","nodeType":"StructDefinition","scope":1417,"src":"1608:49:24","visibility":"public"},{"canonicalName":"StorageSlot.StringSlot","id":1325,"members":[{"constant":false,"id":1324,"mutability":"mutable","name":"value","nameLocation":"1698:5:24","nodeType":"VariableDeclaration","scope":1325,"src":"1691:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1323,"name":"string","nodeType":"ElementaryTypeName","src":"1691:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1670:10:24","nodeType":"StructDefinition","scope":1417,"src":"1663:47:24","visibility":"public"},{"canonicalName":"StorageSlot.BytesSlot","id":1328,"members":[{"constant":false,"id":1327,"mutability":"mutable","name":"value","nameLocation":"1749:5:24","nodeType":"VariableDeclaration","scope":1328,"src":"1743:11:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1326,"name":"bytes","nodeType":"ElementaryTypeName","src":"1743:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1723:9:24","nodeType":"StructDefinition","scope":1417,"src":"1716:45:24","visibility":"public"},{"body":{"id":1338,"nodeType":"Block","src":"1943:106:24","statements":[{"AST":{"nativeSrc":"2005:38:24","nodeType":"YulBlock","src":"2005:38:24","statements":[{"nativeSrc":"2019:14:24","nodeType":"YulAssignment","src":"2019:14:24","value":{"name":"slot","nativeSrc":"2029:4:24","nodeType":"YulIdentifier","src":"2029:4:24"},"variableNames":[{"name":"r.slot","nativeSrc":"2019:6:24","nodeType":"YulIdentifier","src":"2019:6:24"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1335,"isOffset":false,"isSlot":true,"src":"2019:6:24","suffix":"slot","valueSize":1},{"declaration":1331,"isOffset":false,"isSlot":false,"src":"2029:4:24","valueSize":1}],"id":1337,"nodeType":"InlineAssembly","src":"1996:47:24"}]},"documentation":{"id":1329,"nodeType":"StructuredDocumentation","src":"1767:87:24","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":1339,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1868:14:24","nodeType":"FunctionDefinition","parameters":{"id":1332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1331,"mutability":"mutable","name":"slot","nameLocation":"1891:4:24","nodeType":"VariableDeclaration","scope":1339,"src":"1883:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1330,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1883:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1882:14:24"},"returnParameters":{"id":1336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1335,"mutability":"mutable","name":"r","nameLocation":"1940:1:24","nodeType":"VariableDeclaration","scope":1339,"src":"1920:21:24","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1313_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":1334,"nodeType":"UserDefinedTypeName","pathNode":{"id":1333,"name":"AddressSlot","nameLocations":["1920:11:24"],"nodeType":"IdentifierPath","referencedDeclaration":1313,"src":"1920:11:24"},"referencedDeclaration":1313,"src":"1920:11:24","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1313_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1919:23:24"},"scope":1417,"src":"1859:190:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1349,"nodeType":"Block","src":"2231:106:24","statements":[{"AST":{"nativeSrc":"2293:38:24","nodeType":"YulBlock","src":"2293:38:24","statements":[{"nativeSrc":"2307:14:24","nodeType":"YulAssignment","src":"2307:14:24","value":{"name":"slot","nativeSrc":"2317:4:24","nodeType":"YulIdentifier","src":"2317:4:24"},"variableNames":[{"name":"r.slot","nativeSrc":"2307:6:24","nodeType":"YulIdentifier","src":"2307:6:24"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1346,"isOffset":false,"isSlot":true,"src":"2307:6:24","suffix":"slot","valueSize":1},{"declaration":1342,"isOffset":false,"isSlot":false,"src":"2317:4:24","valueSize":1}],"id":1348,"nodeType":"InlineAssembly","src":"2284:47:24"}]},"documentation":{"id":1340,"nodeType":"StructuredDocumentation","src":"2055:87:24","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":1350,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"2156:14:24","nodeType":"FunctionDefinition","parameters":{"id":1343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1342,"mutability":"mutable","name":"slot","nameLocation":"2179:4:24","nodeType":"VariableDeclaration","scope":1350,"src":"2171:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1341,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2171:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2170:14:24"},"returnParameters":{"id":1347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1346,"mutability":"mutable","name":"r","nameLocation":"2228:1:24","nodeType":"VariableDeclaration","scope":1350,"src":"2208:21:24","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1316_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":1345,"nodeType":"UserDefinedTypeName","pathNode":{"id":1344,"name":"BooleanSlot","nameLocations":["2208:11:24"],"nodeType":"IdentifierPath","referencedDeclaration":1316,"src":"2208:11:24"},"referencedDeclaration":1316,"src":"2208:11:24","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1316_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"2207:23:24"},"scope":1417,"src":"2147:190:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1360,"nodeType":"Block","src":"2519:106:24","statements":[{"AST":{"nativeSrc":"2581:38:24","nodeType":"YulBlock","src":"2581:38:24","statements":[{"nativeSrc":"2595:14:24","nodeType":"YulAssignment","src":"2595:14:24","value":{"name":"slot","nativeSrc":"2605:4:24","nodeType":"YulIdentifier","src":"2605:4:24"},"variableNames":[{"name":"r.slot","nativeSrc":"2595:6:24","nodeType":"YulIdentifier","src":"2595:6:24"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1357,"isOffset":false,"isSlot":true,"src":"2595:6:24","suffix":"slot","valueSize":1},{"declaration":1353,"isOffset":false,"isSlot":false,"src":"2605:4:24","valueSize":1}],"id":1359,"nodeType":"InlineAssembly","src":"2572:47:24"}]},"documentation":{"id":1351,"nodeType":"StructuredDocumentation","src":"2343:87:24","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":1361,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2444:14:24","nodeType":"FunctionDefinition","parameters":{"id":1354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1353,"mutability":"mutable","name":"slot","nameLocation":"2467:4:24","nodeType":"VariableDeclaration","scope":1361,"src":"2459:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1352,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2459:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2458:14:24"},"returnParameters":{"id":1358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1357,"mutability":"mutable","name":"r","nameLocation":"2516:1:24","nodeType":"VariableDeclaration","scope":1361,"src":"2496:21:24","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$1319_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":1356,"nodeType":"UserDefinedTypeName","pathNode":{"id":1355,"name":"Bytes32Slot","nameLocations":["2496:11:24"],"nodeType":"IdentifierPath","referencedDeclaration":1319,"src":"2496:11:24"},"referencedDeclaration":1319,"src":"2496:11:24","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$1319_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2495:23:24"},"scope":1417,"src":"2435:190:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1371,"nodeType":"Block","src":"2807:106:24","statements":[{"AST":{"nativeSrc":"2869:38:24","nodeType":"YulBlock","src":"2869:38:24","statements":[{"nativeSrc":"2883:14:24","nodeType":"YulAssignment","src":"2883:14:24","value":{"name":"slot","nativeSrc":"2893:4:24","nodeType":"YulIdentifier","src":"2893:4:24"},"variableNames":[{"name":"r.slot","nativeSrc":"2883:6:24","nodeType":"YulIdentifier","src":"2883:6:24"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1368,"isOffset":false,"isSlot":true,"src":"2883:6:24","suffix":"slot","valueSize":1},{"declaration":1364,"isOffset":false,"isSlot":false,"src":"2893:4:24","valueSize":1}],"id":1370,"nodeType":"InlineAssembly","src":"2860:47:24"}]},"documentation":{"id":1362,"nodeType":"StructuredDocumentation","src":"2631:87:24","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":1372,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2732:14:24","nodeType":"FunctionDefinition","parameters":{"id":1365,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1364,"mutability":"mutable","name":"slot","nameLocation":"2755:4:24","nodeType":"VariableDeclaration","scope":1372,"src":"2747:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1363,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2747:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2746:14:24"},"returnParameters":{"id":1369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1368,"mutability":"mutable","name":"r","nameLocation":"2804:1:24","nodeType":"VariableDeclaration","scope":1372,"src":"2784:21:24","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1322_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":1367,"nodeType":"UserDefinedTypeName","pathNode":{"id":1366,"name":"Uint256Slot","nameLocations":["2784:11:24"],"nodeType":"IdentifierPath","referencedDeclaration":1322,"src":"2784:11:24"},"referencedDeclaration":1322,"src":"2784:11:24","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1322_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2783:23:24"},"scope":1417,"src":"2723:190:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1382,"nodeType":"Block","src":"3092:106:24","statements":[{"AST":{"nativeSrc":"3154:38:24","nodeType":"YulBlock","src":"3154:38:24","statements":[{"nativeSrc":"3168:14:24","nodeType":"YulAssignment","src":"3168:14:24","value":{"name":"slot","nativeSrc":"3178:4:24","nodeType":"YulIdentifier","src":"3178:4:24"},"variableNames":[{"name":"r.slot","nativeSrc":"3168:6:24","nodeType":"YulIdentifier","src":"3168:6:24"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1379,"isOffset":false,"isSlot":true,"src":"3168:6:24","suffix":"slot","valueSize":1},{"declaration":1375,"isOffset":false,"isSlot":false,"src":"3178:4:24","valueSize":1}],"id":1381,"nodeType":"InlineAssembly","src":"3145:47:24"}]},"documentation":{"id":1373,"nodeType":"StructuredDocumentation","src":"2919:86:24","text":" @dev Returns an `StringSlot` with member `value` located at `slot`."},"id":1383,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3019:13:24","nodeType":"FunctionDefinition","parameters":{"id":1376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1375,"mutability":"mutable","name":"slot","nameLocation":"3041:4:24","nodeType":"VariableDeclaration","scope":1383,"src":"3033:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1374,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3033:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3032:14:24"},"returnParameters":{"id":1380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1379,"mutability":"mutable","name":"r","nameLocation":"3089:1:24","nodeType":"VariableDeclaration","scope":1383,"src":"3070:20:24","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1325_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":1378,"nodeType":"UserDefinedTypeName","pathNode":{"id":1377,"name":"StringSlot","nameLocations":["3070:10:24"],"nodeType":"IdentifierPath","referencedDeclaration":1325,"src":"3070:10:24"},"referencedDeclaration":1325,"src":"3070:10:24","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1325_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3069:22:24"},"scope":1417,"src":"3010:188:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1393,"nodeType":"Block","src":"3400:112:24","statements":[{"AST":{"nativeSrc":"3462:44:24","nodeType":"YulBlock","src":"3462:44:24","statements":[{"nativeSrc":"3476:20:24","nodeType":"YulAssignment","src":"3476:20:24","value":{"name":"store.slot","nativeSrc":"3486:10:24","nodeType":"YulIdentifier","src":"3486:10:24"},"variableNames":[{"name":"r.slot","nativeSrc":"3476:6:24","nodeType":"YulIdentifier","src":"3476:6:24"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1390,"isOffset":false,"isSlot":true,"src":"3476:6:24","suffix":"slot","valueSize":1},{"declaration":1386,"isOffset":false,"isSlot":true,"src":"3486:10:24","suffix":"slot","valueSize":1}],"id":1392,"nodeType":"InlineAssembly","src":"3453:53:24"}]},"documentation":{"id":1384,"nodeType":"StructuredDocumentation","src":"3204:101:24","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":1394,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3319:13:24","nodeType":"FunctionDefinition","parameters":{"id":1387,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1386,"mutability":"mutable","name":"store","nameLocation":"3348:5:24","nodeType":"VariableDeclaration","scope":1394,"src":"3333:20:24","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1385,"name":"string","nodeType":"ElementaryTypeName","src":"3333:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3332:22:24"},"returnParameters":{"id":1391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1390,"mutability":"mutable","name":"r","nameLocation":"3397:1:24","nodeType":"VariableDeclaration","scope":1394,"src":"3378:20:24","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1325_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":1389,"nodeType":"UserDefinedTypeName","pathNode":{"id":1388,"name":"StringSlot","nameLocations":["3378:10:24"],"nodeType":"IdentifierPath","referencedDeclaration":1325,"src":"3378:10:24"},"referencedDeclaration":1325,"src":"3378:10:24","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$1325_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3377:22:24"},"scope":1417,"src":"3310:202:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1404,"nodeType":"Block","src":"3688:106:24","statements":[{"AST":{"nativeSrc":"3750:38:24","nodeType":"YulBlock","src":"3750:38:24","statements":[{"nativeSrc":"3764:14:24","nodeType":"YulAssignment","src":"3764:14:24","value":{"name":"slot","nativeSrc":"3774:4:24","nodeType":"YulIdentifier","src":"3774:4:24"},"variableNames":[{"name":"r.slot","nativeSrc":"3764:6:24","nodeType":"YulIdentifier","src":"3764:6:24"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1401,"isOffset":false,"isSlot":true,"src":"3764:6:24","suffix":"slot","valueSize":1},{"declaration":1397,"isOffset":false,"isSlot":false,"src":"3774:4:24","valueSize":1}],"id":1403,"nodeType":"InlineAssembly","src":"3741:47:24"}]},"documentation":{"id":1395,"nodeType":"StructuredDocumentation","src":"3518:85:24","text":" @dev Returns an `BytesSlot` with member `value` located at `slot`."},"id":1405,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3617:12:24","nodeType":"FunctionDefinition","parameters":{"id":1398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1397,"mutability":"mutable","name":"slot","nameLocation":"3638:4:24","nodeType":"VariableDeclaration","scope":1405,"src":"3630:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1396,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3630:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3629:14:24"},"returnParameters":{"id":1402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1401,"mutability":"mutable","name":"r","nameLocation":"3685:1:24","nodeType":"VariableDeclaration","scope":1405,"src":"3667:19:24","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1328_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":1400,"nodeType":"UserDefinedTypeName","pathNode":{"id":1399,"name":"BytesSlot","nameLocations":["3667:9:24"],"nodeType":"IdentifierPath","referencedDeclaration":1328,"src":"3667:9:24"},"referencedDeclaration":1328,"src":"3667:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1328_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3666:21:24"},"scope":1417,"src":"3608:186:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1415,"nodeType":"Block","src":"3991:112:24","statements":[{"AST":{"nativeSrc":"4053:44:24","nodeType":"YulBlock","src":"4053:44:24","statements":[{"nativeSrc":"4067:20:24","nodeType":"YulAssignment","src":"4067:20:24","value":{"name":"store.slot","nativeSrc":"4077:10:24","nodeType":"YulIdentifier","src":"4077:10:24"},"variableNames":[{"name":"r.slot","nativeSrc":"4067:6:24","nodeType":"YulIdentifier","src":"4067:6:24"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1412,"isOffset":false,"isSlot":true,"src":"4067:6:24","suffix":"slot","valueSize":1},{"declaration":1408,"isOffset":false,"isSlot":true,"src":"4077:10:24","suffix":"slot","valueSize":1}],"id":1414,"nodeType":"InlineAssembly","src":"4044:53:24"}]},"documentation":{"id":1406,"nodeType":"StructuredDocumentation","src":"3800:99:24","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":1416,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3913:12:24","nodeType":"FunctionDefinition","parameters":{"id":1409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1408,"mutability":"mutable","name":"store","nameLocation":"3940:5:24","nodeType":"VariableDeclaration","scope":1416,"src":"3926:19:24","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1407,"name":"bytes","nodeType":"ElementaryTypeName","src":"3926:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3925:21:24"},"returnParameters":{"id":1413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1412,"mutability":"mutable","name":"r","nameLocation":"3988:1:24","nodeType":"VariableDeclaration","scope":1416,"src":"3970:19:24","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1328_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":1411,"nodeType":"UserDefinedTypeName","pathNode":{"id":1410,"name":"BytesSlot","nameLocations":["3970:9:24"],"nodeType":"IdentifierPath","referencedDeclaration":1328,"src":"3970:9:24"},"referencedDeclaration":1328,"src":"3970:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$1328_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3969:21:24"},"scope":1417,"src":"3904:199:24","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1418,"src":"1420:2685:24","usedErrors":[],"usedEvents":[]}],"src":"193:3913:24"},"id":24},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","exportedSymbols":{"MerkleProof":[1945]},"id":1946,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1419,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"118:23:25"},{"abstract":false,"baseContracts":[],"canonicalName":"MerkleProof","contractDependencies":[],"contractKind":"library","documentation":{"id":1420,"nodeType":"StructuredDocumentation","src":"143:658:25","text":" @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates merkle trees that are safe\n against this attack out of the box."},"fullyImplemented":true,"id":1945,"linearizedBaseContracts":[1945],"name":"MerkleProof","nameLocation":"810:11:25","nodeType":"ContractDefinition","nodes":[{"body":{"id":1440,"nodeType":"Block","src":"1253:57:25","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1434,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1424,"src":"1283:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":1435,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1428,"src":"1290:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1433,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1502,"src":"1270:12:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32) pure returns (bytes32)"}},"id":1436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1270:25:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1437,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1426,"src":"1299:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1270:33:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1432,"id":1439,"nodeType":"Return","src":"1263:40:25"}]},"documentation":{"id":1421,"nodeType":"StructuredDocumentation","src":"828:323:25","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted."},"id":1441,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"1165:6:25","nodeType":"FunctionDefinition","parameters":{"id":1429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1424,"mutability":"mutable","name":"proof","nameLocation":"1189:5:25","nodeType":"VariableDeclaration","scope":1441,"src":"1172:22:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1422,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1172:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1423,"nodeType":"ArrayTypeName","src":"1172:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1426,"mutability":"mutable","name":"root","nameLocation":"1204:4:25","nodeType":"VariableDeclaration","scope":1441,"src":"1196:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1425,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1196:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1428,"mutability":"mutable","name":"leaf","nameLocation":"1218:4:25","nodeType":"VariableDeclaration","scope":1441,"src":"1210:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1427,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1210:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1171:52:25"},"returnParameters":{"id":1432,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1431,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1441,"src":"1247:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1430,"name":"bool","nodeType":"ElementaryTypeName","src":"1247:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1246:6:25"},"scope":1945,"src":"1156:154:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1461,"nodeType":"Block","src":"1518:65:25","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1455,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"1556:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":1456,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1449,"src":"1563:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1454,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1542,"src":"1535:20:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32) pure returns (bytes32)"}},"id":1457,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1535:33:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1458,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1447,"src":"1572:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1535:41:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1453,"id":1460,"nodeType":"Return","src":"1528:48:25"}]},"documentation":{"id":1442,"nodeType":"StructuredDocumentation","src":"1316:90:25","text":" @dev Calldata version of {verify}\n _Available since v4.7._"},"id":1462,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"1420:14:25","nodeType":"FunctionDefinition","parameters":{"id":1450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1445,"mutability":"mutable","name":"proof","nameLocation":"1454:5:25","nodeType":"VariableDeclaration","scope":1462,"src":"1435:24:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1443,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1435:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1444,"nodeType":"ArrayTypeName","src":"1435:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1447,"mutability":"mutable","name":"root","nameLocation":"1469:4:25","nodeType":"VariableDeclaration","scope":1462,"src":"1461:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1446,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1461:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1449,"mutability":"mutable","name":"leaf","nameLocation":"1483:4:25","nodeType":"VariableDeclaration","scope":1462,"src":"1475:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1448,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1475:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1434:54:25"},"returnParameters":{"id":1453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1452,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1462,"src":"1512:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1451,"name":"bool","nodeType":"ElementaryTypeName","src":"1512:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1511:6:25"},"scope":1945,"src":"1411:172:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1501,"nodeType":"Block","src":"2026:198:25","statements":[{"assignments":[1474],"declarations":[{"constant":false,"id":1474,"mutability":"mutable","name":"computedHash","nameLocation":"2044:12:25","nodeType":"VariableDeclaration","scope":1501,"src":"2036:20:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1473,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2036:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1476,"initialValue":{"id":1475,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"2059:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2036:27:25"},{"body":{"id":1497,"nodeType":"Block","src":"2116:73:25","statements":[{"expression":{"id":1495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1488,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"2130:12:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1490,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"2155:12:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":1491,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"2169:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1493,"indexExpression":{"id":1492,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"2175:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2169:8:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1489,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"2145:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2145:33:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2130:48:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1496,"nodeType":"ExpressionStatement","src":"2130:48:25"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1481,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"2093:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1482,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"2097:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2103:6:25","memberName":"length","nodeType":"MemberAccess","src":"2097:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2093:16:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1498,"initializationExpression":{"assignments":[1478],"declarations":[{"constant":false,"id":1478,"mutability":"mutable","name":"i","nameLocation":"2086:1:25","nodeType":"VariableDeclaration","scope":1498,"src":"2078:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1477,"name":"uint256","nodeType":"ElementaryTypeName","src":"2078:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1480,"initialValue":{"hexValue":"30","id":1479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2090:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2078:13:25"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2111:3:25","subExpression":{"id":1485,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"2111:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1487,"nodeType":"ExpressionStatement","src":"2111:3:25"},"nodeType":"ForStatement","src":"2073:116:25"},{"expression":{"id":1499,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"2205:12:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1472,"id":1500,"nodeType":"Return","src":"2198:19:25"}]},"documentation":{"id":1463,"nodeType":"StructuredDocumentation","src":"1589:340:25","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leafs & pre-images are assumed to be sorted.\n _Available since v4.4._"},"id":1502,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"1943:12:25","nodeType":"FunctionDefinition","parameters":{"id":1469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1466,"mutability":"mutable","name":"proof","nameLocation":"1973:5:25","nodeType":"VariableDeclaration","scope":1502,"src":"1956:22:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1464,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1956:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1465,"nodeType":"ArrayTypeName","src":"1956:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1468,"mutability":"mutable","name":"leaf","nameLocation":"1988:4:25","nodeType":"VariableDeclaration","scope":1502,"src":"1980:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1467,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1980:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1955:38:25"},"returnParameters":{"id":1472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1471,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1502,"src":"2017:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1470,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2017:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2016:9:25"},"scope":1945,"src":"1934:290:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1541,"nodeType":"Block","src":"2433:198:25","statements":[{"assignments":[1514],"declarations":[{"constant":false,"id":1514,"mutability":"mutable","name":"computedHash","nameLocation":"2451:12:25","nodeType":"VariableDeclaration","scope":1541,"src":"2443:20:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1513,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2443:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1516,"initialValue":{"id":1515,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"2466:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2443:27:25"},{"body":{"id":1537,"nodeType":"Block","src":"2523:73:25","statements":[{"expression":{"id":1535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1528,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1514,"src":"2537:12:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1530,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1514,"src":"2562:12:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":1531,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"2576:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1533,"indexExpression":{"id":1532,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"2582:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2576:8:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1529,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"2552:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2552:33:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2537:48:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1536,"nodeType":"ExpressionStatement","src":"2537:48:25"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1521,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"2500:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1522,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"2504:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2510:6:25","memberName":"length","nodeType":"MemberAccess","src":"2504:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2500:16:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1538,"initializationExpression":{"assignments":[1518],"declarations":[{"constant":false,"id":1518,"mutability":"mutable","name":"i","nameLocation":"2493:1:25","nodeType":"VariableDeclaration","scope":1538,"src":"2485:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1517,"name":"uint256","nodeType":"ElementaryTypeName","src":"2485:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1520,"initialValue":{"hexValue":"30","id":1519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2497:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2485:13:25"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2518:3:25","subExpression":{"id":1525,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"2518:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1527,"nodeType":"ExpressionStatement","src":"2518:3:25"},"nodeType":"ForStatement","src":"2480:116:25"},{"expression":{"id":1539,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1514,"src":"2612:12:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1512,"id":1540,"nodeType":"Return","src":"2605:19:25"}]},"documentation":{"id":1503,"nodeType":"StructuredDocumentation","src":"2230:96:25","text":" @dev Calldata version of {processProof}\n _Available since v4.7._"},"id":1542,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"2340:20:25","nodeType":"FunctionDefinition","parameters":{"id":1509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1506,"mutability":"mutable","name":"proof","nameLocation":"2380:5:25","nodeType":"VariableDeclaration","scope":1542,"src":"2361:24:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1504,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2361:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1505,"nodeType":"ArrayTypeName","src":"2361:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1508,"mutability":"mutable","name":"leaf","nameLocation":"2395:4:25","nodeType":"VariableDeclaration","scope":1542,"src":"2387:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1507,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2387:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2360:40:25"},"returnParameters":{"id":1512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1511,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1542,"src":"2424:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1510,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2424:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2423:9:25"},"scope":1945,"src":"2331:300:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1567,"nodeType":"Block","src":"3174:76:25","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1560,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"3209:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":1561,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1549,"src":"3216:10:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":1562,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1554,"src":"3228:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":1559,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1752,"src":"3191:17:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"}},"id":1563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3191:44:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1564,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1551,"src":"3239:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3191:52:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1558,"id":1566,"nodeType":"Return","src":"3184:59:25"}]},"documentation":{"id":1543,"nodeType":"StructuredDocumentation","src":"2637:350:25","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":1568,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"3001:16:25","nodeType":"FunctionDefinition","parameters":{"id":1555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1546,"mutability":"mutable","name":"proof","nameLocation":"3044:5:25","nodeType":"VariableDeclaration","scope":1568,"src":"3027:22:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1544,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3027:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1545,"nodeType":"ArrayTypeName","src":"3027:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1549,"mutability":"mutable","name":"proofFlags","nameLocation":"3073:10:25","nodeType":"VariableDeclaration","scope":1568,"src":"3059:24:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1547,"name":"bool","nodeType":"ElementaryTypeName","src":"3059:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1548,"nodeType":"ArrayTypeName","src":"3059:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1551,"mutability":"mutable","name":"root","nameLocation":"3101:4:25","nodeType":"VariableDeclaration","scope":1568,"src":"3093:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1550,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3093:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1554,"mutability":"mutable","name":"leaves","nameLocation":"3132:6:25","nodeType":"VariableDeclaration","scope":1568,"src":"3115:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1552,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3115:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1553,"nodeType":"ArrayTypeName","src":"3115:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3017:127:25"},"returnParameters":{"id":1558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1557,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1568,"src":"3168:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1556,"name":"bool","nodeType":"ElementaryTypeName","src":"3168:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3167:6:25"},"scope":1945,"src":"2992:258:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1593,"nodeType":"Block","src":"3655:84:25","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1586,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1572,"src":"3698:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":1587,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1575,"src":"3705:10:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":1588,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1580,"src":"3717:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":1585,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"3672:25:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"}},"id":1589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3672:52:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1590,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1577,"src":"3728:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3672:60:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1584,"id":1592,"nodeType":"Return","src":"3665:67:25"}]},"documentation":{"id":1569,"nodeType":"StructuredDocumentation","src":"3256:200:25","text":" @dev Calldata version of {multiProofVerify}\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":1594,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"3470:24:25","nodeType":"FunctionDefinition","parameters":{"id":1581,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1572,"mutability":"mutable","name":"proof","nameLocation":"3523:5:25","nodeType":"VariableDeclaration","scope":1594,"src":"3504:24:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1570,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3504:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1571,"nodeType":"ArrayTypeName","src":"3504:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1575,"mutability":"mutable","name":"proofFlags","nameLocation":"3554:10:25","nodeType":"VariableDeclaration","scope":1594,"src":"3538:26:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1573,"name":"bool","nodeType":"ElementaryTypeName","src":"3538:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1574,"nodeType":"ArrayTypeName","src":"3538:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1577,"mutability":"mutable","name":"root","nameLocation":"3582:4:25","nodeType":"VariableDeclaration","scope":1594,"src":"3574:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1576,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3574:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1580,"mutability":"mutable","name":"leaves","nameLocation":"3613:6:25","nodeType":"VariableDeclaration","scope":1594,"src":"3596:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1578,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3596:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1579,"nodeType":"ArrayTypeName","src":"3596:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3494:131:25"},"returnParameters":{"id":1584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1583,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1594,"src":"3649:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1582,"name":"bool","nodeType":"ElementaryTypeName","src":"3649:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3648:6:25"},"scope":1945,"src":"3461:278:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1751,"nodeType":"Block","src":"4693:2053:25","statements":[{"assignments":[1610],"declarations":[{"constant":false,"id":1610,"mutability":"mutable","name":"leavesLen","nameLocation":"5085:9:25","nodeType":"VariableDeclaration","scope":1751,"src":"5077:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1609,"name":"uint256","nodeType":"ElementaryTypeName","src":"5077:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1613,"initialValue":{"expression":{"id":1611,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1604,"src":"5097:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5104:6:25","memberName":"length","nodeType":"MemberAccess","src":"5097:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5077:33:25"},{"assignments":[1615],"declarations":[{"constant":false,"id":1615,"mutability":"mutable","name":"proofLen","nameLocation":"5128:8:25","nodeType":"VariableDeclaration","scope":1751,"src":"5120:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1614,"name":"uint256","nodeType":"ElementaryTypeName","src":"5120:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1618,"initialValue":{"expression":{"id":1616,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"5139:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5145:6:25","memberName":"length","nodeType":"MemberAccess","src":"5139:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5120:31:25"},{"assignments":[1620],"declarations":[{"constant":false,"id":1620,"mutability":"mutable","name":"totalHashes","nameLocation":"5169:11:25","nodeType":"VariableDeclaration","scope":1751,"src":"5161:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1619,"name":"uint256","nodeType":"ElementaryTypeName","src":"5161:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1623,"initialValue":{"expression":{"id":1621,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1601,"src":"5183:10:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":1622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5194:6:25","memberName":"length","nodeType":"MemberAccess","src":"5183:17:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5161:39:25"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1625,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1610,"src":"5252:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1626,"name":"proofLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1615,"src":"5264:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5252:20:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5275:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5252:24:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1630,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1620,"src":"5280:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5252:39:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":1632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5293:33:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":1624,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5244:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5244:83:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1634,"nodeType":"ExpressionStatement","src":"5244:83:25"},{"assignments":[1639],"declarations":[{"constant":false,"id":1639,"mutability":"mutable","name":"hashes","nameLocation":"5589:6:25","nodeType":"VariableDeclaration","scope":1751,"src":"5572:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1637,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5572:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1638,"nodeType":"ArrayTypeName","src":"5572:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1645,"initialValue":{"arguments":[{"id":1643,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1620,"src":"5612:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1642,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5598:13:25","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1640,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5602:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1641,"nodeType":"ArrayTypeName","src":"5602:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1644,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5598:26:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5572:52:25"},{"assignments":[1647],"declarations":[{"constant":false,"id":1647,"mutability":"mutable","name":"leafPos","nameLocation":"5642:7:25","nodeType":"VariableDeclaration","scope":1751,"src":"5634:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1646,"name":"uint256","nodeType":"ElementaryTypeName","src":"5634:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1649,"initialValue":{"hexValue":"30","id":1648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5652:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5634:19:25"},{"assignments":[1651],"declarations":[{"constant":false,"id":1651,"mutability":"mutable","name":"hashPos","nameLocation":"5671:7:25","nodeType":"VariableDeclaration","scope":1751,"src":"5663:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1650,"name":"uint256","nodeType":"ElementaryTypeName","src":"5663:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1653,"initialValue":{"hexValue":"30","id":1652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5681:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5663:19:25"},{"assignments":[1655],"declarations":[{"constant":false,"id":1655,"mutability":"mutable","name":"proofPos","nameLocation":"5700:8:25","nodeType":"VariableDeclaration","scope":1751,"src":"5692:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1654,"name":"uint256","nodeType":"ElementaryTypeName","src":"5692:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1657,"initialValue":{"hexValue":"30","id":1656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5711:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5692:20:25"},{"body":{"id":1716,"nodeType":"Block","src":"6130:292:25","statements":[{"assignments":[1669],"declarations":[{"constant":false,"id":1669,"mutability":"mutable","name":"a","nameLocation":"6152:1:25","nodeType":"VariableDeclaration","scope":1716,"src":"6144:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1668,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6144:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1682,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1670,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1647,"src":"6156:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1671,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1610,"src":"6166:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6156:19:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1677,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1639,"src":"6198:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1680,"indexExpression":{"id":1679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6205:9:25","subExpression":{"id":1678,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1651,"src":"6205:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6198:17:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6156:59:25","trueExpression":{"baseExpression":{"id":1673,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1604,"src":"6178:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1676,"indexExpression":{"id":1675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6185:9:25","subExpression":{"id":1674,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1647,"src":"6185:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6178:17:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6144:71:25"},{"assignments":[1684],"declarations":[{"constant":false,"id":1684,"mutability":"mutable","name":"b","nameLocation":"6237:1:25","nodeType":"VariableDeclaration","scope":1716,"src":"6229:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1683,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6229:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1706,"initialValue":{"condition":{"baseExpression":{"id":1685,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1601,"src":"6241:10:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":1687,"indexExpression":{"id":1686,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"6252:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6241:13:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1701,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"6353:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1704,"indexExpression":{"id":1703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6359:10:25","subExpression":{"id":1702,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1655,"src":"6359:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6353:17:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6241:129:25","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1688,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1647,"src":"6274:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1689,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1610,"src":"6284:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6274:19:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1695,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1639,"src":"6316:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1698,"indexExpression":{"id":1697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6323:9:25","subExpression":{"id":1696,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1651,"src":"6323:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6316:17:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6274:59:25","trueExpression":{"baseExpression":{"id":1691,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1604,"src":"6296:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1694,"indexExpression":{"id":1693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6303:9:25","subExpression":{"id":1692,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1647,"src":"6303:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6296:17:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1700,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6273:61:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6229:141:25"},{"expression":{"id":1714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1707,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1639,"src":"6384:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1709,"indexExpression":{"id":1708,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"6391:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6384:9:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1711,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1669,"src":"6406:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1712,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1684,"src":"6409:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1710,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"6396:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6396:15:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6384:27:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1715,"nodeType":"ExpressionStatement","src":"6384:27:25"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1662,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"6108:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1663,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1620,"src":"6112:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6108:15:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1717,"initializationExpression":{"assignments":[1659],"declarations":[{"constant":false,"id":1659,"mutability":"mutable","name":"i","nameLocation":"6101:1:25","nodeType":"VariableDeclaration","scope":1717,"src":"6093:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1658,"name":"uint256","nodeType":"ElementaryTypeName","src":"6093:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1661,"initialValue":{"hexValue":"30","id":1660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6105:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6093:13:25"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6125:3:25","subExpression":{"id":1665,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"6125:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1667,"nodeType":"ExpressionStatement","src":"6125:3:25"},"nodeType":"ForStatement","src":"6088:334:25"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1718,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1620,"src":"6436:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6450:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6436:15:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1736,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1610,"src":"6638:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6650:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6638:13:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1748,"nodeType":"Block","src":"6700:40:25","statements":[{"expression":{"baseExpression":{"id":1744,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"6721:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1746,"indexExpression":{"hexValue":"30","id":1745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6727:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6721:8:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1608,"id":1747,"nodeType":"Return","src":"6714:15:25"}]},"id":1749,"nodeType":"IfStatement","src":"6634:106:25","trueBody":{"id":1743,"nodeType":"Block","src":"6653:41:25","statements":[{"expression":{"baseExpression":{"id":1739,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1604,"src":"6674:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1741,"indexExpression":{"hexValue":"30","id":1740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6681:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6674:9:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1608,"id":1742,"nodeType":"Return","src":"6667:16:25"}]}},"id":1750,"nodeType":"IfStatement","src":"6432:308:25","trueBody":{"id":1735,"nodeType":"Block","src":"6453:175:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1722,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1655,"src":"6475:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1723,"name":"proofLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1615,"src":"6487:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6475:20:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":1725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6497:33:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":1721,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6467:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6467:64:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1727,"nodeType":"ExpressionStatement","src":"6467:64:25"},{"id":1734,"nodeType":"UncheckedBlock","src":"6545:73:25","statements":[{"expression":{"baseExpression":{"id":1728,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1639,"src":"6580:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1732,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1729,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1620,"src":"6587:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6601:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6587:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6580:23:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1608,"id":1733,"nodeType":"Return","src":"6573:30:25"}]}]}}]},"documentation":{"id":1595,"nodeType":"StructuredDocumentation","src":"3745:768:25","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n _Available since v4.7._"},"id":1752,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"4527:17:25","nodeType":"FunctionDefinition","parameters":{"id":1605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1598,"mutability":"mutable","name":"proof","nameLocation":"4571:5:25","nodeType":"VariableDeclaration","scope":1752,"src":"4554:22:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1596,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4554:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1597,"nodeType":"ArrayTypeName","src":"4554:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1601,"mutability":"mutable","name":"proofFlags","nameLocation":"4600:10:25","nodeType":"VariableDeclaration","scope":1752,"src":"4586:24:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1599,"name":"bool","nodeType":"ElementaryTypeName","src":"4586:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1600,"nodeType":"ArrayTypeName","src":"4586:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1604,"mutability":"mutable","name":"leaves","nameLocation":"4637:6:25","nodeType":"VariableDeclaration","scope":1752,"src":"4620:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1602,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4620:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1603,"nodeType":"ArrayTypeName","src":"4620:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"4544:105:25"},"returnParameters":{"id":1608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1607,"mutability":"mutable","name":"merkleRoot","nameLocation":"4681:10:25","nodeType":"VariableDeclaration","scope":1752,"src":"4673:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1606,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4673:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4672:20:25"},"scope":1945,"src":"4518:2228:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1909,"nodeType":"Block","src":"7146:2053:25","statements":[{"assignments":[1768],"declarations":[{"constant":false,"id":1768,"mutability":"mutable","name":"leavesLen","nameLocation":"7538:9:25","nodeType":"VariableDeclaration","scope":1909,"src":"7530:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1767,"name":"uint256","nodeType":"ElementaryTypeName","src":"7530:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1771,"initialValue":{"expression":{"id":1769,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1762,"src":"7550:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7557:6:25","memberName":"length","nodeType":"MemberAccess","src":"7550:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7530:33:25"},{"assignments":[1773],"declarations":[{"constant":false,"id":1773,"mutability":"mutable","name":"proofLen","nameLocation":"7581:8:25","nodeType":"VariableDeclaration","scope":1909,"src":"7573:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1772,"name":"uint256","nodeType":"ElementaryTypeName","src":"7573:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1776,"initialValue":{"expression":{"id":1774,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"7592:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7598:6:25","memberName":"length","nodeType":"MemberAccess","src":"7592:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7573:31:25"},{"assignments":[1778],"declarations":[{"constant":false,"id":1778,"mutability":"mutable","name":"totalHashes","nameLocation":"7622:11:25","nodeType":"VariableDeclaration","scope":1909,"src":"7614:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1777,"name":"uint256","nodeType":"ElementaryTypeName","src":"7614:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1781,"initialValue":{"expression":{"id":1779,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1759,"src":"7636:10:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7647:6:25","memberName":"length","nodeType":"MemberAccess","src":"7636:17:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7614:39:25"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1783,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1768,"src":"7705:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1784,"name":"proofLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1773,"src":"7717:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7705:20:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1786,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7728:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7705:24:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1788,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1778,"src":"7733:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7705:39:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":1790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7746:33:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":1782,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7697:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7697:83:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1792,"nodeType":"ExpressionStatement","src":"7697:83:25"},{"assignments":[1797],"declarations":[{"constant":false,"id":1797,"mutability":"mutable","name":"hashes","nameLocation":"8042:6:25","nodeType":"VariableDeclaration","scope":1909,"src":"8025:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1795,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8025:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1796,"nodeType":"ArrayTypeName","src":"8025:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1803,"initialValue":{"arguments":[{"id":1801,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1778,"src":"8065:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1800,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"8051:13:25","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1798,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8055:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1799,"nodeType":"ArrayTypeName","src":"8055:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8051:26:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"8025:52:25"},{"assignments":[1805],"declarations":[{"constant":false,"id":1805,"mutability":"mutable","name":"leafPos","nameLocation":"8095:7:25","nodeType":"VariableDeclaration","scope":1909,"src":"8087:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1804,"name":"uint256","nodeType":"ElementaryTypeName","src":"8087:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1807,"initialValue":{"hexValue":"30","id":1806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8105:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8087:19:25"},{"assignments":[1809],"declarations":[{"constant":false,"id":1809,"mutability":"mutable","name":"hashPos","nameLocation":"8124:7:25","nodeType":"VariableDeclaration","scope":1909,"src":"8116:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1808,"name":"uint256","nodeType":"ElementaryTypeName","src":"8116:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1811,"initialValue":{"hexValue":"30","id":1810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8134:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8116:19:25"},{"assignments":[1813],"declarations":[{"constant":false,"id":1813,"mutability":"mutable","name":"proofPos","nameLocation":"8153:8:25","nodeType":"VariableDeclaration","scope":1909,"src":"8145:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1812,"name":"uint256","nodeType":"ElementaryTypeName","src":"8145:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1815,"initialValue":{"hexValue":"30","id":1814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8164:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8145:20:25"},{"body":{"id":1874,"nodeType":"Block","src":"8583:292:25","statements":[{"assignments":[1827],"declarations":[{"constant":false,"id":1827,"mutability":"mutable","name":"a","nameLocation":"8605:1:25","nodeType":"VariableDeclaration","scope":1874,"src":"8597:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1826,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8597:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1840,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1828,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1805,"src":"8609:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1829,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1768,"src":"8619:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8609:19:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1835,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1797,"src":"8651:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1838,"indexExpression":{"id":1837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8658:9:25","subExpression":{"id":1836,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1809,"src":"8658:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8651:17:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8609:59:25","trueExpression":{"baseExpression":{"id":1831,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1762,"src":"8631:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1834,"indexExpression":{"id":1833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8638:9:25","subExpression":{"id":1832,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1805,"src":"8638:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8631:17:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8597:71:25"},{"assignments":[1842],"declarations":[{"constant":false,"id":1842,"mutability":"mutable","name":"b","nameLocation":"8690:1:25","nodeType":"VariableDeclaration","scope":1874,"src":"8682:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1841,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8682:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1864,"initialValue":{"condition":{"baseExpression":{"id":1843,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1759,"src":"8694:10:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1845,"indexExpression":{"id":1844,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1817,"src":"8705:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8694:13:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1859,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"8806:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1862,"indexExpression":{"id":1861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8812:10:25","subExpression":{"id":1860,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1813,"src":"8812:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8806:17:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8694:129:25","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1846,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1805,"src":"8727:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1847,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1768,"src":"8737:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8727:19:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1853,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1797,"src":"8769:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1856,"indexExpression":{"id":1855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8776:9:25","subExpression":{"id":1854,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1809,"src":"8776:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8769:17:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8727:59:25","trueExpression":{"baseExpression":{"id":1849,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1762,"src":"8749:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1852,"indexExpression":{"id":1851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8756:9:25","subExpression":{"id":1850,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1805,"src":"8756:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8749:17:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1858,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8726:61:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8682:141:25"},{"expression":{"id":1872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1865,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1797,"src":"8837:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1867,"indexExpression":{"id":1866,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1817,"src":"8844:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8837:9:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1869,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"8859:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1870,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"8862:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1868,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"8849:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8849:15:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8837:27:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1873,"nodeType":"ExpressionStatement","src":"8837:27:25"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1820,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1817,"src":"8561:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1821,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1778,"src":"8565:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8561:15:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1875,"initializationExpression":{"assignments":[1817],"declarations":[{"constant":false,"id":1817,"mutability":"mutable","name":"i","nameLocation":"8554:1:25","nodeType":"VariableDeclaration","scope":1875,"src":"8546:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1816,"name":"uint256","nodeType":"ElementaryTypeName","src":"8546:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1819,"initialValue":{"hexValue":"30","id":1818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8558:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8546:13:25"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8578:3:25","subExpression":{"id":1823,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1817,"src":"8578:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1825,"nodeType":"ExpressionStatement","src":"8578:3:25"},"nodeType":"ForStatement","src":"8541:334:25"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1876,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1778,"src":"8889:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8903:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8889:15:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1894,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1768,"src":"9091:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9103:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9091:13:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1906,"nodeType":"Block","src":"9153:40:25","statements":[{"expression":{"baseExpression":{"id":1902,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"9174:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1904,"indexExpression":{"hexValue":"30","id":1903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9180:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9174:8:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1766,"id":1905,"nodeType":"Return","src":"9167:15:25"}]},"id":1907,"nodeType":"IfStatement","src":"9087:106:25","trueBody":{"id":1901,"nodeType":"Block","src":"9106:41:25","statements":[{"expression":{"baseExpression":{"id":1897,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1762,"src":"9127:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1899,"indexExpression":{"hexValue":"30","id":1898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9134:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9127:9:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1766,"id":1900,"nodeType":"Return","src":"9120:16:25"}]}},"id":1908,"nodeType":"IfStatement","src":"8885:308:25","trueBody":{"id":1893,"nodeType":"Block","src":"8906:175:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1880,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1813,"src":"8928:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1881,"name":"proofLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1773,"src":"8940:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8928:20:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":1883,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8950:33:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":1879,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8920:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1884,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8920:64:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1885,"nodeType":"ExpressionStatement","src":"8920:64:25"},{"id":1892,"nodeType":"UncheckedBlock","src":"8998:73:25","statements":[{"expression":{"baseExpression":{"id":1886,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1797,"src":"9033:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1890,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1887,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1778,"src":"9040:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9054:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9040:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9033:23:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1766,"id":1891,"nodeType":"Return","src":"9026:30:25"}]}]}}]},"documentation":{"id":1753,"nodeType":"StructuredDocumentation","src":"6752:202:25","text":" @dev Calldata version of {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":1910,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"6968:25:25","nodeType":"FunctionDefinition","parameters":{"id":1763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1756,"mutability":"mutable","name":"proof","nameLocation":"7022:5:25","nodeType":"VariableDeclaration","scope":1910,"src":"7003:24:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1754,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7003:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1755,"nodeType":"ArrayTypeName","src":"7003:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1759,"mutability":"mutable","name":"proofFlags","nameLocation":"7053:10:25","nodeType":"VariableDeclaration","scope":1910,"src":"7037:26:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1757,"name":"bool","nodeType":"ElementaryTypeName","src":"7037:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1758,"nodeType":"ArrayTypeName","src":"7037:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1762,"mutability":"mutable","name":"leaves","nameLocation":"7090:6:25","nodeType":"VariableDeclaration","scope":1910,"src":"7073:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1760,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7073:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1761,"nodeType":"ArrayTypeName","src":"7073:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"6993:109:25"},"returnParameters":{"id":1766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1765,"mutability":"mutable","name":"merkleRoot","nameLocation":"7134:10:25","nodeType":"VariableDeclaration","scope":1910,"src":"7126:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1764,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7126:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7125:20:25"},"scope":1945,"src":"6959:2240:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1932,"nodeType":"Block","src":"9277:75:25","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1919,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"9294:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1920,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1914,"src":"9298:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"9294:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1927,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1914,"src":"9340:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1928,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"9343:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1926,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1944,"src":"9325:14:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9325:20:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9294:51:25","trueExpression":{"arguments":[{"id":1923,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"9317:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1924,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1914,"src":"9320:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1922,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1944,"src":"9302:14:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1925,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9302:20:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1918,"id":1931,"nodeType":"Return","src":"9287:58:25"}]},"id":1933,"implemented":true,"kind":"function","modifiers":[],"name":"_hashPair","nameLocation":"9214:9:25","nodeType":"FunctionDefinition","parameters":{"id":1915,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1912,"mutability":"mutable","name":"a","nameLocation":"9232:1:25","nodeType":"VariableDeclaration","scope":1933,"src":"9224:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1911,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9224:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1914,"mutability":"mutable","name":"b","nameLocation":"9243:1:25","nodeType":"VariableDeclaration","scope":1933,"src":"9235:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1913,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9235:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9223:22:25"},"returnParameters":{"id":1918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1917,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1933,"src":"9268:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1916,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9268:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9267:9:25"},"scope":1945,"src":"9205:147:25","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1943,"nodeType":"Block","src":"9441:178:25","statements":[{"AST":{"nativeSrc":"9503:110:25","nodeType":"YulBlock","src":"9503:110:25","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9524:4:25","nodeType":"YulLiteral","src":"9524:4:25","type":"","value":"0x00"},{"name":"a","nativeSrc":"9530:1:25","nodeType":"YulIdentifier","src":"9530:1:25"}],"functionName":{"name":"mstore","nativeSrc":"9517:6:25","nodeType":"YulIdentifier","src":"9517:6:25"},"nativeSrc":"9517:15:25","nodeType":"YulFunctionCall","src":"9517:15:25"},"nativeSrc":"9517:15:25","nodeType":"YulExpressionStatement","src":"9517:15:25"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9552:4:25","nodeType":"YulLiteral","src":"9552:4:25","type":"","value":"0x20"},{"name":"b","nativeSrc":"9558:1:25","nodeType":"YulIdentifier","src":"9558:1:25"}],"functionName":{"name":"mstore","nativeSrc":"9545:6:25","nodeType":"YulIdentifier","src":"9545:6:25"},"nativeSrc":"9545:15:25","nodeType":"YulFunctionCall","src":"9545:15:25"},"nativeSrc":"9545:15:25","nodeType":"YulExpressionStatement","src":"9545:15:25"},{"nativeSrc":"9573:30:25","nodeType":"YulAssignment","src":"9573:30:25","value":{"arguments":[{"kind":"number","nativeSrc":"9592:4:25","nodeType":"YulLiteral","src":"9592:4:25","type":"","value":"0x00"},{"kind":"number","nativeSrc":"9598:4:25","nodeType":"YulLiteral","src":"9598:4:25","type":"","value":"0x40"}],"functionName":{"name":"keccak256","nativeSrc":"9582:9:25","nodeType":"YulIdentifier","src":"9582:9:25"},"nativeSrc":"9582:21:25","nodeType":"YulFunctionCall","src":"9582:21:25"},"variableNames":[{"name":"value","nativeSrc":"9573:5:25","nodeType":"YulIdentifier","src":"9573:5:25"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1935,"isOffset":false,"isSlot":false,"src":"9530:1:25","valueSize":1},{"declaration":1937,"isOffset":false,"isSlot":false,"src":"9558:1:25","valueSize":1},{"declaration":1940,"isOffset":false,"isSlot":false,"src":"9573:5:25","valueSize":1}],"id":1942,"nodeType":"InlineAssembly","src":"9494:119:25"}]},"id":1944,"implemented":true,"kind":"function","modifiers":[],"name":"_efficientHash","nameLocation":"9367:14:25","nodeType":"FunctionDefinition","parameters":{"id":1938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1935,"mutability":"mutable","name":"a","nameLocation":"9390:1:25","nodeType":"VariableDeclaration","scope":1944,"src":"9382:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1934,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9382:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1937,"mutability":"mutable","name":"b","nameLocation":"9401:1:25","nodeType":"VariableDeclaration","scope":1944,"src":"9393:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1936,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9393:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9381:22:25"},"returnParameters":{"id":1941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1940,"mutability":"mutable","name":"value","nameLocation":"9434:5:25","nodeType":"VariableDeclaration","scope":1944,"src":"9426:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1939,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9426:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9425:15:25"},"scope":1945,"src":"9358:261:25","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1946,"src":"802:8819:25","usedErrors":[],"usedEvents":[]}],"src":"118:9504:25"},"id":25},"contracts/mocks/ChaosKingdomResourcesClaimMock.sol":{"ast":{"absolutePath":"contracts/mocks/ChaosKingdomResourcesClaimMock.sol","exportedSymbols":{"ChaosKingdomResourcesClaim":[2450],"ChaosKingdomResourcesClaimMock":[1985],"IERC1155Mintable":[842],"IERC20":[937],"IForwarderRegistry":[727]},"id":1986,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1947,"literals":["solidity","0.8",".22"],"nodeType":"PragmaDirective","src":"32:23:26"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol","id":1949,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1986,"sourceUnit":938,"src":"57:95:26","symbolAliases":[{"foreign":{"id":1948,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"65:6:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","id":1951,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1986,"sourceUnit":843,"src":"153:117:26","symbolAliases":[{"foreign":{"id":1950,"name":"IERC1155Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":842,"src":"161:16:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":1953,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1986,"sourceUnit":728,"src":"271:114:26","symbolAliases":[{"foreign":{"id":1952,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"279:18:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/payment/ChaosKingdomResourcesClaim.sol","file":"../payment/ChaosKingdomResourcesClaim.sol","id":1955,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1986,"sourceUnit":2451,"src":"386:85:26","symbolAliases":[{"foreign":{"id":1954,"name":"ChaosKingdomResourcesClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2450,"src":"394:26:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1956,"name":"ChaosKingdomResourcesClaim","nameLocations":["516:26:26"],"nodeType":"IdentifierPath","referencedDeclaration":2450,"src":"516:26:26"},"id":1957,"nodeType":"InheritanceSpecifier","src":"516:26:26"}],"canonicalName":"ChaosKingdomResourcesClaimMock","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1985,"linearizedBaseContracts":[1985,2450,581,713,701,877,32,414,431,955,80,1307,126],"name":"ChaosKingdomResourcesClaimMock","nameLocation":"482:30:26","nodeType":"ContractDefinition","nodes":[{"body":{"id":1974,"nodeType":"Block","src":"761:2:26","statements":[]},"id":1975,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":1969,"name":"feeContract_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1960,"src":"711:12:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$937","typeString":"contract IERC20"}},{"id":1970,"name":"rewardContract_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"725:15:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$842","typeString":"contract IERC1155Mintable"}},{"id":1971,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"742:17:26","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}}],"id":1972,"kind":"baseConstructorSpecifier","modifierName":{"id":1968,"name":"ChaosKingdomResourcesClaim","nameLocations":["684:26:26"],"nodeType":"IdentifierPath","referencedDeclaration":2450,"src":"684:26:26"},"nodeType":"ModifierInvocation","src":"684:76:26"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1960,"mutability":"mutable","name":"feeContract_","nameLocation":"577:12:26","nodeType":"VariableDeclaration","scope":1975,"src":"570:19:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$937","typeString":"contract IERC20"},"typeName":{"id":1959,"nodeType":"UserDefinedTypeName","pathNode":{"id":1958,"name":"IERC20","nameLocations":["570:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":937,"src":"570:6:26"},"referencedDeclaration":937,"src":"570:6:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$937","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1963,"mutability":"mutable","name":"rewardContract_","nameLocation":"616:15:26","nodeType":"VariableDeclaration","scope":1975,"src":"599:32:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$842","typeString":"contract IERC1155Mintable"},"typeName":{"id":1962,"nodeType":"UserDefinedTypeName","pathNode":{"id":1961,"name":"IERC1155Mintable","nameLocations":["599:16:26"],"nodeType":"IdentifierPath","referencedDeclaration":842,"src":"599:16:26"},"referencedDeclaration":842,"src":"599:16:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$842","typeString":"contract IERC1155Mintable"}},"visibility":"internal"},{"constant":false,"id":1966,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"660:17:26","nodeType":"VariableDeclaration","scope":1975,"src":"641:36:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"},"typeName":{"id":1965,"nodeType":"UserDefinedTypeName","pathNode":{"id":1964,"name":"IForwarderRegistry","nameLocations":["641:18:26"],"nodeType":"IdentifierPath","referencedDeclaration":727,"src":"641:18:26"},"referencedDeclaration":727,"src":"641:18:26","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"560:123:26"},"returnParameters":{"id":1973,"nodeType":"ParameterList","parameters":[],"src":"761:0:26"},"scope":1985,"src":"549:214:26","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1983,"nodeType":"Block","src":"829:34:26","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1980,"name":"_msgData","nodeType":"Identifier","overloadedDeclarations":[2159],"referencedDeclaration":2159,"src":"846:8:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":1981,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"846:10:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1979,"id":1982,"nodeType":"Return","src":"839:17:26"}]},"functionSelector":"31e66e1e","id":1984,"implemented":true,"kind":"function","modifiers":[],"name":"__msgData","nameLocation":"778:9:26","nodeType":"FunctionDefinition","parameters":{"id":1976,"nodeType":"ParameterList","parameters":[],"src":"787:2:26"},"returnParameters":{"id":1979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1978,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1984,"src":"813:14:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1977,"name":"bytes","nodeType":"ElementaryTypeName","src":"813:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"812:16:26"},"scope":1985,"src":"769:94:26","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1986,"src":"473:392:26","usedErrors":[94,419,2065,2069,2083,2097,2103],"usedEvents":[110,2041,2045,2061]}],"src":"32:834:26"},"id":26},"contracts/payment/ChaosKingdomResourcesClaim.sol":{"ast":{"absolutePath":"contracts/payment/ChaosKingdomResourcesClaim.sol","exportedSymbols":{"ChaosKingdomResourcesClaim":[2450],"Context":[1307],"ContractOwnership":[32],"ContractOwnershipStorage":[384],"ERC20Receiver":[877],"ForwarderRegistryContext":[581],"ForwarderRegistryContextBase":[701],"IERC1155Mintable":[842],"IERC20":[937],"IERC20Receiver":[955],"IForwarderRegistry":[727],"MerkleProof":[1945]},"id":2451,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1987,"literals":["solidity","0.8",".22"],"nodeType":"PragmaDirective","src":"32:23:27"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","file":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","id":1989,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2451,"sourceUnit":1946,"src":"57:87:27","symbolAliases":[{"foreign":{"id":1988,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1945,"src":"65:11:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","id":1991,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2451,"sourceUnit":385,"src":"145:125:27","symbolAliases":[{"foreign":{"id":1990,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"153:24:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","id":1993,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2451,"sourceUnit":33,"src":"271:101:27","symbolAliases":[{"foreign":{"id":1992,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"279:17:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol","id":1995,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2451,"sourceUnit":938,"src":"373:95:27","symbolAliases":[{"foreign":{"id":1994,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"381:6:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol","id":1997,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2451,"sourceUnit":956,"src":"469:111:27","symbolAliases":[{"foreign":{"id":1996,"name":"IERC20Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":955,"src":"477:14:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol","id":1999,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2451,"sourceUnit":878,"src":"581:98:27","symbolAliases":[{"foreign":{"id":1998,"name":"ERC20Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"589:13:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","id":2001,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2451,"sourceUnit":843,"src":"680:117:27","symbolAliases":[{"foreign":{"id":2000,"name":"IERC1155Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":842,"src":"688:16:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","file":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","id":2003,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2451,"sourceUnit":582,"src":"798:115:27","symbolAliases":[{"foreign":{"id":2002,"name":"ForwarderRegistryContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"806:24:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","id":2005,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2451,"sourceUnit":702,"src":"914:128:27","symbolAliases":[{"foreign":{"id":2004,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"922:28:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":2007,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2451,"sourceUnit":1308,"src":"1043:66:27","symbolAliases":[{"foreign":{"id":2006,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1307,"src":"1051:7:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":2009,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2451,"sourceUnit":728,"src":"1110:114:27","symbolAliases":[{"foreign":{"id":2008,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"1118:18:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2010,"name":"ContractOwnership","nameLocations":["1265:17:27"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"1265:17:27"},"id":2011,"nodeType":"InheritanceSpecifier","src":"1265:17:27"},{"baseName":{"id":2012,"name":"ERC20Receiver","nameLocations":["1284:13:27"],"nodeType":"IdentifierPath","referencedDeclaration":877,"src":"1284:13:27"},"id":2013,"nodeType":"InheritanceSpecifier","src":"1284:13:27"},{"baseName":{"id":2014,"name":"ForwarderRegistryContext","nameLocations":["1299:24:27"],"nodeType":"IdentifierPath","referencedDeclaration":581,"src":"1299:24:27"},"id":2015,"nodeType":"InheritanceSpecifier","src":"1299:24:27"}],"canonicalName":"ChaosKingdomResourcesClaim","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":2450,"linearizedBaseContracts":[2450,581,713,701,877,32,414,431,955,80,1307,126],"name":"ChaosKingdomResourcesClaim","nameLocation":"1235:26:27","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2019,"libraryName":{"id":2016,"name":"MerkleProof","nameLocations":["1336:11:27"],"nodeType":"IdentifierPath","referencedDeclaration":1945,"src":"1336:11:27"},"nodeType":"UsingForDirective","src":"1330:32:27","typeName":{"baseType":{"id":2017,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1352:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2018,"nodeType":"ArrayTypeName","src":"1352:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},{"global":false,"id":2023,"libraryName":{"id":2020,"name":"ContractOwnershipStorage","nameLocations":["1373:24:27"],"nodeType":"IdentifierPath","referencedDeclaration":384,"src":"1373:24:27"},"nodeType":"UsingForDirective","src":"1367:67:27","typeName":{"id":2022,"nodeType":"UserDefinedTypeName","pathNode":{"id":2021,"name":"ContractOwnershipStorage.Layout","nameLocations":["1402:24:27","1427:6:27"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"1402:31:27"},"referencedDeclaration":157,"src":"1402:31:27","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"constant":false,"functionSelector":"ae6dead7","id":2027,"mutability":"mutable","name":"roots","nameLocation":"1472:5:27","nodeType":"VariableDeclaration","scope":2450,"src":"1440:37:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"typeName":{"id":2026,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2024,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1448:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1440:24:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2025,"name":"bool","nodeType":"ElementaryTypeName","src":"1459:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"functionSelector":"cc3c0f06","id":2031,"mutability":"mutable","name":"claimed","nameLocation":"1515:7:27","nodeType":"VariableDeclaration","scope":2450,"src":"1483:39:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"typeName":{"id":2030,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2028,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1491:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1483:24:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2029,"name":"bool","nodeType":"ElementaryTypeName","src":"1502:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"functionSelector":"3a5af339","id":2034,"mutability":"immutable","name":"REWARD_CONTRACT","nameLocation":"1563:15:27","nodeType":"VariableDeclaration","scope":2450,"src":"1529:49:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$842","typeString":"contract IERC1155Mintable"},"typeName":{"id":2033,"nodeType":"UserDefinedTypeName","pathNode":{"id":2032,"name":"IERC1155Mintable","nameLocations":["1529:16:27"],"nodeType":"IdentifierPath","referencedDeclaration":842,"src":"1529:16:27"},"referencedDeclaration":842,"src":"1529:16:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$842","typeString":"contract IERC1155Mintable"}},"visibility":"public"},{"constant":false,"functionSelector":"1352acac","id":2037,"mutability":"immutable","name":"FEE_CONTRACT","nameLocation":"1608:12:27","nodeType":"VariableDeclaration","scope":2450,"src":"1584:36:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$937","typeString":"contract IERC20"},"typeName":{"id":2036,"nodeType":"UserDefinedTypeName","pathNode":{"id":2035,"name":"IERC20","nameLocations":["1584:6:27"],"nodeType":"IdentifierPath","referencedDeclaration":937,"src":"1584:6:27"},"referencedDeclaration":937,"src":"1584:6:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$937","typeString":"contract IERC20"}},"visibility":"public"},{"anonymous":false,"eventSelector":"bdd203dd78bf49cf79e4db0ecdf7d27adc380fb1f33beef2667a50db9d2a0e04","id":2041,"name":"MerkleRootAdded","nameLocation":"1633:15:27","nodeType":"EventDefinition","parameters":{"id":2040,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2039,"indexed":true,"mutability":"mutable","name":"root","nameLocation":"1665:4:27","nodeType":"VariableDeclaration","scope":2041,"src":"1649:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2038,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1649:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1648:22:27"},"src":"1627:44:27"},{"anonymous":false,"eventSelector":"578eab65d47cffa57066b105301289ff86bfdc0adc2a701c3356d2a6eb6a6123","id":2045,"name":"MerkleRootDeprecated","nameLocation":"1683:20:27","nodeType":"EventDefinition","parameters":{"id":2044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2043,"indexed":true,"mutability":"mutable","name":"root","nameLocation":"1720:4:27","nodeType":"VariableDeclaration","scope":2045,"src":"1704:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2042,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1704:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1703:22:27"},"src":"1677:49:27"},{"anonymous":false,"eventSelector":"bf561a0ae8123352abf33f8f113e6b265c2e7fe7ba9b4d450750454bcbb7233a","id":2061,"name":"PayoutClaimed","nameLocation":"1738:13:27","nodeType":"EventDefinition","parameters":{"id":2060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2047,"indexed":true,"mutability":"mutable","name":"root","nameLocation":"1768:4:27","nodeType":"VariableDeclaration","scope":2061,"src":"1752:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2046,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1752:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2049,"indexed":true,"mutability":"mutable","name":"epochId","nameLocation":"1790:7:27","nodeType":"VariableDeclaration","scope":2061,"src":"1774:23:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2048,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1774:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2051,"indexed":false,"mutability":"mutable","name":"fee","nameLocation":"1807:3:27","nodeType":"VariableDeclaration","scope":2061,"src":"1799:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2050,"name":"uint256","nodeType":"ElementaryTypeName","src":"1799:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2053,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"1828:9:27","nodeType":"VariableDeclaration","scope":2061,"src":"1812:25:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2052,"name":"address","nodeType":"ElementaryTypeName","src":"1812:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2056,"indexed":false,"mutability":"mutable","name":"ids","nameLocation":"1849:3:27","nodeType":"VariableDeclaration","scope":2061,"src":"1839:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2054,"name":"uint256","nodeType":"ElementaryTypeName","src":"1839:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2055,"nodeType":"ArrayTypeName","src":"1839:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2059,"indexed":false,"mutability":"mutable","name":"values","nameLocation":"1864:6:27","nodeType":"VariableDeclaration","scope":2061,"src":"1854:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2057,"name":"uint256","nodeType":"ElementaryTypeName","src":"1854:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2058,"nodeType":"ArrayTypeName","src":"1854:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1751:120:27"},"src":"1732:140:27"},{"errorSelector":"5d35de37","id":2065,"name":"MerkleRootAlreadyExists","nameLocation":"1884:23:27","nodeType":"ErrorDefinition","parameters":{"id":2064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2063,"mutability":"mutable","name":"merkleRoot","nameLocation":"1916:10:27","nodeType":"VariableDeclaration","scope":2065,"src":"1908:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2062,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1908:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1907:20:27"},"src":"1878:50:27"},{"errorSelector":"6d825743","id":2069,"name":"InvalidMerkleRoot","nameLocation":"1940:17:27","nodeType":"ErrorDefinition","parameters":{"id":2068,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2067,"mutability":"mutable","name":"merkleRoot","nameLocation":"1966:10:27","nodeType":"VariableDeclaration","scope":2069,"src":"1958:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2066,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1958:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1957:20:27"},"src":"1934:44:27"},{"errorSelector":"f048f37a","id":2083,"name":"AlreadyClaimed","nameLocation":"1990:14:27","nodeType":"ErrorDefinition","parameters":{"id":2082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2071,"mutability":"mutable","name":"recipient","nameLocation":"2013:9:27","nodeType":"VariableDeclaration","scope":2083,"src":"2005:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2070,"name":"address","nodeType":"ElementaryTypeName","src":"2005:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2074,"mutability":"mutable","name":"ids","nameLocation":"2034:3:27","nodeType":"VariableDeclaration","scope":2083,"src":"2024:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2072,"name":"uint256","nodeType":"ElementaryTypeName","src":"2024:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2073,"nodeType":"ArrayTypeName","src":"2024:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2077,"mutability":"mutable","name":"values","nameLocation":"2049:6:27","nodeType":"VariableDeclaration","scope":2083,"src":"2039:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2075,"name":"uint256","nodeType":"ElementaryTypeName","src":"2039:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2076,"nodeType":"ArrayTypeName","src":"2039:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2079,"mutability":"mutable","name":"fee","nameLocation":"2065:3:27","nodeType":"VariableDeclaration","scope":2083,"src":"2057:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2078,"name":"uint256","nodeType":"ElementaryTypeName","src":"2057:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2081,"mutability":"mutable","name":"epochId","nameLocation":"2078:7:27","nodeType":"VariableDeclaration","scope":2083,"src":"2070:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2080,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2070:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2004:82:27"},"src":"1984:103:27"},{"errorSelector":"dbf2ac7c","id":2097,"name":"InvalidProof","nameLocation":"2099:12:27","nodeType":"ErrorDefinition","parameters":{"id":2096,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2085,"mutability":"mutable","name":"recipient","nameLocation":"2120:9:27","nodeType":"VariableDeclaration","scope":2097,"src":"2112:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2084,"name":"address","nodeType":"ElementaryTypeName","src":"2112:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2088,"mutability":"mutable","name":"ids","nameLocation":"2141:3:27","nodeType":"VariableDeclaration","scope":2097,"src":"2131:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2086,"name":"uint256","nodeType":"ElementaryTypeName","src":"2131:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2087,"nodeType":"ArrayTypeName","src":"2131:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2091,"mutability":"mutable","name":"values","nameLocation":"2156:6:27","nodeType":"VariableDeclaration","scope":2097,"src":"2146:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2089,"name":"uint256","nodeType":"ElementaryTypeName","src":"2146:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2090,"nodeType":"ArrayTypeName","src":"2146:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2093,"mutability":"mutable","name":"fee","nameLocation":"2172:3:27","nodeType":"VariableDeclaration","scope":2097,"src":"2164:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2092,"name":"uint256","nodeType":"ElementaryTypeName","src":"2164:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2095,"mutability":"mutable","name":"epochId","nameLocation":"2185:7:27","nodeType":"VariableDeclaration","scope":2097,"src":"2177:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2094,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2177:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2111:82:27"},"src":"2093:101:27"},{"errorSelector":"6c50e905","id":2103,"name":"FeeContractMismatch","nameLocation":"2206:19:27","nodeType":"ErrorDefinition","parameters":{"id":2102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2099,"mutability":"mutable","name":"sender","nameLocation":"2234:6:27","nodeType":"VariableDeclaration","scope":2103,"src":"2226:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2098,"name":"address","nodeType":"ElementaryTypeName","src":"2226:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2101,"mutability":"mutable","name":"expectedContract","nameLocation":"2250:16:27","nodeType":"VariableDeclaration","scope":2103,"src":"2242:24:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2100,"name":"address","nodeType":"ElementaryTypeName","src":"2242:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2225:42:27"},"src":"2200:68:27"},{"body":{"id":2130,"nodeType":"Block","src":"2481:85:27","statements":[{"expression":{"id":2124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2122,"name":"FEE_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2037,"src":"2491:12:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$937","typeString":"contract IERC20"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2123,"name":"feeContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2106,"src":"2506:11:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$937","typeString":"contract IERC20"}},"src":"2491:26:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$937","typeString":"contract IERC20"}},"id":2125,"nodeType":"ExpressionStatement","src":"2491:26:27"},{"expression":{"id":2128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2126,"name":"REWARD_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2034,"src":"2527:15:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$842","typeString":"contract IERC1155Mintable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2127,"name":"rewardContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"2545:14:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$842","typeString":"contract IERC1155Mintable"}},"src":"2527:32:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$842","typeString":"contract IERC1155Mintable"}},"id":2129,"nodeType":"ExpressionStatement","src":"2527:32:27"}]},"id":2131,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"expression":{"id":2115,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2425:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2429:6:27","memberName":"sender","nodeType":"MemberAccess","src":"2425:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":2117,"kind":"baseConstructorSpecifier","modifierName":{"id":2114,"name":"ContractOwnership","nameLocations":["2407:17:27"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"2407:17:27"},"nodeType":"ModifierInvocation","src":"2407:29:27"},{"arguments":[{"id":2119,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"2462:17:27","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}}],"id":2120,"kind":"baseConstructorSpecifier","modifierName":{"id":2118,"name":"ForwarderRegistryContext","nameLocations":["2437:24:27"],"nodeType":"IdentifierPath","referencedDeclaration":581,"src":"2437:24:27"},"nodeType":"ModifierInvocation","src":"2437:43:27"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2106,"mutability":"mutable","name":"feeContract","nameLocation":"2302:11:27","nodeType":"VariableDeclaration","scope":2131,"src":"2295:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$937","typeString":"contract IERC20"},"typeName":{"id":2105,"nodeType":"UserDefinedTypeName","pathNode":{"id":2104,"name":"IERC20","nameLocations":["2295:6:27"],"nodeType":"IdentifierPath","referencedDeclaration":937,"src":"2295:6:27"},"referencedDeclaration":937,"src":"2295:6:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$937","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2109,"mutability":"mutable","name":"rewardContract","nameLocation":"2340:14:27","nodeType":"VariableDeclaration","scope":2131,"src":"2323:31:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$842","typeString":"contract IERC1155Mintable"},"typeName":{"id":2108,"nodeType":"UserDefinedTypeName","pathNode":{"id":2107,"name":"IERC1155Mintable","nameLocations":["2323:16:27"],"nodeType":"IdentifierPath","referencedDeclaration":842,"src":"2323:16:27"},"referencedDeclaration":842,"src":"2323:16:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$842","typeString":"contract IERC1155Mintable"}},"visibility":"internal"},{"constant":false,"id":2112,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"2383:17:27","nodeType":"VariableDeclaration","scope":2131,"src":"2364:36:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"},"typeName":{"id":2111,"nodeType":"UserDefinedTypeName","pathNode":{"id":2110,"name":"IForwarderRegistry","nameLocations":["2364:18:27"],"nodeType":"IdentifierPath","referencedDeclaration":727,"src":"2364:18:27"},"referencedDeclaration":727,"src":"2364:18:27","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"2285:121:27"},"returnParameters":{"id":2121,"nodeType":"ParameterList","parameters":[],"src":"2481:0:27"},"scope":2450,"src":"2274:292:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[652,1297],"body":{"id":2144,"nodeType":"Block","src":"2731:65:27","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2140,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"2748:28:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$701_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":2141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2777:10:27","memberName":"_msgSender","nodeType":"MemberAccess","referencedDeclaration":652,"src":"2748:39:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2748:41:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2139,"id":2143,"nodeType":"Return","src":"2741:48:27"}]},"documentation":{"id":2132,"nodeType":"StructuredDocumentation","src":"2572:44:27","text":"@inheritdoc ForwarderRegistryContextBase"},"id":2145,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"2630:10:27","nodeType":"FunctionDefinition","overrides":{"id":2136,"nodeType":"OverrideSpecifier","overrides":[{"id":2134,"name":"Context","nameLocations":["2674:7:27"],"nodeType":"IdentifierPath","referencedDeclaration":1307,"src":"2674:7:27"},{"id":2135,"name":"ForwarderRegistryContextBase","nameLocations":["2683:28:27"],"nodeType":"IdentifierPath","referencedDeclaration":701,"src":"2683:28:27"}],"src":"2665:47:27"},"parameters":{"id":2133,"nodeType":"ParameterList","parameters":[],"src":"2640:2:27"},"returnParameters":{"id":2139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2138,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2145,"src":"2722:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2137,"name":"address","nodeType":"ElementaryTypeName","src":"2722:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2721:9:27"},"scope":2450,"src":"2621:175:27","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[700,1306],"body":{"id":2158,"nodeType":"Block","src":"2966:63:27","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2154,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"2983:28:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$701_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":2155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3012:8:27","memberName":"_msgData","nodeType":"MemberAccess","referencedDeclaration":700,"src":"2983:37:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":2156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2983:39:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2153,"id":2157,"nodeType":"Return","src":"2976:46:27"}]},"documentation":{"id":2146,"nodeType":"StructuredDocumentation","src":"2802:44:27","text":"@inheritdoc ForwarderRegistryContextBase"},"id":2159,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"2860:8:27","nodeType":"FunctionDefinition","overrides":{"id":2150,"nodeType":"OverrideSpecifier","overrides":[{"id":2148,"name":"Context","nameLocations":["2902:7:27"],"nodeType":"IdentifierPath","referencedDeclaration":1307,"src":"2902:7:27"},{"id":2149,"name":"ForwarderRegistryContextBase","nameLocations":["2911:28:27"],"nodeType":"IdentifierPath","referencedDeclaration":701,"src":"2911:28:27"}],"src":"2893:47:27"},"parameters":{"id":2147,"nodeType":"ParameterList","parameters":[],"src":"2868:2:27"},"returnParameters":{"id":2153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2152,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2159,"src":"2950:14:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2151,"name":"bytes","nodeType":"ElementaryTypeName","src":"2950:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2949:16:27"},"scope":2450,"src":"2851:178:27","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[954],"body":{"id":2221,"nodeType":"Block","src":"3174:364:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2175,"name":"FEE_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2037,"src":"3196:12:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$937","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$937","typeString":"contract IERC20"}],"id":2174,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3188:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2173,"name":"address","nodeType":"ElementaryTypeName","src":"3188:7:27","typeDescriptions":{}}},"id":2176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3188:21:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2177,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3213:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3217:6:27","memberName":"sender","nodeType":"MemberAccess","src":"3213:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3188:35:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2189,"nodeType":"IfStatement","src":"3184:102:27","trueBody":{"errorCall":{"arguments":[{"expression":{"id":2181,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3252:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3256:6:27","memberName":"sender","nodeType":"MemberAccess","src":"3252:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2185,"name":"FEE_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2037,"src":"3272:12:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$937","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$937","typeString":"contract IERC20"}],"id":2184,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3264:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2183,"name":"address","nodeType":"ElementaryTypeName","src":"3264:7:27","typeDescriptions":{}}},"id":2186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3264:21:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2180,"name":"FeeContractMismatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2103,"src":"3232:19:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":2187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3232:54:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2188,"nodeType":"RevertStatement","src":"3225:61:27"}},{"assignments":[2191],"declarations":[{"constant":false,"id":2191,"mutability":"mutable","name":"fee","nameLocation":"3305:3:27","nodeType":"VariableDeclaration","scope":2221,"src":"3297:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2190,"name":"uint256","nodeType":"ElementaryTypeName","src":"3297:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2193,"initialValue":{"id":2192,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2165,"src":"3311:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3297:19:27"},{"assignments":[2198,2201],"declarations":[{"constant":false,"id":2198,"mutability":"mutable","name":"ids","nameLocation":"3345:3:27","nodeType":"VariableDeclaration","scope":2221,"src":"3328:20:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2196,"name":"uint256","nodeType":"ElementaryTypeName","src":"3328:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2197,"nodeType":"ArrayTypeName","src":"3328:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2201,"mutability":"mutable","name":"values","nameLocation":"3367:6:27","nodeType":"VariableDeclaration","scope":2221,"src":"3350:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2199,"name":"uint256","nodeType":"ElementaryTypeName","src":"3350:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2200,"nodeType":"ArrayTypeName","src":"3350:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":2207,"initialValue":{"arguments":[{"id":2203,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2163,"src":"3395:4:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2204,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"3401:4:27","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":2205,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2191,"src":"3407:3:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2202,"name":"_processClaimData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2338,"src":"3377:17:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_calldata_ptr_$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (address,bytes calldata,uint256) returns (uint256[] memory,uint256[] memory)"}},"id":2206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3377:34:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"tuple(uint256[] memory,uint256[] memory)"}},"nodeType":"VariableDeclarationStatement","src":"3327:84:27"},{"expression":{"arguments":[{"id":2211,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2163,"src":"3452:4:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2212,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"3458:3:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":2213,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2201,"src":"3463:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":2214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3471:2:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":2208,"name":"REWARD_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2034,"src":"3422:15:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$842","typeString":"contract IERC1155Mintable"}},"id":2210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3438:13:27","memberName":"safeBatchMint","nodeType":"MemberAccess","referencedDeclaration":841,"src":"3422:29:27","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256[] memory,uint256[] memory,bytes memory) external"}},"id":2215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3422:52:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2216,"nodeType":"ExpressionStatement","src":"3422:52:27"},{"expression":{"expression":{"expression":{"id":2217,"name":"IERC20Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":955,"src":"3492:14:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Receiver_$955_$","typeString":"type(contract IERC20Receiver)"}},"id":2218,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3507:15:27","memberName":"onERC20Received","nodeType":"MemberAccess","referencedDeclaration":954,"src":"3492:30:27","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC20Receiver.onERC20Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":2219,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3523:8:27","memberName":"selector","nodeType":"MemberAccess","src":"3492:39:27","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":2172,"id":2220,"nodeType":"Return","src":"3485:46:27"}]},"functionSelector":"4fc35859","id":2222,"implemented":true,"kind":"function","modifiers":[],"name":"onERC20Received","nameLocation":"3044:15:27","nodeType":"FunctionDefinition","overrides":{"id":2169,"nodeType":"OverrideSpecifier","overrides":[],"src":"3137:8:27"},"parameters":{"id":2168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2161,"mutability":"mutable","name":"operator","nameLocation":"3068:8:27","nodeType":"VariableDeclaration","scope":2222,"src":"3060:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2160,"name":"address","nodeType":"ElementaryTypeName","src":"3060:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2163,"mutability":"mutable","name":"from","nameLocation":"3086:4:27","nodeType":"VariableDeclaration","scope":2222,"src":"3078:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2162,"name":"address","nodeType":"ElementaryTypeName","src":"3078:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2165,"mutability":"mutable","name":"value","nameLocation":"3100:5:27","nodeType":"VariableDeclaration","scope":2222,"src":"3092:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2164,"name":"uint256","nodeType":"ElementaryTypeName","src":"3092:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2167,"mutability":"mutable","name":"data","nameLocation":"3122:4:27","nodeType":"VariableDeclaration","scope":2222,"src":"3107:19:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2166,"name":"bytes","nodeType":"ElementaryTypeName","src":"3107:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3059:68:27"},"returnParameters":{"id":2172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2171,"mutability":"mutable","name":"magicValue","nameLocation":"3162:10:27","nodeType":"VariableDeclaration","scope":2222,"src":"3155:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2170,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3155:6:27","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"3154:19:27"},"scope":2450,"src":"3035:503:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2337,"nodeType":"Block","src":"3724:743:27","statements":[{"assignments":[2238,2240,2243,2246,2249],"declarations":[{"constant":false,"id":2238,"mutability":"mutable","name":"merkleRoot","nameLocation":"3743:10:27","nodeType":"VariableDeclaration","scope":2337,"src":"3735:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2237,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3735:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2240,"mutability":"mutable","name":"epochId","nameLocation":"3763:7:27","nodeType":"VariableDeclaration","scope":2337,"src":"3755:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2239,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3755:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2243,"mutability":"mutable","name":"proof","nameLocation":"3789:5:27","nodeType":"VariableDeclaration","scope":2337,"src":"3772:22:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2241,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3772:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2242,"nodeType":"ArrayTypeName","src":"3772:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2246,"mutability":"mutable","name":"_ids","nameLocation":"3813:4:27","nodeType":"VariableDeclaration","scope":2337,"src":"3796:21:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2244,"name":"uint256","nodeType":"ElementaryTypeName","src":"3796:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2245,"nodeType":"ArrayTypeName","src":"3796:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2249,"mutability":"mutable","name":"_values","nameLocation":"3836:7:27","nodeType":"VariableDeclaration","scope":2337,"src":"3819:24:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2247,"name":"uint256","nodeType":"ElementaryTypeName","src":"3819:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2248,"nodeType":"ArrayTypeName","src":"3819:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":2268,"initialValue":{"arguments":[{"id":2252,"name":"claimData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2226,"src":"3871:9:27","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"components":[{"id":2254,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3895:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2253,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3895:7:27","typeDescriptions":{}}},{"id":2256,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3904:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2255,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3904:7:27","typeDescriptions":{}}},{"baseExpression":{"id":2258,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3913:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2257,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3913:7:27","typeDescriptions":{}}},"id":2259,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"3913:9:27","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"type(bytes32[] memory)"}},{"baseExpression":{"id":2261,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3924:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2260,"name":"uint256","nodeType":"ElementaryTypeName","src":"3924:7:27","typeDescriptions":{}}},"id":2262,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"3924:9:27","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"type(uint256[] memory)"}},{"baseExpression":{"id":2264,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3935:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2263,"name":"uint256","nodeType":"ElementaryTypeName","src":"3935:7:27","typeDescriptions":{}}},"id":2265,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"3935:9:27","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"type(uint256[] memory)"}}],"id":2266,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3894:51:27","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_bytes32_$_$_t_type$_t_bytes32_$_$_t_type$_t_array$_t_bytes32_$dyn_memory_ptr_$_$_t_type$_t_array$_t_uint256_$dyn_memory_ptr_$_$_t_type$_t_array$_t_uint256_$dyn_memory_ptr_$_$","typeString":"tuple(type(bytes32),type(bytes32),type(bytes32[] memory),type(uint256[] memory),type(uint256[] memory))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_tuple$_t_type$_t_bytes32_$_$_t_type$_t_bytes32_$_$_t_type$_t_array$_t_bytes32_$dyn_memory_ptr_$_$_t_type$_t_array$_t_uint256_$dyn_memory_ptr_$_$_t_type$_t_array$_t_uint256_$dyn_memory_ptr_$_$","typeString":"tuple(type(bytes32),type(bytes32),type(bytes32[] memory),type(uint256[] memory),type(uint256[] memory))"}],"expression":{"id":2250,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3847:3:27","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2251,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3851:6:27","memberName":"decode","nodeType":"MemberAccess","src":"3847:10:27","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3847:108:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_bytes32_$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"tuple(bytes32,bytes32,bytes32[] memory,uint256[] memory,uint256[] memory)"}},"nodeType":"VariableDeclarationStatement","src":"3734:221:27"},{"condition":{"id":2272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3969:18:27","subExpression":{"baseExpression":{"id":2269,"name":"roots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"3970:5:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":2271,"indexExpression":{"id":2270,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"3976:10:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3970:17:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2277,"nodeType":"IfStatement","src":"3965:60:27","trueBody":{"errorCall":{"arguments":[{"id":2274,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"4014:10:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2273,"name":"InvalidMerkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2069,"src":"3996:17:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":2275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3996:29:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2276,"nodeType":"RevertStatement","src":"3989:36:27"}},{"assignments":[2279],"declarations":[{"constant":false,"id":2279,"mutability":"mutable","name":"leaf","nameLocation":"4044:4:27","nodeType":"VariableDeclaration","scope":2337,"src":"4036:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2278,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4036:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2290,"initialValue":{"arguments":[{"arguments":[{"id":2283,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"4078:9:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2284,"name":"_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2246,"src":"4089:4:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":2285,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2249,"src":"4095:7:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":2286,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2228,"src":"4104:3:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2287,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"4109:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2281,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4061:3:27","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2282,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4065:12:27","memberName":"encodePacked","nodeType":"MemberAccess","src":"4061:16:27","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4061:56:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2280,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4051:9:27","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4051:67:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4036:82:27"},{"condition":{"baseExpression":{"id":2291,"name":"claimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"4133:7:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":2293,"indexExpression":{"id":2292,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2279,"src":"4141:4:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4133:13:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2302,"nodeType":"IfStatement","src":"4129:80:27","trueBody":{"errorCall":{"arguments":[{"id":2295,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"4170:9:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2296,"name":"_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2246,"src":"4181:4:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":2297,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2249,"src":"4187:7:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":2298,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2228,"src":"4196:3:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2299,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"4201:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2294,"name":"AlreadyClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2083,"src":"4155:14:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_uint256_$_t_bytes32_$returns$__$","typeString":"function (address,uint256[] memory,uint256[] memory,uint256,bytes32) pure"}},"id":2300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4155:54:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2301,"nodeType":"RevertStatement","src":"4148:61:27"}},{"condition":{"id":2308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4223:31:27","subExpression":{"arguments":[{"id":2305,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"4237:10:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2306,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2279,"src":"4249:4:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2303,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"4224:5:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4230:6:27","memberName":"verify","nodeType":"MemberAccess","referencedDeclaration":1441,"src":"4224:12:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$attached_to$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"}},"id":2307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4224:30:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2317,"nodeType":"IfStatement","src":"4219:96:27","trueBody":{"errorCall":{"arguments":[{"id":2310,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"4276:9:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2311,"name":"_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2246,"src":"4287:4:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":2312,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2249,"src":"4293:7:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":2313,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2228,"src":"4302:3:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2314,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"4307:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2309,"name":"InvalidProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2097,"src":"4263:12:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_uint256_$_t_bytes32_$returns$__$","typeString":"function (address,uint256[] memory,uint256[] memory,uint256,bytes32) pure"}},"id":2315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4263:52:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2316,"nodeType":"RevertStatement","src":"4256:59:27"}},{"expression":{"id":2322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2318,"name":"claimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"4326:7:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":2320,"indexExpression":{"id":2319,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2279,"src":"4334:4:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4326:13:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4342:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4326:20:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2323,"nodeType":"ExpressionStatement","src":"4326:20:27"},{"eventCall":{"arguments":[{"id":2325,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"4376:10:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2326,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"4388:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2327,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2228,"src":"4397:3:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2328,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"4402:9:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2329,"name":"_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2246,"src":"4413:4:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":2330,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2249,"src":"4419:7:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":2324,"name":"PayoutClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2061,"src":"4362:13:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_uint256_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes32,uint256,address,uint256[] memory,uint256[] memory)"}},"id":2331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4362:65:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2332,"nodeType":"EmitStatement","src":"4357:70:27"},{"expression":{"components":[{"id":2333,"name":"_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2246,"src":"4446:4:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":2334,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2249,"src":"4452:7:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"id":2335,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4445:15:27","typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"tuple(uint256[] memory,uint256[] memory)"}},"functionReturnParameters":2236,"id":2336,"nodeType":"Return","src":"4438:22:27"}]},"id":2338,"implemented":true,"kind":"function","modifiers":[],"name":"_processClaimData","nameLocation":"3553:17:27","nodeType":"FunctionDefinition","parameters":{"id":2229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2224,"mutability":"mutable","name":"recipient","nameLocation":"3588:9:27","nodeType":"VariableDeclaration","scope":2338,"src":"3580:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2223,"name":"address","nodeType":"ElementaryTypeName","src":"3580:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2226,"mutability":"mutable","name":"claimData","nameLocation":"3622:9:27","nodeType":"VariableDeclaration","scope":2338,"src":"3607:24:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2225,"name":"bytes","nodeType":"ElementaryTypeName","src":"3607:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2228,"mutability":"mutable","name":"fee","nameLocation":"3649:3:27","nodeType":"VariableDeclaration","scope":2338,"src":"3641:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2227,"name":"uint256","nodeType":"ElementaryTypeName","src":"3641:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3570:88:27"},"returnParameters":{"id":2236,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2232,"mutability":"mutable","name":"ids","nameLocation":"3694:3:27","nodeType":"VariableDeclaration","scope":2338,"src":"3677:20:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2230,"name":"uint256","nodeType":"ElementaryTypeName","src":"3677:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2231,"nodeType":"ArrayTypeName","src":"3677:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2235,"mutability":"mutable","name":"values","nameLocation":"3716:6:27","nodeType":"VariableDeclaration","scope":2338,"src":"3699:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2233,"name":"uint256","nodeType":"ElementaryTypeName","src":"3699:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2234,"nodeType":"ArrayTypeName","src":"3699:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3676:47:27"},"scope":2450,"src":"3544:923:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2381,"nodeType":"Block","src":"4555:245:27","statements":[{"assignments":[2351,2354],"declarations":[{"constant":false,"id":2351,"mutability":"mutable","name":"ids","nameLocation":"4583:3:27","nodeType":"VariableDeclaration","scope":2381,"src":"4566:20:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2349,"name":"uint256","nodeType":"ElementaryTypeName","src":"4566:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2350,"nodeType":"ArrayTypeName","src":"4566:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2354,"mutability":"mutable","name":"values","nameLocation":"4605:6:27","nodeType":"VariableDeclaration","scope":2381,"src":"4588:23:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2352,"name":"uint256","nodeType":"ElementaryTypeName","src":"4588:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2353,"nodeType":"ArrayTypeName","src":"4588:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":2360,"initialValue":{"arguments":[{"id":2356,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"4633:9:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2357,"name":"claimData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2342,"src":"4644:9:27","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":2358,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2344,"src":"4655:3:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2355,"name":"_processClaimData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2338,"src":"4615:17:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_calldata_ptr_$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (address,bytes calldata,uint256) returns (uint256[] memory,uint256[] memory)"}},"id":2359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4615:44:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"tuple(uint256[] memory,uint256[] memory)"}},"nodeType":"VariableDeclarationStatement","src":"4565:94:27"},{"expression":{"arguments":[{"id":2364,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"4696:9:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2367,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4715:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_ChaosKingdomResourcesClaim_$2450","typeString":"contract ChaosKingdomResourcesClaim"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ChaosKingdomResourcesClaim_$2450","typeString":"contract ChaosKingdomResourcesClaim"}],"id":2366,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4707:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2365,"name":"address","nodeType":"ElementaryTypeName","src":"4707:7:27","typeDescriptions":{}}},"id":2368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4707:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2369,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2344,"src":"4722:3:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2361,"name":"FEE_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2037,"src":"4670:12:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$937","typeString":"contract IERC20"}},"id":2363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4683:12:27","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":912,"src":"4670:25:27","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":2370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4670:56:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2371,"nodeType":"ExpressionStatement","src":"4670:56:27"},{"expression":{"arguments":[{"id":2375,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"4766:9:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2376,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2351,"src":"4777:3:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":2377,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"4782:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":2378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4790:2:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":2372,"name":"REWARD_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2034,"src":"4736:15:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$842","typeString":"contract IERC1155Mintable"}},"id":2374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4752:13:27","memberName":"safeBatchMint","nodeType":"MemberAccess","referencedDeclaration":841,"src":"4736:29:27","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256[] memory,uint256[] memory,bytes memory) external"}},"id":2379,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4736:57:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2380,"nodeType":"ExpressionStatement","src":"4736:57:27"}]},"functionSelector":"8bd8d0a9","id":2382,"implemented":true,"kind":"function","modifiers":[],"name":"claim","nameLocation":"4482:5:27","nodeType":"FunctionDefinition","parameters":{"id":2345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2340,"mutability":"mutable","name":"recipient","nameLocation":"4496:9:27","nodeType":"VariableDeclaration","scope":2382,"src":"4488:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2339,"name":"address","nodeType":"ElementaryTypeName","src":"4488:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2342,"mutability":"mutable","name":"claimData","nameLocation":"4522:9:27","nodeType":"VariableDeclaration","scope":2382,"src":"4507:24:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2341,"name":"bytes","nodeType":"ElementaryTypeName","src":"4507:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2344,"mutability":"mutable","name":"fee","nameLocation":"4541:3:27","nodeType":"VariableDeclaration","scope":2382,"src":"4533:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2343,"name":"uint256","nodeType":"ElementaryTypeName","src":"4533:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4487:58:27"},"returnParameters":{"id":2346,"nodeType":"ParameterList","parameters":[],"src":"4555:0:27"},"scope":2450,"src":"4473:327:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2414,"nodeType":"Block","src":"4856:239:27","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2392,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[2145],"referencedDeclaration":2145,"src":"4923:10:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4923:12:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2387,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"4866:24:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$384_$","typeString":"type(library ContractOwnershipStorage)"}},"id":2389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4891:6:27","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":383,"src":"4866:31:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":2390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4866:33:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":2391,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4900:22:27","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":351,"src":"4866:56:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$157_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":2394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4866:70:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2395,"nodeType":"ExpressionStatement","src":"4866:70:27"},{"condition":{"baseExpression":{"id":2396,"name":"roots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"4950:5:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":2398,"indexExpression":{"id":2397,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2384,"src":"4956:10:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4950:17:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2403,"nodeType":"IfStatement","src":"4946:65:27","trueBody":{"errorCall":{"arguments":[{"id":2400,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2384,"src":"5000:10:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2399,"name":"MerkleRootAlreadyExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2065,"src":"4976:23:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":2401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4976:35:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2402,"nodeType":"RevertStatement","src":"4969:42:27"}},{"expression":{"id":2408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2404,"name":"roots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"5022:5:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":2406,"indexExpression":{"id":2405,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2384,"src":"5028:10:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5022:17:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5042:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5022:24:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2409,"nodeType":"ExpressionStatement","src":"5022:24:27"},{"eventCall":{"arguments":[{"id":2411,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2384,"src":"5077:10:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2410,"name":"MerkleRootAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2041,"src":"5061:15:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":2412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5061:27:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2413,"nodeType":"EmitStatement","src":"5056:32:27"}]},"functionSelector":"3323c807","id":2415,"implemented":true,"kind":"function","modifiers":[],"name":"addMerkleRoot","nameLocation":"4815:13:27","nodeType":"FunctionDefinition","parameters":{"id":2385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2384,"mutability":"mutable","name":"merkleRoot","nameLocation":"4837:10:27","nodeType":"VariableDeclaration","scope":2415,"src":"4829:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2383,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4829:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4828:20:27"},"returnParameters":{"id":2386,"nodeType":"ParameterList","parameters":[],"src":"4856:0:27"},"scope":2450,"src":"4806:289:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2448,"nodeType":"Block","src":"5157:240:27","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2425,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[2145],"referencedDeclaration":2145,"src":"5224:10:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5224:12:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2420,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"5167:24:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$384_$","typeString":"type(library ContractOwnershipStorage)"}},"id":2422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5192:6:27","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":383,"src":"5167:31:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":2423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5167:33:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":2424,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5201:22:27","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":351,"src":"5167:56:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$157_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":2427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5167:70:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2428,"nodeType":"ExpressionStatement","src":"5167:70:27"},{"condition":{"id":2432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5251:18:27","subExpression":{"baseExpression":{"id":2429,"name":"roots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"5252:5:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":2431,"indexExpression":{"id":2430,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2417,"src":"5258:10:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5252:17:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2437,"nodeType":"IfStatement","src":"5247:60:27","trueBody":{"errorCall":{"arguments":[{"id":2434,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2417,"src":"5296:10:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2433,"name":"InvalidMerkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2069,"src":"5278:17:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":2435,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5278:29:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2436,"nodeType":"RevertStatement","src":"5271:36:27"}},{"expression":{"id":2442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2438,"name":"roots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"5318:5:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":2440,"indexExpression":{"id":2439,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2417,"src":"5324:10:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5318:17:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":2441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5338:5:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5318:25:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2443,"nodeType":"ExpressionStatement","src":"5318:25:27"},{"eventCall":{"arguments":[{"id":2445,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2417,"src":"5379:10:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2444,"name":"MerkleRootDeprecated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2045,"src":"5358:20:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":2446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5358:32:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2447,"nodeType":"EmitStatement","src":"5353:37:27"}]},"functionSelector":"3572aa8d","id":2449,"implemented":true,"kind":"function","modifiers":[],"name":"deprecateMerkleRoot","nameLocation":"5110:19:27","nodeType":"FunctionDefinition","parameters":{"id":2418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2417,"mutability":"mutable","name":"merkleRoot","nameLocation":"5138:10:27","nodeType":"VariableDeclaration","scope":2449,"src":"5130:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2416,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5130:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5129:20:27"},"returnParameters":{"id":2419,"nodeType":"ParameterList","parameters":[],"src":"5157:0:27"},"scope":2450,"src":"5101:296:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":2451,"src":"1226:4173:27","usedErrors":[94,419,2065,2069,2083,2097,2103],"usedEvents":[110,2041,2045,2061]}],"src":"32:5368:27"},"id":27}},"contracts":{"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ContractOwnership":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"constructor":{"details":"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.","params":{"initialOwner":"the initial contract owner."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\",\"params\":{\"initialOwner\":\"the initial contract owner.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":\"ContractOwnership\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"constructor":{"notice":"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173."},"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ContractOwnershipBase":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":\"ContractOwnershipBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"IERC173":{"abi":[{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"contractOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0","kind":"dev","methods":{"owner()":{"returns":{"contractOwner":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC-173 Contract Ownership Standard (functions)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"contractOwner\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC-173 Contract Ownership Standard (functions)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":\"IERC173\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ContractOwnershipStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205d913d2906a5e99a607a556d5d202187ac2a3d7c278d3b3320c651c7cb75b8bb64736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D SWAP2 RETURNDATASIZE 0x29 MOD 0xA5 0xE9 SWAP11 PUSH1 0x7A SSTORE PUSH14 0x5D202187AC2A3D7C278D3B3320C6 MLOAD 0xC7 0xCB PUSH22 0xB8BB64736F6C63430008160033000000000000000000 ","sourceMap":"595:4646:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;595:4646:6;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205d913d2906a5e99a607a556d5d202187ac2a3d7c278d3b3320c651c7cb75b8bb64736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D SWAP2 RETURNDATASIZE 0x29 MOD 0xA5 0xE9 SWAP11 PUSH1 0x7A SSTORE PUSH14 0x5D202187AC2A3D7C278D3B3320C6 MLOAD 0xC7 0xCB PUSH22 0xB8BB64736F6C63430008160033000000000000000000 ","sourceMap":"595:4646:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"constructorInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsContractOwner(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsTargetContractOwner(address,address)":"infinite","isTargetContractOwner(address,address)":"infinite","layout()":"infinite","owner(struct ContractOwnershipStorage.Layout storage pointer)":"infinite","proxyInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","transferOwnership(struct ContractOwnershipStorage.Layout storage pointer,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":\"ContractOwnershipStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"InterfaceDetection":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard (immutable or proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard (immutable or proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":\"InterfaceDetection\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"supported","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"supported":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"supported\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"InterfaceDetectionStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220650411bd7e21cdd933b879336f9c786205ef70bd56990c8c2d79f38c17abe48964736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0x411BD7E21CD 0xD9 CALLER 0xB8 PUSH26 0x336F9C786205EF70BD56990C8C2D79F38C17ABE48964736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"189:1692:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;189:1692:10;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220650411bd7e21cdd933b879336f9c786205ef70bd56990c8c2d79f38c17abe48964736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0x411BD7E21CD 0xD9 CALLER 0xB8 PUSH26 0x336F9C786205EF70BD56990C8C2D79F38C17ABE48964736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"189:1692:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"layout()":"infinite","setSupportedInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)":"infinite","supportsInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":\"InterfaceDetectionStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ForwarderRegistryContext":{"abi":[{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}}},"title":"Meta-Transactions Forwarder Registry Context (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Meta-Transactions Forwarder Registry Context (immutable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":\"ForwarderRegistryContext\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x21ad59ed5a9dca82b5b1190ed399a7f664d627e3198538baedbf93f03ee49955\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ForwarderRegistryContextBase":{"abi":[],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{},"title":"Meta-Transactions Forwarder Registry Context (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Meta-Transactions Forwarder Registry Context (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":\"ForwarderRegistryContextBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"IERC2771":{"abi":[{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"isTrusted","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"isTrusted":"True if `forwarder` is trusted, false if not."}}},"title":"Secure Protocol for Native Meta Transactions.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isTrusted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"isTrusted\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Secure Protocol for Native Meta Transactions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":\"IERC2771\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"IForwarderRegistry":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"forwarder","type":"address"}],"name":"isApprovedForwarder","outputs":[{"internalType":"bool","name":"isApproved","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{"isApprovedForwarder(address,address)":{"params":{"forwarder":"The forwarder account.","sender":"The sender account."},"returns":{"isApproved":"True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise."}}},"title":"Universal Meta-Transactions Forwarder Registry.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isApprovedForwarder(address,address)":"8929a8ca"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isApprovedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isApprovedForwarder(address,address)\":{\"params\":{\"forwarder\":\"The forwarder account.\",\"sender\":\"The sender account.\"},\"returns\":{\"isApproved\":\"True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\"}}},\"title\":\"Universal Meta-Transactions Forwarder Registry.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isApprovedForwarder(address,address)\":{\"notice\":\"Checks whether an account is as an approved meta-transaction forwarder for a sender account.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":\"IForwarderRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isApprovedForwarder(address,address)":{"notice":"Checks whether an account is as an approved meta-transaction forwarder for a sender account."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ERC2771Calldata":{"abi":[],"devdoc":{"details":"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208a3e28320f75f9e1e8ec89ff61eb5ff980068ff240e213df057b9e0831cd62b764736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 RETURNDATACOPY 0x28 ORIGIN 0xF PUSH22 0xF9E1E8EC89FF61EB5FF980068FF240E213DF057B9E08 BALANCE 0xCD PUSH3 0xB76473 PUSH16 0x6C634300081600330000000000000000 ","sourceMap":"202:568:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:568:15;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208a3e28320f75f9e1e8ec89ff61eb5ff980068ff240e213df057b9e0831cd62b764736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 RETURNDATACOPY 0x28 ORIGIN 0xF PUSH22 0xF9E1E8EC89FF61EB5FF980068FF240E213DF057B9E08 BALANCE 0xCD PUSH3 0xB76473 PUSH16 0x6C634300081600330000000000000000 ","sourceMap":"202:568:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"msgData()":"infinite","msgSender()":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":\"ERC2771Calldata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ProxyInitialization":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220780e74f7f894b43c4b6ae55acf3b8c8f904e4ec48795de67c5b34d0d3bd1256364736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH25 0xE74F7F894B43C4B6AE55ACF3B8C8F904E4EC48795DE67C5B3 0x4D 0xD EXTCODESIZE 0xD1 0x25 PUSH4 0x64736F6C PUSH4 0x43000816 STOP CALLER ","sourceMap":"319:712:17:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;319:712:17;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220780e74f7f894b43c4b6ae55acf3b8c8f904e4ec48795de67c5b34d0d3bd1256364736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH25 0xE74F7F894B43C4B6AE55ACF3B8C8F904E4EC48795DE67C5B3 0x4D 0xD EXTCODESIZE 0xD1 0x25 PUSH4 0x64736F6C PUSH4 0x43000816 STOP CALLER ","sourceMap":"319:712:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"setPhase(bytes32,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Multiple calls protection for storage-modifying proxy initialization functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":\"ProxyInitialization\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Multiple calls protection for storage-modifying proxy initialization functions.","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol":{"IERC1155Mintable":{"abi":[{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeMint","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x5190c92c.","kind":"dev","methods":{"safeBatchMint(address,uint256[],uint256[],bytes)":{"details":"Reverts if `ids` and `values` have different lengths.Reverts if `to` is the zero address.Reverts if `to`'s balance overflows for one of `ids`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.Emits an {IERC1155-TransferBatch} event.","params":{"data":"Optional data to send along to a receiver contract.","ids":"Identifiers of the tokens to mint.","to":"Address of the new tokens owner.","values":"Amounts of tokens to mint."}},"safeMint(address,uint256,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if `to`'s balance of `id` overflows.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.Emits an {IERC1155-TransferSingle} event.","params":{"data":"Optional data to send along to a receiver contract.","id":"Identifier of the token to mint.","to":"Address of the new token owner.","value":"Amount of token to mint."}}},"title":"ERC1155 Multi Token Standard, optional extension: Mintable.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"safeBatchMint(address,uint256[],uint256[],bytes)":"0d6a5bbb","safeMint(address,uint256,uint256,bytes)":"5cfa9297"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x5190c92c.\",\"kind\":\"dev\",\"methods\":{\"safeBatchMint(address,uint256[],uint256[],bytes)\":{\"details\":\"Reverts if `ids` and `values` have different lengths.Reverts if `to` is the zero address.Reverts if `to`'s balance overflows for one of `ids`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.Emits an {IERC1155-TransferBatch} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"ids\":\"Identifiers of the tokens to mint.\",\"to\":\"Address of the new tokens owner.\",\"values\":\"Amounts of tokens to mint.\"}},\"safeMint(address,uint256,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `to`'s balance of `id` overflows.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.Emits an {IERC1155-TransferSingle} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"id\":\"Identifier of the token to mint.\",\"to\":\"Address of the new token owner.\",\"value\":\"Amount of token to mint.\"}}},\"title\":\"ERC1155 Multi Token Standard, optional extension: Mintable.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"safeBatchMint(address,uint256[],uint256[],bytes)\":{\"notice\":\"Safely mints a batch of tokens.\"},\"safeMint(address,uint256,uint256,bytes)\":{\"notice\":\"Safely mints some token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":\"IERC1155Mintable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\\ninterface IERC1155Mintable {\\n    /// @notice Safely mints some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely mints a batch of tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xe7b1645bd7a2745c96cece104c3ef4ef07552b5ad35b2cbbf6926f85885a409f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"safeBatchMint(address,uint256[],uint256[],bytes)":{"notice":"Safely mints a batch of tokens."},"safeMint(address,uint256,uint256,bytes)":{"notice":"Safely mints some token."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol":{"ERC20Receiver":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC20Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","kind":"dev","methods":{"onERC20Received(address,address,uint256,bytes)":{"details":"Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.","params":{"data":"Optional additional data with no specified format.","from":"The previous tokens owner.","operator":"The initiator of the safe transfer.","value":"The amount of tokens transferred."},"returns":{"magicValue":"`bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC20 Fungible Token Standard, Receiver (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC20Received(address,address,uint256,bytes)":"4fc35859","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC20Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"kind\":\"dev\",\"methods\":{\"onERC20Received(address,address,uint256,bytes)\":{\"details\":\"Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\",\"params\":{\"data\":\"Optional additional data with no specified format.\",\"from\":\"The previous tokens owner.\",\"operator\":\"The initiator of the safe transfer.\",\"value\":\"The amount of tokens transferred.\"},\"returns\":{\"magicValue\":\"`bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC20 Fungible Token Standard, Receiver (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}]},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Marks the following ERC165 interface(s) as supported: ERC20Receiver.\"},\"onERC20Received(address,address,uint256,bytes)\":{\"notice\":\"Handles the receipt of ERC20 tokens.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\":\"ERC20Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC20Receiver} from \\\"./interfaces/IERC20Receiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20Receiver is IERC20Receiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Receiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Receiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0xa251f9496fb7e6034f007615a9882f1bbb1c3b8fa79f8eacde92549a92fe9ac4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xde544cd110ba40b2e9dad7ae46d2764be54ae09028f32bb45893f64f25f9282d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}]},"kind":"user","methods":{"constructor":{"notice":"Marks the following ERC165 interface(s) as supported: ERC20Receiver."},"onERC20Received(address,address,uint256,bytes)":{"notice":"Handles the receipt of ERC20 tokens."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol":{"IERC20":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"supply","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-20Note: The ERC-165 identifier for this interface is 0x36372b07.","kind":"dev","methods":{"allowance(address,address)":{"params":{"owner":"The account that has granted an allowance to `spender`.","spender":"The account that was granted an allowance by `owner`."},"returns":{"value":"The amount which `spender` is allowed to spend on behalf of `owner`."}},"approve(address,uint256)":{"details":"Reverts if `spender` is the zero address.Emits an {Approval} event.","params":{"spender":"The account being granted the allowance by the message caller.","value":"The allowance amount to grant."},"returns":{"result":"Whether the operation succeeded."}},"balanceOf(address)":{"params":{"owner":"The account whose balance will be returned."},"returns":{"balance":"The account balance."}},"totalSupply()":{"returns":{"supply":"The total token supply."}},"transfer(address,uint256)":{"details":"Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Emits a {Transfer} event.","params":{"to":"The account to transfer the tokens to.","value":"The amount of tokens to transfer."},"returns":{"result":"Whether the operation succeeded."}},"transferFrom(address,address,uint256)":{"details":"Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Emits a {Transfer} event.Optionally emits an {Approval} event if the sender is not `from` (non-standard).","params":{"from":"The account which owns the tokens to transfer.","to":"The account to transfer the tokens to.","value":"The amount of tokens to transfer."},"returns":{"result":"Whether the operation succeeded."}}},"title":"ERC20 Token Standard, basic interface (functions).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-20Note: The ERC-165 identifier for this interface is 0x36372b07.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"owner\":\"The account that has granted an allowance to `spender`.\",\"spender\":\"The account that was granted an allowance by `owner`.\"},\"returns\":{\"value\":\"The amount which `spender` is allowed to spend on behalf of `owner`.\"}},\"approve(address,uint256)\":{\"details\":\"Reverts if `spender` is the zero address.Emits an {Approval} event.\",\"params\":{\"spender\":\"The account being granted the allowance by the message caller.\",\"value\":\"The allowance amount to grant.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The account whose balance will be returned.\"},\"returns\":{\"balance\":\"The account balance.\"}},\"totalSupply()\":{\"returns\":{\"supply\":\"The total token supply.\"}},\"transfer(address,uint256)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Emits a {Transfer} event.\",\"params\":{\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Emits a {Transfer} event.Optionally emits an {Approval} event if the sender is not `from` (non-standard).\",\"params\":{\"from\":\"The account which owns the tokens to transfer.\",\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}}},\"title\":\"ERC20 Token Standard, basic interface (functions).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"Gets the amount that an account is allowed to spend on behalf of another.\"},\"approve(address,uint256)\":{\"notice\":\"Sets the allowance to an account from the sender.Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\"},\"balanceOf(address)\":{\"notice\":\"Gets an account balance.\"},\"totalSupply()\":{\"notice\":\"Gets the total token supply.\"},\"transfer(address,uint256)\":{\"notice\":\"Transfers an amount of tokens to a recipient from the sender.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers an amount of tokens to a recipient from a specified address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC20 Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20 {\\n    /// @notice Sets the allowance to an account from the sender.\\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param spender The account being granted the allowance by the message caller.\\n    /// @param value The allowance amount to grant.\\n    /// @return result Whether the operation succeeded.\\n    function approve(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transfer(address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transferFrom(address from, address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Gets the total token supply.\\n    /// @return supply The total token supply.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice Gets an account balance.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 value);\\n}\\n\",\"keccak256\":\"0x803a0e165c5bd1d40fbcce9abae98d48d25734a1d48e9af516a121abdb8d9c2b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"allowance(address,address)":{"notice":"Gets the amount that an account is allowed to spend on behalf of another."},"approve(address,uint256)":{"notice":"Sets the allowance to an account from the sender.Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729"},"balanceOf(address)":{"notice":"Gets an account balance."},"totalSupply()":{"notice":"Gets the total token supply."},"transfer(address,uint256)":{"notice":"Transfers an amount of tokens to a recipient from the sender."},"transferFrom(address,address,uint256)":{"notice":"Transfers an amount of tokens to a recipient from a specified address."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol":{"IERC20Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC20Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x4fc35859.","kind":"dev","methods":{"onERC20Received(address,address,uint256,bytes)":{"details":"Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.","params":{"data":"Optional additional data with no specified format.","from":"The previous tokens owner.","operator":"The initiator of the safe transfer.","value":"The amount of tokens transferred."},"returns":{"magicValue":"`bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse."}}},"title":"ERC20 Token Standard, Tokens Receiver.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC20Received(address,address,uint256,bytes)":"4fc35859"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC20Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x4fc35859.\",\"kind\":\"dev\",\"methods\":{\"onERC20Received(address,address,uint256,bytes)\":{\"details\":\"Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\",\"params\":{\"data\":\"Optional additional data with no specified format.\",\"from\":\"The previous tokens owner.\",\"operator\":\"The initiator of the safe transfer.\",\"value\":\"The amount of tokens transferred.\"},\"returns\":{\"magicValue\":\"`bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\"}}},\"title\":\"ERC20 Token Standard, Tokens Receiver.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onERC20Received(address,address,uint256,bytes)\":{\"notice\":\"Handles the receipt of ERC20 tokens.\"}},\"notice\":\"Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":\"IERC20Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xde544cd110ba40b2e9dad7ae46d2764be54ae09028f32bb45893f64f25f9282d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"onERC20Received(address,address,uint256,bytes)":{"notice":"Handles the receipt of ERC20 tokens."}},"notice":"Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.","version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fd70d9dd573116182710f91bf78de265eddaf6985d94037c8a84064c8c34d2e764736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 REVERT PUSH17 0xD9DD573116182710F91BF78DE265EDDAF6 SWAP9 0x5D SWAP5 SUB PUSH29 0x8A84064C8C34D2E764736F6C6343000816003300000000000000000000 ","sourceMap":"194:9169:22:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9169:22;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fd70d9dd573116182710f91bf78de265eddaf6985d94037c8a84064c8c34d2e764736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 REVERT PUSH17 0xD9DD573116182710F91BF78DE265EDDAF6 SWAP9 0x5D SWAP5 SUB PUSH29 0x8A84064C8C34D2E764736F6C6343000816003300000000000000000000 ","sourceMap":"194:9169:22:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bbedbf053f3eab57d3c7ced2fc991486bae3d6c019082a2358a71e052ccdf16364736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB 0xED 0xBF SDIV EXTCODEHASH RETURNDATACOPY 0xAB JUMPI 0xD3 0xC7 0xCE 0xD2 0xFC SWAP10 EQ DUP7 0xBA 0xE3 0xD6 0xC0 NOT ADDMOD 0x2A 0x23 PC 0xA7 0x1E SDIV 0x2C 0xCD CALL PUSH4 0x64736F6C PUSH4 0x43000816 STOP CALLER ","sourceMap":"1420:2685:24:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1420:2685:24;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bbedbf053f3eab57d3c7ced2fc991486bae3d6c019082a2358a71e052ccdf16364736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB 0xED 0xBF SDIV EXTCODEHASH RETURNDATACOPY 0xAB JUMPI 0xD3 0xC7 0xCE 0xD2 0xFC SWAP10 EQ DUP7 0xBA 0xE3 0xD6 0xC0 NOT ADDMOD 0x2A 0x23 PC 0xA7 0x1E SDIV 0x2C 0xCD CALL PUSH4 0x64736F6C PUSH4 0x43000816 STOP CALLER ","sourceMap":"1420:2685:24:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getBytesSlot(bytes storage pointer)":"infinite","getBytesSlot(bytes32)":"infinite","getStringSlot(bytes32)":"infinite","getStringSlot(string storage pointer)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"MerkleProof":{"abi":[],"devdoc":{"details":"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ebc5818d3186497a28bd33c9156a5406154bf0f880ffb4a0401354b76f07d1a164736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEB 0xC5 DUP2 DUP14 BALANCE DUP7 0x49 PUSH27 0x28BD33C9156A5406154BF0F880FFB4A0401354B76F07D1A164736F PUSH13 0x63430008160033000000000000 ","sourceMap":"802:8819:25:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;802:8819:25;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ebc5818d3186497a28bd33c9156a5406154bf0f880ffb4a0401354b76f07d1a164736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEB 0xC5 DUP2 DUP14 BALANCE DUP7 0x49 PUSH27 0x28BD33C9156A5406154BF0F880FFB4A0401354B76F07D1A164736F PUSH13 0x63430008160033000000000000 ","sourceMap":"802:8819:25:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_efficientHash(bytes32,bytes32)":"infinite","_hashPair(bytes32,bytes32)":"infinite","multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory)":"infinite","multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory)":"infinite","processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory)":"infinite","processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory)":"infinite","processProof(bytes32[] memory,bytes32)":"infinite","processProofCalldata(bytes32[] calldata,bytes32)":"infinite","verify(bytes32[] memory,bytes32,bytes32)":"infinite","verifyCalldata(bytes32[] calldata,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf688741f79f4838d5301dcf72d0af9eff11bbab6ab0bb112ad144c7fb672dac\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/mocks/ChaosKingdomResourcesClaimMock.sol":{"ChaosKingdomResourcesClaimMock":{"abi":[{"inputs":[{"internalType":"contract IERC20","name":"feeContract_","type":"address"},{"internalType":"contract IERC1155Mintable","name":"rewardContract_","type":"address"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"uint256","name":"fee","type":"uint256"},{"internalType":"bytes32","name":"epochId","type":"bytes32"}],"name":"AlreadyClaimed","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"expectedContract","type":"address"}],"name":"FeeContractMismatch","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"name":"InvalidMerkleRoot","type":"error"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"uint256","name":"fee","type":"uint256"},{"internalType":"bytes32","name":"epochId","type":"bytes32"}],"name":"InvalidProof","type":"error"},{"inputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"name":"MerkleRootAlreadyExists","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"root","type":"bytes32"}],"name":"MerkleRootAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"root","type":"bytes32"}],"name":"MerkleRootDeprecated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"root","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"epochId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"fee","type":"uint256"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"PayoutClaimed","type":"event"},{"inputs":[],"name":"FEE_CONTRACT","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_CONTRACT","outputs":[{"internalType":"contract IERC1155Mintable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"__msgData","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"name":"addMerkleRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes","name":"claimData","type":"bytes"},{"internalType":"uint256","name":"fee","type":"uint256"}],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"claimed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"name":"deprecateMerkleRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC20Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"roots","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"onERC20Received(address,address,uint256,bytes)":{"details":"Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.","params":{"data":"Optional additional data with no specified format.","from":"The previous tokens owner.","operator":"The initiator of the safe transfer.","value":"The amount of tokens transferred."},"returns":{"magicValue":"`bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1975":{"entryPoint":null,"id":1975,"parameterSlots":3,"returnSlots":0},"@_2131":{"entryPoint":null,"id":2131,"parameterSlots":3,"returnSlots":0},"@_31":{"entryPoint":null,"id":31,"parameterSlots":1,"returnSlots":0},"@_555":{"entryPoint":null,"id":555,"parameterSlots":1,"returnSlots":0},"@_602":{"entryPoint":null,"id":602,"parameterSlots":1,"returnSlots":0},"@_876":{"entryPoint":null,"id":876,"parameterSlots":0,"returnSlots":0},"@constructorInit_227":{"entryPoint":203,"id":227,"parameterSlots":2,"returnSlots":0},"@layout_383":{"entryPoint":149,"id":383,"parameterSlots":0,"returnSlots":1},"@layout_531":{"entryPoint":318,"id":531,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_485":{"entryPoint":366,"id":485,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_contract$_IERC20_$937t_contract$_IERC1155Mintable_$842t_contract$_IForwarderRegistry_$727_fromMemory":{"entryPoint":484,"id":null,"parameterSlots":2,"returnSlots":3},"checked_sub_t_uint256":{"entryPoint":568,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_contract_IERC20":{"entryPoint":459,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:997:28","nodeType":"YulBlock","src":"0:997:28","statements":[{"nativeSrc":"6:3:28","nodeType":"YulBlock","src":"6:3:28","statements":[]},{"body":{"nativeSrc":"67:86:28","nodeType":"YulBlock","src":"67:86:28","statements":[{"body":{"nativeSrc":"131:16:28","nodeType":"YulBlock","src":"131:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"140:1:28","nodeType":"YulLiteral","src":"140:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"143:1:28","nodeType":"YulLiteral","src":"143:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"133:6:28","nodeType":"YulIdentifier","src":"133:6:28"},"nativeSrc":"133:12:28","nodeType":"YulFunctionCall","src":"133:12:28"},"nativeSrc":"133:12:28","nodeType":"YulExpressionStatement","src":"133:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"90:5:28","nodeType":"YulIdentifier","src":"90:5:28"},{"arguments":[{"name":"value","nativeSrc":"101:5:28","nodeType":"YulIdentifier","src":"101:5:28"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"116:3:28","nodeType":"YulLiteral","src":"116:3:28","type":"","value":"160"},{"kind":"number","nativeSrc":"121:1:28","nodeType":"YulLiteral","src":"121:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"112:3:28","nodeType":"YulIdentifier","src":"112:3:28"},"nativeSrc":"112:11:28","nodeType":"YulFunctionCall","src":"112:11:28"},{"kind":"number","nativeSrc":"125:1:28","nodeType":"YulLiteral","src":"125:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"108:3:28","nodeType":"YulIdentifier","src":"108:3:28"},"nativeSrc":"108:19:28","nodeType":"YulFunctionCall","src":"108:19:28"}],"functionName":{"name":"and","nativeSrc":"97:3:28","nodeType":"YulIdentifier","src":"97:3:28"},"nativeSrc":"97:31:28","nodeType":"YulFunctionCall","src":"97:31:28"}],"functionName":{"name":"eq","nativeSrc":"87:2:28","nodeType":"YulIdentifier","src":"87:2:28"},"nativeSrc":"87:42:28","nodeType":"YulFunctionCall","src":"87:42:28"}],"functionName":{"name":"iszero","nativeSrc":"80:6:28","nodeType":"YulIdentifier","src":"80:6:28"},"nativeSrc":"80:50:28","nodeType":"YulFunctionCall","src":"80:50:28"},"nativeSrc":"77:70:28","nodeType":"YulIf","src":"77:70:28"}]},"name":"validator_revert_contract_IERC20","nativeSrc":"14:139:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"56:5:28","nodeType":"YulTypedName","src":"56:5:28","type":""}],"src":"14:139:28"},{"body":{"nativeSrc":"337:428:28","nodeType":"YulBlock","src":"337:428:28","statements":[{"body":{"nativeSrc":"383:16:28","nodeType":"YulBlock","src":"383:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"392:1:28","nodeType":"YulLiteral","src":"392:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"395:1:28","nodeType":"YulLiteral","src":"395:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"385:6:28","nodeType":"YulIdentifier","src":"385:6:28"},"nativeSrc":"385:12:28","nodeType":"YulFunctionCall","src":"385:12:28"},"nativeSrc":"385:12:28","nodeType":"YulExpressionStatement","src":"385:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"358:7:28","nodeType":"YulIdentifier","src":"358:7:28"},{"name":"headStart","nativeSrc":"367:9:28","nodeType":"YulIdentifier","src":"367:9:28"}],"functionName":{"name":"sub","nativeSrc":"354:3:28","nodeType":"YulIdentifier","src":"354:3:28"},"nativeSrc":"354:23:28","nodeType":"YulFunctionCall","src":"354:23:28"},{"kind":"number","nativeSrc":"379:2:28","nodeType":"YulLiteral","src":"379:2:28","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"350:3:28","nodeType":"YulIdentifier","src":"350:3:28"},"nativeSrc":"350:32:28","nodeType":"YulFunctionCall","src":"350:32:28"},"nativeSrc":"347:52:28","nodeType":"YulIf","src":"347:52:28"},{"nativeSrc":"408:29:28","nodeType":"YulVariableDeclaration","src":"408:29:28","value":{"arguments":[{"name":"headStart","nativeSrc":"427:9:28","nodeType":"YulIdentifier","src":"427:9:28"}],"functionName":{"name":"mload","nativeSrc":"421:5:28","nodeType":"YulIdentifier","src":"421:5:28"},"nativeSrc":"421:16:28","nodeType":"YulFunctionCall","src":"421:16:28"},"variables":[{"name":"value","nativeSrc":"412:5:28","nodeType":"YulTypedName","src":"412:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"479:5:28","nodeType":"YulIdentifier","src":"479:5:28"}],"functionName":{"name":"validator_revert_contract_IERC20","nativeSrc":"446:32:28","nodeType":"YulIdentifier","src":"446:32:28"},"nativeSrc":"446:39:28","nodeType":"YulFunctionCall","src":"446:39:28"},"nativeSrc":"446:39:28","nodeType":"YulExpressionStatement","src":"446:39:28"},{"nativeSrc":"494:15:28","nodeType":"YulAssignment","src":"494:15:28","value":{"name":"value","nativeSrc":"504:5:28","nodeType":"YulIdentifier","src":"504:5:28"},"variableNames":[{"name":"value0","nativeSrc":"494:6:28","nodeType":"YulIdentifier","src":"494:6:28"}]},{"nativeSrc":"518:40:28","nodeType":"YulVariableDeclaration","src":"518:40:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"543:9:28","nodeType":"YulIdentifier","src":"543:9:28"},{"kind":"number","nativeSrc":"554:2:28","nodeType":"YulLiteral","src":"554:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"539:3:28","nodeType":"YulIdentifier","src":"539:3:28"},"nativeSrc":"539:18:28","nodeType":"YulFunctionCall","src":"539:18:28"}],"functionName":{"name":"mload","nativeSrc":"533:5:28","nodeType":"YulIdentifier","src":"533:5:28"},"nativeSrc":"533:25:28","nodeType":"YulFunctionCall","src":"533:25:28"},"variables":[{"name":"value_1","nativeSrc":"522:7:28","nodeType":"YulTypedName","src":"522:7:28","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"600:7:28","nodeType":"YulIdentifier","src":"600:7:28"}],"functionName":{"name":"validator_revert_contract_IERC20","nativeSrc":"567:32:28","nodeType":"YulIdentifier","src":"567:32:28"},"nativeSrc":"567:41:28","nodeType":"YulFunctionCall","src":"567:41:28"},"nativeSrc":"567:41:28","nodeType":"YulExpressionStatement","src":"567:41:28"},{"nativeSrc":"617:17:28","nodeType":"YulAssignment","src":"617:17:28","value":{"name":"value_1","nativeSrc":"627:7:28","nodeType":"YulIdentifier","src":"627:7:28"},"variableNames":[{"name":"value1","nativeSrc":"617:6:28","nodeType":"YulIdentifier","src":"617:6:28"}]},{"nativeSrc":"643:40:28","nodeType":"YulVariableDeclaration","src":"643:40:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"668:9:28","nodeType":"YulIdentifier","src":"668:9:28"},{"kind":"number","nativeSrc":"679:2:28","nodeType":"YulLiteral","src":"679:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"664:3:28","nodeType":"YulIdentifier","src":"664:3:28"},"nativeSrc":"664:18:28","nodeType":"YulFunctionCall","src":"664:18:28"}],"functionName":{"name":"mload","nativeSrc":"658:5:28","nodeType":"YulIdentifier","src":"658:5:28"},"nativeSrc":"658:25:28","nodeType":"YulFunctionCall","src":"658:25:28"},"variables":[{"name":"value_2","nativeSrc":"647:7:28","nodeType":"YulTypedName","src":"647:7:28","type":""}]},{"expression":{"arguments":[{"name":"value_2","nativeSrc":"725:7:28","nodeType":"YulIdentifier","src":"725:7:28"}],"functionName":{"name":"validator_revert_contract_IERC20","nativeSrc":"692:32:28","nodeType":"YulIdentifier","src":"692:32:28"},"nativeSrc":"692:41:28","nodeType":"YulFunctionCall","src":"692:41:28"},"nativeSrc":"692:41:28","nodeType":"YulExpressionStatement","src":"692:41:28"},{"nativeSrc":"742:17:28","nodeType":"YulAssignment","src":"742:17:28","value":{"name":"value_2","nativeSrc":"752:7:28","nodeType":"YulIdentifier","src":"752:7:28"},"variableNames":[{"name":"value2","nativeSrc":"742:6:28","nodeType":"YulIdentifier","src":"742:6:28"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20_$937t_contract$_IERC1155Mintable_$842t_contract$_IForwarderRegistry_$727_fromMemory","nativeSrc":"158:607:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"287:9:28","nodeType":"YulTypedName","src":"287:9:28","type":""},{"name":"dataEnd","nativeSrc":"298:7:28","nodeType":"YulTypedName","src":"298:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"310:6:28","nodeType":"YulTypedName","src":"310:6:28","type":""},{"name":"value1","nativeSrc":"318:6:28","nodeType":"YulTypedName","src":"318:6:28","type":""},{"name":"value2","nativeSrc":"326:6:28","nodeType":"YulTypedName","src":"326:6:28","type":""}],"src":"158:607:28"},{"body":{"nativeSrc":"819:176:28","nodeType":"YulBlock","src":"819:176:28","statements":[{"nativeSrc":"829:17:28","nodeType":"YulAssignment","src":"829:17:28","value":{"arguments":[{"name":"x","nativeSrc":"841:1:28","nodeType":"YulIdentifier","src":"841:1:28"},{"name":"y","nativeSrc":"844:1:28","nodeType":"YulIdentifier","src":"844:1:28"}],"functionName":{"name":"sub","nativeSrc":"837:3:28","nodeType":"YulIdentifier","src":"837:3:28"},"nativeSrc":"837:9:28","nodeType":"YulFunctionCall","src":"837:9:28"},"variableNames":[{"name":"diff","nativeSrc":"829:4:28","nodeType":"YulIdentifier","src":"829:4:28"}]},{"body":{"nativeSrc":"878:111:28","nodeType":"YulBlock","src":"878:111:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"899:1:28","nodeType":"YulLiteral","src":"899:1:28","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"906:3:28","nodeType":"YulLiteral","src":"906:3:28","type":"","value":"224"},{"kind":"number","nativeSrc":"911:10:28","nodeType":"YulLiteral","src":"911:10:28","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"902:3:28","nodeType":"YulIdentifier","src":"902:3:28"},"nativeSrc":"902:20:28","nodeType":"YulFunctionCall","src":"902:20:28"}],"functionName":{"name":"mstore","nativeSrc":"892:6:28","nodeType":"YulIdentifier","src":"892:6:28"},"nativeSrc":"892:31:28","nodeType":"YulFunctionCall","src":"892:31:28"},"nativeSrc":"892:31:28","nodeType":"YulExpressionStatement","src":"892:31:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"943:1:28","nodeType":"YulLiteral","src":"943:1:28","type":"","value":"4"},{"kind":"number","nativeSrc":"946:4:28","nodeType":"YulLiteral","src":"946:4:28","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"936:6:28","nodeType":"YulIdentifier","src":"936:6:28"},"nativeSrc":"936:15:28","nodeType":"YulFunctionCall","src":"936:15:28"},"nativeSrc":"936:15:28","nodeType":"YulExpressionStatement","src":"936:15:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"971:1:28","nodeType":"YulLiteral","src":"971:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"974:4:28","nodeType":"YulLiteral","src":"974:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"964:6:28","nodeType":"YulIdentifier","src":"964:6:28"},"nativeSrc":"964:15:28","nodeType":"YulFunctionCall","src":"964:15:28"},"nativeSrc":"964:15:28","nodeType":"YulExpressionStatement","src":"964:15:28"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"861:4:28","nodeType":"YulIdentifier","src":"861:4:28"},{"name":"x","nativeSrc":"867:1:28","nodeType":"YulIdentifier","src":"867:1:28"}],"functionName":{"name":"gt","nativeSrc":"858:2:28","nodeType":"YulIdentifier","src":"858:2:28"},"nativeSrc":"858:11:28","nodeType":"YulFunctionCall","src":"858:11:28"},"nativeSrc":"855:134:28","nodeType":"YulIf","src":"855:134:28"}]},"name":"checked_sub_t_uint256","nativeSrc":"770:225:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"801:1:28","nodeType":"YulTypedName","src":"801:1:28","type":""},{"name":"y","nativeSrc":"804:1:28","nodeType":"YulTypedName","src":"804:1:28","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"810:4:28","nodeType":"YulTypedName","src":"810:4:28","type":""}],"src":"770:225:28"}]},"contents":"{\n    { }\n    function validator_revert_contract_IERC20(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$937t_contract$_IERC1155Mintable_$842t_contract$_IForwarderRegistry_$727_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_IERC20(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_contract_IERC20(value_1)\n        value1 := value_1\n        let value_2 := mload(add(headStart, 64))\n        validator_revert_contract_IERC20(value_2)\n        value2 := value_2\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":28,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60e06040523480156200001157600080fd5b506040516200199f3803806200199f8339810160408190526200003491620001e4565b82828280803362000050816200004962000095565b90620000cb565b5062000071634fc3585960e01b6001620000696200013e565b91906200016e565b6001600160a01b0390811660805293841660c05250501660a052506200025a915050565b600080620000c560017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd62000238565b92915050565b6001600160a01b03811615620001225781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b6200013a6307f5828d60e41b6001620000696200013e565b5050565b600080620000c560017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e62000238565b600160e01b6001600160e01b03198316016200019d576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6001600160a01b0381168114620001e157600080fd5b50565b600080600060608486031215620001fa57600080fd5b83516200020781620001cb565b60208501519093506200021a81620001cb565b60408501519092506200022d81620001cb565b809150509250925092565b81810381811115620000c557634e487b7160e01b600052601160045260246000fd5b60805160a05160c0516116cf620002d06000396000818161011c015281816104a30152818161052101526106a00152600081816101cc015281816105a0015261074d0152600081816101650152818161024201528181610d0f01528181610d4d01528181610e850152610f0d01526116cf6000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80634fc358591161008c5780638da5cb5b116100665780638da5cb5b14610292578063ae6dead71461029a578063cc3c0f06146102bd578063f2fde38b146102e057600080fd5b80634fc35859146101ee578063572b6c05146102325780638bd8d0a91461027f57600080fd5b806331e66e1e116100c857806331e66e1e146101895780633323c8071461019f5780633572aa8d146101b45780633a5af339146101c757600080fd5b806301ffc9a7146100ef5780631352acac146101175780632b4c9f1614610163575b600080fd5b6101026100fd366004611045565b6102f3565b60405190151581526020015b60405180910390f35b61013e7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161010e565b7f000000000000000000000000000000000000000000000000000000000000000061013e565b61019161030d565b60405161010e929190611087565b6101b26101ad3660046110d4565b610320565b005b6101b26101c23660046110d4565b6103eb565b61013e7f000000000000000000000000000000000000000000000000000000000000000081565b6102016101fc36600461115f565b61049f565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200161010e565b6101026102403660046111ce565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6101b261028d3660046111e9565b610639565b61013e6107c0565b6101026102a83660046110d4565b60006020819052908152604090205460ff1681565b6101026102cb3660046110d4565b60016020526000908152604090205460ff1681565b6101b26102ee3660046111ce565b6107ec565b60006103078261030161080a565b90610838565b92915050565b366000610318610912565b915091509091565b61033961032b61091d565b610333610927565b90610955565b60008181526020819052604090205460ff161561038a576040517f5d35de37000000000000000000000000000000000000000000000000000000008152600481018290526024015b60405180910390fd5b60008181526020819052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555182917fbdd203dd78bf49cf79e4db0ecdf7d27adc380fb1f33beef2667a50db9d2a0e0491a250565b6103f661032b61091d565b60008181526020819052604090205460ff16610441576040517f6d82574300000000000000000000000000000000000000000000000000000000815260048101829052602401610381565b60008181526020819052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555182917f578eab65d47cffa57066b105301289ff86bfdc0adc2a701c3356d2a6eb6a612391a250565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331461054e576040517f6c50e90500000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166024820152604401610381565b8360008061055e888787866109c4565b6040517f0d6a5bbb000000000000000000000000000000000000000000000000000000008152919350915073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690630d6a5bbb906105d9908b908690869060040161127f565b600060405180830381600087803b1580156105f357600080fd5b505af1158015610607573d6000803e3d6000fd5b507f4fc35859000000000000000000000000000000000000000000000000000000009c9b505050505050505050505050565b600080610648868686866109c4565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152306024830152604482018790529294509092507f0000000000000000000000000000000000000000000000000000000000000000909116906323b872dd906064016020604051808303816000875af11580156106eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070f91906112dc565b506040517f0d6a5bbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690630d6a5bbb906107869089908690869060040161127f565b600060405180830381600087803b1580156107a057600080fd5b505af11580156107b4573d6000803e3d6000fd5b50505050505050505050565b60006107e76107cd610927565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b6108076107f761091d565b82610800610927565b9190610bc3565b50565b60008061030760017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6112fe565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161088857506000610307565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016108d957506001610307565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b366000610318610cd8565b60006107e7610e42565b60008061030760017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd6112fe565b815473ffffffffffffffffffffffffffffffffffffffff8281169116146109c0576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610381565b5050565b6060806000808080806109d9898b018b611449565b6000858152602081905260409020549499509297509095509350915060ff16610a31576040517f6d82574300000000000000000000000000000000000000000000000000000000815260048101869052602401610381565b60008b83838b88604051602001610a4c959493929190611561565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000818152600190935291205490915060ff1615610ad6578b83838b886040517ff048f37a0000000000000000000000000000000000000000000000000000000081526004016103819594939291906115b5565b610ae1848783610f89565b610b21578b83838b886040517fdbf2ac7c0000000000000000000000000000000000000000000000000000000081526004016103819594939291906115b5565b60008181526001602081905260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690911790555173ffffffffffffffffffffffffffffffffffffffff8d1690869088907fbf561a0ae8123352abf33f8f113e6b265c2e7fe7ba9b4d450750454bcbb7233a90610baa908e908990899061160b565b60405180910390a450909a909950975050505050505050565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610c30576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610381565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610cd25783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b36600033321480610ce95750601836105b15610cf75750600091369150565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480610e2c575073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016638929a8ca367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec013560601c6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152336024820152604401602060405180830381865afa158015610e08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2c91906112dc565b15610e3957610318610f9f565b50600091369150565b600033321480610e525750601836105b15610e5c57503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480610f7857506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa158015610f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7891906112dc565b15610f8257919050565b3391505090565b600082610f968584610fd0565b14949350505050565b3660006103187fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec8301828481611640565b600081815b845181101561100b5761100182868381518110610ff457610ff461166a565b6020026020010151611013565b9150600101610fd5565b509392505050565b600081831061102f57600082815260208490526040902061103e565b60008381526020839052604090205b9392505050565b60006020828403121561105757600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461103e57600080fd5b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b6000602082840312156110e657600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461111157600080fd5b919050565b60008083601f84011261112857600080fd5b50813567ffffffffffffffff81111561114057600080fd5b60208301915083602082850101111561115857600080fd5b9250929050565b60008060008060006080868803121561117757600080fd5b611180866110ed565b945061118e602087016110ed565b935060408601359250606086013567ffffffffffffffff8111156111b157600080fd5b6111bd88828901611116565b969995985093965092949392505050565b6000602082840312156111e057600080fd5b61103e826110ed565b600080600080606085870312156111ff57600080fd5b611208856110ed565b9350602085013567ffffffffffffffff81111561122457600080fd5b61123087828801611116565b9598909750949560400135949350505050565b60008151808452602080850194506020840160005b8381101561127457815187529582019590820190600101611258565b509495945050505050565b73ffffffffffffffffffffffffffffffffffffffff841681526080602082015260006112ae6080830185611243565b82810360408401526112c08185611243565b8381036060909401939093525050600081526020019392505050565b6000602082840312156112ee57600080fd5b8151801515811461103e57600080fd5b81810381811115610307577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156113ae576113ae611338565b604052919050565b600067ffffffffffffffff8211156113d0576113d0611338565b5060051b60200190565b600082601f8301126113eb57600080fd5b813560206114006113fb836113b6565b611367565b8083825260208201915060208460051b87010193508684111561142257600080fd5b602086015b8481101561143e5780358352918301918301611427565b509695505050505050565b600080600080600060a0868803121561146157600080fd5b853594506020808701359450604087013567ffffffffffffffff8082111561148857600080fd5b818901915089601f83011261149c57600080fd5b81356114aa6113fb826113b6565b81815260059190911b8301840190848101908c8311156114c957600080fd5b938501935b828510156114e7578435825293850193908501906114ce565b9750505060608901359250808311156114ff57600080fd5b61150b8a848b016113da565b9450608089013592508083111561152157600080fd5b505061152f888289016113da565b9150509295509295909350565b8051600090602080840183831561127457815187529582019590820190600101611258565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008660601b16815260006115a161159b601484018861153c565b8661153c565b938452505060208201526040019392505050565b73ffffffffffffffffffffffffffffffffffffffff8616815260a0602082015260006115e460a0830187611243565b82810360408401526115f68187611243565b60608401959095525050608001529392505050565b8381526060602082015260006116246060830185611243565b82810360408401526116368185611243565b9695505050505050565b6000808585111561165057600080fd5b8386111561165d57600080fd5b5050820193919092039150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220196e98a98f89c1906ce2600841a3ba3675307e0fd0ec9a2799f962a6b52356f164736f6c63430008160033","opcodes":"PUSH1 0xE0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x199F CODESIZE SUB DUP1 PUSH3 0x199F DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1E4 JUMP JUMPDEST DUP3 DUP3 DUP3 DUP1 DUP1 CALLER PUSH3 0x50 DUP2 PUSH3 0x49 PUSH3 0x95 JUMP JUMPDEST SWAP1 PUSH3 0xCB JUMP JUMPDEST POP PUSH3 0x71 PUSH4 0x4FC35859 PUSH1 0xE0 SHL PUSH1 0x1 PUSH3 0x69 PUSH3 0x13E JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x16E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x80 MSTORE SWAP4 DUP5 AND PUSH1 0xC0 MSTORE POP POP AND PUSH1 0xA0 MSTORE POP PUSH3 0x25A SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xC5 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x238 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x122 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x13A PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x69 PUSH3 0x13E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xC5 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x238 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x19D JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x1E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x1FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD PUSH3 0x207 DUP2 PUSH3 0x1CB JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH3 0x21A DUP2 PUSH3 0x1CB JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x22D DUP2 PUSH3 0x1CB JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0xC5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH2 0x16CF PUSH3 0x2D0 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x11C ADD MSTORE DUP2 DUP2 PUSH2 0x4A3 ADD MSTORE DUP2 DUP2 PUSH2 0x521 ADD MSTORE PUSH2 0x6A0 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x1CC ADD MSTORE DUP2 DUP2 PUSH2 0x5A0 ADD MSTORE PUSH2 0x74D ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x165 ADD MSTORE DUP2 DUP2 PUSH2 0x242 ADD MSTORE DUP2 DUP2 PUSH2 0xD0F ADD MSTORE DUP2 DUP2 PUSH2 0xD4D ADD MSTORE DUP2 DUP2 PUSH2 0xE85 ADD MSTORE PUSH2 0xF0D ADD MSTORE PUSH2 0x16CF PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4FC35859 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x292 JUMPI DUP1 PUSH4 0xAE6DEAD7 EQ PUSH2 0x29A JUMPI DUP1 PUSH4 0xCC3C0F06 EQ PUSH2 0x2BD JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4FC35859 EQ PUSH2 0x1EE JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x232 JUMPI DUP1 PUSH4 0x8BD8D0A9 EQ PUSH2 0x27F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x31E66E1E GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x31E66E1E EQ PUSH2 0x189 JUMPI DUP1 PUSH4 0x3323C807 EQ PUSH2 0x19F JUMPI DUP1 PUSH4 0x3572AA8D EQ PUSH2 0x1B4 JUMPI DUP1 PUSH4 0x3A5AF339 EQ PUSH2 0x1C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x1352ACAC EQ PUSH2 0x117 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x163 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x102 PUSH2 0xFD CALLDATASIZE PUSH1 0x4 PUSH2 0x1045 JUMP JUMPDEST PUSH2 0x2F3 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13E PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10E JUMP JUMPDEST PUSH32 0x0 PUSH2 0x13E JUMP JUMPDEST PUSH2 0x191 PUSH2 0x30D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10E SWAP3 SWAP2 SWAP1 PUSH2 0x1087 JUMP JUMPDEST PUSH2 0x1B2 PUSH2 0x1AD CALLDATASIZE PUSH1 0x4 PUSH2 0x10D4 JUMP JUMPDEST PUSH2 0x320 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B2 PUSH2 0x1C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x10D4 JUMP JUMPDEST PUSH2 0x3EB JUMP JUMPDEST PUSH2 0x13E PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x201 PUSH2 0x1FC CALLDATASIZE PUSH1 0x4 PUSH2 0x115F JUMP JUMPDEST PUSH2 0x49F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10E JUMP JUMPDEST PUSH2 0x102 PUSH2 0x240 CALLDATASIZE PUSH1 0x4 PUSH2 0x11CE JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x1B2 PUSH2 0x28D CALLDATASIZE PUSH1 0x4 PUSH2 0x11E9 JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST PUSH2 0x13E PUSH2 0x7C0 JUMP JUMPDEST PUSH2 0x102 PUSH2 0x2A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x10D4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x102 PUSH2 0x2CB CALLDATASIZE PUSH1 0x4 PUSH2 0x10D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x1B2 PUSH2 0x2EE CALLDATASIZE PUSH1 0x4 PUSH2 0x11CE JUMP JUMPDEST PUSH2 0x7EC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x307 DUP3 PUSH2 0x301 PUSH2 0x80A JUMP JUMPDEST SWAP1 PUSH2 0x838 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x318 PUSH2 0x912 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH2 0x339 PUSH2 0x32B PUSH2 0x91D JUMP JUMPDEST PUSH2 0x333 PUSH2 0x927 JUMP JUMPDEST SWAP1 PUSH2 0x955 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x38A JUMPI PUSH1 0x40 MLOAD PUSH32 0x5D35DE3700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD DUP3 SWAP2 PUSH32 0xBDD203DD78BF49CF79E4DB0ECDF7D27ADC380FB1F33BEEF2667A50DB9D2A0E04 SWAP2 LOG2 POP JUMP JUMPDEST PUSH2 0x3F6 PUSH2 0x32B PUSH2 0x91D JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x441 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6D82574300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x381 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE MLOAD DUP3 SWAP2 PUSH32 0x578EAB65D47CFFA57066B105301289FF86BFDC0ADC2A701C3356D2A6EB6A6123 SWAP2 LOG2 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x54E JUMPI PUSH1 0x40 MLOAD PUSH32 0x6C50E90500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x381 JUMP JUMPDEST DUP4 PUSH1 0x0 DUP1 PUSH2 0x55E DUP9 DUP8 DUP8 DUP7 PUSH2 0x9C4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xD6A5BBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 SWAP4 POP SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xD6A5BBB SWAP1 PUSH2 0x5D9 SWAP1 DUP12 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x127F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x607 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH32 0x4FC3585900000000000000000000000000000000000000000000000000000000 SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x648 DUP7 DUP7 DUP7 DUP7 PUSH2 0x9C4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE ADDRESS PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP8 SWAP1 MSTORE SWAP3 SWAP5 POP SWAP1 SWAP3 POP PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6EB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x70F SWAP2 SWAP1 PUSH2 0x12DC JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0xD6A5BBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xD6A5BBB SWAP1 PUSH2 0x786 SWAP1 DUP10 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x127F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7B4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E7 PUSH2 0x7CD PUSH2 0x927 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x807 PUSH2 0x7F7 PUSH2 0x91D JUMP JUMPDEST DUP3 PUSH2 0x800 PUSH2 0x927 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xBC3 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x307 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x12FE JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x888 JUMPI POP PUSH1 0x0 PUSH2 0x307 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x8D9 JUMPI POP PUSH1 0x1 PUSH2 0x307 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x318 PUSH2 0xCD8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E7 PUSH2 0xE42 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x307 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x12FE JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x9C0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x381 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 PUSH2 0x9D9 DUP10 DUP12 ADD DUP12 PUSH2 0x1449 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP5 SWAP10 POP SWAP3 SWAP8 POP SWAP1 SWAP6 POP SWAP4 POP SWAP2 POP PUSH1 0xFF AND PUSH2 0xA31 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6D82574300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x381 JUMP JUMPDEST PUSH1 0x0 DUP12 DUP4 DUP4 DUP12 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xA4C SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1561 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP4 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0xAD6 JUMPI DUP12 DUP4 DUP4 DUP12 DUP9 PUSH1 0x40 MLOAD PUSH32 0xF048F37A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x381 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x15B5 JUMP JUMPDEST PUSH2 0xAE1 DUP5 DUP8 DUP4 PUSH2 0xF89 JUMP JUMPDEST PUSH2 0xB21 JUMPI DUP12 DUP4 DUP4 DUP12 DUP9 PUSH1 0x40 MLOAD PUSH32 0xDBF2AC7C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x381 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x15B5 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SWAP2 OR SWAP1 SSTORE MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP14 AND SWAP1 DUP7 SWAP1 DUP9 SWAP1 PUSH32 0xBF561A0AE8123352ABF33F8F113E6B265C2E7FE7BA9B4D450750454BCBB7233A SWAP1 PUSH2 0xBAA SWAP1 DUP15 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH2 0x160B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP SWAP1 SWAP11 SWAP1 SWAP10 POP SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xC30 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x381 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCD2 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xCE9 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xCF7 JUMPI POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0xE2C JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0x8929A8CA CALLDATASIZE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC ADD CALLDATALOAD PUSH1 0x60 SHR PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE08 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE2C SWAP2 SWAP1 PUSH2 0x12DC JUMP JUMPDEST ISZERO PUSH2 0xE39 JUMPI PUSH2 0x318 PUSH2 0xF9F JUMP JUMPDEST POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xE52 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xE5C JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xF78 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF54 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF78 SWAP2 SWAP1 PUSH2 0x12DC JUMP JUMPDEST ISZERO PUSH2 0xF82 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xF96 DUP6 DUP5 PUSH2 0xFD0 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x318 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC DUP4 ADD DUP3 DUP5 DUP2 PUSH2 0x1640 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x100B JUMPI PUSH2 0x1001 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xFF4 JUMPI PUSH2 0xFF4 PUSH2 0x166A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1013 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0xFD5 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x102F JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x103E JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1057 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x103E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1111 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1128 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1140 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1158 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1180 DUP7 PUSH2 0x10ED JUMP JUMPDEST SWAP5 POP PUSH2 0x118E PUSH1 0x20 DUP8 ADD PUSH2 0x10ED JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x11B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11BD DUP9 DUP3 DUP10 ADD PUSH2 0x1116 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x103E DUP3 PUSH2 0x10ED JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x11FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1208 DUP6 PUSH2 0x10ED JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1224 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1230 DUP8 DUP3 DUP9 ADD PUSH2 0x1116 JUMP JUMPDEST SWAP6 SWAP9 SWAP1 SWAP8 POP SWAP5 SWAP6 PUSH1 0x40 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1274 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1258 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x12AE PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x1243 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x12C0 DUP2 DUP6 PUSH2 0x1243 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x60 SWAP1 SWAP5 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x103E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x307 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x13AE JUMPI PUSH2 0x13AE PUSH2 0x1338 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x13D0 JUMPI PUSH2 0x13D0 PUSH2 0x1338 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x13EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x1400 PUSH2 0x13FB DUP4 PUSH2 0x13B6 JUMP JUMPDEST PUSH2 0x1367 JUMP JUMPDEST DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP5 PUSH1 0x5 SHL DUP8 ADD ADD SWAP4 POP DUP7 DUP5 GT ISZERO PUSH2 0x1422 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x143E JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x1427 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1461 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP1 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1488 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP10 ADD SWAP2 POP DUP10 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x149C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x14AA PUSH2 0x13FB DUP3 PUSH2 0x13B6 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP4 ADD DUP5 ADD SWAP1 DUP5 DUP2 ADD SWAP1 DUP13 DUP4 GT ISZERO PUSH2 0x14C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x14E7 JUMPI DUP5 CALLDATALOAD DUP3 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP1 DUP6 ADD SWAP1 PUSH2 0x14CE JUMP JUMPDEST SWAP8 POP POP POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP3 POP DUP1 DUP4 GT ISZERO PUSH2 0x14FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x150B DUP11 DUP5 DUP12 ADD PUSH2 0x13DA JUMP JUMPDEST SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD SWAP3 POP DUP1 DUP4 GT ISZERO PUSH2 0x1521 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH2 0x152F DUP9 DUP3 DUP10 ADD PUSH2 0x13DA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x20 DUP1 DUP5 ADD DUP4 DUP4 ISZERO PUSH2 0x1274 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1258 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP7 PUSH1 0x60 SHL AND DUP2 MSTORE PUSH1 0x0 PUSH2 0x15A1 PUSH2 0x159B PUSH1 0x14 DUP5 ADD DUP9 PUSH2 0x153C JUMP JUMPDEST DUP7 PUSH2 0x153C JUMP JUMPDEST SWAP4 DUP5 MSTORE POP POP PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0xA0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x15E4 PUSH1 0xA0 DUP4 ADD DUP8 PUSH2 0x1243 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x15F6 DUP2 DUP8 PUSH2 0x1243 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP PUSH1 0x80 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1624 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x1243 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1636 DUP2 DUP6 PUSH2 0x1243 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x1650 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x165D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NOT PUSH15 0x98A98F89C1906CE2600841A3BA3675 ADDRESS PUSH31 0xFD0EC9A2799F962A6B52356F164736F6C6343000816003300000000000000 ","sourceMap":"473:392:26:-:0;;;549:214;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;711:12;725:15;742:17;;;2425:10:27;1008:63:0;2425:10:27;1008:33:0;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;736:96:19;-1:-1:-1;;;827:4:19;736:34;:32;:34::i;:::-;:56;:96;:56;:96::i;:::-;-1:-1:-1;;;;;622:39:12;;;;;2491:26:27;;::::2;;::::0;-1:-1:-1;;2527:32:27::2;;::::0;-1:-1:-1;473:392:26;;-1:-1:-1;;473:392:26;5065:174:6;5106:16;;926:71;996:1;934:58;926:71;:::i;:::-;918:80;5065:174;-1:-1:-1;;5065:174:6:o;1567:341::-;-1:-1:-1;;;;;1655:26:6;;;1651:152;;1697:30;;-1:-1:-1;;;;;;1697:30:6;-1:-1:-1;;;;;1697:30:6;;;;;;;1746:46;;-1:-1:-1;;1746:46:6;;-1:-1:-1;;1746:46:6;1651:152;1812:89;-1:-1:-1;;;1896:4:6;1812:34;:32;:34::i;:89::-;1567:341;;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:10;;;877:68;;925:20;;-1:-1:-1;;;925:20:10;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:10;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:10;;;;;;;;;;773:235::o;14:139:28:-;-1:-1:-1;;;;;97:31:28;;87:42;;77:70;;143:1;140;133:12;77:70;14:139;:::o;158:607::-;310:6;318;326;379:2;367:9;358:7;354:23;350:32;347:52;;;395:1;392;385:12;347:52;427:9;421:16;446:39;479:5;446:39;:::i;:::-;554:2;539:18;;533:25;504:5;;-1:-1:-1;567:41:28;533:25;567:41;:::i;:::-;679:2;664:18;;658:25;627:7;;-1:-1:-1;692:41:28;658:25;692:41;:::i;:::-;752:7;742:17;;;158:607;;;;;:::o;770:225::-;837:9;;;858:11;;;855:134;;;911:10;906:3;902:20;899:1;892:31;946:4;943:1;936:15;974:4;971:1;964:15;770:225;473:392:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@FEE_CONTRACT_2037":{"entryPoint":null,"id":2037,"parameterSlots":0,"returnSlots":0},"@REWARD_CONTRACT_2034":{"entryPoint":null,"id":2034,"parameterSlots":0,"returnSlots":0},"@__msgData_1984":{"entryPoint":781,"id":1984,"parameterSlots":0,"returnSlots":2},"@_efficientHash_1944":{"entryPoint":null,"id":1944,"parameterSlots":2,"returnSlots":1},"@_hashPair_1933":{"entryPoint":4115,"id":1933,"parameterSlots":2,"returnSlots":1},"@_msgData_2159":{"entryPoint":2322,"id":2159,"parameterSlots":0,"returnSlots":2},"@_msgData_700":{"entryPoint":3288,"id":700,"parameterSlots":0,"returnSlots":2},"@_msgSender_2145":{"entryPoint":2333,"id":2145,"parameterSlots":0,"returnSlots":1},"@_msgSender_652":{"entryPoint":3650,"id":652,"parameterSlots":0,"returnSlots":1},"@_processClaimData_2338":{"entryPoint":2500,"id":2338,"parameterSlots":4,"returnSlots":2},"@addMerkleRoot_2415":{"entryPoint":800,"id":2415,"parameterSlots":1,"returnSlots":0},"@claim_2382":{"entryPoint":1593,"id":2382,"parameterSlots":4,"returnSlots":0},"@claimed_2031":{"entryPoint":null,"id":2031,"parameterSlots":0,"returnSlots":0},"@deprecateMerkleRoot_2449":{"entryPoint":1003,"id":2449,"parameterSlots":1,"returnSlots":0},"@enforceIsContractOwner_351":{"entryPoint":2389,"id":351,"parameterSlots":2,"returnSlots":0},"@forwarderRegistry_564":{"entryPoint":null,"id":564,"parameterSlots":0,"returnSlots":1},"@isTrustedForwarder_580":{"entryPoint":null,"id":580,"parameterSlots":1,"returnSlots":1},"@layout_383":{"entryPoint":2343,"id":383,"parameterSlots":0,"returnSlots":1},"@layout_531":{"entryPoint":2058,"id":531,"parameterSlots":0,"returnSlots":1},"@msgData_755":{"entryPoint":3999,"id":755,"parameterSlots":0,"returnSlots":2},"@msgSender_738":{"entryPoint":null,"id":738,"parameterSlots":0,"returnSlots":1},"@onERC20Received_2222":{"entryPoint":1183,"id":2222,"parameterSlots":5,"returnSlots":1},"@owner_304":{"entryPoint":null,"id":304,"parameterSlots":1,"returnSlots":1},"@owner_62":{"entryPoint":1984,"id":62,"parameterSlots":0,"returnSlots":1},"@processProof_1502":{"entryPoint":4048,"id":1502,"parameterSlots":2,"returnSlots":1},"@roots_2027":{"entryPoint":null,"id":2027,"parameterSlots":0,"returnSlots":0},"@supportsInterface_413":{"entryPoint":755,"id":413,"parameterSlots":1,"returnSlots":1},"@supportsInterface_519":{"entryPoint":2104,"id":519,"parameterSlots":2,"returnSlots":1},"@transferOwnership_291":{"entryPoint":3011,"id":291,"parameterSlots":3,"returnSlots":0},"@transferOwnership_79":{"entryPoint":2028,"id":79,"parameterSlots":1,"returnSlots":0},"@verify_1441":{"entryPoint":3977,"id":1441,"parameterSlots":3,"returnSlots":1},"abi_decode_address":{"entryPoint":4333,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_uint256_dyn":{"entryPoint":5082,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes_calldata":{"entryPoint":4374,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":4558,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr":{"entryPoint":4447,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_bytes_calldata_ptrt_uint256":{"entryPoint":4585,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":4828,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":4308,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_bytes32t_array$_t_bytes32_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":5193,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_bytes4":{"entryPoint":4165,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_uint256_dyn":{"entryPoint":5436,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_uint256_dyn_memory_ptr":{"entryPoint":4675,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":5473,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4735,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__fromStack_reversed":{"entryPoint":5557,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4231,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC1155Mintable_$842__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC20_$937__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_uint256_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":5643,"id":null,"parameterSlots":4,"returnSlots":1},"allocate_memory":{"entryPoint":4967,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_array_bytes32_dyn":{"entryPoint":5046,"id":null,"parameterSlots":1,"returnSlots":1},"calldata_array_index_range_access_t_bytes_calldata_ptr":{"entryPoint":5696,"id":null,"parameterSlots":4,"returnSlots":2},"checked_sub_t_uint256":{"entryPoint":4862,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x32":{"entryPoint":5738,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":4920,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:12935:28","nodeType":"YulBlock","src":"0:12935:28","statements":[{"nativeSrc":"6:3:28","nodeType":"YulBlock","src":"6:3:28","statements":[]},{"body":{"nativeSrc":"83:263:28","nodeType":"YulBlock","src":"83:263:28","statements":[{"body":{"nativeSrc":"129:16:28","nodeType":"YulBlock","src":"129:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:28","nodeType":"YulLiteral","src":"138:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:28","nodeType":"YulLiteral","src":"141:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:28","nodeType":"YulIdentifier","src":"131:6:28"},"nativeSrc":"131:12:28","nodeType":"YulFunctionCall","src":"131:12:28"},"nativeSrc":"131:12:28","nodeType":"YulExpressionStatement","src":"131:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:28","nodeType":"YulIdentifier","src":"104:7:28"},{"name":"headStart","nativeSrc":"113:9:28","nodeType":"YulIdentifier","src":"113:9:28"}],"functionName":{"name":"sub","nativeSrc":"100:3:28","nodeType":"YulIdentifier","src":"100:3:28"},"nativeSrc":"100:23:28","nodeType":"YulFunctionCall","src":"100:23:28"},{"kind":"number","nativeSrc":"125:2:28","nodeType":"YulLiteral","src":"125:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:28","nodeType":"YulIdentifier","src":"96:3:28"},"nativeSrc":"96:32:28","nodeType":"YulFunctionCall","src":"96:32:28"},"nativeSrc":"93:52:28","nodeType":"YulIf","src":"93:52:28"},{"nativeSrc":"154:36:28","nodeType":"YulVariableDeclaration","src":"154:36:28","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:28","nodeType":"YulIdentifier","src":"180:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:28","nodeType":"YulIdentifier","src":"167:12:28"},"nativeSrc":"167:23:28","nodeType":"YulFunctionCall","src":"167:23:28"},"variables":[{"name":"value","nativeSrc":"158:5:28","nodeType":"YulTypedName","src":"158:5:28","type":""}]},{"body":{"nativeSrc":"300:16:28","nodeType":"YulBlock","src":"300:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:28","nodeType":"YulLiteral","src":"309:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:28","nodeType":"YulLiteral","src":"312:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:28","nodeType":"YulIdentifier","src":"302:6:28"},"nativeSrc":"302:12:28","nodeType":"YulFunctionCall","src":"302:12:28"},"nativeSrc":"302:12:28","nodeType":"YulExpressionStatement","src":"302:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:28","nodeType":"YulIdentifier","src":"212:5:28"},{"arguments":[{"name":"value","nativeSrc":"223:5:28","nodeType":"YulIdentifier","src":"223:5:28"},{"kind":"number","nativeSrc":"230:66:28","nodeType":"YulLiteral","src":"230:66:28","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:28","nodeType":"YulIdentifier","src":"219:3:28"},"nativeSrc":"219:78:28","nodeType":"YulFunctionCall","src":"219:78:28"}],"functionName":{"name":"eq","nativeSrc":"209:2:28","nodeType":"YulIdentifier","src":"209:2:28"},"nativeSrc":"209:89:28","nodeType":"YulFunctionCall","src":"209:89:28"}],"functionName":{"name":"iszero","nativeSrc":"202:6:28","nodeType":"YulIdentifier","src":"202:6:28"},"nativeSrc":"202:97:28","nodeType":"YulFunctionCall","src":"202:97:28"},"nativeSrc":"199:117:28","nodeType":"YulIf","src":"199:117:28"},{"nativeSrc":"325:15:28","nodeType":"YulAssignment","src":"325:15:28","value":{"name":"value","nativeSrc":"335:5:28","nodeType":"YulIdentifier","src":"335:5:28"},"variableNames":[{"name":"value0","nativeSrc":"325:6:28","nodeType":"YulIdentifier","src":"325:6:28"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:28","nodeType":"YulTypedName","src":"49:9:28","type":""},{"name":"dataEnd","nativeSrc":"60:7:28","nodeType":"YulTypedName","src":"60:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:28","nodeType":"YulTypedName","src":"72:6:28","type":""}],"src":"14:332:28"},{"body":{"nativeSrc":"446:92:28","nodeType":"YulBlock","src":"446:92:28","statements":[{"nativeSrc":"456:26:28","nodeType":"YulAssignment","src":"456:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:28","nodeType":"YulIdentifier","src":"468:9:28"},{"kind":"number","nativeSrc":"479:2:28","nodeType":"YulLiteral","src":"479:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:28","nodeType":"YulIdentifier","src":"464:3:28"},"nativeSrc":"464:18:28","nodeType":"YulFunctionCall","src":"464:18:28"},"variableNames":[{"name":"tail","nativeSrc":"456:4:28","nodeType":"YulIdentifier","src":"456:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:28","nodeType":"YulIdentifier","src":"498:9:28"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:28","nodeType":"YulIdentifier","src":"523:6:28"}],"functionName":{"name":"iszero","nativeSrc":"516:6:28","nodeType":"YulIdentifier","src":"516:6:28"},"nativeSrc":"516:14:28","nodeType":"YulFunctionCall","src":"516:14:28"}],"functionName":{"name":"iszero","nativeSrc":"509:6:28","nodeType":"YulIdentifier","src":"509:6:28"},"nativeSrc":"509:22:28","nodeType":"YulFunctionCall","src":"509:22:28"}],"functionName":{"name":"mstore","nativeSrc":"491:6:28","nodeType":"YulIdentifier","src":"491:6:28"},"nativeSrc":"491:41:28","nodeType":"YulFunctionCall","src":"491:41:28"},"nativeSrc":"491:41:28","nodeType":"YulExpressionStatement","src":"491:41:28"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:28","nodeType":"YulTypedName","src":"415:9:28","type":""},{"name":"value0","nativeSrc":"426:6:28","nodeType":"YulTypedName","src":"426:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:28","nodeType":"YulTypedName","src":"437:4:28","type":""}],"src":"351:187:28"},{"body":{"nativeSrc":"658:125:28","nodeType":"YulBlock","src":"658:125:28","statements":[{"nativeSrc":"668:26:28","nodeType":"YulAssignment","src":"668:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"680:9:28","nodeType":"YulIdentifier","src":"680:9:28"},{"kind":"number","nativeSrc":"691:2:28","nodeType":"YulLiteral","src":"691:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"676:3:28","nodeType":"YulIdentifier","src":"676:3:28"},"nativeSrc":"676:18:28","nodeType":"YulFunctionCall","src":"676:18:28"},"variableNames":[{"name":"tail","nativeSrc":"668:4:28","nodeType":"YulIdentifier","src":"668:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"710:9:28","nodeType":"YulIdentifier","src":"710:9:28"},{"arguments":[{"name":"value0","nativeSrc":"725:6:28","nodeType":"YulIdentifier","src":"725:6:28"},{"kind":"number","nativeSrc":"733:42:28","nodeType":"YulLiteral","src":"733:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"721:3:28","nodeType":"YulIdentifier","src":"721:3:28"},"nativeSrc":"721:55:28","nodeType":"YulFunctionCall","src":"721:55:28"}],"functionName":{"name":"mstore","nativeSrc":"703:6:28","nodeType":"YulIdentifier","src":"703:6:28"},"nativeSrc":"703:74:28","nodeType":"YulFunctionCall","src":"703:74:28"},"nativeSrc":"703:74:28","nodeType":"YulExpressionStatement","src":"703:74:28"}]},"name":"abi_encode_tuple_t_contract$_IERC20_$937__to_t_address__fromStack_reversed","nativeSrc":"543:240:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"627:9:28","nodeType":"YulTypedName","src":"627:9:28","type":""},{"name":"value0","nativeSrc":"638:6:28","nodeType":"YulTypedName","src":"638:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"649:4:28","nodeType":"YulTypedName","src":"649:4:28","type":""}],"src":"543:240:28"},{"body":{"nativeSrc":"915:125:28","nodeType":"YulBlock","src":"915:125:28","statements":[{"nativeSrc":"925:26:28","nodeType":"YulAssignment","src":"925:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"937:9:28","nodeType":"YulIdentifier","src":"937:9:28"},{"kind":"number","nativeSrc":"948:2:28","nodeType":"YulLiteral","src":"948:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"933:3:28","nodeType":"YulIdentifier","src":"933:3:28"},"nativeSrc":"933:18:28","nodeType":"YulFunctionCall","src":"933:18:28"},"variableNames":[{"name":"tail","nativeSrc":"925:4:28","nodeType":"YulIdentifier","src":"925:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"967:9:28","nodeType":"YulIdentifier","src":"967:9:28"},{"arguments":[{"name":"value0","nativeSrc":"982:6:28","nodeType":"YulIdentifier","src":"982:6:28"},{"kind":"number","nativeSrc":"990:42:28","nodeType":"YulLiteral","src":"990:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"978:3:28","nodeType":"YulIdentifier","src":"978:3:28"},"nativeSrc":"978:55:28","nodeType":"YulFunctionCall","src":"978:55:28"}],"functionName":{"name":"mstore","nativeSrc":"960:6:28","nodeType":"YulIdentifier","src":"960:6:28"},"nativeSrc":"960:74:28","nodeType":"YulFunctionCall","src":"960:74:28"},"nativeSrc":"960:74:28","nodeType":"YulExpressionStatement","src":"960:74:28"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed","nativeSrc":"788:252:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"884:9:28","nodeType":"YulTypedName","src":"884:9:28","type":""},{"name":"value0","nativeSrc":"895:6:28","nodeType":"YulTypedName","src":"895:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"906:4:28","nodeType":"YulTypedName","src":"906:4:28","type":""}],"src":"788:252:28"},{"body":{"nativeSrc":"1174:318:28","nodeType":"YulBlock","src":"1174:318:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1191:9:28","nodeType":"YulIdentifier","src":"1191:9:28"},{"kind":"number","nativeSrc":"1202:2:28","nodeType":"YulLiteral","src":"1202:2:28","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"1184:6:28","nodeType":"YulIdentifier","src":"1184:6:28"},"nativeSrc":"1184:21:28","nodeType":"YulFunctionCall","src":"1184:21:28"},"nativeSrc":"1184:21:28","nodeType":"YulExpressionStatement","src":"1184:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1225:9:28","nodeType":"YulIdentifier","src":"1225:9:28"},{"kind":"number","nativeSrc":"1236:2:28","nodeType":"YulLiteral","src":"1236:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1221:3:28","nodeType":"YulIdentifier","src":"1221:3:28"},"nativeSrc":"1221:18:28","nodeType":"YulFunctionCall","src":"1221:18:28"},{"name":"value1","nativeSrc":"1241:6:28","nodeType":"YulIdentifier","src":"1241:6:28"}],"functionName":{"name":"mstore","nativeSrc":"1214:6:28","nodeType":"YulIdentifier","src":"1214:6:28"},"nativeSrc":"1214:34:28","nodeType":"YulFunctionCall","src":"1214:34:28"},"nativeSrc":"1214:34:28","nodeType":"YulExpressionStatement","src":"1214:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1274:9:28","nodeType":"YulIdentifier","src":"1274:9:28"},{"kind":"number","nativeSrc":"1285:2:28","nodeType":"YulLiteral","src":"1285:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1270:3:28","nodeType":"YulIdentifier","src":"1270:3:28"},"nativeSrc":"1270:18:28","nodeType":"YulFunctionCall","src":"1270:18:28"},{"name":"value0","nativeSrc":"1290:6:28","nodeType":"YulIdentifier","src":"1290:6:28"},{"name":"value1","nativeSrc":"1298:6:28","nodeType":"YulIdentifier","src":"1298:6:28"}],"functionName":{"name":"calldatacopy","nativeSrc":"1257:12:28","nodeType":"YulIdentifier","src":"1257:12:28"},"nativeSrc":"1257:48:28","nodeType":"YulFunctionCall","src":"1257:48:28"},"nativeSrc":"1257:48:28","nodeType":"YulExpressionStatement","src":"1257:48:28"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1329:9:28","nodeType":"YulIdentifier","src":"1329:9:28"},{"name":"value1","nativeSrc":"1340:6:28","nodeType":"YulIdentifier","src":"1340:6:28"}],"functionName":{"name":"add","nativeSrc":"1325:3:28","nodeType":"YulIdentifier","src":"1325:3:28"},"nativeSrc":"1325:22:28","nodeType":"YulFunctionCall","src":"1325:22:28"},{"kind":"number","nativeSrc":"1349:2:28","nodeType":"YulLiteral","src":"1349:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1321:3:28","nodeType":"YulIdentifier","src":"1321:3:28"},"nativeSrc":"1321:31:28","nodeType":"YulFunctionCall","src":"1321:31:28"},{"kind":"number","nativeSrc":"1354:1:28","nodeType":"YulLiteral","src":"1354:1:28","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"1314:6:28","nodeType":"YulIdentifier","src":"1314:6:28"},"nativeSrc":"1314:42:28","nodeType":"YulFunctionCall","src":"1314:42:28"},"nativeSrc":"1314:42:28","nodeType":"YulExpressionStatement","src":"1314:42:28"},{"nativeSrc":"1365:121:28","nodeType":"YulAssignment","src":"1365:121:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1381:9:28","nodeType":"YulIdentifier","src":"1381:9:28"},{"arguments":[{"arguments":[{"name":"value1","nativeSrc":"1400:6:28","nodeType":"YulIdentifier","src":"1400:6:28"},{"kind":"number","nativeSrc":"1408:2:28","nodeType":"YulLiteral","src":"1408:2:28","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"1396:3:28","nodeType":"YulIdentifier","src":"1396:3:28"},"nativeSrc":"1396:15:28","nodeType":"YulFunctionCall","src":"1396:15:28"},{"kind":"number","nativeSrc":"1413:66:28","nodeType":"YulLiteral","src":"1413:66:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"1392:3:28","nodeType":"YulIdentifier","src":"1392:3:28"},"nativeSrc":"1392:88:28","nodeType":"YulFunctionCall","src":"1392:88:28"}],"functionName":{"name":"add","nativeSrc":"1377:3:28","nodeType":"YulIdentifier","src":"1377:3:28"},"nativeSrc":"1377:104:28","nodeType":"YulFunctionCall","src":"1377:104:28"},{"kind":"number","nativeSrc":"1483:2:28","nodeType":"YulLiteral","src":"1483:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1373:3:28","nodeType":"YulIdentifier","src":"1373:3:28"},"nativeSrc":"1373:113:28","nodeType":"YulFunctionCall","src":"1373:113:28"},"variableNames":[{"name":"tail","nativeSrc":"1365:4:28","nodeType":"YulIdentifier","src":"1365:4:28"}]}]},"name":"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"1045:447:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1135:9:28","nodeType":"YulTypedName","src":"1135:9:28","type":""},{"name":"value1","nativeSrc":"1146:6:28","nodeType":"YulTypedName","src":"1146:6:28","type":""},{"name":"value0","nativeSrc":"1154:6:28","nodeType":"YulTypedName","src":"1154:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1165:4:28","nodeType":"YulTypedName","src":"1165:4:28","type":""}],"src":"1045:447:28"},{"body":{"nativeSrc":"1567:110:28","nodeType":"YulBlock","src":"1567:110:28","statements":[{"body":{"nativeSrc":"1613:16:28","nodeType":"YulBlock","src":"1613:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1622:1:28","nodeType":"YulLiteral","src":"1622:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"1625:1:28","nodeType":"YulLiteral","src":"1625:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1615:6:28","nodeType":"YulIdentifier","src":"1615:6:28"},"nativeSrc":"1615:12:28","nodeType":"YulFunctionCall","src":"1615:12:28"},"nativeSrc":"1615:12:28","nodeType":"YulExpressionStatement","src":"1615:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1588:7:28","nodeType":"YulIdentifier","src":"1588:7:28"},{"name":"headStart","nativeSrc":"1597:9:28","nodeType":"YulIdentifier","src":"1597:9:28"}],"functionName":{"name":"sub","nativeSrc":"1584:3:28","nodeType":"YulIdentifier","src":"1584:3:28"},"nativeSrc":"1584:23:28","nodeType":"YulFunctionCall","src":"1584:23:28"},{"kind":"number","nativeSrc":"1609:2:28","nodeType":"YulLiteral","src":"1609:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1580:3:28","nodeType":"YulIdentifier","src":"1580:3:28"},"nativeSrc":"1580:32:28","nodeType":"YulFunctionCall","src":"1580:32:28"},"nativeSrc":"1577:52:28","nodeType":"YulIf","src":"1577:52:28"},{"nativeSrc":"1638:33:28","nodeType":"YulAssignment","src":"1638:33:28","value":{"arguments":[{"name":"headStart","nativeSrc":"1661:9:28","nodeType":"YulIdentifier","src":"1661:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"1648:12:28","nodeType":"YulIdentifier","src":"1648:12:28"},"nativeSrc":"1648:23:28","nodeType":"YulFunctionCall","src":"1648:23:28"},"variableNames":[{"name":"value0","nativeSrc":"1638:6:28","nodeType":"YulIdentifier","src":"1638:6:28"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"1497:180:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1533:9:28","nodeType":"YulTypedName","src":"1533:9:28","type":""},{"name":"dataEnd","nativeSrc":"1544:7:28","nodeType":"YulTypedName","src":"1544:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1556:6:28","nodeType":"YulTypedName","src":"1556:6:28","type":""}],"src":"1497:180:28"},{"body":{"nativeSrc":"1807:125:28","nodeType":"YulBlock","src":"1807:125:28","statements":[{"nativeSrc":"1817:26:28","nodeType":"YulAssignment","src":"1817:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"1829:9:28","nodeType":"YulIdentifier","src":"1829:9:28"},{"kind":"number","nativeSrc":"1840:2:28","nodeType":"YulLiteral","src":"1840:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1825:3:28","nodeType":"YulIdentifier","src":"1825:3:28"},"nativeSrc":"1825:18:28","nodeType":"YulFunctionCall","src":"1825:18:28"},"variableNames":[{"name":"tail","nativeSrc":"1817:4:28","nodeType":"YulIdentifier","src":"1817:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1859:9:28","nodeType":"YulIdentifier","src":"1859:9:28"},{"arguments":[{"name":"value0","nativeSrc":"1874:6:28","nodeType":"YulIdentifier","src":"1874:6:28"},{"kind":"number","nativeSrc":"1882:42:28","nodeType":"YulLiteral","src":"1882:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1870:3:28","nodeType":"YulIdentifier","src":"1870:3:28"},"nativeSrc":"1870:55:28","nodeType":"YulFunctionCall","src":"1870:55:28"}],"functionName":{"name":"mstore","nativeSrc":"1852:6:28","nodeType":"YulIdentifier","src":"1852:6:28"},"nativeSrc":"1852:74:28","nodeType":"YulFunctionCall","src":"1852:74:28"},"nativeSrc":"1852:74:28","nodeType":"YulExpressionStatement","src":"1852:74:28"}]},"name":"abi_encode_tuple_t_contract$_IERC1155Mintable_$842__to_t_address__fromStack_reversed","nativeSrc":"1682:250:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1776:9:28","nodeType":"YulTypedName","src":"1776:9:28","type":""},{"name":"value0","nativeSrc":"1787:6:28","nodeType":"YulTypedName","src":"1787:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1798:4:28","nodeType":"YulTypedName","src":"1798:4:28","type":""}],"src":"1682:250:28"},{"body":{"nativeSrc":"1986:147:28","nodeType":"YulBlock","src":"1986:147:28","statements":[{"nativeSrc":"1996:29:28","nodeType":"YulAssignment","src":"1996:29:28","value":{"arguments":[{"name":"offset","nativeSrc":"2018:6:28","nodeType":"YulIdentifier","src":"2018:6:28"}],"functionName":{"name":"calldataload","nativeSrc":"2005:12:28","nodeType":"YulIdentifier","src":"2005:12:28"},"nativeSrc":"2005:20:28","nodeType":"YulFunctionCall","src":"2005:20:28"},"variableNames":[{"name":"value","nativeSrc":"1996:5:28","nodeType":"YulIdentifier","src":"1996:5:28"}]},{"body":{"nativeSrc":"2111:16:28","nodeType":"YulBlock","src":"2111:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2120:1:28","nodeType":"YulLiteral","src":"2120:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"2123:1:28","nodeType":"YulLiteral","src":"2123:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2113:6:28","nodeType":"YulIdentifier","src":"2113:6:28"},"nativeSrc":"2113:12:28","nodeType":"YulFunctionCall","src":"2113:12:28"},"nativeSrc":"2113:12:28","nodeType":"YulExpressionStatement","src":"2113:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2047:5:28","nodeType":"YulIdentifier","src":"2047:5:28"},{"arguments":[{"name":"value","nativeSrc":"2058:5:28","nodeType":"YulIdentifier","src":"2058:5:28"},{"kind":"number","nativeSrc":"2065:42:28","nodeType":"YulLiteral","src":"2065:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2054:3:28","nodeType":"YulIdentifier","src":"2054:3:28"},"nativeSrc":"2054:54:28","nodeType":"YulFunctionCall","src":"2054:54:28"}],"functionName":{"name":"eq","nativeSrc":"2044:2:28","nodeType":"YulIdentifier","src":"2044:2:28"},"nativeSrc":"2044:65:28","nodeType":"YulFunctionCall","src":"2044:65:28"}],"functionName":{"name":"iszero","nativeSrc":"2037:6:28","nodeType":"YulIdentifier","src":"2037:6:28"},"nativeSrc":"2037:73:28","nodeType":"YulFunctionCall","src":"2037:73:28"},"nativeSrc":"2034:93:28","nodeType":"YulIf","src":"2034:93:28"}]},"name":"abi_decode_address","nativeSrc":"1937:196:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1965:6:28","nodeType":"YulTypedName","src":"1965:6:28","type":""}],"returnVariables":[{"name":"value","nativeSrc":"1976:5:28","nodeType":"YulTypedName","src":"1976:5:28","type":""}],"src":"1937:196:28"},{"body":{"nativeSrc":"2210:275:28","nodeType":"YulBlock","src":"2210:275:28","statements":[{"body":{"nativeSrc":"2259:16:28","nodeType":"YulBlock","src":"2259:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2268:1:28","nodeType":"YulLiteral","src":"2268:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"2271:1:28","nodeType":"YulLiteral","src":"2271:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2261:6:28","nodeType":"YulIdentifier","src":"2261:6:28"},"nativeSrc":"2261:12:28","nodeType":"YulFunctionCall","src":"2261:12:28"},"nativeSrc":"2261:12:28","nodeType":"YulExpressionStatement","src":"2261:12:28"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2238:6:28","nodeType":"YulIdentifier","src":"2238:6:28"},{"kind":"number","nativeSrc":"2246:4:28","nodeType":"YulLiteral","src":"2246:4:28","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2234:3:28","nodeType":"YulIdentifier","src":"2234:3:28"},"nativeSrc":"2234:17:28","nodeType":"YulFunctionCall","src":"2234:17:28"},{"name":"end","nativeSrc":"2253:3:28","nodeType":"YulIdentifier","src":"2253:3:28"}],"functionName":{"name":"slt","nativeSrc":"2230:3:28","nodeType":"YulIdentifier","src":"2230:3:28"},"nativeSrc":"2230:27:28","nodeType":"YulFunctionCall","src":"2230:27:28"}],"functionName":{"name":"iszero","nativeSrc":"2223:6:28","nodeType":"YulIdentifier","src":"2223:6:28"},"nativeSrc":"2223:35:28","nodeType":"YulFunctionCall","src":"2223:35:28"},"nativeSrc":"2220:55:28","nodeType":"YulIf","src":"2220:55:28"},{"nativeSrc":"2284:30:28","nodeType":"YulAssignment","src":"2284:30:28","value":{"arguments":[{"name":"offset","nativeSrc":"2307:6:28","nodeType":"YulIdentifier","src":"2307:6:28"}],"functionName":{"name":"calldataload","nativeSrc":"2294:12:28","nodeType":"YulIdentifier","src":"2294:12:28"},"nativeSrc":"2294:20:28","nodeType":"YulFunctionCall","src":"2294:20:28"},"variableNames":[{"name":"length","nativeSrc":"2284:6:28","nodeType":"YulIdentifier","src":"2284:6:28"}]},{"body":{"nativeSrc":"2357:16:28","nodeType":"YulBlock","src":"2357:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2366:1:28","nodeType":"YulLiteral","src":"2366:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"2369:1:28","nodeType":"YulLiteral","src":"2369:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2359:6:28","nodeType":"YulIdentifier","src":"2359:6:28"},"nativeSrc":"2359:12:28","nodeType":"YulFunctionCall","src":"2359:12:28"},"nativeSrc":"2359:12:28","nodeType":"YulExpressionStatement","src":"2359:12:28"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"2329:6:28","nodeType":"YulIdentifier","src":"2329:6:28"},{"kind":"number","nativeSrc":"2337:18:28","nodeType":"YulLiteral","src":"2337:18:28","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2326:2:28","nodeType":"YulIdentifier","src":"2326:2:28"},"nativeSrc":"2326:30:28","nodeType":"YulFunctionCall","src":"2326:30:28"},"nativeSrc":"2323:50:28","nodeType":"YulIf","src":"2323:50:28"},{"nativeSrc":"2382:29:28","nodeType":"YulAssignment","src":"2382:29:28","value":{"arguments":[{"name":"offset","nativeSrc":"2398:6:28","nodeType":"YulIdentifier","src":"2398:6:28"},{"kind":"number","nativeSrc":"2406:4:28","nodeType":"YulLiteral","src":"2406:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2394:3:28","nodeType":"YulIdentifier","src":"2394:3:28"},"nativeSrc":"2394:17:28","nodeType":"YulFunctionCall","src":"2394:17:28"},"variableNames":[{"name":"arrayPos","nativeSrc":"2382:8:28","nodeType":"YulIdentifier","src":"2382:8:28"}]},{"body":{"nativeSrc":"2463:16:28","nodeType":"YulBlock","src":"2463:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2472:1:28","nodeType":"YulLiteral","src":"2472:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"2475:1:28","nodeType":"YulLiteral","src":"2475:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2465:6:28","nodeType":"YulIdentifier","src":"2465:6:28"},"nativeSrc":"2465:12:28","nodeType":"YulFunctionCall","src":"2465:12:28"},"nativeSrc":"2465:12:28","nodeType":"YulExpressionStatement","src":"2465:12:28"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2434:6:28","nodeType":"YulIdentifier","src":"2434:6:28"},{"name":"length","nativeSrc":"2442:6:28","nodeType":"YulIdentifier","src":"2442:6:28"}],"functionName":{"name":"add","nativeSrc":"2430:3:28","nodeType":"YulIdentifier","src":"2430:3:28"},"nativeSrc":"2430:19:28","nodeType":"YulFunctionCall","src":"2430:19:28"},{"kind":"number","nativeSrc":"2451:4:28","nodeType":"YulLiteral","src":"2451:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2426:3:28","nodeType":"YulIdentifier","src":"2426:3:28"},"nativeSrc":"2426:30:28","nodeType":"YulFunctionCall","src":"2426:30:28"},{"name":"end","nativeSrc":"2458:3:28","nodeType":"YulIdentifier","src":"2458:3:28"}],"functionName":{"name":"gt","nativeSrc":"2423:2:28","nodeType":"YulIdentifier","src":"2423:2:28"},"nativeSrc":"2423:39:28","nodeType":"YulFunctionCall","src":"2423:39:28"},"nativeSrc":"2420:59:28","nodeType":"YulIf","src":"2420:59:28"}]},"name":"abi_decode_bytes_calldata","nativeSrc":"2138:347:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2173:6:28","nodeType":"YulTypedName","src":"2173:6:28","type":""},{"name":"end","nativeSrc":"2181:3:28","nodeType":"YulTypedName","src":"2181:3:28","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"2189:8:28","nodeType":"YulTypedName","src":"2189:8:28","type":""},{"name":"length","nativeSrc":"2199:6:28","nodeType":"YulTypedName","src":"2199:6:28","type":""}],"src":"2138:347:28"},{"body":{"nativeSrc":"2630:486:28","nodeType":"YulBlock","src":"2630:486:28","statements":[{"body":{"nativeSrc":"2677:16:28","nodeType":"YulBlock","src":"2677:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2686:1:28","nodeType":"YulLiteral","src":"2686:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"2689:1:28","nodeType":"YulLiteral","src":"2689:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2679:6:28","nodeType":"YulIdentifier","src":"2679:6:28"},"nativeSrc":"2679:12:28","nodeType":"YulFunctionCall","src":"2679:12:28"},"nativeSrc":"2679:12:28","nodeType":"YulExpressionStatement","src":"2679:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2651:7:28","nodeType":"YulIdentifier","src":"2651:7:28"},{"name":"headStart","nativeSrc":"2660:9:28","nodeType":"YulIdentifier","src":"2660:9:28"}],"functionName":{"name":"sub","nativeSrc":"2647:3:28","nodeType":"YulIdentifier","src":"2647:3:28"},"nativeSrc":"2647:23:28","nodeType":"YulFunctionCall","src":"2647:23:28"},{"kind":"number","nativeSrc":"2672:3:28","nodeType":"YulLiteral","src":"2672:3:28","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"2643:3:28","nodeType":"YulIdentifier","src":"2643:3:28"},"nativeSrc":"2643:33:28","nodeType":"YulFunctionCall","src":"2643:33:28"},"nativeSrc":"2640:53:28","nodeType":"YulIf","src":"2640:53:28"},{"nativeSrc":"2702:39:28","nodeType":"YulAssignment","src":"2702:39:28","value":{"arguments":[{"name":"headStart","nativeSrc":"2731:9:28","nodeType":"YulIdentifier","src":"2731:9:28"}],"functionName":{"name":"abi_decode_address","nativeSrc":"2712:18:28","nodeType":"YulIdentifier","src":"2712:18:28"},"nativeSrc":"2712:29:28","nodeType":"YulFunctionCall","src":"2712:29:28"},"variableNames":[{"name":"value0","nativeSrc":"2702:6:28","nodeType":"YulIdentifier","src":"2702:6:28"}]},{"nativeSrc":"2750:48:28","nodeType":"YulAssignment","src":"2750:48:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2783:9:28","nodeType":"YulIdentifier","src":"2783:9:28"},{"kind":"number","nativeSrc":"2794:2:28","nodeType":"YulLiteral","src":"2794:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2779:3:28","nodeType":"YulIdentifier","src":"2779:3:28"},"nativeSrc":"2779:18:28","nodeType":"YulFunctionCall","src":"2779:18:28"}],"functionName":{"name":"abi_decode_address","nativeSrc":"2760:18:28","nodeType":"YulIdentifier","src":"2760:18:28"},"nativeSrc":"2760:38:28","nodeType":"YulFunctionCall","src":"2760:38:28"},"variableNames":[{"name":"value1","nativeSrc":"2750:6:28","nodeType":"YulIdentifier","src":"2750:6:28"}]},{"nativeSrc":"2807:42:28","nodeType":"YulAssignment","src":"2807:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2834:9:28","nodeType":"YulIdentifier","src":"2834:9:28"},{"kind":"number","nativeSrc":"2845:2:28","nodeType":"YulLiteral","src":"2845:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2830:3:28","nodeType":"YulIdentifier","src":"2830:3:28"},"nativeSrc":"2830:18:28","nodeType":"YulFunctionCall","src":"2830:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"2817:12:28","nodeType":"YulIdentifier","src":"2817:12:28"},"nativeSrc":"2817:32:28","nodeType":"YulFunctionCall","src":"2817:32:28"},"variableNames":[{"name":"value2","nativeSrc":"2807:6:28","nodeType":"YulIdentifier","src":"2807:6:28"}]},{"nativeSrc":"2858:46:28","nodeType":"YulVariableDeclaration","src":"2858:46:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2889:9:28","nodeType":"YulIdentifier","src":"2889:9:28"},{"kind":"number","nativeSrc":"2900:2:28","nodeType":"YulLiteral","src":"2900:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"2885:3:28","nodeType":"YulIdentifier","src":"2885:3:28"},"nativeSrc":"2885:18:28","nodeType":"YulFunctionCall","src":"2885:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"2872:12:28","nodeType":"YulIdentifier","src":"2872:12:28"},"nativeSrc":"2872:32:28","nodeType":"YulFunctionCall","src":"2872:32:28"},"variables":[{"name":"offset","nativeSrc":"2862:6:28","nodeType":"YulTypedName","src":"2862:6:28","type":""}]},{"body":{"nativeSrc":"2947:16:28","nodeType":"YulBlock","src":"2947:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2956:1:28","nodeType":"YulLiteral","src":"2956:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"2959:1:28","nodeType":"YulLiteral","src":"2959:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2949:6:28","nodeType":"YulIdentifier","src":"2949:6:28"},"nativeSrc":"2949:12:28","nodeType":"YulFunctionCall","src":"2949:12:28"},"nativeSrc":"2949:12:28","nodeType":"YulExpressionStatement","src":"2949:12:28"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"2919:6:28","nodeType":"YulIdentifier","src":"2919:6:28"},{"kind":"number","nativeSrc":"2927:18:28","nodeType":"YulLiteral","src":"2927:18:28","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2916:2:28","nodeType":"YulIdentifier","src":"2916:2:28"},"nativeSrc":"2916:30:28","nodeType":"YulFunctionCall","src":"2916:30:28"},"nativeSrc":"2913:50:28","nodeType":"YulIf","src":"2913:50:28"},{"nativeSrc":"2972:84:28","nodeType":"YulVariableDeclaration","src":"2972:84:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3028:9:28","nodeType":"YulIdentifier","src":"3028:9:28"},{"name":"offset","nativeSrc":"3039:6:28","nodeType":"YulIdentifier","src":"3039:6:28"}],"functionName":{"name":"add","nativeSrc":"3024:3:28","nodeType":"YulIdentifier","src":"3024:3:28"},"nativeSrc":"3024:22:28","nodeType":"YulFunctionCall","src":"3024:22:28"},{"name":"dataEnd","nativeSrc":"3048:7:28","nodeType":"YulIdentifier","src":"3048:7:28"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"2998:25:28","nodeType":"YulIdentifier","src":"2998:25:28"},"nativeSrc":"2998:58:28","nodeType":"YulFunctionCall","src":"2998:58:28"},"variables":[{"name":"value3_1","nativeSrc":"2976:8:28","nodeType":"YulTypedName","src":"2976:8:28","type":""},{"name":"value4_1","nativeSrc":"2986:8:28","nodeType":"YulTypedName","src":"2986:8:28","type":""}]},{"nativeSrc":"3065:18:28","nodeType":"YulAssignment","src":"3065:18:28","value":{"name":"value3_1","nativeSrc":"3075:8:28","nodeType":"YulIdentifier","src":"3075:8:28"},"variableNames":[{"name":"value3","nativeSrc":"3065:6:28","nodeType":"YulIdentifier","src":"3065:6:28"}]},{"nativeSrc":"3092:18:28","nodeType":"YulAssignment","src":"3092:18:28","value":{"name":"value4_1","nativeSrc":"3102:8:28","nodeType":"YulIdentifier","src":"3102:8:28"},"variableNames":[{"name":"value4","nativeSrc":"3092:6:28","nodeType":"YulIdentifier","src":"3092:6:28"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr","nativeSrc":"2490:626:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2564:9:28","nodeType":"YulTypedName","src":"2564:9:28","type":""},{"name":"dataEnd","nativeSrc":"2575:7:28","nodeType":"YulTypedName","src":"2575:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2587:6:28","nodeType":"YulTypedName","src":"2587:6:28","type":""},{"name":"value1","nativeSrc":"2595:6:28","nodeType":"YulTypedName","src":"2595:6:28","type":""},{"name":"value2","nativeSrc":"2603:6:28","nodeType":"YulTypedName","src":"2603:6:28","type":""},{"name":"value3","nativeSrc":"2611:6:28","nodeType":"YulTypedName","src":"2611:6:28","type":""},{"name":"value4","nativeSrc":"2619:6:28","nodeType":"YulTypedName","src":"2619:6:28","type":""}],"src":"2490:626:28"},{"body":{"nativeSrc":"3220:149:28","nodeType":"YulBlock","src":"3220:149:28","statements":[{"nativeSrc":"3230:26:28","nodeType":"YulAssignment","src":"3230:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"3242:9:28","nodeType":"YulIdentifier","src":"3242:9:28"},{"kind":"number","nativeSrc":"3253:2:28","nodeType":"YulLiteral","src":"3253:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3238:3:28","nodeType":"YulIdentifier","src":"3238:3:28"},"nativeSrc":"3238:18:28","nodeType":"YulFunctionCall","src":"3238:18:28"},"variableNames":[{"name":"tail","nativeSrc":"3230:4:28","nodeType":"YulIdentifier","src":"3230:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3272:9:28","nodeType":"YulIdentifier","src":"3272:9:28"},{"arguments":[{"name":"value0","nativeSrc":"3287:6:28","nodeType":"YulIdentifier","src":"3287:6:28"},{"kind":"number","nativeSrc":"3295:66:28","nodeType":"YulLiteral","src":"3295:66:28","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"3283:3:28","nodeType":"YulIdentifier","src":"3283:3:28"},"nativeSrc":"3283:79:28","nodeType":"YulFunctionCall","src":"3283:79:28"}],"functionName":{"name":"mstore","nativeSrc":"3265:6:28","nodeType":"YulIdentifier","src":"3265:6:28"},"nativeSrc":"3265:98:28","nodeType":"YulFunctionCall","src":"3265:98:28"},"nativeSrc":"3265:98:28","nodeType":"YulExpressionStatement","src":"3265:98:28"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nativeSrc":"3121:248:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3189:9:28","nodeType":"YulTypedName","src":"3189:9:28","type":""},{"name":"value0","nativeSrc":"3200:6:28","nodeType":"YulTypedName","src":"3200:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3211:4:28","nodeType":"YulTypedName","src":"3211:4:28","type":""}],"src":"3121:248:28"},{"body":{"nativeSrc":"3444:116:28","nodeType":"YulBlock","src":"3444:116:28","statements":[{"body":{"nativeSrc":"3490:16:28","nodeType":"YulBlock","src":"3490:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3499:1:28","nodeType":"YulLiteral","src":"3499:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"3502:1:28","nodeType":"YulLiteral","src":"3502:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3492:6:28","nodeType":"YulIdentifier","src":"3492:6:28"},"nativeSrc":"3492:12:28","nodeType":"YulFunctionCall","src":"3492:12:28"},"nativeSrc":"3492:12:28","nodeType":"YulExpressionStatement","src":"3492:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3465:7:28","nodeType":"YulIdentifier","src":"3465:7:28"},{"name":"headStart","nativeSrc":"3474:9:28","nodeType":"YulIdentifier","src":"3474:9:28"}],"functionName":{"name":"sub","nativeSrc":"3461:3:28","nodeType":"YulIdentifier","src":"3461:3:28"},"nativeSrc":"3461:23:28","nodeType":"YulFunctionCall","src":"3461:23:28"},{"kind":"number","nativeSrc":"3486:2:28","nodeType":"YulLiteral","src":"3486:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"3457:3:28","nodeType":"YulIdentifier","src":"3457:3:28"},"nativeSrc":"3457:32:28","nodeType":"YulFunctionCall","src":"3457:32:28"},"nativeSrc":"3454:52:28","nodeType":"YulIf","src":"3454:52:28"},{"nativeSrc":"3515:39:28","nodeType":"YulAssignment","src":"3515:39:28","value":{"arguments":[{"name":"headStart","nativeSrc":"3544:9:28","nodeType":"YulIdentifier","src":"3544:9:28"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3525:18:28","nodeType":"YulIdentifier","src":"3525:18:28"},"nativeSrc":"3525:29:28","nodeType":"YulFunctionCall","src":"3525:29:28"},"variableNames":[{"name":"value0","nativeSrc":"3515:6:28","nodeType":"YulIdentifier","src":"3515:6:28"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"3374:186:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3410:9:28","nodeType":"YulTypedName","src":"3410:9:28","type":""},{"name":"dataEnd","nativeSrc":"3421:7:28","nodeType":"YulTypedName","src":"3421:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3433:6:28","nodeType":"YulTypedName","src":"3433:6:28","type":""}],"src":"3374:186:28"},{"body":{"nativeSrc":"3688:428:28","nodeType":"YulBlock","src":"3688:428:28","statements":[{"body":{"nativeSrc":"3734:16:28","nodeType":"YulBlock","src":"3734:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3743:1:28","nodeType":"YulLiteral","src":"3743:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"3746:1:28","nodeType":"YulLiteral","src":"3746:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3736:6:28","nodeType":"YulIdentifier","src":"3736:6:28"},"nativeSrc":"3736:12:28","nodeType":"YulFunctionCall","src":"3736:12:28"},"nativeSrc":"3736:12:28","nodeType":"YulExpressionStatement","src":"3736:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3709:7:28","nodeType":"YulIdentifier","src":"3709:7:28"},{"name":"headStart","nativeSrc":"3718:9:28","nodeType":"YulIdentifier","src":"3718:9:28"}],"functionName":{"name":"sub","nativeSrc":"3705:3:28","nodeType":"YulIdentifier","src":"3705:3:28"},"nativeSrc":"3705:23:28","nodeType":"YulFunctionCall","src":"3705:23:28"},{"kind":"number","nativeSrc":"3730:2:28","nodeType":"YulLiteral","src":"3730:2:28","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"3701:3:28","nodeType":"YulIdentifier","src":"3701:3:28"},"nativeSrc":"3701:32:28","nodeType":"YulFunctionCall","src":"3701:32:28"},"nativeSrc":"3698:52:28","nodeType":"YulIf","src":"3698:52:28"},{"nativeSrc":"3759:39:28","nodeType":"YulAssignment","src":"3759:39:28","value":{"arguments":[{"name":"headStart","nativeSrc":"3788:9:28","nodeType":"YulIdentifier","src":"3788:9:28"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3769:18:28","nodeType":"YulIdentifier","src":"3769:18:28"},"nativeSrc":"3769:29:28","nodeType":"YulFunctionCall","src":"3769:29:28"},"variableNames":[{"name":"value0","nativeSrc":"3759:6:28","nodeType":"YulIdentifier","src":"3759:6:28"}]},{"nativeSrc":"3807:46:28","nodeType":"YulVariableDeclaration","src":"3807:46:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3838:9:28","nodeType":"YulIdentifier","src":"3838:9:28"},{"kind":"number","nativeSrc":"3849:2:28","nodeType":"YulLiteral","src":"3849:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3834:3:28","nodeType":"YulIdentifier","src":"3834:3:28"},"nativeSrc":"3834:18:28","nodeType":"YulFunctionCall","src":"3834:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"3821:12:28","nodeType":"YulIdentifier","src":"3821:12:28"},"nativeSrc":"3821:32:28","nodeType":"YulFunctionCall","src":"3821:32:28"},"variables":[{"name":"offset","nativeSrc":"3811:6:28","nodeType":"YulTypedName","src":"3811:6:28","type":""}]},{"body":{"nativeSrc":"3896:16:28","nodeType":"YulBlock","src":"3896:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3905:1:28","nodeType":"YulLiteral","src":"3905:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"3908:1:28","nodeType":"YulLiteral","src":"3908:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3898:6:28","nodeType":"YulIdentifier","src":"3898:6:28"},"nativeSrc":"3898:12:28","nodeType":"YulFunctionCall","src":"3898:12:28"},"nativeSrc":"3898:12:28","nodeType":"YulExpressionStatement","src":"3898:12:28"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3868:6:28","nodeType":"YulIdentifier","src":"3868:6:28"},{"kind":"number","nativeSrc":"3876:18:28","nodeType":"YulLiteral","src":"3876:18:28","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3865:2:28","nodeType":"YulIdentifier","src":"3865:2:28"},"nativeSrc":"3865:30:28","nodeType":"YulFunctionCall","src":"3865:30:28"},"nativeSrc":"3862:50:28","nodeType":"YulIf","src":"3862:50:28"},{"nativeSrc":"3921:84:28","nodeType":"YulVariableDeclaration","src":"3921:84:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3977:9:28","nodeType":"YulIdentifier","src":"3977:9:28"},{"name":"offset","nativeSrc":"3988:6:28","nodeType":"YulIdentifier","src":"3988:6:28"}],"functionName":{"name":"add","nativeSrc":"3973:3:28","nodeType":"YulIdentifier","src":"3973:3:28"},"nativeSrc":"3973:22:28","nodeType":"YulFunctionCall","src":"3973:22:28"},{"name":"dataEnd","nativeSrc":"3997:7:28","nodeType":"YulIdentifier","src":"3997:7:28"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"3947:25:28","nodeType":"YulIdentifier","src":"3947:25:28"},"nativeSrc":"3947:58:28","nodeType":"YulFunctionCall","src":"3947:58:28"},"variables":[{"name":"value1_1","nativeSrc":"3925:8:28","nodeType":"YulTypedName","src":"3925:8:28","type":""},{"name":"value2_1","nativeSrc":"3935:8:28","nodeType":"YulTypedName","src":"3935:8:28","type":""}]},{"nativeSrc":"4014:18:28","nodeType":"YulAssignment","src":"4014:18:28","value":{"name":"value1_1","nativeSrc":"4024:8:28","nodeType":"YulIdentifier","src":"4024:8:28"},"variableNames":[{"name":"value1","nativeSrc":"4014:6:28","nodeType":"YulIdentifier","src":"4014:6:28"}]},{"nativeSrc":"4041:18:28","nodeType":"YulAssignment","src":"4041:18:28","value":{"name":"value2_1","nativeSrc":"4051:8:28","nodeType":"YulIdentifier","src":"4051:8:28"},"variableNames":[{"name":"value2","nativeSrc":"4041:6:28","nodeType":"YulIdentifier","src":"4041:6:28"}]},{"nativeSrc":"4068:42:28","nodeType":"YulAssignment","src":"4068:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4095:9:28","nodeType":"YulIdentifier","src":"4095:9:28"},{"kind":"number","nativeSrc":"4106:2:28","nodeType":"YulLiteral","src":"4106:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4091:3:28","nodeType":"YulIdentifier","src":"4091:3:28"},"nativeSrc":"4091:18:28","nodeType":"YulFunctionCall","src":"4091:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"4078:12:28","nodeType":"YulIdentifier","src":"4078:12:28"},"nativeSrc":"4078:32:28","nodeType":"YulFunctionCall","src":"4078:32:28"},"variableNames":[{"name":"value3","nativeSrc":"4068:6:28","nodeType":"YulIdentifier","src":"4068:6:28"}]}]},"name":"abi_decode_tuple_t_addresst_bytes_calldata_ptrt_uint256","nativeSrc":"3565:551:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3630:9:28","nodeType":"YulTypedName","src":"3630:9:28","type":""},{"name":"dataEnd","nativeSrc":"3641:7:28","nodeType":"YulTypedName","src":"3641:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3653:6:28","nodeType":"YulTypedName","src":"3653:6:28","type":""},{"name":"value1","nativeSrc":"3661:6:28","nodeType":"YulTypedName","src":"3661:6:28","type":""},{"name":"value2","nativeSrc":"3669:6:28","nodeType":"YulTypedName","src":"3669:6:28","type":""},{"name":"value3","nativeSrc":"3677:6:28","nodeType":"YulTypedName","src":"3677:6:28","type":""}],"src":"3565:551:28"},{"body":{"nativeSrc":"4222:125:28","nodeType":"YulBlock","src":"4222:125:28","statements":[{"nativeSrc":"4232:26:28","nodeType":"YulAssignment","src":"4232:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"4244:9:28","nodeType":"YulIdentifier","src":"4244:9:28"},{"kind":"number","nativeSrc":"4255:2:28","nodeType":"YulLiteral","src":"4255:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4240:3:28","nodeType":"YulIdentifier","src":"4240:3:28"},"nativeSrc":"4240:18:28","nodeType":"YulFunctionCall","src":"4240:18:28"},"variableNames":[{"name":"tail","nativeSrc":"4232:4:28","nodeType":"YulIdentifier","src":"4232:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4274:9:28","nodeType":"YulIdentifier","src":"4274:9:28"},{"arguments":[{"name":"value0","nativeSrc":"4289:6:28","nodeType":"YulIdentifier","src":"4289:6:28"},{"kind":"number","nativeSrc":"4297:42:28","nodeType":"YulLiteral","src":"4297:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"4285:3:28","nodeType":"YulIdentifier","src":"4285:3:28"},"nativeSrc":"4285:55:28","nodeType":"YulFunctionCall","src":"4285:55:28"}],"functionName":{"name":"mstore","nativeSrc":"4267:6:28","nodeType":"YulIdentifier","src":"4267:6:28"},"nativeSrc":"4267:74:28","nodeType":"YulFunctionCall","src":"4267:74:28"},"nativeSrc":"4267:74:28","nodeType":"YulExpressionStatement","src":"4267:74:28"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"4121:226:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4191:9:28","nodeType":"YulTypedName","src":"4191:9:28","type":""},{"name":"value0","nativeSrc":"4202:6:28","nodeType":"YulTypedName","src":"4202:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4213:4:28","nodeType":"YulTypedName","src":"4213:4:28","type":""}],"src":"4121:226:28"},{"body":{"nativeSrc":"4453:76:28","nodeType":"YulBlock","src":"4453:76:28","statements":[{"nativeSrc":"4463:26:28","nodeType":"YulAssignment","src":"4463:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"4475:9:28","nodeType":"YulIdentifier","src":"4475:9:28"},{"kind":"number","nativeSrc":"4486:2:28","nodeType":"YulLiteral","src":"4486:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4471:3:28","nodeType":"YulIdentifier","src":"4471:3:28"},"nativeSrc":"4471:18:28","nodeType":"YulFunctionCall","src":"4471:18:28"},"variableNames":[{"name":"tail","nativeSrc":"4463:4:28","nodeType":"YulIdentifier","src":"4463:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4505:9:28","nodeType":"YulIdentifier","src":"4505:9:28"},{"name":"value0","nativeSrc":"4516:6:28","nodeType":"YulIdentifier","src":"4516:6:28"}],"functionName":{"name":"mstore","nativeSrc":"4498:6:28","nodeType":"YulIdentifier","src":"4498:6:28"},"nativeSrc":"4498:25:28","nodeType":"YulFunctionCall","src":"4498:25:28"},"nativeSrc":"4498:25:28","nodeType":"YulExpressionStatement","src":"4498:25:28"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"4352:177:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4422:9:28","nodeType":"YulTypedName","src":"4422:9:28","type":""},{"name":"value0","nativeSrc":"4433:6:28","nodeType":"YulTypedName","src":"4433:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4444:4:28","nodeType":"YulTypedName","src":"4444:4:28","type":""}],"src":"4352:177:28"},{"body":{"nativeSrc":"4663:198:28","nodeType":"YulBlock","src":"4663:198:28","statements":[{"nativeSrc":"4673:26:28","nodeType":"YulAssignment","src":"4673:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"4685:9:28","nodeType":"YulIdentifier","src":"4685:9:28"},{"kind":"number","nativeSrc":"4696:2:28","nodeType":"YulLiteral","src":"4696:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4681:3:28","nodeType":"YulIdentifier","src":"4681:3:28"},"nativeSrc":"4681:18:28","nodeType":"YulFunctionCall","src":"4681:18:28"},"variableNames":[{"name":"tail","nativeSrc":"4673:4:28","nodeType":"YulIdentifier","src":"4673:4:28"}]},{"nativeSrc":"4708:52:28","nodeType":"YulVariableDeclaration","src":"4708:52:28","value":{"kind":"number","nativeSrc":"4718:42:28","nodeType":"YulLiteral","src":"4718:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"4712:2:28","nodeType":"YulTypedName","src":"4712:2:28","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4776:9:28","nodeType":"YulIdentifier","src":"4776:9:28"},{"arguments":[{"name":"value0","nativeSrc":"4791:6:28","nodeType":"YulIdentifier","src":"4791:6:28"},{"name":"_1","nativeSrc":"4799:2:28","nodeType":"YulIdentifier","src":"4799:2:28"}],"functionName":{"name":"and","nativeSrc":"4787:3:28","nodeType":"YulIdentifier","src":"4787:3:28"},"nativeSrc":"4787:15:28","nodeType":"YulFunctionCall","src":"4787:15:28"}],"functionName":{"name":"mstore","nativeSrc":"4769:6:28","nodeType":"YulIdentifier","src":"4769:6:28"},"nativeSrc":"4769:34:28","nodeType":"YulFunctionCall","src":"4769:34:28"},"nativeSrc":"4769:34:28","nodeType":"YulExpressionStatement","src":"4769:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4823:9:28","nodeType":"YulIdentifier","src":"4823:9:28"},{"kind":"number","nativeSrc":"4834:2:28","nodeType":"YulLiteral","src":"4834:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4819:3:28","nodeType":"YulIdentifier","src":"4819:3:28"},"nativeSrc":"4819:18:28","nodeType":"YulFunctionCall","src":"4819:18:28"},{"arguments":[{"name":"value1","nativeSrc":"4843:6:28","nodeType":"YulIdentifier","src":"4843:6:28"},{"name":"_1","nativeSrc":"4851:2:28","nodeType":"YulIdentifier","src":"4851:2:28"}],"functionName":{"name":"and","nativeSrc":"4839:3:28","nodeType":"YulIdentifier","src":"4839:3:28"},"nativeSrc":"4839:15:28","nodeType":"YulFunctionCall","src":"4839:15:28"}],"functionName":{"name":"mstore","nativeSrc":"4812:6:28","nodeType":"YulIdentifier","src":"4812:6:28"},"nativeSrc":"4812:43:28","nodeType":"YulFunctionCall","src":"4812:43:28"},"nativeSrc":"4812:43:28","nodeType":"YulExpressionStatement","src":"4812:43:28"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nativeSrc":"4534:327:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4624:9:28","nodeType":"YulTypedName","src":"4624:9:28","type":""},{"name":"value1","nativeSrc":"4635:6:28","nodeType":"YulTypedName","src":"4635:6:28","type":""},{"name":"value0","nativeSrc":"4643:6:28","nodeType":"YulTypedName","src":"4643:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4654:4:28","nodeType":"YulTypedName","src":"4654:4:28","type":""}],"src":"4534:327:28"},{"body":{"nativeSrc":"4938:378:28","nodeType":"YulBlock","src":"4938:378:28","statements":[{"nativeSrc":"4948:26:28","nodeType":"YulVariableDeclaration","src":"4948:26:28","value":{"arguments":[{"name":"value","nativeSrc":"4968:5:28","nodeType":"YulIdentifier","src":"4968:5:28"}],"functionName":{"name":"mload","nativeSrc":"4962:5:28","nodeType":"YulIdentifier","src":"4962:5:28"},"nativeSrc":"4962:12:28","nodeType":"YulFunctionCall","src":"4962:12:28"},"variables":[{"name":"length","nativeSrc":"4952:6:28","nodeType":"YulTypedName","src":"4952:6:28","type":""}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"4990:3:28","nodeType":"YulIdentifier","src":"4990:3:28"},{"name":"length","nativeSrc":"4995:6:28","nodeType":"YulIdentifier","src":"4995:6:28"}],"functionName":{"name":"mstore","nativeSrc":"4983:6:28","nodeType":"YulIdentifier","src":"4983:6:28"},"nativeSrc":"4983:19:28","nodeType":"YulFunctionCall","src":"4983:19:28"},"nativeSrc":"4983:19:28","nodeType":"YulExpressionStatement","src":"4983:19:28"},{"nativeSrc":"5011:14:28","nodeType":"YulVariableDeclaration","src":"5011:14:28","value":{"kind":"number","nativeSrc":"5021:4:28","nodeType":"YulLiteral","src":"5021:4:28","type":"","value":"0x20"},"variables":[{"name":"_1","nativeSrc":"5015:2:28","nodeType":"YulTypedName","src":"5015:2:28","type":""}]},{"nativeSrc":"5034:21:28","nodeType":"YulAssignment","src":"5034:21:28","value":{"arguments":[{"name":"pos","nativeSrc":"5045:3:28","nodeType":"YulIdentifier","src":"5045:3:28"},{"kind":"number","nativeSrc":"5050:4:28","nodeType":"YulLiteral","src":"5050:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"5041:3:28","nodeType":"YulIdentifier","src":"5041:3:28"},"nativeSrc":"5041:14:28","nodeType":"YulFunctionCall","src":"5041:14:28"},"variableNames":[{"name":"pos","nativeSrc":"5034:3:28","nodeType":"YulIdentifier","src":"5034:3:28"}]},{"nativeSrc":"5064:30:28","nodeType":"YulVariableDeclaration","src":"5064:30:28","value":{"arguments":[{"name":"value","nativeSrc":"5082:5:28","nodeType":"YulIdentifier","src":"5082:5:28"},{"kind":"number","nativeSrc":"5089:4:28","nodeType":"YulLiteral","src":"5089:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"5078:3:28","nodeType":"YulIdentifier","src":"5078:3:28"},"nativeSrc":"5078:16:28","nodeType":"YulFunctionCall","src":"5078:16:28"},"variables":[{"name":"srcPtr","nativeSrc":"5068:6:28","nodeType":"YulTypedName","src":"5068:6:28","type":""}]},{"nativeSrc":"5103:10:28","nodeType":"YulVariableDeclaration","src":"5103:10:28","value":{"kind":"number","nativeSrc":"5112:1:28","nodeType":"YulLiteral","src":"5112:1:28","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"5107:1:28","nodeType":"YulTypedName","src":"5107:1:28","type":""}]},{"body":{"nativeSrc":"5171:120:28","nodeType":"YulBlock","src":"5171:120:28","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"5192:3:28","nodeType":"YulIdentifier","src":"5192:3:28"},{"arguments":[{"name":"srcPtr","nativeSrc":"5203:6:28","nodeType":"YulIdentifier","src":"5203:6:28"}],"functionName":{"name":"mload","nativeSrc":"5197:5:28","nodeType":"YulIdentifier","src":"5197:5:28"},"nativeSrc":"5197:13:28","nodeType":"YulFunctionCall","src":"5197:13:28"}],"functionName":{"name":"mstore","nativeSrc":"5185:6:28","nodeType":"YulIdentifier","src":"5185:6:28"},"nativeSrc":"5185:26:28","nodeType":"YulFunctionCall","src":"5185:26:28"},"nativeSrc":"5185:26:28","nodeType":"YulExpressionStatement","src":"5185:26:28"},{"nativeSrc":"5224:19:28","nodeType":"YulAssignment","src":"5224:19:28","value":{"arguments":[{"name":"pos","nativeSrc":"5235:3:28","nodeType":"YulIdentifier","src":"5235:3:28"},{"name":"_1","nativeSrc":"5240:2:28","nodeType":"YulIdentifier","src":"5240:2:28"}],"functionName":{"name":"add","nativeSrc":"5231:3:28","nodeType":"YulIdentifier","src":"5231:3:28"},"nativeSrc":"5231:12:28","nodeType":"YulFunctionCall","src":"5231:12:28"},"variableNames":[{"name":"pos","nativeSrc":"5224:3:28","nodeType":"YulIdentifier","src":"5224:3:28"}]},{"nativeSrc":"5256:25:28","nodeType":"YulAssignment","src":"5256:25:28","value":{"arguments":[{"name":"srcPtr","nativeSrc":"5270:6:28","nodeType":"YulIdentifier","src":"5270:6:28"},{"name":"_1","nativeSrc":"5278:2:28","nodeType":"YulIdentifier","src":"5278:2:28"}],"functionName":{"name":"add","nativeSrc":"5266:3:28","nodeType":"YulIdentifier","src":"5266:3:28"},"nativeSrc":"5266:15:28","nodeType":"YulFunctionCall","src":"5266:15:28"},"variableNames":[{"name":"srcPtr","nativeSrc":"5256:6:28","nodeType":"YulIdentifier","src":"5256:6:28"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"5133:1:28","nodeType":"YulIdentifier","src":"5133:1:28"},{"name":"length","nativeSrc":"5136:6:28","nodeType":"YulIdentifier","src":"5136:6:28"}],"functionName":{"name":"lt","nativeSrc":"5130:2:28","nodeType":"YulIdentifier","src":"5130:2:28"},"nativeSrc":"5130:13:28","nodeType":"YulFunctionCall","src":"5130:13:28"},"nativeSrc":"5122:169:28","nodeType":"YulForLoop","post":{"nativeSrc":"5144:18:28","nodeType":"YulBlock","src":"5144:18:28","statements":[{"nativeSrc":"5146:14:28","nodeType":"YulAssignment","src":"5146:14:28","value":{"arguments":[{"name":"i","nativeSrc":"5155:1:28","nodeType":"YulIdentifier","src":"5155:1:28"},{"kind":"number","nativeSrc":"5158:1:28","nodeType":"YulLiteral","src":"5158:1:28","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"5151:3:28","nodeType":"YulIdentifier","src":"5151:3:28"},"nativeSrc":"5151:9:28","nodeType":"YulFunctionCall","src":"5151:9:28"},"variableNames":[{"name":"i","nativeSrc":"5146:1:28","nodeType":"YulIdentifier","src":"5146:1:28"}]}]},"pre":{"nativeSrc":"5126:3:28","nodeType":"YulBlock","src":"5126:3:28","statements":[]},"src":"5122:169:28"},{"nativeSrc":"5300:10:28","nodeType":"YulAssignment","src":"5300:10:28","value":{"name":"pos","nativeSrc":"5307:3:28","nodeType":"YulIdentifier","src":"5307:3:28"},"variableNames":[{"name":"end","nativeSrc":"5300:3:28","nodeType":"YulIdentifier","src":"5300:3:28"}]}]},"name":"abi_encode_array_uint256_dyn_memory_ptr","nativeSrc":"4866:450:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4915:5:28","nodeType":"YulTypedName","src":"4915:5:28","type":""},{"name":"pos","nativeSrc":"4922:3:28","nodeType":"YulTypedName","src":"4922:3:28","type":""}],"returnVariables":[{"name":"end","nativeSrc":"4930:3:28","nodeType":"YulTypedName","src":"4930:3:28","type":""}],"src":"4866:450:28"},{"body":{"nativeSrc":"5678:475:28","nodeType":"YulBlock","src":"5678:475:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5695:9:28","nodeType":"YulIdentifier","src":"5695:9:28"},{"arguments":[{"name":"value0","nativeSrc":"5710:6:28","nodeType":"YulIdentifier","src":"5710:6:28"},{"kind":"number","nativeSrc":"5718:42:28","nodeType":"YulLiteral","src":"5718:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"5706:3:28","nodeType":"YulIdentifier","src":"5706:3:28"},"nativeSrc":"5706:55:28","nodeType":"YulFunctionCall","src":"5706:55:28"}],"functionName":{"name":"mstore","nativeSrc":"5688:6:28","nodeType":"YulIdentifier","src":"5688:6:28"},"nativeSrc":"5688:74:28","nodeType":"YulFunctionCall","src":"5688:74:28"},"nativeSrc":"5688:74:28","nodeType":"YulExpressionStatement","src":"5688:74:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5782:9:28","nodeType":"YulIdentifier","src":"5782:9:28"},{"kind":"number","nativeSrc":"5793:2:28","nodeType":"YulLiteral","src":"5793:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5778:3:28","nodeType":"YulIdentifier","src":"5778:3:28"},"nativeSrc":"5778:18:28","nodeType":"YulFunctionCall","src":"5778:18:28"},{"kind":"number","nativeSrc":"5798:3:28","nodeType":"YulLiteral","src":"5798:3:28","type":"","value":"128"}],"functionName":{"name":"mstore","nativeSrc":"5771:6:28","nodeType":"YulIdentifier","src":"5771:6:28"},"nativeSrc":"5771:31:28","nodeType":"YulFunctionCall","src":"5771:31:28"},"nativeSrc":"5771:31:28","nodeType":"YulExpressionStatement","src":"5771:31:28"},{"nativeSrc":"5811:82:28","nodeType":"YulVariableDeclaration","src":"5811:82:28","value":{"arguments":[{"name":"value1","nativeSrc":"5865:6:28","nodeType":"YulIdentifier","src":"5865:6:28"},{"arguments":[{"name":"headStart","nativeSrc":"5877:9:28","nodeType":"YulIdentifier","src":"5877:9:28"},{"kind":"number","nativeSrc":"5888:3:28","nodeType":"YulLiteral","src":"5888:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"5873:3:28","nodeType":"YulIdentifier","src":"5873:3:28"},"nativeSrc":"5873:19:28","nodeType":"YulFunctionCall","src":"5873:19:28"}],"functionName":{"name":"abi_encode_array_uint256_dyn_memory_ptr","nativeSrc":"5825:39:28","nodeType":"YulIdentifier","src":"5825:39:28"},"nativeSrc":"5825:68:28","nodeType":"YulFunctionCall","src":"5825:68:28"},"variables":[{"name":"tail_1","nativeSrc":"5815:6:28","nodeType":"YulTypedName","src":"5815:6:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5913:9:28","nodeType":"YulIdentifier","src":"5913:9:28"},{"kind":"number","nativeSrc":"5924:2:28","nodeType":"YulLiteral","src":"5924:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5909:3:28","nodeType":"YulIdentifier","src":"5909:3:28"},"nativeSrc":"5909:18:28","nodeType":"YulFunctionCall","src":"5909:18:28"},{"arguments":[{"name":"tail_1","nativeSrc":"5933:6:28","nodeType":"YulIdentifier","src":"5933:6:28"},{"name":"headStart","nativeSrc":"5941:9:28","nodeType":"YulIdentifier","src":"5941:9:28"}],"functionName":{"name":"sub","nativeSrc":"5929:3:28","nodeType":"YulIdentifier","src":"5929:3:28"},"nativeSrc":"5929:22:28","nodeType":"YulFunctionCall","src":"5929:22:28"}],"functionName":{"name":"mstore","nativeSrc":"5902:6:28","nodeType":"YulIdentifier","src":"5902:6:28"},"nativeSrc":"5902:50:28","nodeType":"YulFunctionCall","src":"5902:50:28"},"nativeSrc":"5902:50:28","nodeType":"YulExpressionStatement","src":"5902:50:28"},{"nativeSrc":"5961:69:28","nodeType":"YulVariableDeclaration","src":"5961:69:28","value":{"arguments":[{"name":"value2","nativeSrc":"6015:6:28","nodeType":"YulIdentifier","src":"6015:6:28"},{"name":"tail_1","nativeSrc":"6023:6:28","nodeType":"YulIdentifier","src":"6023:6:28"}],"functionName":{"name":"abi_encode_array_uint256_dyn_memory_ptr","nativeSrc":"5975:39:28","nodeType":"YulIdentifier","src":"5975:39:28"},"nativeSrc":"5975:55:28","nodeType":"YulFunctionCall","src":"5975:55:28"},"variables":[{"name":"tail_2","nativeSrc":"5965:6:28","nodeType":"YulTypedName","src":"5965:6:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6050:9:28","nodeType":"YulIdentifier","src":"6050:9:28"},{"kind":"number","nativeSrc":"6061:2:28","nodeType":"YulLiteral","src":"6061:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6046:3:28","nodeType":"YulIdentifier","src":"6046:3:28"},"nativeSrc":"6046:18:28","nodeType":"YulFunctionCall","src":"6046:18:28"},{"arguments":[{"name":"tail_2","nativeSrc":"6070:6:28","nodeType":"YulIdentifier","src":"6070:6:28"},{"name":"headStart","nativeSrc":"6078:9:28","nodeType":"YulIdentifier","src":"6078:9:28"}],"functionName":{"name":"sub","nativeSrc":"6066:3:28","nodeType":"YulIdentifier","src":"6066:3:28"},"nativeSrc":"6066:22:28","nodeType":"YulFunctionCall","src":"6066:22:28"}],"functionName":{"name":"mstore","nativeSrc":"6039:6:28","nodeType":"YulIdentifier","src":"6039:6:28"},"nativeSrc":"6039:50:28","nodeType":"YulFunctionCall","src":"6039:50:28"},"nativeSrc":"6039:50:28","nodeType":"YulExpressionStatement","src":"6039:50:28"},{"expression":{"arguments":[{"name":"tail_2","nativeSrc":"6105:6:28","nodeType":"YulIdentifier","src":"6105:6:28"},{"kind":"number","nativeSrc":"6113:1:28","nodeType":"YulLiteral","src":"6113:1:28","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"6098:6:28","nodeType":"YulIdentifier","src":"6098:6:28"},"nativeSrc":"6098:17:28","nodeType":"YulFunctionCall","src":"6098:17:28"},"nativeSrc":"6098:17:28","nodeType":"YulExpressionStatement","src":"6098:17:28"},{"nativeSrc":"6124:23:28","nodeType":"YulAssignment","src":"6124:23:28","value":{"arguments":[{"name":"tail_2","nativeSrc":"6136:6:28","nodeType":"YulIdentifier","src":"6136:6:28"},{"kind":"number","nativeSrc":"6144:2:28","nodeType":"YulLiteral","src":"6144:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6132:3:28","nodeType":"YulIdentifier","src":"6132:3:28"},"nativeSrc":"6132:15:28","nodeType":"YulFunctionCall","src":"6132:15:28"},"variableNames":[{"name":"tail","nativeSrc":"6124:4:28","nodeType":"YulIdentifier","src":"6124:4:28"}]}]},"name":"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"5321:832:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5631:9:28","nodeType":"YulTypedName","src":"5631:9:28","type":""},{"name":"value2","nativeSrc":"5642:6:28","nodeType":"YulTypedName","src":"5642:6:28","type":""},{"name":"value1","nativeSrc":"5650:6:28","nodeType":"YulTypedName","src":"5650:6:28","type":""},{"name":"value0","nativeSrc":"5658:6:28","nodeType":"YulTypedName","src":"5658:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5669:4:28","nodeType":"YulTypedName","src":"5669:4:28","type":""}],"src":"5321:832:28"},{"body":{"nativeSrc":"6315:241:28","nodeType":"YulBlock","src":"6315:241:28","statements":[{"nativeSrc":"6325:26:28","nodeType":"YulAssignment","src":"6325:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"6337:9:28","nodeType":"YulIdentifier","src":"6337:9:28"},{"kind":"number","nativeSrc":"6348:2:28","nodeType":"YulLiteral","src":"6348:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6333:3:28","nodeType":"YulIdentifier","src":"6333:3:28"},"nativeSrc":"6333:18:28","nodeType":"YulFunctionCall","src":"6333:18:28"},"variableNames":[{"name":"tail","nativeSrc":"6325:4:28","nodeType":"YulIdentifier","src":"6325:4:28"}]},{"nativeSrc":"6360:52:28","nodeType":"YulVariableDeclaration","src":"6360:52:28","value":{"kind":"number","nativeSrc":"6370:42:28","nodeType":"YulLiteral","src":"6370:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"6364:2:28","nodeType":"YulTypedName","src":"6364:2:28","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6428:9:28","nodeType":"YulIdentifier","src":"6428:9:28"},{"arguments":[{"name":"value0","nativeSrc":"6443:6:28","nodeType":"YulIdentifier","src":"6443:6:28"},{"name":"_1","nativeSrc":"6451:2:28","nodeType":"YulIdentifier","src":"6451:2:28"}],"functionName":{"name":"and","nativeSrc":"6439:3:28","nodeType":"YulIdentifier","src":"6439:3:28"},"nativeSrc":"6439:15:28","nodeType":"YulFunctionCall","src":"6439:15:28"}],"functionName":{"name":"mstore","nativeSrc":"6421:6:28","nodeType":"YulIdentifier","src":"6421:6:28"},"nativeSrc":"6421:34:28","nodeType":"YulFunctionCall","src":"6421:34:28"},"nativeSrc":"6421:34:28","nodeType":"YulExpressionStatement","src":"6421:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6475:9:28","nodeType":"YulIdentifier","src":"6475:9:28"},{"kind":"number","nativeSrc":"6486:2:28","nodeType":"YulLiteral","src":"6486:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6471:3:28","nodeType":"YulIdentifier","src":"6471:3:28"},"nativeSrc":"6471:18:28","nodeType":"YulFunctionCall","src":"6471:18:28"},{"arguments":[{"name":"value1","nativeSrc":"6495:6:28","nodeType":"YulIdentifier","src":"6495:6:28"},{"name":"_1","nativeSrc":"6503:2:28","nodeType":"YulIdentifier","src":"6503:2:28"}],"functionName":{"name":"and","nativeSrc":"6491:3:28","nodeType":"YulIdentifier","src":"6491:3:28"},"nativeSrc":"6491:15:28","nodeType":"YulFunctionCall","src":"6491:15:28"}],"functionName":{"name":"mstore","nativeSrc":"6464:6:28","nodeType":"YulIdentifier","src":"6464:6:28"},"nativeSrc":"6464:43:28","nodeType":"YulFunctionCall","src":"6464:43:28"},"nativeSrc":"6464:43:28","nodeType":"YulExpressionStatement","src":"6464:43:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6527:9:28","nodeType":"YulIdentifier","src":"6527:9:28"},{"kind":"number","nativeSrc":"6538:2:28","nodeType":"YulLiteral","src":"6538:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6523:3:28","nodeType":"YulIdentifier","src":"6523:3:28"},"nativeSrc":"6523:18:28","nodeType":"YulFunctionCall","src":"6523:18:28"},{"name":"value2","nativeSrc":"6543:6:28","nodeType":"YulIdentifier","src":"6543:6:28"}],"functionName":{"name":"mstore","nativeSrc":"6516:6:28","nodeType":"YulIdentifier","src":"6516:6:28"},"nativeSrc":"6516:34:28","nodeType":"YulFunctionCall","src":"6516:34:28"},"nativeSrc":"6516:34:28","nodeType":"YulExpressionStatement","src":"6516:34:28"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nativeSrc":"6158:398:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6268:9:28","nodeType":"YulTypedName","src":"6268:9:28","type":""},{"name":"value2","nativeSrc":"6279:6:28","nodeType":"YulTypedName","src":"6279:6:28","type":""},{"name":"value1","nativeSrc":"6287:6:28","nodeType":"YulTypedName","src":"6287:6:28","type":""},{"name":"value0","nativeSrc":"6295:6:28","nodeType":"YulTypedName","src":"6295:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6306:4:28","nodeType":"YulTypedName","src":"6306:4:28","type":""}],"src":"6158:398:28"},{"body":{"nativeSrc":"6639:199:28","nodeType":"YulBlock","src":"6639:199:28","statements":[{"body":{"nativeSrc":"6685:16:28","nodeType":"YulBlock","src":"6685:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6694:1:28","nodeType":"YulLiteral","src":"6694:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"6697:1:28","nodeType":"YulLiteral","src":"6697:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6687:6:28","nodeType":"YulIdentifier","src":"6687:6:28"},"nativeSrc":"6687:12:28","nodeType":"YulFunctionCall","src":"6687:12:28"},"nativeSrc":"6687:12:28","nodeType":"YulExpressionStatement","src":"6687:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6660:7:28","nodeType":"YulIdentifier","src":"6660:7:28"},{"name":"headStart","nativeSrc":"6669:9:28","nodeType":"YulIdentifier","src":"6669:9:28"}],"functionName":{"name":"sub","nativeSrc":"6656:3:28","nodeType":"YulIdentifier","src":"6656:3:28"},"nativeSrc":"6656:23:28","nodeType":"YulFunctionCall","src":"6656:23:28"},{"kind":"number","nativeSrc":"6681:2:28","nodeType":"YulLiteral","src":"6681:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"6652:3:28","nodeType":"YulIdentifier","src":"6652:3:28"},"nativeSrc":"6652:32:28","nodeType":"YulFunctionCall","src":"6652:32:28"},"nativeSrc":"6649:52:28","nodeType":"YulIf","src":"6649:52:28"},{"nativeSrc":"6710:29:28","nodeType":"YulVariableDeclaration","src":"6710:29:28","value":{"arguments":[{"name":"headStart","nativeSrc":"6729:9:28","nodeType":"YulIdentifier","src":"6729:9:28"}],"functionName":{"name":"mload","nativeSrc":"6723:5:28","nodeType":"YulIdentifier","src":"6723:5:28"},"nativeSrc":"6723:16:28","nodeType":"YulFunctionCall","src":"6723:16:28"},"variables":[{"name":"value","nativeSrc":"6714:5:28","nodeType":"YulTypedName","src":"6714:5:28","type":""}]},{"body":{"nativeSrc":"6792:16:28","nodeType":"YulBlock","src":"6792:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6801:1:28","nodeType":"YulLiteral","src":"6801:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"6804:1:28","nodeType":"YulLiteral","src":"6804:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6794:6:28","nodeType":"YulIdentifier","src":"6794:6:28"},"nativeSrc":"6794:12:28","nodeType":"YulFunctionCall","src":"6794:12:28"},"nativeSrc":"6794:12:28","nodeType":"YulExpressionStatement","src":"6794:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6761:5:28","nodeType":"YulIdentifier","src":"6761:5:28"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6782:5:28","nodeType":"YulIdentifier","src":"6782:5:28"}],"functionName":{"name":"iszero","nativeSrc":"6775:6:28","nodeType":"YulIdentifier","src":"6775:6:28"},"nativeSrc":"6775:13:28","nodeType":"YulFunctionCall","src":"6775:13:28"}],"functionName":{"name":"iszero","nativeSrc":"6768:6:28","nodeType":"YulIdentifier","src":"6768:6:28"},"nativeSrc":"6768:21:28","nodeType":"YulFunctionCall","src":"6768:21:28"}],"functionName":{"name":"eq","nativeSrc":"6758:2:28","nodeType":"YulIdentifier","src":"6758:2:28"},"nativeSrc":"6758:32:28","nodeType":"YulFunctionCall","src":"6758:32:28"}],"functionName":{"name":"iszero","nativeSrc":"6751:6:28","nodeType":"YulIdentifier","src":"6751:6:28"},"nativeSrc":"6751:40:28","nodeType":"YulFunctionCall","src":"6751:40:28"},"nativeSrc":"6748:60:28","nodeType":"YulIf","src":"6748:60:28"},{"nativeSrc":"6817:15:28","nodeType":"YulAssignment","src":"6817:15:28","value":{"name":"value","nativeSrc":"6827:5:28","nodeType":"YulIdentifier","src":"6827:5:28"},"variableNames":[{"name":"value0","nativeSrc":"6817:6:28","nodeType":"YulIdentifier","src":"6817:6:28"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"6561:277:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6605:9:28","nodeType":"YulTypedName","src":"6605:9:28","type":""},{"name":"dataEnd","nativeSrc":"6616:7:28","nodeType":"YulTypedName","src":"6616:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6628:6:28","nodeType":"YulTypedName","src":"6628:6:28","type":""}],"src":"6561:277:28"},{"body":{"nativeSrc":"6892:233:28","nodeType":"YulBlock","src":"6892:233:28","statements":[{"nativeSrc":"6902:17:28","nodeType":"YulAssignment","src":"6902:17:28","value":{"arguments":[{"name":"x","nativeSrc":"6914:1:28","nodeType":"YulIdentifier","src":"6914:1:28"},{"name":"y","nativeSrc":"6917:1:28","nodeType":"YulIdentifier","src":"6917:1:28"}],"functionName":{"name":"sub","nativeSrc":"6910:3:28","nodeType":"YulIdentifier","src":"6910:3:28"},"nativeSrc":"6910:9:28","nodeType":"YulFunctionCall","src":"6910:9:28"},"variableNames":[{"name":"diff","nativeSrc":"6902:4:28","nodeType":"YulIdentifier","src":"6902:4:28"}]},{"body":{"nativeSrc":"6951:168:28","nodeType":"YulBlock","src":"6951:168:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6972:1:28","nodeType":"YulLiteral","src":"6972:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"6975:77:28","nodeType":"YulLiteral","src":"6975:77:28","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"6965:6:28","nodeType":"YulIdentifier","src":"6965:6:28"},"nativeSrc":"6965:88:28","nodeType":"YulFunctionCall","src":"6965:88:28"},"nativeSrc":"6965:88:28","nodeType":"YulExpressionStatement","src":"6965:88:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7073:1:28","nodeType":"YulLiteral","src":"7073:1:28","type":"","value":"4"},{"kind":"number","nativeSrc":"7076:4:28","nodeType":"YulLiteral","src":"7076:4:28","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"7066:6:28","nodeType":"YulIdentifier","src":"7066:6:28"},"nativeSrc":"7066:15:28","nodeType":"YulFunctionCall","src":"7066:15:28"},"nativeSrc":"7066:15:28","nodeType":"YulExpressionStatement","src":"7066:15:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7101:1:28","nodeType":"YulLiteral","src":"7101:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"7104:4:28","nodeType":"YulLiteral","src":"7104:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"7094:6:28","nodeType":"YulIdentifier","src":"7094:6:28"},"nativeSrc":"7094:15:28","nodeType":"YulFunctionCall","src":"7094:15:28"},"nativeSrc":"7094:15:28","nodeType":"YulExpressionStatement","src":"7094:15:28"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"6934:4:28","nodeType":"YulIdentifier","src":"6934:4:28"},{"name":"x","nativeSrc":"6940:1:28","nodeType":"YulIdentifier","src":"6940:1:28"}],"functionName":{"name":"gt","nativeSrc":"6931:2:28","nodeType":"YulIdentifier","src":"6931:2:28"},"nativeSrc":"6931:11:28","nodeType":"YulFunctionCall","src":"6931:11:28"},"nativeSrc":"6928:191:28","nodeType":"YulIf","src":"6928:191:28"}]},"name":"checked_sub_t_uint256","nativeSrc":"6843:282:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"6874:1:28","nodeType":"YulTypedName","src":"6874:1:28","type":""},{"name":"y","nativeSrc":"6877:1:28","nodeType":"YulTypedName","src":"6877:1:28","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"6883:4:28","nodeType":"YulTypedName","src":"6883:4:28","type":""}],"src":"6843:282:28"},{"body":{"nativeSrc":"7162:152:28","nodeType":"YulBlock","src":"7162:152:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7179:1:28","nodeType":"YulLiteral","src":"7179:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"7182:77:28","nodeType":"YulLiteral","src":"7182:77:28","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"7172:6:28","nodeType":"YulIdentifier","src":"7172:6:28"},"nativeSrc":"7172:88:28","nodeType":"YulFunctionCall","src":"7172:88:28"},"nativeSrc":"7172:88:28","nodeType":"YulExpressionStatement","src":"7172:88:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7276:1:28","nodeType":"YulLiteral","src":"7276:1:28","type":"","value":"4"},{"kind":"number","nativeSrc":"7279:4:28","nodeType":"YulLiteral","src":"7279:4:28","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"7269:6:28","nodeType":"YulIdentifier","src":"7269:6:28"},"nativeSrc":"7269:15:28","nodeType":"YulFunctionCall","src":"7269:15:28"},"nativeSrc":"7269:15:28","nodeType":"YulExpressionStatement","src":"7269:15:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7300:1:28","nodeType":"YulLiteral","src":"7300:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"7303:4:28","nodeType":"YulLiteral","src":"7303:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"7293:6:28","nodeType":"YulIdentifier","src":"7293:6:28"},"nativeSrc":"7293:15:28","nodeType":"YulFunctionCall","src":"7293:15:28"},"nativeSrc":"7293:15:28","nodeType":"YulExpressionStatement","src":"7293:15:28"}]},"name":"panic_error_0x41","nativeSrc":"7130:184:28","nodeType":"YulFunctionDefinition","src":"7130:184:28"},{"body":{"nativeSrc":"7364:289:28","nodeType":"YulBlock","src":"7364:289:28","statements":[{"nativeSrc":"7374:19:28","nodeType":"YulAssignment","src":"7374:19:28","value":{"arguments":[{"kind":"number","nativeSrc":"7390:2:28","nodeType":"YulLiteral","src":"7390:2:28","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"7384:5:28","nodeType":"YulIdentifier","src":"7384:5:28"},"nativeSrc":"7384:9:28","nodeType":"YulFunctionCall","src":"7384:9:28"},"variableNames":[{"name":"memPtr","nativeSrc":"7374:6:28","nodeType":"YulIdentifier","src":"7374:6:28"}]},{"nativeSrc":"7402:117:28","nodeType":"YulVariableDeclaration","src":"7402:117:28","value":{"arguments":[{"name":"memPtr","nativeSrc":"7424:6:28","nodeType":"YulIdentifier","src":"7424:6:28"},{"arguments":[{"arguments":[{"name":"size","nativeSrc":"7440:4:28","nodeType":"YulIdentifier","src":"7440:4:28"},{"kind":"number","nativeSrc":"7446:2:28","nodeType":"YulLiteral","src":"7446:2:28","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"7436:3:28","nodeType":"YulIdentifier","src":"7436:3:28"},"nativeSrc":"7436:13:28","nodeType":"YulFunctionCall","src":"7436:13:28"},{"kind":"number","nativeSrc":"7451:66:28","nodeType":"YulLiteral","src":"7451:66:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"7432:3:28","nodeType":"YulIdentifier","src":"7432:3:28"},"nativeSrc":"7432:86:28","nodeType":"YulFunctionCall","src":"7432:86:28"}],"functionName":{"name":"add","nativeSrc":"7420:3:28","nodeType":"YulIdentifier","src":"7420:3:28"},"nativeSrc":"7420:99:28","nodeType":"YulFunctionCall","src":"7420:99:28"},"variables":[{"name":"newFreePtr","nativeSrc":"7406:10:28","nodeType":"YulTypedName","src":"7406:10:28","type":""}]},{"body":{"nativeSrc":"7594:22:28","nodeType":"YulBlock","src":"7594:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"7596:16:28","nodeType":"YulIdentifier","src":"7596:16:28"},"nativeSrc":"7596:18:28","nodeType":"YulFunctionCall","src":"7596:18:28"},"nativeSrc":"7596:18:28","nodeType":"YulExpressionStatement","src":"7596:18:28"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"7537:10:28","nodeType":"YulIdentifier","src":"7537:10:28"},{"kind":"number","nativeSrc":"7549:18:28","nodeType":"YulLiteral","src":"7549:18:28","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"7534:2:28","nodeType":"YulIdentifier","src":"7534:2:28"},"nativeSrc":"7534:34:28","nodeType":"YulFunctionCall","src":"7534:34:28"},{"arguments":[{"name":"newFreePtr","nativeSrc":"7573:10:28","nodeType":"YulIdentifier","src":"7573:10:28"},{"name":"memPtr","nativeSrc":"7585:6:28","nodeType":"YulIdentifier","src":"7585:6:28"}],"functionName":{"name":"lt","nativeSrc":"7570:2:28","nodeType":"YulIdentifier","src":"7570:2:28"},"nativeSrc":"7570:22:28","nodeType":"YulFunctionCall","src":"7570:22:28"}],"functionName":{"name":"or","nativeSrc":"7531:2:28","nodeType":"YulIdentifier","src":"7531:2:28"},"nativeSrc":"7531:62:28","nodeType":"YulFunctionCall","src":"7531:62:28"},"nativeSrc":"7528:88:28","nodeType":"YulIf","src":"7528:88:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7632:2:28","nodeType":"YulLiteral","src":"7632:2:28","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"7636:10:28","nodeType":"YulIdentifier","src":"7636:10:28"}],"functionName":{"name":"mstore","nativeSrc":"7625:6:28","nodeType":"YulIdentifier","src":"7625:6:28"},"nativeSrc":"7625:22:28","nodeType":"YulFunctionCall","src":"7625:22:28"},"nativeSrc":"7625:22:28","nodeType":"YulExpressionStatement","src":"7625:22:28"}]},"name":"allocate_memory","nativeSrc":"7319:334:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nativeSrc":"7344:4:28","nodeType":"YulTypedName","src":"7344:4:28","type":""}],"returnVariables":[{"name":"memPtr","nativeSrc":"7353:6:28","nodeType":"YulTypedName","src":"7353:6:28","type":""}],"src":"7319:334:28"},{"body":{"nativeSrc":"7727:114:28","nodeType":"YulBlock","src":"7727:114:28","statements":[{"body":{"nativeSrc":"7771:22:28","nodeType":"YulBlock","src":"7771:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"7773:16:28","nodeType":"YulIdentifier","src":"7773:16:28"},"nativeSrc":"7773:18:28","nodeType":"YulFunctionCall","src":"7773:18:28"},"nativeSrc":"7773:18:28","nodeType":"YulExpressionStatement","src":"7773:18:28"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"7743:6:28","nodeType":"YulIdentifier","src":"7743:6:28"},{"kind":"number","nativeSrc":"7751:18:28","nodeType":"YulLiteral","src":"7751:18:28","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"7740:2:28","nodeType":"YulIdentifier","src":"7740:2:28"},"nativeSrc":"7740:30:28","nodeType":"YulFunctionCall","src":"7740:30:28"},"nativeSrc":"7737:56:28","nodeType":"YulIf","src":"7737:56:28"},{"nativeSrc":"7802:33:28","nodeType":"YulAssignment","src":"7802:33:28","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"7818:1:28","nodeType":"YulLiteral","src":"7818:1:28","type":"","value":"5"},{"name":"length","nativeSrc":"7821:6:28","nodeType":"YulIdentifier","src":"7821:6:28"}],"functionName":{"name":"shl","nativeSrc":"7814:3:28","nodeType":"YulIdentifier","src":"7814:3:28"},"nativeSrc":"7814:14:28","nodeType":"YulFunctionCall","src":"7814:14:28"},{"kind":"number","nativeSrc":"7830:4:28","nodeType":"YulLiteral","src":"7830:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"7810:3:28","nodeType":"YulIdentifier","src":"7810:3:28"},"nativeSrc":"7810:25:28","nodeType":"YulFunctionCall","src":"7810:25:28"},"variableNames":[{"name":"size","nativeSrc":"7802:4:28","nodeType":"YulIdentifier","src":"7802:4:28"}]}]},"name":"array_allocation_size_array_bytes32_dyn","nativeSrc":"7658:183:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nativeSrc":"7707:6:28","nodeType":"YulTypedName","src":"7707:6:28","type":""}],"returnVariables":[{"name":"size","nativeSrc":"7718:4:28","nodeType":"YulTypedName","src":"7718:4:28","type":""}],"src":"7658:183:28"},{"body":{"nativeSrc":"7910:604:28","nodeType":"YulBlock","src":"7910:604:28","statements":[{"body":{"nativeSrc":"7959:16:28","nodeType":"YulBlock","src":"7959:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7968:1:28","nodeType":"YulLiteral","src":"7968:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"7971:1:28","nodeType":"YulLiteral","src":"7971:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7961:6:28","nodeType":"YulIdentifier","src":"7961:6:28"},"nativeSrc":"7961:12:28","nodeType":"YulFunctionCall","src":"7961:12:28"},"nativeSrc":"7961:12:28","nodeType":"YulExpressionStatement","src":"7961:12:28"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"7938:6:28","nodeType":"YulIdentifier","src":"7938:6:28"},{"kind":"number","nativeSrc":"7946:4:28","nodeType":"YulLiteral","src":"7946:4:28","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"7934:3:28","nodeType":"YulIdentifier","src":"7934:3:28"},"nativeSrc":"7934:17:28","nodeType":"YulFunctionCall","src":"7934:17:28"},{"name":"end","nativeSrc":"7953:3:28","nodeType":"YulIdentifier","src":"7953:3:28"}],"functionName":{"name":"slt","nativeSrc":"7930:3:28","nodeType":"YulIdentifier","src":"7930:3:28"},"nativeSrc":"7930:27:28","nodeType":"YulFunctionCall","src":"7930:27:28"}],"functionName":{"name":"iszero","nativeSrc":"7923:6:28","nodeType":"YulIdentifier","src":"7923:6:28"},"nativeSrc":"7923:35:28","nodeType":"YulFunctionCall","src":"7923:35:28"},"nativeSrc":"7920:55:28","nodeType":"YulIf","src":"7920:55:28"},{"nativeSrc":"7984:30:28","nodeType":"YulVariableDeclaration","src":"7984:30:28","value":{"arguments":[{"name":"offset","nativeSrc":"8007:6:28","nodeType":"YulIdentifier","src":"8007:6:28"}],"functionName":{"name":"calldataload","nativeSrc":"7994:12:28","nodeType":"YulIdentifier","src":"7994:12:28"},"nativeSrc":"7994:20:28","nodeType":"YulFunctionCall","src":"7994:20:28"},"variables":[{"name":"_1","nativeSrc":"7988:2:28","nodeType":"YulTypedName","src":"7988:2:28","type":""}]},{"nativeSrc":"8023:14:28","nodeType":"YulVariableDeclaration","src":"8023:14:28","value":{"kind":"number","nativeSrc":"8033:4:28","nodeType":"YulLiteral","src":"8033:4:28","type":"","value":"0x20"},"variables":[{"name":"_2","nativeSrc":"8027:2:28","nodeType":"YulTypedName","src":"8027:2:28","type":""}]},{"nativeSrc":"8046:71:28","nodeType":"YulVariableDeclaration","src":"8046:71:28","value":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"8113:2:28","nodeType":"YulIdentifier","src":"8113:2:28"}],"functionName":{"name":"array_allocation_size_array_bytes32_dyn","nativeSrc":"8073:39:28","nodeType":"YulIdentifier","src":"8073:39:28"},"nativeSrc":"8073:43:28","nodeType":"YulFunctionCall","src":"8073:43:28"}],"functionName":{"name":"allocate_memory","nativeSrc":"8057:15:28","nodeType":"YulIdentifier","src":"8057:15:28"},"nativeSrc":"8057:60:28","nodeType":"YulFunctionCall","src":"8057:60:28"},"variables":[{"name":"dst","nativeSrc":"8050:3:28","nodeType":"YulTypedName","src":"8050:3:28","type":""}]},{"nativeSrc":"8126:16:28","nodeType":"YulVariableDeclaration","src":"8126:16:28","value":{"name":"dst","nativeSrc":"8139:3:28","nodeType":"YulIdentifier","src":"8139:3:28"},"variables":[{"name":"dst_1","nativeSrc":"8130:5:28","nodeType":"YulTypedName","src":"8130:5:28","type":""}]},{"expression":{"arguments":[{"name":"dst","nativeSrc":"8158:3:28","nodeType":"YulIdentifier","src":"8158:3:28"},{"name":"_1","nativeSrc":"8163:2:28","nodeType":"YulIdentifier","src":"8163:2:28"}],"functionName":{"name":"mstore","nativeSrc":"8151:6:28","nodeType":"YulIdentifier","src":"8151:6:28"},"nativeSrc":"8151:15:28","nodeType":"YulFunctionCall","src":"8151:15:28"},"nativeSrc":"8151:15:28","nodeType":"YulExpressionStatement","src":"8151:15:28"},{"nativeSrc":"8175:21:28","nodeType":"YulAssignment","src":"8175:21:28","value":{"arguments":[{"name":"dst","nativeSrc":"8186:3:28","nodeType":"YulIdentifier","src":"8186:3:28"},{"kind":"number","nativeSrc":"8191:4:28","nodeType":"YulLiteral","src":"8191:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"8182:3:28","nodeType":"YulIdentifier","src":"8182:3:28"},"nativeSrc":"8182:14:28","nodeType":"YulFunctionCall","src":"8182:14:28"},"variableNames":[{"name":"dst","nativeSrc":"8175:3:28","nodeType":"YulIdentifier","src":"8175:3:28"}]},{"nativeSrc":"8205:48:28","nodeType":"YulVariableDeclaration","src":"8205:48:28","value":{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"8227:6:28","nodeType":"YulIdentifier","src":"8227:6:28"},{"arguments":[{"kind":"number","nativeSrc":"8239:1:28","nodeType":"YulLiteral","src":"8239:1:28","type":"","value":"5"},{"name":"_1","nativeSrc":"8242:2:28","nodeType":"YulIdentifier","src":"8242:2:28"}],"functionName":{"name":"shl","nativeSrc":"8235:3:28","nodeType":"YulIdentifier","src":"8235:3:28"},"nativeSrc":"8235:10:28","nodeType":"YulFunctionCall","src":"8235:10:28"}],"functionName":{"name":"add","nativeSrc":"8223:3:28","nodeType":"YulIdentifier","src":"8223:3:28"},"nativeSrc":"8223:23:28","nodeType":"YulFunctionCall","src":"8223:23:28"},{"kind":"number","nativeSrc":"8248:4:28","nodeType":"YulLiteral","src":"8248:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"8219:3:28","nodeType":"YulIdentifier","src":"8219:3:28"},"nativeSrc":"8219:34:28","nodeType":"YulFunctionCall","src":"8219:34:28"},"variables":[{"name":"srcEnd","nativeSrc":"8209:6:28","nodeType":"YulTypedName","src":"8209:6:28","type":""}]},{"body":{"nativeSrc":"8281:16:28","nodeType":"YulBlock","src":"8281:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8290:1:28","nodeType":"YulLiteral","src":"8290:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"8293:1:28","nodeType":"YulLiteral","src":"8293:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8283:6:28","nodeType":"YulIdentifier","src":"8283:6:28"},"nativeSrc":"8283:12:28","nodeType":"YulFunctionCall","src":"8283:12:28"},"nativeSrc":"8283:12:28","nodeType":"YulExpressionStatement","src":"8283:12:28"}]},"condition":{"arguments":[{"name":"srcEnd","nativeSrc":"8268:6:28","nodeType":"YulIdentifier","src":"8268:6:28"},{"name":"end","nativeSrc":"8276:3:28","nodeType":"YulIdentifier","src":"8276:3:28"}],"functionName":{"name":"gt","nativeSrc":"8265:2:28","nodeType":"YulIdentifier","src":"8265:2:28"},"nativeSrc":"8265:15:28","nodeType":"YulFunctionCall","src":"8265:15:28"},"nativeSrc":"8262:35:28","nodeType":"YulIf","src":"8262:35:28"},{"nativeSrc":"8306:28:28","nodeType":"YulVariableDeclaration","src":"8306:28:28","value":{"arguments":[{"name":"offset","nativeSrc":"8321:6:28","nodeType":"YulIdentifier","src":"8321:6:28"},{"kind":"number","nativeSrc":"8329:4:28","nodeType":"YulLiteral","src":"8329:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"8317:3:28","nodeType":"YulIdentifier","src":"8317:3:28"},"nativeSrc":"8317:17:28","nodeType":"YulFunctionCall","src":"8317:17:28"},"variables":[{"name":"src","nativeSrc":"8310:3:28","nodeType":"YulTypedName","src":"8310:3:28","type":""}]},{"body":{"nativeSrc":"8399:86:28","nodeType":"YulBlock","src":"8399:86:28","statements":[{"expression":{"arguments":[{"name":"dst","nativeSrc":"8420:3:28","nodeType":"YulIdentifier","src":"8420:3:28"},{"arguments":[{"name":"src","nativeSrc":"8438:3:28","nodeType":"YulIdentifier","src":"8438:3:28"}],"functionName":{"name":"calldataload","nativeSrc":"8425:12:28","nodeType":"YulIdentifier","src":"8425:12:28"},"nativeSrc":"8425:17:28","nodeType":"YulFunctionCall","src":"8425:17:28"}],"functionName":{"name":"mstore","nativeSrc":"8413:6:28","nodeType":"YulIdentifier","src":"8413:6:28"},"nativeSrc":"8413:30:28","nodeType":"YulFunctionCall","src":"8413:30:28"},"nativeSrc":"8413:30:28","nodeType":"YulExpressionStatement","src":"8413:30:28"},{"nativeSrc":"8456:19:28","nodeType":"YulAssignment","src":"8456:19:28","value":{"arguments":[{"name":"dst","nativeSrc":"8467:3:28","nodeType":"YulIdentifier","src":"8467:3:28"},{"name":"_2","nativeSrc":"8472:2:28","nodeType":"YulIdentifier","src":"8472:2:28"}],"functionName":{"name":"add","nativeSrc":"8463:3:28","nodeType":"YulIdentifier","src":"8463:3:28"},"nativeSrc":"8463:12:28","nodeType":"YulFunctionCall","src":"8463:12:28"},"variableNames":[{"name":"dst","nativeSrc":"8456:3:28","nodeType":"YulIdentifier","src":"8456:3:28"}]}]},"condition":{"arguments":[{"name":"src","nativeSrc":"8354:3:28","nodeType":"YulIdentifier","src":"8354:3:28"},{"name":"srcEnd","nativeSrc":"8359:6:28","nodeType":"YulIdentifier","src":"8359:6:28"}],"functionName":{"name":"lt","nativeSrc":"8351:2:28","nodeType":"YulIdentifier","src":"8351:2:28"},"nativeSrc":"8351:15:28","nodeType":"YulFunctionCall","src":"8351:15:28"},"nativeSrc":"8343:142:28","nodeType":"YulForLoop","post":{"nativeSrc":"8367:23:28","nodeType":"YulBlock","src":"8367:23:28","statements":[{"nativeSrc":"8369:19:28","nodeType":"YulAssignment","src":"8369:19:28","value":{"arguments":[{"name":"src","nativeSrc":"8380:3:28","nodeType":"YulIdentifier","src":"8380:3:28"},{"name":"_2","nativeSrc":"8385:2:28","nodeType":"YulIdentifier","src":"8385:2:28"}],"functionName":{"name":"add","nativeSrc":"8376:3:28","nodeType":"YulIdentifier","src":"8376:3:28"},"nativeSrc":"8376:12:28","nodeType":"YulFunctionCall","src":"8376:12:28"},"variableNames":[{"name":"src","nativeSrc":"8369:3:28","nodeType":"YulIdentifier","src":"8369:3:28"}]}]},"pre":{"nativeSrc":"8347:3:28","nodeType":"YulBlock","src":"8347:3:28","statements":[]},"src":"8343:142:28"},{"nativeSrc":"8494:14:28","nodeType":"YulAssignment","src":"8494:14:28","value":{"name":"dst_1","nativeSrc":"8503:5:28","nodeType":"YulIdentifier","src":"8503:5:28"},"variableNames":[{"name":"array","nativeSrc":"8494:5:28","nodeType":"YulIdentifier","src":"8494:5:28"}]}]},"name":"abi_decode_array_uint256_dyn","nativeSrc":"7846:668:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"7884:6:28","nodeType":"YulTypedName","src":"7884:6:28","type":""},{"name":"end","nativeSrc":"7892:3:28","nodeType":"YulTypedName","src":"7892:3:28","type":""}],"returnVariables":[{"name":"array","nativeSrc":"7900:5:28","nodeType":"YulTypedName","src":"7900:5:28","type":""}],"src":"7846:668:28"},{"body":{"nativeSrc":"8732:1289:28","nodeType":"YulBlock","src":"8732:1289:28","statements":[{"body":{"nativeSrc":"8779:16:28","nodeType":"YulBlock","src":"8779:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8788:1:28","nodeType":"YulLiteral","src":"8788:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"8791:1:28","nodeType":"YulLiteral","src":"8791:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8781:6:28","nodeType":"YulIdentifier","src":"8781:6:28"},"nativeSrc":"8781:12:28","nodeType":"YulFunctionCall","src":"8781:12:28"},"nativeSrc":"8781:12:28","nodeType":"YulExpressionStatement","src":"8781:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8753:7:28","nodeType":"YulIdentifier","src":"8753:7:28"},{"name":"headStart","nativeSrc":"8762:9:28","nodeType":"YulIdentifier","src":"8762:9:28"}],"functionName":{"name":"sub","nativeSrc":"8749:3:28","nodeType":"YulIdentifier","src":"8749:3:28"},"nativeSrc":"8749:23:28","nodeType":"YulFunctionCall","src":"8749:23:28"},{"kind":"number","nativeSrc":"8774:3:28","nodeType":"YulLiteral","src":"8774:3:28","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"8745:3:28","nodeType":"YulIdentifier","src":"8745:3:28"},"nativeSrc":"8745:33:28","nodeType":"YulFunctionCall","src":"8745:33:28"},"nativeSrc":"8742:53:28","nodeType":"YulIf","src":"8742:53:28"},{"nativeSrc":"8804:33:28","nodeType":"YulAssignment","src":"8804:33:28","value":{"arguments":[{"name":"headStart","nativeSrc":"8827:9:28","nodeType":"YulIdentifier","src":"8827:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"8814:12:28","nodeType":"YulIdentifier","src":"8814:12:28"},"nativeSrc":"8814:23:28","nodeType":"YulFunctionCall","src":"8814:23:28"},"variableNames":[{"name":"value0","nativeSrc":"8804:6:28","nodeType":"YulIdentifier","src":"8804:6:28"}]},{"nativeSrc":"8846:12:28","nodeType":"YulVariableDeclaration","src":"8846:12:28","value":{"kind":"number","nativeSrc":"8856:2:28","nodeType":"YulLiteral","src":"8856:2:28","type":"","value":"32"},"variables":[{"name":"_1","nativeSrc":"8850:2:28","nodeType":"YulTypedName","src":"8850:2:28","type":""}]},{"nativeSrc":"8867:42:28","nodeType":"YulAssignment","src":"8867:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8894:9:28","nodeType":"YulIdentifier","src":"8894:9:28"},{"name":"_1","nativeSrc":"8905:2:28","nodeType":"YulIdentifier","src":"8905:2:28"}],"functionName":{"name":"add","nativeSrc":"8890:3:28","nodeType":"YulIdentifier","src":"8890:3:28"},"nativeSrc":"8890:18:28","nodeType":"YulFunctionCall","src":"8890:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"8877:12:28","nodeType":"YulIdentifier","src":"8877:12:28"},"nativeSrc":"8877:32:28","nodeType":"YulFunctionCall","src":"8877:32:28"},"variableNames":[{"name":"value1","nativeSrc":"8867:6:28","nodeType":"YulIdentifier","src":"8867:6:28"}]},{"nativeSrc":"8918:46:28","nodeType":"YulVariableDeclaration","src":"8918:46:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8949:9:28","nodeType":"YulIdentifier","src":"8949:9:28"},{"kind":"number","nativeSrc":"8960:2:28","nodeType":"YulLiteral","src":"8960:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8945:3:28","nodeType":"YulIdentifier","src":"8945:3:28"},"nativeSrc":"8945:18:28","nodeType":"YulFunctionCall","src":"8945:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"8932:12:28","nodeType":"YulIdentifier","src":"8932:12:28"},"nativeSrc":"8932:32:28","nodeType":"YulFunctionCall","src":"8932:32:28"},"variables":[{"name":"offset","nativeSrc":"8922:6:28","nodeType":"YulTypedName","src":"8922:6:28","type":""}]},{"nativeSrc":"8973:28:28","nodeType":"YulVariableDeclaration","src":"8973:28:28","value":{"kind":"number","nativeSrc":"8983:18:28","nodeType":"YulLiteral","src":"8983:18:28","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nativeSrc":"8977:2:28","nodeType":"YulTypedName","src":"8977:2:28","type":""}]},{"body":{"nativeSrc":"9028:16:28","nodeType":"YulBlock","src":"9028:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9037:1:28","nodeType":"YulLiteral","src":"9037:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"9040:1:28","nodeType":"YulLiteral","src":"9040:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9030:6:28","nodeType":"YulIdentifier","src":"9030:6:28"},"nativeSrc":"9030:12:28","nodeType":"YulFunctionCall","src":"9030:12:28"},"nativeSrc":"9030:12:28","nodeType":"YulExpressionStatement","src":"9030:12:28"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"9016:6:28","nodeType":"YulIdentifier","src":"9016:6:28"},{"name":"_2","nativeSrc":"9024:2:28","nodeType":"YulIdentifier","src":"9024:2:28"}],"functionName":{"name":"gt","nativeSrc":"9013:2:28","nodeType":"YulIdentifier","src":"9013:2:28"},"nativeSrc":"9013:14:28","nodeType":"YulFunctionCall","src":"9013:14:28"},"nativeSrc":"9010:34:28","nodeType":"YulIf","src":"9010:34:28"},{"nativeSrc":"9053:32:28","nodeType":"YulVariableDeclaration","src":"9053:32:28","value":{"arguments":[{"name":"headStart","nativeSrc":"9067:9:28","nodeType":"YulIdentifier","src":"9067:9:28"},{"name":"offset","nativeSrc":"9078:6:28","nodeType":"YulIdentifier","src":"9078:6:28"}],"functionName":{"name":"add","nativeSrc":"9063:3:28","nodeType":"YulIdentifier","src":"9063:3:28"},"nativeSrc":"9063:22:28","nodeType":"YulFunctionCall","src":"9063:22:28"},"variables":[{"name":"_3","nativeSrc":"9057:2:28","nodeType":"YulTypedName","src":"9057:2:28","type":""}]},{"body":{"nativeSrc":"9133:16:28","nodeType":"YulBlock","src":"9133:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9142:1:28","nodeType":"YulLiteral","src":"9142:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"9145:1:28","nodeType":"YulLiteral","src":"9145:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9135:6:28","nodeType":"YulIdentifier","src":"9135:6:28"},"nativeSrc":"9135:12:28","nodeType":"YulFunctionCall","src":"9135:12:28"},"nativeSrc":"9135:12:28","nodeType":"YulExpressionStatement","src":"9135:12:28"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nativeSrc":"9112:2:28","nodeType":"YulIdentifier","src":"9112:2:28"},{"kind":"number","nativeSrc":"9116:4:28","nodeType":"YulLiteral","src":"9116:4:28","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"9108:3:28","nodeType":"YulIdentifier","src":"9108:3:28"},"nativeSrc":"9108:13:28","nodeType":"YulFunctionCall","src":"9108:13:28"},{"name":"dataEnd","nativeSrc":"9123:7:28","nodeType":"YulIdentifier","src":"9123:7:28"}],"functionName":{"name":"slt","nativeSrc":"9104:3:28","nodeType":"YulIdentifier","src":"9104:3:28"},"nativeSrc":"9104:27:28","nodeType":"YulFunctionCall","src":"9104:27:28"}],"functionName":{"name":"iszero","nativeSrc":"9097:6:28","nodeType":"YulIdentifier","src":"9097:6:28"},"nativeSrc":"9097:35:28","nodeType":"YulFunctionCall","src":"9097:35:28"},"nativeSrc":"9094:55:28","nodeType":"YulIf","src":"9094:55:28"},{"nativeSrc":"9158:26:28","nodeType":"YulVariableDeclaration","src":"9158:26:28","value":{"arguments":[{"name":"_3","nativeSrc":"9181:2:28","nodeType":"YulIdentifier","src":"9181:2:28"}],"functionName":{"name":"calldataload","nativeSrc":"9168:12:28","nodeType":"YulIdentifier","src":"9168:12:28"},"nativeSrc":"9168:16:28","nodeType":"YulFunctionCall","src":"9168:16:28"},"variables":[{"name":"_4","nativeSrc":"9162:2:28","nodeType":"YulTypedName","src":"9162:2:28","type":""}]},{"nativeSrc":"9193:71:28","nodeType":"YulVariableDeclaration","src":"9193:71:28","value":{"arguments":[{"arguments":[{"name":"_4","nativeSrc":"9260:2:28","nodeType":"YulIdentifier","src":"9260:2:28"}],"functionName":{"name":"array_allocation_size_array_bytes32_dyn","nativeSrc":"9220:39:28","nodeType":"YulIdentifier","src":"9220:39:28"},"nativeSrc":"9220:43:28","nodeType":"YulFunctionCall","src":"9220:43:28"}],"functionName":{"name":"allocate_memory","nativeSrc":"9204:15:28","nodeType":"YulIdentifier","src":"9204:15:28"},"nativeSrc":"9204:60:28","nodeType":"YulFunctionCall","src":"9204:60:28"},"variables":[{"name":"dst","nativeSrc":"9197:3:28","nodeType":"YulTypedName","src":"9197:3:28","type":""}]},{"nativeSrc":"9273:16:28","nodeType":"YulVariableDeclaration","src":"9273:16:28","value":{"name":"dst","nativeSrc":"9286:3:28","nodeType":"YulIdentifier","src":"9286:3:28"},"variables":[{"name":"dst_1","nativeSrc":"9277:5:28","nodeType":"YulTypedName","src":"9277:5:28","type":""}]},{"expression":{"arguments":[{"name":"dst","nativeSrc":"9305:3:28","nodeType":"YulIdentifier","src":"9305:3:28"},{"name":"_4","nativeSrc":"9310:2:28","nodeType":"YulIdentifier","src":"9310:2:28"}],"functionName":{"name":"mstore","nativeSrc":"9298:6:28","nodeType":"YulIdentifier","src":"9298:6:28"},"nativeSrc":"9298:15:28","nodeType":"YulFunctionCall","src":"9298:15:28"},"nativeSrc":"9298:15:28","nodeType":"YulExpressionStatement","src":"9298:15:28"},{"nativeSrc":"9322:19:28","nodeType":"YulAssignment","src":"9322:19:28","value":{"arguments":[{"name":"dst","nativeSrc":"9333:3:28","nodeType":"YulIdentifier","src":"9333:3:28"},{"name":"_1","nativeSrc":"9338:2:28","nodeType":"YulIdentifier","src":"9338:2:28"}],"functionName":{"name":"add","nativeSrc":"9329:3:28","nodeType":"YulIdentifier","src":"9329:3:28"},"nativeSrc":"9329:12:28","nodeType":"YulFunctionCall","src":"9329:12:28"},"variableNames":[{"name":"dst","nativeSrc":"9322:3:28","nodeType":"YulIdentifier","src":"9322:3:28"}]},{"nativeSrc":"9350:42:28","nodeType":"YulVariableDeclaration","src":"9350:42:28","value":{"arguments":[{"arguments":[{"name":"_3","nativeSrc":"9372:2:28","nodeType":"YulIdentifier","src":"9372:2:28"},{"arguments":[{"kind":"number","nativeSrc":"9380:1:28","nodeType":"YulLiteral","src":"9380:1:28","type":"","value":"5"},{"name":"_4","nativeSrc":"9383:2:28","nodeType":"YulIdentifier","src":"9383:2:28"}],"functionName":{"name":"shl","nativeSrc":"9376:3:28","nodeType":"YulIdentifier","src":"9376:3:28"},"nativeSrc":"9376:10:28","nodeType":"YulFunctionCall","src":"9376:10:28"}],"functionName":{"name":"add","nativeSrc":"9368:3:28","nodeType":"YulIdentifier","src":"9368:3:28"},"nativeSrc":"9368:19:28","nodeType":"YulFunctionCall","src":"9368:19:28"},{"name":"_1","nativeSrc":"9389:2:28","nodeType":"YulIdentifier","src":"9389:2:28"}],"functionName":{"name":"add","nativeSrc":"9364:3:28","nodeType":"YulIdentifier","src":"9364:3:28"},"nativeSrc":"9364:28:28","nodeType":"YulFunctionCall","src":"9364:28:28"},"variables":[{"name":"srcEnd","nativeSrc":"9354:6:28","nodeType":"YulTypedName","src":"9354:6:28","type":""}]},{"body":{"nativeSrc":"9424:16:28","nodeType":"YulBlock","src":"9424:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9433:1:28","nodeType":"YulLiteral","src":"9433:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"9436:1:28","nodeType":"YulLiteral","src":"9436:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9426:6:28","nodeType":"YulIdentifier","src":"9426:6:28"},"nativeSrc":"9426:12:28","nodeType":"YulFunctionCall","src":"9426:12:28"},"nativeSrc":"9426:12:28","nodeType":"YulExpressionStatement","src":"9426:12:28"}]},"condition":{"arguments":[{"name":"srcEnd","nativeSrc":"9407:6:28","nodeType":"YulIdentifier","src":"9407:6:28"},{"name":"dataEnd","nativeSrc":"9415:7:28","nodeType":"YulIdentifier","src":"9415:7:28"}],"functionName":{"name":"gt","nativeSrc":"9404:2:28","nodeType":"YulIdentifier","src":"9404:2:28"},"nativeSrc":"9404:19:28","nodeType":"YulFunctionCall","src":"9404:19:28"},"nativeSrc":"9401:39:28","nodeType":"YulIf","src":"9401:39:28"},{"nativeSrc":"9449:22:28","nodeType":"YulVariableDeclaration","src":"9449:22:28","value":{"arguments":[{"name":"_3","nativeSrc":"9464:2:28","nodeType":"YulIdentifier","src":"9464:2:28"},{"name":"_1","nativeSrc":"9468:2:28","nodeType":"YulIdentifier","src":"9468:2:28"}],"functionName":{"name":"add","nativeSrc":"9460:3:28","nodeType":"YulIdentifier","src":"9460:3:28"},"nativeSrc":"9460:11:28","nodeType":"YulFunctionCall","src":"9460:11:28"},"variables":[{"name":"src","nativeSrc":"9453:3:28","nodeType":"YulTypedName","src":"9453:3:28","type":""}]},{"body":{"nativeSrc":"9536:86:28","nodeType":"YulBlock","src":"9536:86:28","statements":[{"expression":{"arguments":[{"name":"dst","nativeSrc":"9557:3:28","nodeType":"YulIdentifier","src":"9557:3:28"},{"arguments":[{"name":"src","nativeSrc":"9575:3:28","nodeType":"YulIdentifier","src":"9575:3:28"}],"functionName":{"name":"calldataload","nativeSrc":"9562:12:28","nodeType":"YulIdentifier","src":"9562:12:28"},"nativeSrc":"9562:17:28","nodeType":"YulFunctionCall","src":"9562:17:28"}],"functionName":{"name":"mstore","nativeSrc":"9550:6:28","nodeType":"YulIdentifier","src":"9550:6:28"},"nativeSrc":"9550:30:28","nodeType":"YulFunctionCall","src":"9550:30:28"},"nativeSrc":"9550:30:28","nodeType":"YulExpressionStatement","src":"9550:30:28"},{"nativeSrc":"9593:19:28","nodeType":"YulAssignment","src":"9593:19:28","value":{"arguments":[{"name":"dst","nativeSrc":"9604:3:28","nodeType":"YulIdentifier","src":"9604:3:28"},{"name":"_1","nativeSrc":"9609:2:28","nodeType":"YulIdentifier","src":"9609:2:28"}],"functionName":{"name":"add","nativeSrc":"9600:3:28","nodeType":"YulIdentifier","src":"9600:3:28"},"nativeSrc":"9600:12:28","nodeType":"YulFunctionCall","src":"9600:12:28"},"variableNames":[{"name":"dst","nativeSrc":"9593:3:28","nodeType":"YulIdentifier","src":"9593:3:28"}]}]},"condition":{"arguments":[{"name":"src","nativeSrc":"9491:3:28","nodeType":"YulIdentifier","src":"9491:3:28"},{"name":"srcEnd","nativeSrc":"9496:6:28","nodeType":"YulIdentifier","src":"9496:6:28"}],"functionName":{"name":"lt","nativeSrc":"9488:2:28","nodeType":"YulIdentifier","src":"9488:2:28"},"nativeSrc":"9488:15:28","nodeType":"YulFunctionCall","src":"9488:15:28"},"nativeSrc":"9480:142:28","nodeType":"YulForLoop","post":{"nativeSrc":"9504:23:28","nodeType":"YulBlock","src":"9504:23:28","statements":[{"nativeSrc":"9506:19:28","nodeType":"YulAssignment","src":"9506:19:28","value":{"arguments":[{"name":"src","nativeSrc":"9517:3:28","nodeType":"YulIdentifier","src":"9517:3:28"},{"name":"_1","nativeSrc":"9522:2:28","nodeType":"YulIdentifier","src":"9522:2:28"}],"functionName":{"name":"add","nativeSrc":"9513:3:28","nodeType":"YulIdentifier","src":"9513:3:28"},"nativeSrc":"9513:12:28","nodeType":"YulFunctionCall","src":"9513:12:28"},"variableNames":[{"name":"src","nativeSrc":"9506:3:28","nodeType":"YulIdentifier","src":"9506:3:28"}]}]},"pre":{"nativeSrc":"9484:3:28","nodeType":"YulBlock","src":"9484:3:28","statements":[]},"src":"9480:142:28"},{"nativeSrc":"9631:15:28","nodeType":"YulAssignment","src":"9631:15:28","value":{"name":"dst_1","nativeSrc":"9641:5:28","nodeType":"YulIdentifier","src":"9641:5:28"},"variableNames":[{"name":"value2","nativeSrc":"9631:6:28","nodeType":"YulIdentifier","src":"9631:6:28"}]},{"nativeSrc":"9655:48:28","nodeType":"YulVariableDeclaration","src":"9655:48:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9688:9:28","nodeType":"YulIdentifier","src":"9688:9:28"},{"kind":"number","nativeSrc":"9699:2:28","nodeType":"YulLiteral","src":"9699:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9684:3:28","nodeType":"YulIdentifier","src":"9684:3:28"},"nativeSrc":"9684:18:28","nodeType":"YulFunctionCall","src":"9684:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"9671:12:28","nodeType":"YulIdentifier","src":"9671:12:28"},"nativeSrc":"9671:32:28","nodeType":"YulFunctionCall","src":"9671:32:28"},"variables":[{"name":"offset_1","nativeSrc":"9659:8:28","nodeType":"YulTypedName","src":"9659:8:28","type":""}]},{"body":{"nativeSrc":"9732:16:28","nodeType":"YulBlock","src":"9732:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9741:1:28","nodeType":"YulLiteral","src":"9741:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"9744:1:28","nodeType":"YulLiteral","src":"9744:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9734:6:28","nodeType":"YulIdentifier","src":"9734:6:28"},"nativeSrc":"9734:12:28","nodeType":"YulFunctionCall","src":"9734:12:28"},"nativeSrc":"9734:12:28","nodeType":"YulExpressionStatement","src":"9734:12:28"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"9718:8:28","nodeType":"YulIdentifier","src":"9718:8:28"},{"name":"_2","nativeSrc":"9728:2:28","nodeType":"YulIdentifier","src":"9728:2:28"}],"functionName":{"name":"gt","nativeSrc":"9715:2:28","nodeType":"YulIdentifier","src":"9715:2:28"},"nativeSrc":"9715:16:28","nodeType":"YulFunctionCall","src":"9715:16:28"},"nativeSrc":"9712:36:28","nodeType":"YulIf","src":"9712:36:28"},{"nativeSrc":"9757:73:28","nodeType":"YulAssignment","src":"9757:73:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9800:9:28","nodeType":"YulIdentifier","src":"9800:9:28"},{"name":"offset_1","nativeSrc":"9811:8:28","nodeType":"YulIdentifier","src":"9811:8:28"}],"functionName":{"name":"add","nativeSrc":"9796:3:28","nodeType":"YulIdentifier","src":"9796:3:28"},"nativeSrc":"9796:24:28","nodeType":"YulFunctionCall","src":"9796:24:28"},{"name":"dataEnd","nativeSrc":"9822:7:28","nodeType":"YulIdentifier","src":"9822:7:28"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nativeSrc":"9767:28:28","nodeType":"YulIdentifier","src":"9767:28:28"},"nativeSrc":"9767:63:28","nodeType":"YulFunctionCall","src":"9767:63:28"},"variableNames":[{"name":"value3","nativeSrc":"9757:6:28","nodeType":"YulIdentifier","src":"9757:6:28"}]},{"nativeSrc":"9839:49:28","nodeType":"YulVariableDeclaration","src":"9839:49:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9872:9:28","nodeType":"YulIdentifier","src":"9872:9:28"},{"kind":"number","nativeSrc":"9883:3:28","nodeType":"YulLiteral","src":"9883:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"9868:3:28","nodeType":"YulIdentifier","src":"9868:3:28"},"nativeSrc":"9868:19:28","nodeType":"YulFunctionCall","src":"9868:19:28"}],"functionName":{"name":"calldataload","nativeSrc":"9855:12:28","nodeType":"YulIdentifier","src":"9855:12:28"},"nativeSrc":"9855:33:28","nodeType":"YulFunctionCall","src":"9855:33:28"},"variables":[{"name":"offset_2","nativeSrc":"9843:8:28","nodeType":"YulTypedName","src":"9843:8:28","type":""}]},{"body":{"nativeSrc":"9917:16:28","nodeType":"YulBlock","src":"9917:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9926:1:28","nodeType":"YulLiteral","src":"9926:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"9929:1:28","nodeType":"YulLiteral","src":"9929:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9919:6:28","nodeType":"YulIdentifier","src":"9919:6:28"},"nativeSrc":"9919:12:28","nodeType":"YulFunctionCall","src":"9919:12:28"},"nativeSrc":"9919:12:28","nodeType":"YulExpressionStatement","src":"9919:12:28"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"9903:8:28","nodeType":"YulIdentifier","src":"9903:8:28"},{"name":"_2","nativeSrc":"9913:2:28","nodeType":"YulIdentifier","src":"9913:2:28"}],"functionName":{"name":"gt","nativeSrc":"9900:2:28","nodeType":"YulIdentifier","src":"9900:2:28"},"nativeSrc":"9900:16:28","nodeType":"YulFunctionCall","src":"9900:16:28"},"nativeSrc":"9897:36:28","nodeType":"YulIf","src":"9897:36:28"},{"nativeSrc":"9942:73:28","nodeType":"YulAssignment","src":"9942:73:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9985:9:28","nodeType":"YulIdentifier","src":"9985:9:28"},{"name":"offset_2","nativeSrc":"9996:8:28","nodeType":"YulIdentifier","src":"9996:8:28"}],"functionName":{"name":"add","nativeSrc":"9981:3:28","nodeType":"YulIdentifier","src":"9981:3:28"},"nativeSrc":"9981:24:28","nodeType":"YulFunctionCall","src":"9981:24:28"},{"name":"dataEnd","nativeSrc":"10007:7:28","nodeType":"YulIdentifier","src":"10007:7:28"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nativeSrc":"9952:28:28","nodeType":"YulIdentifier","src":"9952:28:28"},"nativeSrc":"9952:63:28","nodeType":"YulFunctionCall","src":"9952:63:28"},"variableNames":[{"name":"value4","nativeSrc":"9942:6:28","nodeType":"YulIdentifier","src":"9942:6:28"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32t_array$_t_bytes32_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr","nativeSrc":"8519:1502:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8666:9:28","nodeType":"YulTypedName","src":"8666:9:28","type":""},{"name":"dataEnd","nativeSrc":"8677:7:28","nodeType":"YulTypedName","src":"8677:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8689:6:28","nodeType":"YulTypedName","src":"8689:6:28","type":""},{"name":"value1","nativeSrc":"8697:6:28","nodeType":"YulTypedName","src":"8697:6:28","type":""},{"name":"value2","nativeSrc":"8705:6:28","nodeType":"YulTypedName","src":"8705:6:28","type":""},{"name":"value3","nativeSrc":"8713:6:28","nodeType":"YulTypedName","src":"8713:6:28","type":""},{"name":"value4","nativeSrc":"8721:6:28","nodeType":"YulTypedName","src":"8721:6:28","type":""}],"src":"8519:1502:28"},{"body":{"nativeSrc":"10087:339:28","nodeType":"YulBlock","src":"10087:339:28","statements":[{"nativeSrc":"10097:26:28","nodeType":"YulVariableDeclaration","src":"10097:26:28","value":{"arguments":[{"name":"value","nativeSrc":"10117:5:28","nodeType":"YulIdentifier","src":"10117:5:28"}],"functionName":{"name":"mload","nativeSrc":"10111:5:28","nodeType":"YulIdentifier","src":"10111:5:28"},"nativeSrc":"10111:12:28","nodeType":"YulFunctionCall","src":"10111:12:28"},"variables":[{"name":"length","nativeSrc":"10101:6:28","nodeType":"YulTypedName","src":"10101:6:28","type":""}]},{"nativeSrc":"10132:10:28","nodeType":"YulAssignment","src":"10132:10:28","value":{"name":"pos","nativeSrc":"10139:3:28","nodeType":"YulIdentifier","src":"10139:3:28"},"variableNames":[{"name":"pos","nativeSrc":"10132:3:28","nodeType":"YulIdentifier","src":"10132:3:28"}]},{"nativeSrc":"10151:14:28","nodeType":"YulVariableDeclaration","src":"10151:14:28","value":{"kind":"number","nativeSrc":"10161:4:28","nodeType":"YulLiteral","src":"10161:4:28","type":"","value":"0x20"},"variables":[{"name":"_1","nativeSrc":"10155:2:28","nodeType":"YulTypedName","src":"10155:2:28","type":""}]},{"nativeSrc":"10174:30:28","nodeType":"YulVariableDeclaration","src":"10174:30:28","value":{"arguments":[{"name":"value","nativeSrc":"10192:5:28","nodeType":"YulIdentifier","src":"10192:5:28"},{"kind":"number","nativeSrc":"10199:4:28","nodeType":"YulLiteral","src":"10199:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"10188:3:28","nodeType":"YulIdentifier","src":"10188:3:28"},"nativeSrc":"10188:16:28","nodeType":"YulFunctionCall","src":"10188:16:28"},"variables":[{"name":"srcPtr","nativeSrc":"10178:6:28","nodeType":"YulTypedName","src":"10178:6:28","type":""}]},{"nativeSrc":"10213:10:28","nodeType":"YulVariableDeclaration","src":"10213:10:28","value":{"kind":"number","nativeSrc":"10222:1:28","nodeType":"YulLiteral","src":"10222:1:28","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"10217:1:28","nodeType":"YulTypedName","src":"10217:1:28","type":""}]},{"body":{"nativeSrc":"10281:120:28","nodeType":"YulBlock","src":"10281:120:28","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"10302:3:28","nodeType":"YulIdentifier","src":"10302:3:28"},{"arguments":[{"name":"srcPtr","nativeSrc":"10313:6:28","nodeType":"YulIdentifier","src":"10313:6:28"}],"functionName":{"name":"mload","nativeSrc":"10307:5:28","nodeType":"YulIdentifier","src":"10307:5:28"},"nativeSrc":"10307:13:28","nodeType":"YulFunctionCall","src":"10307:13:28"}],"functionName":{"name":"mstore","nativeSrc":"10295:6:28","nodeType":"YulIdentifier","src":"10295:6:28"},"nativeSrc":"10295:26:28","nodeType":"YulFunctionCall","src":"10295:26:28"},"nativeSrc":"10295:26:28","nodeType":"YulExpressionStatement","src":"10295:26:28"},{"nativeSrc":"10334:19:28","nodeType":"YulAssignment","src":"10334:19:28","value":{"arguments":[{"name":"pos","nativeSrc":"10345:3:28","nodeType":"YulIdentifier","src":"10345:3:28"},{"name":"_1","nativeSrc":"10350:2:28","nodeType":"YulIdentifier","src":"10350:2:28"}],"functionName":{"name":"add","nativeSrc":"10341:3:28","nodeType":"YulIdentifier","src":"10341:3:28"},"nativeSrc":"10341:12:28","nodeType":"YulFunctionCall","src":"10341:12:28"},"variableNames":[{"name":"pos","nativeSrc":"10334:3:28","nodeType":"YulIdentifier","src":"10334:3:28"}]},{"nativeSrc":"10366:25:28","nodeType":"YulAssignment","src":"10366:25:28","value":{"arguments":[{"name":"srcPtr","nativeSrc":"10380:6:28","nodeType":"YulIdentifier","src":"10380:6:28"},{"name":"_1","nativeSrc":"10388:2:28","nodeType":"YulIdentifier","src":"10388:2:28"}],"functionName":{"name":"add","nativeSrc":"10376:3:28","nodeType":"YulIdentifier","src":"10376:3:28"},"nativeSrc":"10376:15:28","nodeType":"YulFunctionCall","src":"10376:15:28"},"variableNames":[{"name":"srcPtr","nativeSrc":"10366:6:28","nodeType":"YulIdentifier","src":"10366:6:28"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"10243:1:28","nodeType":"YulIdentifier","src":"10243:1:28"},{"name":"length","nativeSrc":"10246:6:28","nodeType":"YulIdentifier","src":"10246:6:28"}],"functionName":{"name":"lt","nativeSrc":"10240:2:28","nodeType":"YulIdentifier","src":"10240:2:28"},"nativeSrc":"10240:13:28","nodeType":"YulFunctionCall","src":"10240:13:28"},"nativeSrc":"10232:169:28","nodeType":"YulForLoop","post":{"nativeSrc":"10254:18:28","nodeType":"YulBlock","src":"10254:18:28","statements":[{"nativeSrc":"10256:14:28","nodeType":"YulAssignment","src":"10256:14:28","value":{"arguments":[{"name":"i","nativeSrc":"10265:1:28","nodeType":"YulIdentifier","src":"10265:1:28"},{"kind":"number","nativeSrc":"10268:1:28","nodeType":"YulLiteral","src":"10268:1:28","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"10261:3:28","nodeType":"YulIdentifier","src":"10261:3:28"},"nativeSrc":"10261:9:28","nodeType":"YulFunctionCall","src":"10261:9:28"},"variableNames":[{"name":"i","nativeSrc":"10256:1:28","nodeType":"YulIdentifier","src":"10256:1:28"}]}]},"pre":{"nativeSrc":"10236:3:28","nodeType":"YulBlock","src":"10236:3:28","statements":[]},"src":"10232:169:28"},{"nativeSrc":"10410:10:28","nodeType":"YulAssignment","src":"10410:10:28","value":{"name":"pos","nativeSrc":"10417:3:28","nodeType":"YulIdentifier","src":"10417:3:28"},"variableNames":[{"name":"end","nativeSrc":"10410:3:28","nodeType":"YulIdentifier","src":"10410:3:28"}]}]},"name":"abi_encode_array_uint256_dyn","nativeSrc":"10026:400:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"10064:5:28","nodeType":"YulTypedName","src":"10064:5:28","type":""},{"name":"pos","nativeSrc":"10071:3:28","nodeType":"YulTypedName","src":"10071:3:28","type":""}],"returnVariables":[{"name":"end","nativeSrc":"10079:3:28","nodeType":"YulTypedName","src":"10079:3:28","type":""}],"src":"10026:400:28"},{"body":{"nativeSrc":"10762:326:28","nodeType":"YulBlock","src":"10762:326:28","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"10779:3:28","nodeType":"YulIdentifier","src":"10779:3:28"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"10792:2:28","nodeType":"YulLiteral","src":"10792:2:28","type":"","value":"96"},{"name":"value0","nativeSrc":"10796:6:28","nodeType":"YulIdentifier","src":"10796:6:28"}],"functionName":{"name":"shl","nativeSrc":"10788:3:28","nodeType":"YulIdentifier","src":"10788:3:28"},"nativeSrc":"10788:15:28","nodeType":"YulFunctionCall","src":"10788:15:28"},{"kind":"number","nativeSrc":"10805:66:28","nodeType":"YulLiteral","src":"10805:66:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"10784:3:28","nodeType":"YulIdentifier","src":"10784:3:28"},"nativeSrc":"10784:88:28","nodeType":"YulFunctionCall","src":"10784:88:28"}],"functionName":{"name":"mstore","nativeSrc":"10772:6:28","nodeType":"YulIdentifier","src":"10772:6:28"},"nativeSrc":"10772:101:28","nodeType":"YulFunctionCall","src":"10772:101:28"},"nativeSrc":"10772:101:28","nodeType":"YulExpressionStatement","src":"10772:101:28"},{"nativeSrc":"10882:101:28","nodeType":"YulVariableDeclaration","src":"10882:101:28","value":{"arguments":[{"name":"value2","nativeSrc":"10924:6:28","nodeType":"YulIdentifier","src":"10924:6:28"},{"arguments":[{"name":"value1","nativeSrc":"10961:6:28","nodeType":"YulIdentifier","src":"10961:6:28"},{"arguments":[{"name":"pos","nativeSrc":"10973:3:28","nodeType":"YulIdentifier","src":"10973:3:28"},{"kind":"number","nativeSrc":"10978:2:28","nodeType":"YulLiteral","src":"10978:2:28","type":"","value":"20"}],"functionName":{"name":"add","nativeSrc":"10969:3:28","nodeType":"YulIdentifier","src":"10969:3:28"},"nativeSrc":"10969:12:28","nodeType":"YulFunctionCall","src":"10969:12:28"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nativeSrc":"10932:28:28","nodeType":"YulIdentifier","src":"10932:28:28"},"nativeSrc":"10932:50:28","nodeType":"YulFunctionCall","src":"10932:50:28"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nativeSrc":"10895:28:28","nodeType":"YulIdentifier","src":"10895:28:28"},"nativeSrc":"10895:88:28","nodeType":"YulFunctionCall","src":"10895:88:28"},"variables":[{"name":"pos_1","nativeSrc":"10886:5:28","nodeType":"YulTypedName","src":"10886:5:28","type":""}]},{"expression":{"arguments":[{"name":"pos_1","nativeSrc":"10999:5:28","nodeType":"YulIdentifier","src":"10999:5:28"},{"name":"value3","nativeSrc":"11006:6:28","nodeType":"YulIdentifier","src":"11006:6:28"}],"functionName":{"name":"mstore","nativeSrc":"10992:6:28","nodeType":"YulIdentifier","src":"10992:6:28"},"nativeSrc":"10992:21:28","nodeType":"YulFunctionCall","src":"10992:21:28"},"nativeSrc":"10992:21:28","nodeType":"YulExpressionStatement","src":"10992:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"pos_1","nativeSrc":"11033:5:28","nodeType":"YulIdentifier","src":"11033:5:28"},{"kind":"number","nativeSrc":"11040:2:28","nodeType":"YulLiteral","src":"11040:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11029:3:28","nodeType":"YulIdentifier","src":"11029:3:28"},"nativeSrc":"11029:14:28","nodeType":"YulFunctionCall","src":"11029:14:28"},{"name":"value4","nativeSrc":"11045:6:28","nodeType":"YulIdentifier","src":"11045:6:28"}],"functionName":{"name":"mstore","nativeSrc":"11022:6:28","nodeType":"YulIdentifier","src":"11022:6:28"},"nativeSrc":"11022:30:28","nodeType":"YulFunctionCall","src":"11022:30:28"},"nativeSrc":"11022:30:28","nodeType":"YulExpressionStatement","src":"11022:30:28"},{"nativeSrc":"11061:21:28","nodeType":"YulAssignment","src":"11061:21:28","value":{"arguments":[{"name":"pos_1","nativeSrc":"11072:5:28","nodeType":"YulIdentifier","src":"11072:5:28"},{"kind":"number","nativeSrc":"11079:2:28","nodeType":"YulLiteral","src":"11079:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11068:3:28","nodeType":"YulIdentifier","src":"11068:3:28"},"nativeSrc":"11068:14:28","nodeType":"YulFunctionCall","src":"11068:14:28"},"variableNames":[{"name":"end","nativeSrc":"11061:3:28","nodeType":"YulIdentifier","src":"11061:3:28"}]}]},"name":"abi_encode_tuple_packed_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__nonPadded_inplace_fromStack_reversed","nativeSrc":"10431:657:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"10706:3:28","nodeType":"YulTypedName","src":"10706:3:28","type":""},{"name":"value4","nativeSrc":"10711:6:28","nodeType":"YulTypedName","src":"10711:6:28","type":""},{"name":"value3","nativeSrc":"10719:6:28","nodeType":"YulTypedName","src":"10719:6:28","type":""},{"name":"value2","nativeSrc":"10727:6:28","nodeType":"YulTypedName","src":"10727:6:28","type":""},{"name":"value1","nativeSrc":"10735:6:28","nodeType":"YulTypedName","src":"10735:6:28","type":""},{"name":"value0","nativeSrc":"10743:6:28","nodeType":"YulTypedName","src":"10743:6:28","type":""}],"returnVariables":[{"name":"end","nativeSrc":"10754:3:28","nodeType":"YulTypedName","src":"10754:3:28","type":""}],"src":"10431:657:28"},{"body":{"nativeSrc":"11406:439:28","nodeType":"YulBlock","src":"11406:439:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11423:9:28","nodeType":"YulIdentifier","src":"11423:9:28"},{"arguments":[{"name":"value0","nativeSrc":"11438:6:28","nodeType":"YulIdentifier","src":"11438:6:28"},{"kind":"number","nativeSrc":"11446:42:28","nodeType":"YulLiteral","src":"11446:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"11434:3:28","nodeType":"YulIdentifier","src":"11434:3:28"},"nativeSrc":"11434:55:28","nodeType":"YulFunctionCall","src":"11434:55:28"}],"functionName":{"name":"mstore","nativeSrc":"11416:6:28","nodeType":"YulIdentifier","src":"11416:6:28"},"nativeSrc":"11416:74:28","nodeType":"YulFunctionCall","src":"11416:74:28"},"nativeSrc":"11416:74:28","nodeType":"YulExpressionStatement","src":"11416:74:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11510:9:28","nodeType":"YulIdentifier","src":"11510:9:28"},{"kind":"number","nativeSrc":"11521:2:28","nodeType":"YulLiteral","src":"11521:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11506:3:28","nodeType":"YulIdentifier","src":"11506:3:28"},"nativeSrc":"11506:18:28","nodeType":"YulFunctionCall","src":"11506:18:28"},{"kind":"number","nativeSrc":"11526:3:28","nodeType":"YulLiteral","src":"11526:3:28","type":"","value":"160"}],"functionName":{"name":"mstore","nativeSrc":"11499:6:28","nodeType":"YulIdentifier","src":"11499:6:28"},"nativeSrc":"11499:31:28","nodeType":"YulFunctionCall","src":"11499:31:28"},"nativeSrc":"11499:31:28","nodeType":"YulExpressionStatement","src":"11499:31:28"},{"nativeSrc":"11539:82:28","nodeType":"YulVariableDeclaration","src":"11539:82:28","value":{"arguments":[{"name":"value1","nativeSrc":"11593:6:28","nodeType":"YulIdentifier","src":"11593:6:28"},{"arguments":[{"name":"headStart","nativeSrc":"11605:9:28","nodeType":"YulIdentifier","src":"11605:9:28"},{"kind":"number","nativeSrc":"11616:3:28","nodeType":"YulLiteral","src":"11616:3:28","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"11601:3:28","nodeType":"YulIdentifier","src":"11601:3:28"},"nativeSrc":"11601:19:28","nodeType":"YulFunctionCall","src":"11601:19:28"}],"functionName":{"name":"abi_encode_array_uint256_dyn_memory_ptr","nativeSrc":"11553:39:28","nodeType":"YulIdentifier","src":"11553:39:28"},"nativeSrc":"11553:68:28","nodeType":"YulFunctionCall","src":"11553:68:28"},"variables":[{"name":"tail_1","nativeSrc":"11543:6:28","nodeType":"YulTypedName","src":"11543:6:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11641:9:28","nodeType":"YulIdentifier","src":"11641:9:28"},{"kind":"number","nativeSrc":"11652:2:28","nodeType":"YulLiteral","src":"11652:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11637:3:28","nodeType":"YulIdentifier","src":"11637:3:28"},"nativeSrc":"11637:18:28","nodeType":"YulFunctionCall","src":"11637:18:28"},{"arguments":[{"name":"tail_1","nativeSrc":"11661:6:28","nodeType":"YulIdentifier","src":"11661:6:28"},{"name":"headStart","nativeSrc":"11669:9:28","nodeType":"YulIdentifier","src":"11669:9:28"}],"functionName":{"name":"sub","nativeSrc":"11657:3:28","nodeType":"YulIdentifier","src":"11657:3:28"},"nativeSrc":"11657:22:28","nodeType":"YulFunctionCall","src":"11657:22:28"}],"functionName":{"name":"mstore","nativeSrc":"11630:6:28","nodeType":"YulIdentifier","src":"11630:6:28"},"nativeSrc":"11630:50:28","nodeType":"YulFunctionCall","src":"11630:50:28"},"nativeSrc":"11630:50:28","nodeType":"YulExpressionStatement","src":"11630:50:28"},{"nativeSrc":"11689:63:28","nodeType":"YulAssignment","src":"11689:63:28","value":{"arguments":[{"name":"value2","nativeSrc":"11737:6:28","nodeType":"YulIdentifier","src":"11737:6:28"},{"name":"tail_1","nativeSrc":"11745:6:28","nodeType":"YulIdentifier","src":"11745:6:28"}],"functionName":{"name":"abi_encode_array_uint256_dyn_memory_ptr","nativeSrc":"11697:39:28","nodeType":"YulIdentifier","src":"11697:39:28"},"nativeSrc":"11697:55:28","nodeType":"YulFunctionCall","src":"11697:55:28"},"variableNames":[{"name":"tail","nativeSrc":"11689:4:28","nodeType":"YulIdentifier","src":"11689:4:28"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11772:9:28","nodeType":"YulIdentifier","src":"11772:9:28"},{"kind":"number","nativeSrc":"11783:2:28","nodeType":"YulLiteral","src":"11783:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"11768:3:28","nodeType":"YulIdentifier","src":"11768:3:28"},"nativeSrc":"11768:18:28","nodeType":"YulFunctionCall","src":"11768:18:28"},{"name":"value3","nativeSrc":"11788:6:28","nodeType":"YulIdentifier","src":"11788:6:28"}],"functionName":{"name":"mstore","nativeSrc":"11761:6:28","nodeType":"YulIdentifier","src":"11761:6:28"},"nativeSrc":"11761:34:28","nodeType":"YulFunctionCall","src":"11761:34:28"},"nativeSrc":"11761:34:28","nodeType":"YulExpressionStatement","src":"11761:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11815:9:28","nodeType":"YulIdentifier","src":"11815:9:28"},{"kind":"number","nativeSrc":"11826:3:28","nodeType":"YulLiteral","src":"11826:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"11811:3:28","nodeType":"YulIdentifier","src":"11811:3:28"},"nativeSrc":"11811:19:28","nodeType":"YulFunctionCall","src":"11811:19:28"},{"name":"value4","nativeSrc":"11832:6:28","nodeType":"YulIdentifier","src":"11832:6:28"}],"functionName":{"name":"mstore","nativeSrc":"11804:6:28","nodeType":"YulIdentifier","src":"11804:6:28"},"nativeSrc":"11804:35:28","nodeType":"YulFunctionCall","src":"11804:35:28"},"nativeSrc":"11804:35:28","nodeType":"YulExpressionStatement","src":"11804:35:28"}]},"name":"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__fromStack_reversed","nativeSrc":"11093:752:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11343:9:28","nodeType":"YulTypedName","src":"11343:9:28","type":""},{"name":"value4","nativeSrc":"11354:6:28","nodeType":"YulTypedName","src":"11354:6:28","type":""},{"name":"value3","nativeSrc":"11362:6:28","nodeType":"YulTypedName","src":"11362:6:28","type":""},{"name":"value2","nativeSrc":"11370:6:28","nodeType":"YulTypedName","src":"11370:6:28","type":""},{"name":"value1","nativeSrc":"11378:6:28","nodeType":"YulTypedName","src":"11378:6:28","type":""},{"name":"value0","nativeSrc":"11386:6:28","nodeType":"YulTypedName","src":"11386:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11397:4:28","nodeType":"YulTypedName","src":"11397:4:28","type":""}],"src":"11093:752:28"},{"body":{"nativeSrc":"12107:301:28","nodeType":"YulBlock","src":"12107:301:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12124:9:28","nodeType":"YulIdentifier","src":"12124:9:28"},{"name":"value0","nativeSrc":"12135:6:28","nodeType":"YulIdentifier","src":"12135:6:28"}],"functionName":{"name":"mstore","nativeSrc":"12117:6:28","nodeType":"YulIdentifier","src":"12117:6:28"},"nativeSrc":"12117:25:28","nodeType":"YulFunctionCall","src":"12117:25:28"},"nativeSrc":"12117:25:28","nodeType":"YulExpressionStatement","src":"12117:25:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12162:9:28","nodeType":"YulIdentifier","src":"12162:9:28"},{"kind":"number","nativeSrc":"12173:2:28","nodeType":"YulLiteral","src":"12173:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12158:3:28","nodeType":"YulIdentifier","src":"12158:3:28"},"nativeSrc":"12158:18:28","nodeType":"YulFunctionCall","src":"12158:18:28"},{"kind":"number","nativeSrc":"12178:2:28","nodeType":"YulLiteral","src":"12178:2:28","type":"","value":"96"}],"functionName":{"name":"mstore","nativeSrc":"12151:6:28","nodeType":"YulIdentifier","src":"12151:6:28"},"nativeSrc":"12151:30:28","nodeType":"YulFunctionCall","src":"12151:30:28"},"nativeSrc":"12151:30:28","nodeType":"YulExpressionStatement","src":"12151:30:28"},{"nativeSrc":"12190:81:28","nodeType":"YulVariableDeclaration","src":"12190:81:28","value":{"arguments":[{"name":"value1","nativeSrc":"12244:6:28","nodeType":"YulIdentifier","src":"12244:6:28"},{"arguments":[{"name":"headStart","nativeSrc":"12256:9:28","nodeType":"YulIdentifier","src":"12256:9:28"},{"kind":"number","nativeSrc":"12267:2:28","nodeType":"YulLiteral","src":"12267:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"12252:3:28","nodeType":"YulIdentifier","src":"12252:3:28"},"nativeSrc":"12252:18:28","nodeType":"YulFunctionCall","src":"12252:18:28"}],"functionName":{"name":"abi_encode_array_uint256_dyn_memory_ptr","nativeSrc":"12204:39:28","nodeType":"YulIdentifier","src":"12204:39:28"},"nativeSrc":"12204:67:28","nodeType":"YulFunctionCall","src":"12204:67:28"},"variables":[{"name":"tail_1","nativeSrc":"12194:6:28","nodeType":"YulTypedName","src":"12194:6:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12291:9:28","nodeType":"YulIdentifier","src":"12291:9:28"},{"kind":"number","nativeSrc":"12302:2:28","nodeType":"YulLiteral","src":"12302:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12287:3:28","nodeType":"YulIdentifier","src":"12287:3:28"},"nativeSrc":"12287:18:28","nodeType":"YulFunctionCall","src":"12287:18:28"},{"arguments":[{"name":"tail_1","nativeSrc":"12311:6:28","nodeType":"YulIdentifier","src":"12311:6:28"},{"name":"headStart","nativeSrc":"12319:9:28","nodeType":"YulIdentifier","src":"12319:9:28"}],"functionName":{"name":"sub","nativeSrc":"12307:3:28","nodeType":"YulIdentifier","src":"12307:3:28"},"nativeSrc":"12307:22:28","nodeType":"YulFunctionCall","src":"12307:22:28"}],"functionName":{"name":"mstore","nativeSrc":"12280:6:28","nodeType":"YulIdentifier","src":"12280:6:28"},"nativeSrc":"12280:50:28","nodeType":"YulFunctionCall","src":"12280:50:28"},"nativeSrc":"12280:50:28","nodeType":"YulExpressionStatement","src":"12280:50:28"},{"nativeSrc":"12339:63:28","nodeType":"YulAssignment","src":"12339:63:28","value":{"arguments":[{"name":"value2","nativeSrc":"12387:6:28","nodeType":"YulIdentifier","src":"12387:6:28"},{"name":"tail_1","nativeSrc":"12395:6:28","nodeType":"YulIdentifier","src":"12395:6:28"}],"functionName":{"name":"abi_encode_array_uint256_dyn_memory_ptr","nativeSrc":"12347:39:28","nodeType":"YulIdentifier","src":"12347:39:28"},"nativeSrc":"12347:55:28","nodeType":"YulFunctionCall","src":"12347:55:28"},"variableNames":[{"name":"tail","nativeSrc":"12339:4:28","nodeType":"YulIdentifier","src":"12339:4:28"}]}]},"name":"abi_encode_tuple_t_uint256_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_uint256_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"11850:558:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12060:9:28","nodeType":"YulTypedName","src":"12060:9:28","type":""},{"name":"value2","nativeSrc":"12071:6:28","nodeType":"YulTypedName","src":"12071:6:28","type":""},{"name":"value1","nativeSrc":"12079:6:28","nodeType":"YulTypedName","src":"12079:6:28","type":""},{"name":"value0","nativeSrc":"12087:6:28","nodeType":"YulTypedName","src":"12087:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12098:4:28","nodeType":"YulTypedName","src":"12098:4:28","type":""}],"src":"11850:558:28"},{"body":{"nativeSrc":"12543:201:28","nodeType":"YulBlock","src":"12543:201:28","statements":[{"body":{"nativeSrc":"12581:16:28","nodeType":"YulBlock","src":"12581:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"12590:1:28","nodeType":"YulLiteral","src":"12590:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"12593:1:28","nodeType":"YulLiteral","src":"12593:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"12583:6:28","nodeType":"YulIdentifier","src":"12583:6:28"},"nativeSrc":"12583:12:28","nodeType":"YulFunctionCall","src":"12583:12:28"},"nativeSrc":"12583:12:28","nodeType":"YulExpressionStatement","src":"12583:12:28"}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"12559:10:28","nodeType":"YulIdentifier","src":"12559:10:28"},{"name":"endIndex","nativeSrc":"12571:8:28","nodeType":"YulIdentifier","src":"12571:8:28"}],"functionName":{"name":"gt","nativeSrc":"12556:2:28","nodeType":"YulIdentifier","src":"12556:2:28"},"nativeSrc":"12556:24:28","nodeType":"YulFunctionCall","src":"12556:24:28"},"nativeSrc":"12553:44:28","nodeType":"YulIf","src":"12553:44:28"},{"body":{"nativeSrc":"12630:16:28","nodeType":"YulBlock","src":"12630:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"12639:1:28","nodeType":"YulLiteral","src":"12639:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"12642:1:28","nodeType":"YulLiteral","src":"12642:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"12632:6:28","nodeType":"YulIdentifier","src":"12632:6:28"},"nativeSrc":"12632:12:28","nodeType":"YulFunctionCall","src":"12632:12:28"},"nativeSrc":"12632:12:28","nodeType":"YulExpressionStatement","src":"12632:12:28"}]},"condition":{"arguments":[{"name":"endIndex","nativeSrc":"12612:8:28","nodeType":"YulIdentifier","src":"12612:8:28"},{"name":"length","nativeSrc":"12622:6:28","nodeType":"YulIdentifier","src":"12622:6:28"}],"functionName":{"name":"gt","nativeSrc":"12609:2:28","nodeType":"YulIdentifier","src":"12609:2:28"},"nativeSrc":"12609:20:28","nodeType":"YulFunctionCall","src":"12609:20:28"},"nativeSrc":"12606:40:28","nodeType":"YulIf","src":"12606:40:28"},{"nativeSrc":"12655:36:28","nodeType":"YulAssignment","src":"12655:36:28","value":{"arguments":[{"name":"offset","nativeSrc":"12672:6:28","nodeType":"YulIdentifier","src":"12672:6:28"},{"name":"startIndex","nativeSrc":"12680:10:28","nodeType":"YulIdentifier","src":"12680:10:28"}],"functionName":{"name":"add","nativeSrc":"12668:3:28","nodeType":"YulIdentifier","src":"12668:3:28"},"nativeSrc":"12668:23:28","nodeType":"YulFunctionCall","src":"12668:23:28"},"variableNames":[{"name":"offsetOut","nativeSrc":"12655:9:28","nodeType":"YulIdentifier","src":"12655:9:28"}]},{"nativeSrc":"12700:38:28","nodeType":"YulAssignment","src":"12700:38:28","value":{"arguments":[{"name":"endIndex","nativeSrc":"12717:8:28","nodeType":"YulIdentifier","src":"12717:8:28"},{"name":"startIndex","nativeSrc":"12727:10:28","nodeType":"YulIdentifier","src":"12727:10:28"}],"functionName":{"name":"sub","nativeSrc":"12713:3:28","nodeType":"YulIdentifier","src":"12713:3:28"},"nativeSrc":"12713:25:28","nodeType":"YulFunctionCall","src":"12713:25:28"},"variableNames":[{"name":"lengthOut","nativeSrc":"12700:9:28","nodeType":"YulIdentifier","src":"12700:9:28"}]}]},"name":"calldata_array_index_range_access_t_bytes_calldata_ptr","nativeSrc":"12413:331:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"12477:6:28","nodeType":"YulTypedName","src":"12477:6:28","type":""},{"name":"length","nativeSrc":"12485:6:28","nodeType":"YulTypedName","src":"12485:6:28","type":""},{"name":"startIndex","nativeSrc":"12493:10:28","nodeType":"YulTypedName","src":"12493:10:28","type":""},{"name":"endIndex","nativeSrc":"12505:8:28","nodeType":"YulTypedName","src":"12505:8:28","type":""}],"returnVariables":[{"name":"offsetOut","nativeSrc":"12518:9:28","nodeType":"YulTypedName","src":"12518:9:28","type":""},{"name":"lengthOut","nativeSrc":"12529:9:28","nodeType":"YulTypedName","src":"12529:9:28","type":""}],"src":"12413:331:28"},{"body":{"nativeSrc":"12781:152:28","nodeType":"YulBlock","src":"12781:152:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"12798:1:28","nodeType":"YulLiteral","src":"12798:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"12801:77:28","nodeType":"YulLiteral","src":"12801:77:28","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"12791:6:28","nodeType":"YulIdentifier","src":"12791:6:28"},"nativeSrc":"12791:88:28","nodeType":"YulFunctionCall","src":"12791:88:28"},"nativeSrc":"12791:88:28","nodeType":"YulExpressionStatement","src":"12791:88:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"12895:1:28","nodeType":"YulLiteral","src":"12895:1:28","type":"","value":"4"},{"kind":"number","nativeSrc":"12898:4:28","nodeType":"YulLiteral","src":"12898:4:28","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"12888:6:28","nodeType":"YulIdentifier","src":"12888:6:28"},"nativeSrc":"12888:15:28","nodeType":"YulFunctionCall","src":"12888:15:28"},"nativeSrc":"12888:15:28","nodeType":"YulExpressionStatement","src":"12888:15:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"12919:1:28","nodeType":"YulLiteral","src":"12919:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"12922:4:28","nodeType":"YulLiteral","src":"12922:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"12912:6:28","nodeType":"YulIdentifier","src":"12912:6:28"},"nativeSrc":"12912:15:28","nodeType":"YulFunctionCall","src":"12912:15:28"},"nativeSrc":"12912:15:28","nodeType":"YulExpressionStatement","src":"12912:15:28"}]},"name":"panic_error_0x32","nativeSrc":"12749:184:28","nodeType":"YulFunctionDefinition","src":"12749:184:28"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_IERC20_$937__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), value1)\n        calldatacopy(add(headStart, 64), value0, value1)\n        mstore(add(add(headStart, value1), 64), 0)\n        tail := add(add(headStart, and(add(value1, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_contract$_IERC1155Mintable_$842__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value3_1, value4_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff00000000000000000000000000000000000000000000000000000000))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_bytes_calldata_ptrt_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n        value3 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_array_uint256_dyn_memory_ptr(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, 0x20)\n        let srcPtr := add(value, 0x20)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), 128)\n        let tail_1 := abi_encode_array_uint256_dyn_memory_ptr(value1, add(headStart, 128))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn_memory_ptr(value2, tail_1)\n        mstore(add(headStart, 96), sub(tail_2, headStart))\n        mstore(tail_2, 0)\n        tail := add(tail_2, 32)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_bytes32_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_bytes32_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, 0x20)\n        let srcEnd := add(add(offset, shl(5, _1)), 0x20)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, 0x20)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_bytes32t_bytes32t_array$_t_bytes32_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let _1 := 32\n        value1 := calldataload(add(headStart, _1))\n        let offset := calldataload(add(headStart, 64))\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := calldataload(_3)\n        let dst := allocate_memory(array_allocation_size_array_bytes32_dyn(_4))\n        let dst_1 := dst\n        mstore(dst, _4)\n        dst := add(dst, _1)\n        let srcEnd := add(add(_3, shl(5, _4)), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _1)\n        }\n        value2 := dst_1\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _2) { revert(0, 0) }\n        value3 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _2) { revert(0, 0) }\n        value4 := abi_decode_array_uint256_dyn(add(headStart, offset_2), dataEnd)\n    }\n    function abi_encode_array_uint256_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        pos := pos\n        let _1 := 0x20\n        let srcPtr := add(value, 0x20)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_packed_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value4, value3, value2, value1, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        let pos_1 := abi_encode_array_uint256_dyn(value2, abi_encode_array_uint256_dyn(value1, add(pos, 20)))\n        mstore(pos_1, value3)\n        mstore(add(pos_1, 32), value4)\n        end := add(pos_1, 64)\n    }\n    function abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), 160)\n        let tail_1 := abi_encode_array_uint256_dyn_memory_ptr(value1, add(headStart, 160))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn_memory_ptr(value2, tail_1)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_encode_tuple_t_uint256_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_uint256_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), 96)\n        let tail_1 := abi_encode_array_uint256_dyn_memory_ptr(value1, add(headStart, 96))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn_memory_ptr(value2, tail_1)\n    }\n    function calldata_array_index_range_access_t_bytes_calldata_ptr(offset, length, startIndex, endIndex) -> offsetOut, lengthOut\n    {\n        if gt(startIndex, endIndex) { revert(0, 0) }\n        if gt(endIndex, length) { revert(0, 0) }\n        offsetOut := add(offset, startIndex)\n        lengthOut := sub(endIndex, startIndex)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n}","id":28,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"591":[{"length":32,"start":357},{"length":32,"start":578},{"length":32,"start":3343},{"length":32,"start":3405},{"length":32,"start":3717},{"length":32,"start":3853}],"2034":[{"length":32,"start":460},{"length":32,"start":1440},{"length":32,"start":1869}],"2037":[{"length":32,"start":284},{"length":32,"start":1187},{"length":32,"start":1313},{"length":32,"start":1696}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4FC35859 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x292 JUMPI DUP1 PUSH4 0xAE6DEAD7 EQ PUSH2 0x29A JUMPI DUP1 PUSH4 0xCC3C0F06 EQ PUSH2 0x2BD JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4FC35859 EQ PUSH2 0x1EE JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x232 JUMPI DUP1 PUSH4 0x8BD8D0A9 EQ PUSH2 0x27F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x31E66E1E GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x31E66E1E EQ PUSH2 0x189 JUMPI DUP1 PUSH4 0x3323C807 EQ PUSH2 0x19F JUMPI DUP1 PUSH4 0x3572AA8D EQ PUSH2 0x1B4 JUMPI DUP1 PUSH4 0x3A5AF339 EQ PUSH2 0x1C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x1352ACAC EQ PUSH2 0x117 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x163 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x102 PUSH2 0xFD CALLDATASIZE PUSH1 0x4 PUSH2 0x1045 JUMP JUMPDEST PUSH2 0x2F3 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13E PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10E JUMP JUMPDEST PUSH32 0x0 PUSH2 0x13E JUMP JUMPDEST PUSH2 0x191 PUSH2 0x30D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10E SWAP3 SWAP2 SWAP1 PUSH2 0x1087 JUMP JUMPDEST PUSH2 0x1B2 PUSH2 0x1AD CALLDATASIZE PUSH1 0x4 PUSH2 0x10D4 JUMP JUMPDEST PUSH2 0x320 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B2 PUSH2 0x1C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x10D4 JUMP JUMPDEST PUSH2 0x3EB JUMP JUMPDEST PUSH2 0x13E PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x201 PUSH2 0x1FC CALLDATASIZE PUSH1 0x4 PUSH2 0x115F JUMP JUMPDEST PUSH2 0x49F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10E JUMP JUMPDEST PUSH2 0x102 PUSH2 0x240 CALLDATASIZE PUSH1 0x4 PUSH2 0x11CE JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x1B2 PUSH2 0x28D CALLDATASIZE PUSH1 0x4 PUSH2 0x11E9 JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST PUSH2 0x13E PUSH2 0x7C0 JUMP JUMPDEST PUSH2 0x102 PUSH2 0x2A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x10D4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x102 PUSH2 0x2CB CALLDATASIZE PUSH1 0x4 PUSH2 0x10D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x1B2 PUSH2 0x2EE CALLDATASIZE PUSH1 0x4 PUSH2 0x11CE JUMP JUMPDEST PUSH2 0x7EC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x307 DUP3 PUSH2 0x301 PUSH2 0x80A JUMP JUMPDEST SWAP1 PUSH2 0x838 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x318 PUSH2 0x912 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH2 0x339 PUSH2 0x32B PUSH2 0x91D JUMP JUMPDEST PUSH2 0x333 PUSH2 0x927 JUMP JUMPDEST SWAP1 PUSH2 0x955 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x38A JUMPI PUSH1 0x40 MLOAD PUSH32 0x5D35DE3700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD DUP3 SWAP2 PUSH32 0xBDD203DD78BF49CF79E4DB0ECDF7D27ADC380FB1F33BEEF2667A50DB9D2A0E04 SWAP2 LOG2 POP JUMP JUMPDEST PUSH2 0x3F6 PUSH2 0x32B PUSH2 0x91D JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x441 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6D82574300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x381 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE MLOAD DUP3 SWAP2 PUSH32 0x578EAB65D47CFFA57066B105301289FF86BFDC0ADC2A701C3356D2A6EB6A6123 SWAP2 LOG2 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x54E JUMPI PUSH1 0x40 MLOAD PUSH32 0x6C50E90500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x381 JUMP JUMPDEST DUP4 PUSH1 0x0 DUP1 PUSH2 0x55E DUP9 DUP8 DUP8 DUP7 PUSH2 0x9C4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xD6A5BBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 SWAP4 POP SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xD6A5BBB SWAP1 PUSH2 0x5D9 SWAP1 DUP12 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x127F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x607 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH32 0x4FC3585900000000000000000000000000000000000000000000000000000000 SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x648 DUP7 DUP7 DUP7 DUP7 PUSH2 0x9C4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE ADDRESS PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP8 SWAP1 MSTORE SWAP3 SWAP5 POP SWAP1 SWAP3 POP PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6EB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x70F SWAP2 SWAP1 PUSH2 0x12DC JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0xD6A5BBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xD6A5BBB SWAP1 PUSH2 0x786 SWAP1 DUP10 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x127F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7B4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E7 PUSH2 0x7CD PUSH2 0x927 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x807 PUSH2 0x7F7 PUSH2 0x91D JUMP JUMPDEST DUP3 PUSH2 0x800 PUSH2 0x927 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xBC3 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x307 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x12FE JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x888 JUMPI POP PUSH1 0x0 PUSH2 0x307 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x8D9 JUMPI POP PUSH1 0x1 PUSH2 0x307 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x318 PUSH2 0xCD8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E7 PUSH2 0xE42 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x307 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x12FE JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x9C0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x381 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 PUSH2 0x9D9 DUP10 DUP12 ADD DUP12 PUSH2 0x1449 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP5 SWAP10 POP SWAP3 SWAP8 POP SWAP1 SWAP6 POP SWAP4 POP SWAP2 POP PUSH1 0xFF AND PUSH2 0xA31 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6D82574300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x381 JUMP JUMPDEST PUSH1 0x0 DUP12 DUP4 DUP4 DUP12 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xA4C SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1561 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP4 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0xAD6 JUMPI DUP12 DUP4 DUP4 DUP12 DUP9 PUSH1 0x40 MLOAD PUSH32 0xF048F37A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x381 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x15B5 JUMP JUMPDEST PUSH2 0xAE1 DUP5 DUP8 DUP4 PUSH2 0xF89 JUMP JUMPDEST PUSH2 0xB21 JUMPI DUP12 DUP4 DUP4 DUP12 DUP9 PUSH1 0x40 MLOAD PUSH32 0xDBF2AC7C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x381 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x15B5 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SWAP2 OR SWAP1 SSTORE MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP14 AND SWAP1 DUP7 SWAP1 DUP9 SWAP1 PUSH32 0xBF561A0AE8123352ABF33F8F113E6B265C2E7FE7BA9B4D450750454BCBB7233A SWAP1 PUSH2 0xBAA SWAP1 DUP15 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH2 0x160B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP SWAP1 SWAP11 SWAP1 SWAP10 POP SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xC30 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x381 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCD2 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xCE9 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xCF7 JUMPI POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0xE2C JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0x8929A8CA CALLDATASIZE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC ADD CALLDATALOAD PUSH1 0x60 SHR PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE08 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE2C SWAP2 SWAP1 PUSH2 0x12DC JUMP JUMPDEST ISZERO PUSH2 0xE39 JUMPI PUSH2 0x318 PUSH2 0xF9F JUMP JUMPDEST POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xE52 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xE5C JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xF78 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF54 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF78 SWAP2 SWAP1 PUSH2 0x12DC JUMP JUMPDEST ISZERO PUSH2 0xF82 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xF96 DUP6 DUP5 PUSH2 0xFD0 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x318 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC DUP4 ADD DUP3 DUP5 DUP2 PUSH2 0x1640 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x100B JUMPI PUSH2 0x1001 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xFF4 JUMPI PUSH2 0xFF4 PUSH2 0x166A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1013 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0xFD5 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x102F JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x103E JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1057 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x103E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1111 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1128 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1140 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1158 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1180 DUP7 PUSH2 0x10ED JUMP JUMPDEST SWAP5 POP PUSH2 0x118E PUSH1 0x20 DUP8 ADD PUSH2 0x10ED JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x11B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11BD DUP9 DUP3 DUP10 ADD PUSH2 0x1116 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x103E DUP3 PUSH2 0x10ED JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x11FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1208 DUP6 PUSH2 0x10ED JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1224 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1230 DUP8 DUP3 DUP9 ADD PUSH2 0x1116 JUMP JUMPDEST SWAP6 SWAP9 SWAP1 SWAP8 POP SWAP5 SWAP6 PUSH1 0x40 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1274 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1258 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x12AE PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x1243 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x12C0 DUP2 DUP6 PUSH2 0x1243 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x60 SWAP1 SWAP5 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x103E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x307 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x13AE JUMPI PUSH2 0x13AE PUSH2 0x1338 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x13D0 JUMPI PUSH2 0x13D0 PUSH2 0x1338 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x13EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x1400 PUSH2 0x13FB DUP4 PUSH2 0x13B6 JUMP JUMPDEST PUSH2 0x1367 JUMP JUMPDEST DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP5 PUSH1 0x5 SHL DUP8 ADD ADD SWAP4 POP DUP7 DUP5 GT ISZERO PUSH2 0x1422 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x143E JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x1427 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1461 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP1 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1488 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP10 ADD SWAP2 POP DUP10 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x149C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x14AA PUSH2 0x13FB DUP3 PUSH2 0x13B6 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP4 ADD DUP5 ADD SWAP1 DUP5 DUP2 ADD SWAP1 DUP13 DUP4 GT ISZERO PUSH2 0x14C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x14E7 JUMPI DUP5 CALLDATALOAD DUP3 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP1 DUP6 ADD SWAP1 PUSH2 0x14CE JUMP JUMPDEST SWAP8 POP POP POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP3 POP DUP1 DUP4 GT ISZERO PUSH2 0x14FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x150B DUP11 DUP5 DUP12 ADD PUSH2 0x13DA JUMP JUMPDEST SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD SWAP3 POP DUP1 DUP4 GT ISZERO PUSH2 0x1521 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH2 0x152F DUP9 DUP3 DUP10 ADD PUSH2 0x13DA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x20 DUP1 DUP5 ADD DUP4 DUP4 ISZERO PUSH2 0x1274 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1258 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP7 PUSH1 0x60 SHL AND DUP2 MSTORE PUSH1 0x0 PUSH2 0x15A1 PUSH2 0x159B PUSH1 0x14 DUP5 ADD DUP9 PUSH2 0x153C JUMP JUMPDEST DUP7 PUSH2 0x153C JUMP JUMPDEST SWAP4 DUP5 MSTORE POP POP PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0xA0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x15E4 PUSH1 0xA0 DUP4 ADD DUP8 PUSH2 0x1243 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x15F6 DUP2 DUP8 PUSH2 0x1243 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP PUSH1 0x80 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1624 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x1243 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1636 DUP2 DUP6 PUSH2 0x1243 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x1650 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x165D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NOT PUSH15 0x98A98F89C1906CE2600841A3BA3675 ADDRESS PUSH31 0xFD0EC9A2799F962A6B52356F164736F6C6343000816003300000000000000 ","sourceMap":"473:392:26:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:7;;;;;;:::i;:::-;;:::i;:::-;;;516:14:28;;509:22;491:41;;479:2;464:18;542:165:7;;;;;;;;1584:36:27;;;;;;;;733:42:28;721:55;;;703:74;;691:2;676:18;1584:36:27;543:240:28;728:115:11;817:19;728:115;;769:94:26;;;:::i;:::-;;;;;;;;:::i;4806:289:27:-;;;;;;:::i;:::-;;:::i;:::-;;5101:296;;;;;;:::i;:::-;;:::i;1529:49::-;;;;;3035:503;;;;;;:::i;:::-;;:::i;:::-;;;3295:66:28;3283:79;;;3265:98;;3253:2;3238:18;3035:503:27;3121:248:28;878:149:11;;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;4473:327:27;;;;;;:::i;:::-;;:::i;710:120:1:-;;;:::i;1440:37:27:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1483:39;;;;;;:::i;:::-;;;;;;;;;;;;;;;;864:152:1;;;;;;:::i;:::-;;:::i;542:165:7:-;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:7:o;769:94:26:-;813:14;;846:10;:8;:10::i;:::-;839:17;;;;769:94;;:::o;4806:289:27:-;4866:70;4923:12;:10;:12::i;:::-;4866:33;:31;:33::i;:::-;:56;;:70::i;:::-;4950:5;:17;;;;;;;;;;;;;4946:65;;;4976:35;;;;;;;;4498:25:28;;;4471:18;;4976:35:27;;;;;;;;4946:65;5022:5;:17;;;;;;;;;;;:24;;;;5042:4;5022:24;;;5061:27;5028:10;;5061:27;;;4806:289;:::o;5101:296::-;5167:70;5224:12;:10;:12::i;5167:70::-;5252:5;:17;;;;;;;;;;;;;5247:60;;5278:29;;;;;;;;4498:25:28;;;4471:18;;5278:29:27;4352:177:28;5247:60:27;5338:5;5318:17;;;;;;;;;;;:25;;;;;;5358:32;5324:10;;5358:32;;;5101:296;:::o;3035:503::-;3155:17;3196:12;3188:35;;3213:10;3188:35;3184:102;;3232:54;;;;;3252:10;3232:54;;;4769:34:28;4718:42;3272:12:27;4839:15:28;4819:18;;;4812:43;4681:18;;3232:54:27;4534:327:28;3184:102:27;3311:5;3297:11;;3377:34;3395:4;3401;;3311:5;3377:17;:34::i;:::-;3422:52;;;;;3327:84;;-1:-1:-1;3327:84:27;-1:-1:-1;3422:29:27;:15;:29;;;;:52;;3452:4;;3327:84;;;;3422:52;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3492:39:27;;3035:503;-1:-1:-1;;;;;;;;;;;;3035:503:27:o;4473:327::-;4566:20;4588:23;4615:44;4633:9;4644;;4655:3;4615:17;:44::i;:::-;4670:56;;;;;:25;6439:15:28;;;4670:56:27;;;6421:34:28;4715:4:27;6471:18:28;;;6464:43;6523:18;;;6516:34;;;4565:94:27;;-1:-1:-1;4565:94:27;;-1:-1:-1;4670:12:27;:25;;;;;;6333:18:28;;4670:56:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;4736:57:27;;;;;:29;:15;:29;;;;:57;;4766:9;;4777:3;;4782:6;;4736:57;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4555:245;;4473:327;;;;:::o;710:120:1:-;756:7;782:41;:33;:31;:33::i;:::-;3652:15:6;;;;3556:118;782:41:1;775:48;;710:120;:::o;864:152::-;934:75;986:12;:10;:12::i;:::-;1000:8;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;864:152;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:10;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:10;1620:11;;1560:82;-1:-1:-1;1658:34:10;;:21;:34;;;;;;;;;;;;;;;1359:340::o;2851:178:27:-;2950:14;;2983:39;:37;:39::i;2621:175::-;2722:7;2748:41;:39;:41::i;5065:174:6:-;5106:16;;926:71;996:1;934:58;926:71;:::i;4413:162::-;4519:15;;;4508:26;;;4519:15;;4508:26;4504:64;;4543:25;;;;;733:42:28;721:55;;4543:25:6;;;703:74:28;676:18;;4543:25:6;543:240:28;4504:64:6;4413:162;;:::o;3544:923:27:-;3677:20;;3735:18;;;;;3847:108;;;;3871:9;3847:108;:::i;:::-;3970:5;:17;;;;;;;;;;;3734:221;;-1:-1:-1;3734:221:27;;-1:-1:-1;3734:221:27;;-1:-1:-1;3734:221:27;-1:-1:-1;3734:221:27;-1:-1:-1;3970:17:27;;3965:60;;3996:29;;;;;;;;4498:25:28;;;4471:18;;3996:29:27;4352:177:28;3965:60:27;4036:12;4078:9;4089:4;4095:7;4104:3;4109:7;4061:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;4051:67;;4061:56;4051:67;;;;4133:13;;;;:7;:13;;;;;;4051:67;;-1:-1:-1;4133:13:27;;4129:80;;;4170:9;4181:4;4187:7;4196:3;4201:7;4155:54;;;;;;;;;;;;;;;:::i;4129:80::-;4224:30;:5;4237:10;4249:4;4224:12;:30::i;:::-;4219:96;;4276:9;4287:4;4293:7;4302:3;4307:7;4263:52;;;;;;;;;;;;;;;:::i;4219:96::-;4326:13;;;;4342:4;4326:13;;;;;;;;;:20;;;;;;;;;4362:65;;;;;4388:7;;4376:10;;4362:65;;;;4397:3;;4413:4;;4419:7;;4362:65;:::i;:::-;;;;;;;;-1:-1:-1;4446:4:27;;;;-1:-1:-1;3544:923:27;-1:-1:-1;;;;;;;;3544:923:27:o;3060:369:6:-;3182:15;;;;;;;3211:23;;;;3207:60;;3243:24;;;;;733:42:28;721:55;;3243:24:6;;;703:74:28;676:18;;3243:24:6;543:240:28;3207:60:6;3298:8;3281:25;;:13;:25;;;3277:146;;3322:26;;;;;;;;;;;;;3367:45;;;;;;;;-1:-1:-1;;3367:45:6;3277:146;3148:281;3060:369;;;:::o;1643:735:12:-;1694:14;;1911:10;1925:9;1911:23;;:47;;-1:-1:-1;1956:2:12;1938:8;:20;1911:47;1907:93;;;-1:-1:-1;1981:8:12;;;;-1:-1:-1;1643:735:12:o;1907:93::-;2161:10;:42;2183:19;2161:42;;;:126;;-1:-1:-1;2207:39:12;:19;:39;;466:14:15;462:23;;449:37;445:2;441:46;2207:80:12;;;;;;;;;;4718:42:28;4787:15;;;2207:80:12;;;4769:34:28;2276:10:12;4819:18:28;;;4812:43;4681:18;;2207:80:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2157:189;;;2310:25;:23;:25::i;2157:189::-;-1:-1:-1;2363:8:12;;;;-1:-1:-1;1643:735:12:o;784:745::-;837:7;1047:10;1061:9;1047:23;;:47;;-1:-1:-1;1092:2:12;1074:8;:20;1047:47;1043:95;;;-1:-1:-1;1117:10:12;;784:745::o;1043:95::-;462:23:15;466:14;462:23;449:37;445:2;441:46;1372:19:12;1350:42;;:10;:42;;:105;;-1:-1:-1;1396:59:12;;;;;:39;4787:15:28;;;1396:59:12;;;4769:34:28;1444:10:12;4819:18:28;;;4812:43;1396:19:12;:39;;;;4681:18:28;;1396:59:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1346:149;;;1478:6;784:745;-1:-1:-1;784:745:12:o;1346:149::-;1512:10;1505:17;;;784:745;:::o;1156:154:25:-;1247:4;1299;1270:25;1283:5;1290:4;1270:12;:25::i;:::-;:33;;1156:154;-1:-1:-1;;;;1156:154:25:o;616:152:15:-;658:19;;720:31;730:20;;;658:19;;;720:31;:::i;1934:290:25:-;2017:7;2059:4;2017:7;2073:116;2097:5;:12;2093:1;:16;2073:116;;;2145:33;2155:12;2169:5;2175:1;2169:8;;;;;;;;:::i;:::-;;;;;;;2145:9;:33::i;:::-;2130:48;-1:-1:-1;2111:3:25;;2073:116;;;-1:-1:-1;2205:12:25;1934:290;-1:-1:-1;;;1934:290:25:o;9205:147::-;9268:7;9298:1;9294;:5;:51;;9426:13;9517:15;;;9552:4;9545:15;;;9598:4;9582:21;;9294:51;;;9426:13;9517:15;;;9552:4;9545:15;;;9598:4;9582:21;;9302:20;9287:58;9205:147;-1:-1:-1;;;9205:147:25:o;14:332:28:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;1045:447;1202:2;1191:9;1184:21;1241:6;1236:2;1225:9;1221:18;1214:34;1298:6;1290;1285:2;1274:9;1270:18;1257:48;1354:1;1325:22;;;1349:2;1321:31;;;1314:42;;;;1408:2;1396:15;;;1413:66;1392:88;1377:104;1373:113;;1045:447;-1:-1:-1;1045:447:28:o;1497:180::-;1556:6;1609:2;1597:9;1588:7;1584:23;1580:32;1577:52;;;1625:1;1622;1615:12;1577:52;-1:-1:-1;1648:23:28;;1497:180;-1:-1:-1;1497:180:28:o;1937:196::-;2005:20;;2065:42;2054:54;;2044:65;;2034:93;;2123:1;2120;2113:12;2034:93;1937:196;;;:::o;2138:347::-;2189:8;2199:6;2253:3;2246:4;2238:6;2234:17;2230:27;2220:55;;2271:1;2268;2261:12;2220:55;-1:-1:-1;2294:20:28;;2337:18;2326:30;;2323:50;;;2369:1;2366;2359:12;2323:50;2406:4;2398:6;2394:17;2382:29;;2458:3;2451:4;2442:6;2434;2430:19;2426:30;2423:39;2420:59;;;2475:1;2472;2465:12;2420:59;2138:347;;;;;:::o;2490:626::-;2587:6;2595;2603;2611;2619;2672:3;2660:9;2651:7;2647:23;2643:33;2640:53;;;2689:1;2686;2679:12;2640:53;2712:29;2731:9;2712:29;:::i;:::-;2702:39;;2760:38;2794:2;2783:9;2779:18;2760:38;:::i;:::-;2750:48;;2845:2;2834:9;2830:18;2817:32;2807:42;;2900:2;2889:9;2885:18;2872:32;2927:18;2919:6;2916:30;2913:50;;;2959:1;2956;2949:12;2913:50;2998:58;3048:7;3039:6;3028:9;3024:22;2998:58;:::i;:::-;2490:626;;;;-1:-1:-1;2490:626:28;;-1:-1:-1;3075:8:28;;2972:84;2490:626;-1:-1:-1;;;2490:626:28:o;3374:186::-;3433:6;3486:2;3474:9;3465:7;3461:23;3457:32;3454:52;;;3502:1;3499;3492:12;3454:52;3525:29;3544:9;3525:29;:::i;3565:551::-;3653:6;3661;3669;3677;3730:2;3718:9;3709:7;3705:23;3701:32;3698:52;;;3746:1;3743;3736:12;3698:52;3769:29;3788:9;3769:29;:::i;:::-;3759:39;;3849:2;3838:9;3834:18;3821:32;3876:18;3868:6;3865:30;3862:50;;;3908:1;3905;3898:12;3862:50;3947:58;3997:7;3988:6;3977:9;3973:22;3947:58;:::i;:::-;3565:551;;4024:8;;-1:-1:-1;3921:84:28;;4106:2;4091:18;4078:32;;3565:551;-1:-1:-1;;;;3565:551:28:o;4866:450::-;4930:3;4968:5;4962:12;4995:6;4990:3;4983:19;5021:4;5050;5045:3;5041:14;5034:21;;5089:4;5082:5;5078:16;5112:1;5122:169;5136:6;5133:1;5130:13;5122:169;;;5197:13;;5185:26;;5231:12;;;;5266:15;;;;5158:1;5151:9;5122:169;;;-1:-1:-1;5307:3:28;;4866:450;-1:-1:-1;;;;;4866:450:28:o;5321:832::-;5718:42;5710:6;5706:55;5695:9;5688:74;5798:3;5793:2;5782:9;5778:18;5771:31;5669:4;5825:68;5888:3;5877:9;5873:19;5865:6;5825:68;:::i;:::-;5941:9;5933:6;5929:22;5924:2;5913:9;5909:18;5902:50;5975:55;6023:6;6015;5975:55;:::i;:::-;6066:22;;;6061:2;6046:18;;;6039:50;;;;-1:-1:-1;;6113:1:28;6098:17;;6144:2;6132:15;;5321:832;-1:-1:-1;;;5321:832:28:o;6561:277::-;6628:6;6681:2;6669:9;6660:7;6656:23;6652:32;6649:52;;;6697:1;6694;6687:12;6649:52;6729:9;6723:16;6782:5;6775:13;6768:21;6761:5;6758:32;6748:60;;6804:1;6801;6794:12;6843:282;6910:9;;;6931:11;;;6928:191;;;6975:77;6972:1;6965:88;7076:4;7073:1;7066:15;7104:4;7101:1;7094:15;7130:184;7182:77;7179:1;7172:88;7279:4;7276:1;7269:15;7303:4;7300:1;7293:15;7319:334;7390:2;7384:9;7446:2;7436:13;;7451:66;7432:86;7420:99;;7549:18;7534:34;;7570:22;;;7531:62;7528:88;;;7596:18;;:::i;:::-;7632:2;7625:22;7319:334;;-1:-1:-1;7319:334:28:o;7658:183::-;7718:4;7751:18;7743:6;7740:30;7737:56;;;7773:18;;:::i;:::-;-1:-1:-1;7818:1:28;7814:14;7830:4;7810:25;;7658:183::o;7846:668::-;7900:5;7953:3;7946:4;7938:6;7934:17;7930:27;7920:55;;7971:1;7968;7961:12;7920:55;8007:6;7994:20;8033:4;8057:60;8073:43;8113:2;8073:43;:::i;:::-;8057:60;:::i;:::-;8139:3;8163:2;8158:3;8151:15;8191:4;8186:3;8182:14;8175:21;;8248:4;8242:2;8239:1;8235:10;8227:6;8223:23;8219:34;8205:48;;8276:3;8268:6;8265:15;8262:35;;;8293:1;8290;8283:12;8262:35;8329:4;8321:6;8317:17;8343:142;8359:6;8354:3;8351:15;8343:142;;;8425:17;;8413:30;;8463:12;;;;8376;;8343:142;;;-1:-1:-1;8503:5:28;7846:668;-1:-1:-1;;;;;;7846:668:28:o;8519:1502::-;8689:6;8697;8705;8713;8721;8774:3;8762:9;8753:7;8749:23;8745:33;8742:53;;;8791:1;8788;8781:12;8742:53;8827:9;8814:23;8804:33;;8856:2;8905;8894:9;8890:18;8877:32;8867:42;;8960:2;8949:9;8945:18;8932:32;8983:18;9024:2;9016:6;9013:14;9010:34;;;9040:1;9037;9030:12;9010:34;9078:6;9067:9;9063:22;9053:32;;9123:7;9116:4;9112:2;9108:13;9104:27;9094:55;;9145:1;9142;9135:12;9094:55;9181:2;9168:16;9204:60;9220:43;9260:2;9220:43;:::i;9204:60::-;9298:15;;;9380:1;9376:10;;;;9368:19;;9364:28;;;9329:12;;;;9404:19;;;9401:39;;;9436:1;9433;9426:12;9401:39;9460:11;;;;9480:142;9496:6;9491:3;9488:15;9480:142;;;9562:17;;9550:30;;9513:12;;;;9600;;;;9480:142;;;9641:5;-1:-1:-1;;;9699:2:28;9684:18;;9671:32;;-1:-1:-1;9715:16:28;;;9712:36;;;9744:1;9741;9734:12;9712:36;9767:63;9822:7;9811:8;9800:9;9796:24;9767:63;:::i;:::-;9757:73;;9883:3;9872:9;9868:19;9855:33;9839:49;;9913:2;9903:8;9900:16;9897:36;;;9929:1;9926;9919:12;9897:36;;;9952:63;10007:7;9996:8;9985:9;9981:24;9952:63;:::i;:::-;9942:73;;;8519:1502;;;;;;;;:::o;10026:400::-;10111:12;;10079:3;;10161:4;10188:16;;;10079:3;10240:13;;10232:169;;10307:13;;10295:26;;10341:12;;;;10376:15;;;;10268:1;10261:9;10232:169;;10431:657;10805:66;10796:6;10792:2;10788:15;10784:88;10779:3;10772:101;10754:3;10895:88;10932:50;10978:2;10973:3;10969:12;10961:6;10932:50;:::i;:::-;10924:6;10895:88;:::i;:::-;10992:21;;;-1:-1:-1;;11040:2:28;11029:14;;11022:30;11079:2;11068:14;;10431:657;-1:-1:-1;;;10431:657:28:o;11093:752::-;11446:42;11438:6;11434:55;11423:9;11416:74;11526:3;11521:2;11510:9;11506:18;11499:31;11397:4;11553:68;11616:3;11605:9;11601:19;11593:6;11553:68;:::i;:::-;11669:9;11661:6;11657:22;11652:2;11641:9;11637:18;11630:50;11697:55;11745:6;11737;11697:55;:::i;:::-;11783:2;11768:18;;11761:34;;;;-1:-1:-1;;11826:3:28;11811:19;11804:35;11689:63;11093:752;-1:-1:-1;;;11093:752:28:o;11850:558::-;12135:6;12124:9;12117:25;12178:2;12173;12162:9;12158:18;12151:30;12098:4;12204:67;12267:2;12256:9;12252:18;12244:6;12204:67;:::i;:::-;12319:9;12311:6;12307:22;12302:2;12291:9;12287:18;12280:50;12347:55;12395:6;12387;12347:55;:::i;:::-;12339:63;11850:558;-1:-1:-1;;;;;;11850:558:28:o;12413:331::-;12518:9;12529;12571:8;12559:10;12556:24;12553:44;;;12593:1;12590;12583:12;12553:44;12622:6;12612:8;12609:20;12606:40;;;12642:1;12639;12632:12;12606:40;-1:-1:-1;;12668:23:28;;;12713:25;;;;;-1:-1:-1;12413:331:28:o;12749:184::-;12801:77;12798:1;12791:88;12898:4;12895:1;12888:15;12922:4;12919:1;12912:15"},"gasEstimates":{"creation":{"codeDepositCost":"1167800","executionCost":"infinite","totalCost":"infinite"},"external":{"FEE_CONTRACT()":"infinite","REWARD_CONTRACT()":"infinite","__msgData()":"infinite","addMerkleRoot(bytes32)":"infinite","claim(address,bytes,uint256)":"infinite","claimed(bytes32)":"2505","deprecateMerkleRoot(bytes32)":"infinite","forwarderRegistry()":"infinite","isTrustedForwarder(address)":"infinite","onERC20Received(address,address,uint256,bytes)":"infinite","owner()":"infinite","roots(bytes32)":"2486","supportsInterface(bytes4)":"infinite","transferOwnership(address)":"infinite"}},"methodIdentifiers":{"FEE_CONTRACT()":"1352acac","REWARD_CONTRACT()":"3a5af339","__msgData()":"31e66e1e","addMerkleRoot(bytes32)":"3323c807","claim(address,bytes,uint256)":"8bd8d0a9","claimed(bytes32)":"cc3c0f06","deprecateMerkleRoot(bytes32)":"3572aa8d","forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05","onERC20Received(address,address,uint256,bytes)":"4fc35859","owner()":"8da5cb5b","roots(bytes32)":"ae6dead7","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"feeContract_\",\"type\":\"address\"},{\"internalType\":\"contract IERC1155Mintable\",\"name\":\"rewardContract_\",\"type\":\"address\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"}],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expectedContract\",\"type\":\"address\"}],\"name\":\"FeeContractMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"InvalidMerkleRoot\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"}],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"MerkleRootAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"MerkleRootAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"MerkleRootDeprecated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"PayoutClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IERC1155Mintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__msgData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"addMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"claimData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"deprecateMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC20Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"roots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"onERC20Received(address,address,uint256,bytes)\":{\"details\":\"Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\",\"params\":{\"data\":\"Optional additional data with no specified format.\",\"from\":\"The previous tokens owner.\",\"operator\":\"The initiator of the safe transfer.\",\"value\":\"The amount of tokens transferred.\"},\"returns\":{\"magicValue\":\"`bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"onERC20Received(address,address,uint256,bytes)\":{\"notice\":\"Handles the receipt of ERC20 tokens.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/ChaosKingdomResourcesClaimMock.sol\":\"ChaosKingdomResourcesClaimMock\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x21ad59ed5a9dca82b5b1190ed399a7f664d627e3198538baedbf93f03ee49955\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\\ninterface IERC1155Mintable {\\n    /// @notice Safely mints some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely mints a batch of tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xe7b1645bd7a2745c96cece104c3ef4ef07552b5ad35b2cbbf6926f85885a409f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC20Receiver} from \\\"./interfaces/IERC20Receiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20Receiver is IERC20Receiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Receiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Receiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0xa251f9496fb7e6034f007615a9882f1bbb1c3b8fa79f8eacde92549a92fe9ac4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC20 Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20 {\\n    /// @notice Sets the allowance to an account from the sender.\\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param spender The account being granted the allowance by the message caller.\\n    /// @param value The allowance amount to grant.\\n    /// @return result Whether the operation succeeded.\\n    function approve(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transfer(address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transferFrom(address from, address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Gets the total token supply.\\n    /// @return supply The total token supply.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice Gets an account balance.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 value);\\n}\\n\",\"keccak256\":\"0x803a0e165c5bd1d40fbcce9abae98d48d25734a1d48e9af516a121abdb8d9c2b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xde544cd110ba40b2e9dad7ae46d2764be54ae09028f32bb45893f64f25f9282d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf688741f79f4838d5301dcf72d0af9eff11bbab6ab0bb112ad144c7fb672dac\",\"license\":\"MIT\"},\"contracts/mocks/ChaosKingdomResourcesClaimMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {IERC20} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\\\";\\nimport {IERC1155Mintable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {ChaosKingdomResourcesClaim} from \\\"../payment/ChaosKingdomResourcesClaim.sol\\\";\\n\\ncontract ChaosKingdomResourcesClaimMock is ChaosKingdomResourcesClaim {\\n    constructor(\\n        IERC20 feeContract_,\\n        IERC1155Mintable rewardContract_,\\n        IForwarderRegistry forwarderRegistry\\n    ) ChaosKingdomResourcesClaim(feeContract_, rewardContract_, forwarderRegistry) {}\\n\\n    function __msgData() external view returns (bytes calldata) {\\n        return _msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xb31d8c4504d49dd69c4897c08c88ae3e357dbb1c8a8900531120371d062a1d43\",\"license\":\"MIT\"},\"contracts/payment/ChaosKingdomResourcesClaim.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {IERC20} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\\\";\\nimport {IERC20Receiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\\\";\\nimport {ERC20Receiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\\\";\\nimport {IERC1155Mintable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\n\\ncontract ChaosKingdomResourcesClaim is ContractOwnership, ERC20Receiver, ForwarderRegistryContext {\\n    using MerkleProof for bytes32[];\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    mapping(bytes32 => bool) public roots;\\n    mapping(bytes32 => bool) public claimed;\\n\\n    IERC1155Mintable public immutable REWARD_CONTRACT;\\n    IERC20 public immutable FEE_CONTRACT;\\n\\n    event MerkleRootAdded(bytes32 indexed root);\\n\\n    event MerkleRootDeprecated(bytes32 indexed root);\\n\\n    event PayoutClaimed(bytes32 indexed root, bytes32 indexed epochId, uint256 fee, address indexed recipient, uint256[] ids, uint256[] values);\\n\\n    error MerkleRootAlreadyExists(bytes32 merkleRoot);\\n\\n    error InvalidMerkleRoot(bytes32 merkleRoot);\\n\\n    error AlreadyClaimed(address recipient, uint256[] ids, uint256[] values, uint256 fee, bytes32 epochId);\\n\\n    error InvalidProof(address recipient, uint256[] ids, uint256[] values, uint256 fee, bytes32 epochId);\\n\\n    error FeeContractMismatch(address sender, address expectedContract);\\n\\n    constructor(\\n        IERC20 feeContract,\\n        IERC1155Mintable rewardContract,\\n        IForwarderRegistry forwarderRegistry\\n    ) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {\\n        FEE_CONTRACT = feeContract;\\n        REWARD_CONTRACT = rewardContract;\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n\\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external override returns (bytes4 magicValue) {\\n        if (address(FEE_CONTRACT) != msg.sender) revert FeeContractMismatch(msg.sender, address(FEE_CONTRACT));\\n\\n        uint256 fee = value;\\n\\n        (uint256[] memory ids, uint256[] memory values) = _processClaimData(from, data, fee);\\n\\n        REWARD_CONTRACT.safeBatchMint(from, ids, values, \\\"\\\");\\n\\n        return IERC20Receiver.onERC20Received.selector;\\n    }\\n\\n    function _processClaimData(\\n        address recipient,\\n        bytes calldata claimData,\\n        uint256 fee\\n    ) internal returns (uint256[] memory ids, uint256[] memory values) {\\n        (bytes32 merkleRoot, bytes32 epochId, bytes32[] memory proof, uint256[] memory _ids, uint256[] memory _values) = abi.decode(\\n            claimData,\\n            (bytes32, bytes32, bytes32[], uint256[], uint256[])\\n        );\\n        if (!roots[merkleRoot]) revert InvalidMerkleRoot(merkleRoot);\\n\\n        bytes32 leaf = keccak256(abi.encodePacked(recipient, _ids, _values, fee, epochId));\\n\\n        if (claimed[leaf]) revert AlreadyClaimed(recipient, _ids, _values, fee, epochId);\\n        if (!proof.verify(merkleRoot, leaf)) revert InvalidProof(recipient, _ids, _values, fee, epochId);\\n\\n        claimed[leaf] = true;\\n\\n        emit PayoutClaimed(merkleRoot, epochId, fee, recipient, _ids, _values);\\n\\n        return (_ids, _values);\\n    }\\n\\n    function claim(address recipient, bytes calldata claimData, uint256 fee) external {\\n        (uint256[] memory ids, uint256[] memory values) = _processClaimData(recipient, claimData, fee);\\n\\n        FEE_CONTRACT.transferFrom(recipient, address(this), fee);\\n        REWARD_CONTRACT.safeBatchMint(recipient, ids, values, \\\"\\\");\\n    }\\n\\n    function addMerkleRoot(bytes32 merkleRoot) public {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        if (roots[merkleRoot]) revert MerkleRootAlreadyExists(merkleRoot);\\n\\n        roots[merkleRoot] = true;\\n        emit MerkleRootAdded(merkleRoot);\\n    }\\n\\n    function deprecateMerkleRoot(bytes32 merkleRoot) public {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        if (!roots[merkleRoot]) revert InvalidMerkleRoot(merkleRoot);\\n\\n        roots[merkleRoot] = false;\\n        emit MerkleRootDeprecated(merkleRoot);\\n    }\\n}\\n\",\"keccak256\":\"0xefa377dd906ba3b083dd7d93f42a7edceb73e26fc67914f91550e754105ce880\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2027,"contract":"contracts/mocks/ChaosKingdomResourcesClaimMock.sol:ChaosKingdomResourcesClaimMock","label":"roots","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_bool)"},{"astId":2031,"contract":"contracts/mocks/ChaosKingdomResourcesClaimMock.sol:ChaosKingdomResourcesClaimMock","label":"claimed","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_bool)"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"}}},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"onERC20Received(address,address,uint256,bytes)":{"notice":"Handles the receipt of ERC20 tokens."},"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"contracts/payment/ChaosKingdomResourcesClaim.sol":{"ChaosKingdomResourcesClaim":{"abi":[{"inputs":[{"internalType":"contract IERC20","name":"feeContract","type":"address"},{"internalType":"contract IERC1155Mintable","name":"rewardContract","type":"address"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"uint256","name":"fee","type":"uint256"},{"internalType":"bytes32","name":"epochId","type":"bytes32"}],"name":"AlreadyClaimed","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"expectedContract","type":"address"}],"name":"FeeContractMismatch","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"name":"InvalidMerkleRoot","type":"error"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"uint256","name":"fee","type":"uint256"},{"internalType":"bytes32","name":"epochId","type":"bytes32"}],"name":"InvalidProof","type":"error"},{"inputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"name":"MerkleRootAlreadyExists","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"root","type":"bytes32"}],"name":"MerkleRootAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"root","type":"bytes32"}],"name":"MerkleRootDeprecated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"root","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"epochId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"fee","type":"uint256"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"PayoutClaimed","type":"event"},{"inputs":[],"name":"FEE_CONTRACT","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_CONTRACT","outputs":[{"internalType":"contract IERC1155Mintable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"name":"addMerkleRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes","name":"claimData","type":"bytes"},{"internalType":"uint256","name":"fee","type":"uint256"}],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"claimed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"name":"deprecateMerkleRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC20Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"roots","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"onERC20Received(address,address,uint256,bytes)":{"details":"Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.","params":{"data":"Optional additional data with no specified format.","from":"The previous tokens owner.","operator":"The initiator of the safe transfer.","value":"The amount of tokens transferred."},"returns":{"magicValue":"`bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2131":{"entryPoint":null,"id":2131,"parameterSlots":3,"returnSlots":0},"@_31":{"entryPoint":null,"id":31,"parameterSlots":1,"returnSlots":0},"@_555":{"entryPoint":null,"id":555,"parameterSlots":1,"returnSlots":0},"@_602":{"entryPoint":null,"id":602,"parameterSlots":1,"returnSlots":0},"@_876":{"entryPoint":null,"id":876,"parameterSlots":0,"returnSlots":0},"@constructorInit_227":{"entryPoint":196,"id":227,"parameterSlots":2,"returnSlots":0},"@layout_383":{"entryPoint":142,"id":383,"parameterSlots":0,"returnSlots":1},"@layout_531":{"entryPoint":311,"id":531,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_485":{"entryPoint":359,"id":485,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_contract$_IERC20_$937t_contract$_IERC1155Mintable_$842t_contract$_IForwarderRegistry_$727_fromMemory":{"entryPoint":477,"id":null,"parameterSlots":2,"returnSlots":3},"checked_sub_t_uint256":{"entryPoint":561,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_contract_IERC20":{"entryPoint":452,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:997:28","nodeType":"YulBlock","src":"0:997:28","statements":[{"nativeSrc":"6:3:28","nodeType":"YulBlock","src":"6:3:28","statements":[]},{"body":{"nativeSrc":"67:86:28","nodeType":"YulBlock","src":"67:86:28","statements":[{"body":{"nativeSrc":"131:16:28","nodeType":"YulBlock","src":"131:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"140:1:28","nodeType":"YulLiteral","src":"140:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"143:1:28","nodeType":"YulLiteral","src":"143:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"133:6:28","nodeType":"YulIdentifier","src":"133:6:28"},"nativeSrc":"133:12:28","nodeType":"YulFunctionCall","src":"133:12:28"},"nativeSrc":"133:12:28","nodeType":"YulExpressionStatement","src":"133:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"90:5:28","nodeType":"YulIdentifier","src":"90:5:28"},{"arguments":[{"name":"value","nativeSrc":"101:5:28","nodeType":"YulIdentifier","src":"101:5:28"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"116:3:28","nodeType":"YulLiteral","src":"116:3:28","type":"","value":"160"},{"kind":"number","nativeSrc":"121:1:28","nodeType":"YulLiteral","src":"121:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"112:3:28","nodeType":"YulIdentifier","src":"112:3:28"},"nativeSrc":"112:11:28","nodeType":"YulFunctionCall","src":"112:11:28"},{"kind":"number","nativeSrc":"125:1:28","nodeType":"YulLiteral","src":"125:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"108:3:28","nodeType":"YulIdentifier","src":"108:3:28"},"nativeSrc":"108:19:28","nodeType":"YulFunctionCall","src":"108:19:28"}],"functionName":{"name":"and","nativeSrc":"97:3:28","nodeType":"YulIdentifier","src":"97:3:28"},"nativeSrc":"97:31:28","nodeType":"YulFunctionCall","src":"97:31:28"}],"functionName":{"name":"eq","nativeSrc":"87:2:28","nodeType":"YulIdentifier","src":"87:2:28"},"nativeSrc":"87:42:28","nodeType":"YulFunctionCall","src":"87:42:28"}],"functionName":{"name":"iszero","nativeSrc":"80:6:28","nodeType":"YulIdentifier","src":"80:6:28"},"nativeSrc":"80:50:28","nodeType":"YulFunctionCall","src":"80:50:28"},"nativeSrc":"77:70:28","nodeType":"YulIf","src":"77:70:28"}]},"name":"validator_revert_contract_IERC20","nativeSrc":"14:139:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"56:5:28","nodeType":"YulTypedName","src":"56:5:28","type":""}],"src":"14:139:28"},{"body":{"nativeSrc":"337:428:28","nodeType":"YulBlock","src":"337:428:28","statements":[{"body":{"nativeSrc":"383:16:28","nodeType":"YulBlock","src":"383:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"392:1:28","nodeType":"YulLiteral","src":"392:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"395:1:28","nodeType":"YulLiteral","src":"395:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"385:6:28","nodeType":"YulIdentifier","src":"385:6:28"},"nativeSrc":"385:12:28","nodeType":"YulFunctionCall","src":"385:12:28"},"nativeSrc":"385:12:28","nodeType":"YulExpressionStatement","src":"385:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"358:7:28","nodeType":"YulIdentifier","src":"358:7:28"},{"name":"headStart","nativeSrc":"367:9:28","nodeType":"YulIdentifier","src":"367:9:28"}],"functionName":{"name":"sub","nativeSrc":"354:3:28","nodeType":"YulIdentifier","src":"354:3:28"},"nativeSrc":"354:23:28","nodeType":"YulFunctionCall","src":"354:23:28"},{"kind":"number","nativeSrc":"379:2:28","nodeType":"YulLiteral","src":"379:2:28","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"350:3:28","nodeType":"YulIdentifier","src":"350:3:28"},"nativeSrc":"350:32:28","nodeType":"YulFunctionCall","src":"350:32:28"},"nativeSrc":"347:52:28","nodeType":"YulIf","src":"347:52:28"},{"nativeSrc":"408:29:28","nodeType":"YulVariableDeclaration","src":"408:29:28","value":{"arguments":[{"name":"headStart","nativeSrc":"427:9:28","nodeType":"YulIdentifier","src":"427:9:28"}],"functionName":{"name":"mload","nativeSrc":"421:5:28","nodeType":"YulIdentifier","src":"421:5:28"},"nativeSrc":"421:16:28","nodeType":"YulFunctionCall","src":"421:16:28"},"variables":[{"name":"value","nativeSrc":"412:5:28","nodeType":"YulTypedName","src":"412:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"479:5:28","nodeType":"YulIdentifier","src":"479:5:28"}],"functionName":{"name":"validator_revert_contract_IERC20","nativeSrc":"446:32:28","nodeType":"YulIdentifier","src":"446:32:28"},"nativeSrc":"446:39:28","nodeType":"YulFunctionCall","src":"446:39:28"},"nativeSrc":"446:39:28","nodeType":"YulExpressionStatement","src":"446:39:28"},{"nativeSrc":"494:15:28","nodeType":"YulAssignment","src":"494:15:28","value":{"name":"value","nativeSrc":"504:5:28","nodeType":"YulIdentifier","src":"504:5:28"},"variableNames":[{"name":"value0","nativeSrc":"494:6:28","nodeType":"YulIdentifier","src":"494:6:28"}]},{"nativeSrc":"518:40:28","nodeType":"YulVariableDeclaration","src":"518:40:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"543:9:28","nodeType":"YulIdentifier","src":"543:9:28"},{"kind":"number","nativeSrc":"554:2:28","nodeType":"YulLiteral","src":"554:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"539:3:28","nodeType":"YulIdentifier","src":"539:3:28"},"nativeSrc":"539:18:28","nodeType":"YulFunctionCall","src":"539:18:28"}],"functionName":{"name":"mload","nativeSrc":"533:5:28","nodeType":"YulIdentifier","src":"533:5:28"},"nativeSrc":"533:25:28","nodeType":"YulFunctionCall","src":"533:25:28"},"variables":[{"name":"value_1","nativeSrc":"522:7:28","nodeType":"YulTypedName","src":"522:7:28","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"600:7:28","nodeType":"YulIdentifier","src":"600:7:28"}],"functionName":{"name":"validator_revert_contract_IERC20","nativeSrc":"567:32:28","nodeType":"YulIdentifier","src":"567:32:28"},"nativeSrc":"567:41:28","nodeType":"YulFunctionCall","src":"567:41:28"},"nativeSrc":"567:41:28","nodeType":"YulExpressionStatement","src":"567:41:28"},{"nativeSrc":"617:17:28","nodeType":"YulAssignment","src":"617:17:28","value":{"name":"value_1","nativeSrc":"627:7:28","nodeType":"YulIdentifier","src":"627:7:28"},"variableNames":[{"name":"value1","nativeSrc":"617:6:28","nodeType":"YulIdentifier","src":"617:6:28"}]},{"nativeSrc":"643:40:28","nodeType":"YulVariableDeclaration","src":"643:40:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"668:9:28","nodeType":"YulIdentifier","src":"668:9:28"},{"kind":"number","nativeSrc":"679:2:28","nodeType":"YulLiteral","src":"679:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"664:3:28","nodeType":"YulIdentifier","src":"664:3:28"},"nativeSrc":"664:18:28","nodeType":"YulFunctionCall","src":"664:18:28"}],"functionName":{"name":"mload","nativeSrc":"658:5:28","nodeType":"YulIdentifier","src":"658:5:28"},"nativeSrc":"658:25:28","nodeType":"YulFunctionCall","src":"658:25:28"},"variables":[{"name":"value_2","nativeSrc":"647:7:28","nodeType":"YulTypedName","src":"647:7:28","type":""}]},{"expression":{"arguments":[{"name":"value_2","nativeSrc":"725:7:28","nodeType":"YulIdentifier","src":"725:7:28"}],"functionName":{"name":"validator_revert_contract_IERC20","nativeSrc":"692:32:28","nodeType":"YulIdentifier","src":"692:32:28"},"nativeSrc":"692:41:28","nodeType":"YulFunctionCall","src":"692:41:28"},"nativeSrc":"692:41:28","nodeType":"YulExpressionStatement","src":"692:41:28"},{"nativeSrc":"742:17:28","nodeType":"YulAssignment","src":"742:17:28","value":{"name":"value_2","nativeSrc":"752:7:28","nodeType":"YulIdentifier","src":"752:7:28"},"variableNames":[{"name":"value2","nativeSrc":"742:6:28","nodeType":"YulIdentifier","src":"742:6:28"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20_$937t_contract$_IERC1155Mintable_$842t_contract$_IForwarderRegistry_$727_fromMemory","nativeSrc":"158:607:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"287:9:28","nodeType":"YulTypedName","src":"287:9:28","type":""},{"name":"dataEnd","nativeSrc":"298:7:28","nodeType":"YulTypedName","src":"298:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"310:6:28","nodeType":"YulTypedName","src":"310:6:28","type":""},{"name":"value1","nativeSrc":"318:6:28","nodeType":"YulTypedName","src":"318:6:28","type":""},{"name":"value2","nativeSrc":"326:6:28","nodeType":"YulTypedName","src":"326:6:28","type":""}],"src":"158:607:28"},{"body":{"nativeSrc":"819:176:28","nodeType":"YulBlock","src":"819:176:28","statements":[{"nativeSrc":"829:17:28","nodeType":"YulAssignment","src":"829:17:28","value":{"arguments":[{"name":"x","nativeSrc":"841:1:28","nodeType":"YulIdentifier","src":"841:1:28"},{"name":"y","nativeSrc":"844:1:28","nodeType":"YulIdentifier","src":"844:1:28"}],"functionName":{"name":"sub","nativeSrc":"837:3:28","nodeType":"YulIdentifier","src":"837:3:28"},"nativeSrc":"837:9:28","nodeType":"YulFunctionCall","src":"837:9:28"},"variableNames":[{"name":"diff","nativeSrc":"829:4:28","nodeType":"YulIdentifier","src":"829:4:28"}]},{"body":{"nativeSrc":"878:111:28","nodeType":"YulBlock","src":"878:111:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"899:1:28","nodeType":"YulLiteral","src":"899:1:28","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"906:3:28","nodeType":"YulLiteral","src":"906:3:28","type":"","value":"224"},{"kind":"number","nativeSrc":"911:10:28","nodeType":"YulLiteral","src":"911:10:28","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"902:3:28","nodeType":"YulIdentifier","src":"902:3:28"},"nativeSrc":"902:20:28","nodeType":"YulFunctionCall","src":"902:20:28"}],"functionName":{"name":"mstore","nativeSrc":"892:6:28","nodeType":"YulIdentifier","src":"892:6:28"},"nativeSrc":"892:31:28","nodeType":"YulFunctionCall","src":"892:31:28"},"nativeSrc":"892:31:28","nodeType":"YulExpressionStatement","src":"892:31:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"943:1:28","nodeType":"YulLiteral","src":"943:1:28","type":"","value":"4"},{"kind":"number","nativeSrc":"946:4:28","nodeType":"YulLiteral","src":"946:4:28","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"936:6:28","nodeType":"YulIdentifier","src":"936:6:28"},"nativeSrc":"936:15:28","nodeType":"YulFunctionCall","src":"936:15:28"},"nativeSrc":"936:15:28","nodeType":"YulExpressionStatement","src":"936:15:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"971:1:28","nodeType":"YulLiteral","src":"971:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"974:4:28","nodeType":"YulLiteral","src":"974:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"964:6:28","nodeType":"YulIdentifier","src":"964:6:28"},"nativeSrc":"964:15:28","nodeType":"YulFunctionCall","src":"964:15:28"},"nativeSrc":"964:15:28","nodeType":"YulExpressionStatement","src":"964:15:28"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"861:4:28","nodeType":"YulIdentifier","src":"861:4:28"},{"name":"x","nativeSrc":"867:1:28","nodeType":"YulIdentifier","src":"867:1:28"}],"functionName":{"name":"gt","nativeSrc":"858:2:28","nodeType":"YulIdentifier","src":"858:2:28"},"nativeSrc":"858:11:28","nodeType":"YulFunctionCall","src":"858:11:28"},"nativeSrc":"855:134:28","nodeType":"YulIf","src":"855:134:28"}]},"name":"checked_sub_t_uint256","nativeSrc":"770:225:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"801:1:28","nodeType":"YulTypedName","src":"801:1:28","type":""},{"name":"y","nativeSrc":"804:1:28","nodeType":"YulTypedName","src":"804:1:28","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"810:4:28","nodeType":"YulTypedName","src":"810:4:28","type":""}],"src":"770:225:28"}]},"contents":"{\n    { }\n    function validator_revert_contract_IERC20(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$937t_contract$_IERC1155Mintable_$842t_contract$_IForwarderRegistry_$727_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_IERC20(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_contract_IERC20(value_1)\n        value1 := value_1\n        let value_2 := mload(add(headStart, 64))\n        validator_revert_contract_IERC20(value_2)\n        value2 := value_2\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":28,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60e06040523480156200001157600080fd5b5060405162001739380380620017398339810160408190526200003491620001dd565b8080336200004d81620000466200008e565b90620000c4565b506200006e634fc3585960e01b60016200006662000137565b919062000167565b6001600160a01b0390811660805293841660c05250501660a05262000253565b600080620000be60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd62000231565b92915050565b6001600160a01b038116156200011b5781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b620001336307f5828d60e41b60016200006662000137565b5050565b600080620000be60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e62000231565b600160e01b6001600160e01b031983160162000196576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6001600160a01b0381168114620001da57600080fd5b50565b600080600060608486031215620001f357600080fd5b83516200020081620001c4565b60208501519093506200021381620001c4565b60408501519092506200022681620001c4565b809150509250925092565b81810381811115620000be57634e487b7160e01b600052601160045260246000fd5b60805160a05160c05161147e620002bb600039600081816101110152818161046f015281816104ed015261066c0152600081816101ab0152818161056c015261071901526000818161015a0152818161022101528181610cdc0152610d64015261147e6000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80634fc358591161008c5780638da5cb5b116100665780638da5cb5b14610271578063ae6dead714610279578063cc3c0f061461029c578063f2fde38b146102bf57600080fd5b80634fc35859146101cd578063572b6c05146102115780638bd8d0a91461025e57600080fd5b80633323c807116100bd5780633323c8071461017e5780633572aa8d146101935780633a5af339146101a657600080fd5b806301ffc9a7146100e45780631352acac1461010c5780632b4c9f1614610158575b600080fd5b6100f76100f2366004610e6b565b6102d2565b60405190151581526020015b60405180910390f35b6101337f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610103565b7f0000000000000000000000000000000000000000000000000000000000000000610133565b61019161018c366004610ead565b6102ec565b005b6101916101a1366004610ead565b6103b7565b6101337f000000000000000000000000000000000000000000000000000000000000000081565b6101e06101db366004610f38565b61046b565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610103565b6100f761021f366004610fa7565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b61019161026c366004610fc2565b610605565b61013361078c565b6100f7610287366004610ead565b60006020819052908152604090205460ff1681565b6100f76102aa366004610ead565b60016020526000908152604090205460ff1681565b6101916102cd366004610fa7565b6107b8565b60006102e6826102e06107d6565b90610804565b92915050565b6103056102f76108de565b6102ff6108e8565b90610916565b60008181526020819052604090205460ff1615610356576040517f5d35de37000000000000000000000000000000000000000000000000000000008152600481018290526024015b60405180910390fd5b60008181526020819052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555182917fbdd203dd78bf49cf79e4db0ecdf7d27adc380fb1f33beef2667a50db9d2a0e0491a250565b6103c26102f76108de565b60008181526020819052604090205460ff1661040d576040517f6d8257430000000000000000000000000000000000000000000000000000000081526004810182905260240161034d565b60008181526020819052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555182917f578eab65d47cffa57066b105301289ff86bfdc0adc2a701c3356d2a6eb6a612391a250565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331461051a576040517f6c50e90500000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016602482015260440161034d565b8360008061052a88878786610985565b6040517f0d6a5bbb000000000000000000000000000000000000000000000000000000008152919350915073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690630d6a5bbb906105a5908b9086908690600401611058565b600060405180830381600087803b1580156105bf57600080fd5b505af11580156105d3573d6000803e3d6000fd5b507f4fc35859000000000000000000000000000000000000000000000000000000009c9b505050505050505050505050565b60008061061486868686610985565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152306024830152604482018790529294509092507f0000000000000000000000000000000000000000000000000000000000000000909116906323b872dd906064016020604051808303816000875af11580156106b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106db91906110b5565b506040517f0d6a5bbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690630d6a5bbb9061075290899086908690600401611058565b600060405180830381600087803b15801561076c57600080fd5b505af1158015610780573d6000803e3d6000fd5b50505050505050505050565b60006107b36107996108e8565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b6107d36107c36108de565b826107cc6108e8565b9190610b84565b50565b6000806102e660017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6110d7565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610854575060006102e6565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016108a5575060016102e6565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b60006107b3610c99565b6000806102e660017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd6110d7565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610981576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260240161034d565b5050565b60608060008080808061099a898b018b611222565b6000858152602081905260409020549499509297509095509350915060ff166109f2576040517f6d8257430000000000000000000000000000000000000000000000000000000081526004810186905260240161034d565b60008b83838b88604051602001610a0d95949392919061133a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000818152600190935291205490915060ff1615610a97578b83838b886040517ff048f37a00000000000000000000000000000000000000000000000000000000815260040161034d95949392919061138e565b610aa2848783610de0565b610ae2578b83838b886040517fdbf2ac7c00000000000000000000000000000000000000000000000000000000815260040161034d95949392919061138e565b60008181526001602081905260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690911790555173ffffffffffffffffffffffffffffffffffffffff8d1690869088907fbf561a0ae8123352abf33f8f113e6b265c2e7fe7ba9b4d450750454bcbb7233a90610b6b908e90899089906113e4565b60405180910390a450909a909950975050505050505050565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610bf1576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161034d565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c935783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b600033321480610ca95750601836105b15610cb357503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480610dcf57506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa158015610dab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcf91906110b5565b15610dd957919050565b3391505090565b600082610ded8584610df6565b14949350505050565b600081815b8451811015610e3157610e2782868381518110610e1a57610e1a611419565b6020026020010151610e39565b9150600101610dfb565b509392505050565b6000818310610e55576000828152602084905260409020610e64565b60008381526020839052604090205b9392505050565b600060208284031215610e7d57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610e6457600080fd5b600060208284031215610ebf57600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610eea57600080fd5b919050565b60008083601f840112610f0157600080fd5b50813567ffffffffffffffff811115610f1957600080fd5b602083019150836020828501011115610f3157600080fd5b9250929050565b600080600080600060808688031215610f5057600080fd5b610f5986610ec6565b9450610f6760208701610ec6565b935060408601359250606086013567ffffffffffffffff811115610f8a57600080fd5b610f9688828901610eef565b969995985093965092949392505050565b600060208284031215610fb957600080fd5b610e6482610ec6565b60008060008060608587031215610fd857600080fd5b610fe185610ec6565b9350602085013567ffffffffffffffff811115610ffd57600080fd5b61100987828801610eef565b9598909750949560400135949350505050565b60008151808452602080850194506020840160005b8381101561104d57815187529582019590820190600101611031565b509495945050505050565b73ffffffffffffffffffffffffffffffffffffffff84168152608060208201526000611087608083018561101c565b8281036040840152611099818561101c565b8381036060909401939093525050600081526020019392505050565b6000602082840312156110c757600080fd5b81518015158114610e6457600080fd5b818103818111156102e6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561118757611187611111565b604052919050565b600067ffffffffffffffff8211156111a9576111a9611111565b5060051b60200190565b600082601f8301126111c457600080fd5b813560206111d96111d48361118f565b611140565b8083825260208201915060208460051b8701019350868411156111fb57600080fd5b602086015b848110156112175780358352918301918301611200565b509695505050505050565b600080600080600060a0868803121561123a57600080fd5b853594506020808701359450604087013567ffffffffffffffff8082111561126157600080fd5b818901915089601f83011261127557600080fd5b81356112836111d48261118f565b81815260059190911b8301840190848101908c8311156112a257600080fd5b938501935b828510156112c0578435825293850193908501906112a7565b9750505060608901359250808311156112d857600080fd5b6112e48a848b016111b3565b945060808901359250808311156112fa57600080fd5b5050611308888289016111b3565b9150509295509295909350565b8051600090602080840183831561104d57815187529582019590820190600101611031565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008660601b168152600061137a6113746014840188611315565b86611315565b938452505060208201526040019392505050565b73ffffffffffffffffffffffffffffffffffffffff8616815260a0602082015260006113bd60a083018761101c565b82810360408401526113cf818761101c565b60608401959095525050608001529392505050565b8381526060602082015260006113fd606083018561101c565b828103604084015261140f818561101c565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220b1b2767e8d44a05f221e6e66d7f0339aae457b98b484f00ed1999f5a9caf93ad64736f6c63430008160033","opcodes":"PUSH1 0xE0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1739 CODESIZE SUB DUP1 PUSH3 0x1739 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1DD JUMP JUMPDEST DUP1 DUP1 CALLER PUSH3 0x4D DUP2 PUSH3 0x46 PUSH3 0x8E JUMP JUMPDEST SWAP1 PUSH3 0xC4 JUMP JUMPDEST POP PUSH3 0x6E PUSH4 0x4FC35859 PUSH1 0xE0 SHL PUSH1 0x1 PUSH3 0x66 PUSH3 0x137 JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x167 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x80 MSTORE SWAP4 DUP5 AND PUSH1 0xC0 MSTORE POP POP AND PUSH1 0xA0 MSTORE PUSH3 0x253 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xBE PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x231 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x11B JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x133 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x66 PUSH3 0x137 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xBE PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x231 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x196 JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x1DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x1F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD PUSH3 0x200 DUP2 PUSH3 0x1C4 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH3 0x213 DUP2 PUSH3 0x1C4 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x226 DUP2 PUSH3 0x1C4 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0xBE JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH2 0x147E PUSH3 0x2BB PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x111 ADD MSTORE DUP2 DUP2 PUSH2 0x46F ADD MSTORE DUP2 DUP2 PUSH2 0x4ED ADD MSTORE PUSH2 0x66C ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x1AB ADD MSTORE DUP2 DUP2 PUSH2 0x56C ADD MSTORE PUSH2 0x719 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x15A ADD MSTORE DUP2 DUP2 PUSH2 0x221 ADD MSTORE DUP2 DUP2 PUSH2 0xCDC ADD MSTORE PUSH2 0xD64 ADD MSTORE PUSH2 0x147E PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xDF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4FC35859 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x271 JUMPI DUP1 PUSH4 0xAE6DEAD7 EQ PUSH2 0x279 JUMPI DUP1 PUSH4 0xCC3C0F06 EQ PUSH2 0x29C JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4FC35859 EQ PUSH2 0x1CD JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x211 JUMPI DUP1 PUSH4 0x8BD8D0A9 EQ PUSH2 0x25E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3323C807 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0x3323C807 EQ PUSH2 0x17E JUMPI DUP1 PUSH4 0x3572AA8D EQ PUSH2 0x193 JUMPI DUP1 PUSH4 0x3A5AF339 EQ PUSH2 0x1A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xE4 JUMPI DUP1 PUSH4 0x1352ACAC EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x158 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF7 PUSH2 0xF2 CALLDATASIZE PUSH1 0x4 PUSH2 0xE6B JUMP JUMPDEST PUSH2 0x2D2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x133 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x103 JUMP JUMPDEST PUSH32 0x0 PUSH2 0x133 JUMP JUMPDEST PUSH2 0x191 PUSH2 0x18C CALLDATASIZE PUSH1 0x4 PUSH2 0xEAD JUMP JUMPDEST PUSH2 0x2EC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x191 PUSH2 0x1A1 CALLDATASIZE PUSH1 0x4 PUSH2 0xEAD JUMP JUMPDEST PUSH2 0x3B7 JUMP JUMPDEST PUSH2 0x133 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1E0 PUSH2 0x1DB CALLDATASIZE PUSH1 0x4 PUSH2 0xF38 JUMP JUMPDEST PUSH2 0x46B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x103 JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x21F CALLDATASIZE PUSH1 0x4 PUSH2 0xFA7 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x191 PUSH2 0x26C CALLDATASIZE PUSH1 0x4 PUSH2 0xFC2 JUMP JUMPDEST PUSH2 0x605 JUMP JUMPDEST PUSH2 0x133 PUSH2 0x78C JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x287 CALLDATASIZE PUSH1 0x4 PUSH2 0xEAD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x2AA CALLDATASIZE PUSH1 0x4 PUSH2 0xEAD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x191 PUSH2 0x2CD CALLDATASIZE PUSH1 0x4 PUSH2 0xFA7 JUMP JUMPDEST PUSH2 0x7B8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E6 DUP3 PUSH2 0x2E0 PUSH2 0x7D6 JUMP JUMPDEST SWAP1 PUSH2 0x804 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x305 PUSH2 0x2F7 PUSH2 0x8DE JUMP JUMPDEST PUSH2 0x2FF PUSH2 0x8E8 JUMP JUMPDEST SWAP1 PUSH2 0x916 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x356 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5D35DE3700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD DUP3 SWAP2 PUSH32 0xBDD203DD78BF49CF79E4DB0ECDF7D27ADC380FB1F33BEEF2667A50DB9D2A0E04 SWAP2 LOG2 POP JUMP JUMPDEST PUSH2 0x3C2 PUSH2 0x2F7 PUSH2 0x8DE JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x40D JUMPI PUSH1 0x40 MLOAD PUSH32 0x6D82574300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x34D JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE MLOAD DUP3 SWAP2 PUSH32 0x578EAB65D47CFFA57066B105301289FF86BFDC0ADC2A701C3356D2A6EB6A6123 SWAP2 LOG2 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x51A JUMPI PUSH1 0x40 MLOAD PUSH32 0x6C50E90500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x34D JUMP JUMPDEST DUP4 PUSH1 0x0 DUP1 PUSH2 0x52A DUP9 DUP8 DUP8 DUP7 PUSH2 0x985 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xD6A5BBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 SWAP4 POP SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xD6A5BBB SWAP1 PUSH2 0x5A5 SWAP1 DUP12 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x1058 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5D3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH32 0x4FC3585900000000000000000000000000000000000000000000000000000000 SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x614 DUP7 DUP7 DUP7 DUP7 PUSH2 0x985 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE ADDRESS PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP8 SWAP1 MSTORE SWAP3 SWAP5 POP SWAP1 SWAP3 POP PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6DB SWAP2 SWAP1 PUSH2 0x10B5 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0xD6A5BBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xD6A5BBB SWAP1 PUSH2 0x752 SWAP1 DUP10 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x1058 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x76C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x780 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7B3 PUSH2 0x799 PUSH2 0x8E8 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7D3 PUSH2 0x7C3 PUSH2 0x8DE JUMP JUMPDEST DUP3 PUSH2 0x7CC PUSH2 0x8E8 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xB84 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2E6 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x10D7 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x854 JUMPI POP PUSH1 0x0 PUSH2 0x2E6 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x8A5 JUMPI POP PUSH1 0x1 PUSH2 0x2E6 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7B3 PUSH2 0xC99 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2E6 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x10D7 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x981 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x34D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 PUSH2 0x99A DUP10 DUP12 ADD DUP12 PUSH2 0x1222 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP5 SWAP10 POP SWAP3 SWAP8 POP SWAP1 SWAP6 POP SWAP4 POP SWAP2 POP PUSH1 0xFF AND PUSH2 0x9F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6D82574300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x34D JUMP JUMPDEST PUSH1 0x0 DUP12 DUP4 DUP4 DUP12 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xA0D SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x133A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP4 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0xA97 JUMPI DUP12 DUP4 DUP4 DUP12 DUP9 PUSH1 0x40 MLOAD PUSH32 0xF048F37A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x34D SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x138E JUMP JUMPDEST PUSH2 0xAA2 DUP5 DUP8 DUP4 PUSH2 0xDE0 JUMP JUMPDEST PUSH2 0xAE2 JUMPI DUP12 DUP4 DUP4 DUP12 DUP9 PUSH1 0x40 MLOAD PUSH32 0xDBF2AC7C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x34D SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x138E JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SWAP2 OR SWAP1 SSTORE MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP14 AND SWAP1 DUP7 SWAP1 DUP9 SWAP1 PUSH32 0xBF561A0AE8123352ABF33F8F113E6B265C2E7FE7BA9B4D450750454BCBB7233A SWAP1 PUSH2 0xB6B SWAP1 DUP15 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH2 0x13E4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP SWAP1 SWAP11 SWAP1 SWAP10 POP SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xBF1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x34D JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC93 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xCA9 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xCB3 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xDCF JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDAB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDCF SWAP2 SWAP1 PUSH2 0x10B5 JUMP JUMPDEST ISZERO PUSH2 0xDD9 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xDED DUP6 DUP5 PUSH2 0xDF6 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xE31 JUMPI PUSH2 0xE27 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xE1A JUMPI PUSH2 0xE1A PUSH2 0x1419 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xE39 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0xDFB JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xE55 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xE64 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xE64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xEEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xF01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xF31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xF50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF59 DUP7 PUSH2 0xEC6 JUMP JUMPDEST SWAP5 POP PUSH2 0xF67 PUSH1 0x20 DUP8 ADD PUSH2 0xEC6 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF96 DUP9 DUP3 DUP10 ADD PUSH2 0xEEF JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE64 DUP3 PUSH2 0xEC6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xFD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFE1 DUP6 PUSH2 0xEC6 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xFFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1009 DUP8 DUP3 DUP9 ADD PUSH2 0xEEF JUMP JUMPDEST SWAP6 SWAP9 SWAP1 SWAP8 POP SWAP5 SWAP6 PUSH1 0x40 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x104D JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1031 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1087 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x101C JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1099 DUP2 DUP6 PUSH2 0x101C JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x60 SWAP1 SWAP5 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xE64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x2E6 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1187 JUMPI PUSH2 0x1187 PUSH2 0x1111 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x11A9 JUMPI PUSH2 0x11A9 PUSH2 0x1111 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x11C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x11D9 PUSH2 0x11D4 DUP4 PUSH2 0x118F JUMP JUMPDEST PUSH2 0x1140 JUMP JUMPDEST DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP5 PUSH1 0x5 SHL DUP8 ADD ADD SWAP4 POP DUP7 DUP5 GT ISZERO PUSH2 0x11FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1217 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x1200 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x123A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP1 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1261 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP10 ADD SWAP2 POP DUP10 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1283 PUSH2 0x11D4 DUP3 PUSH2 0x118F JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP4 ADD DUP5 ADD SWAP1 DUP5 DUP2 ADD SWAP1 DUP13 DUP4 GT ISZERO PUSH2 0x12A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x12C0 JUMPI DUP5 CALLDATALOAD DUP3 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP1 DUP6 ADD SWAP1 PUSH2 0x12A7 JUMP JUMPDEST SWAP8 POP POP POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP3 POP DUP1 DUP4 GT ISZERO PUSH2 0x12D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12E4 DUP11 DUP5 DUP12 ADD PUSH2 0x11B3 JUMP JUMPDEST SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD SWAP3 POP DUP1 DUP4 GT ISZERO PUSH2 0x12FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH2 0x1308 DUP9 DUP3 DUP10 ADD PUSH2 0x11B3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x20 DUP1 DUP5 ADD DUP4 DUP4 ISZERO PUSH2 0x104D JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1031 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP7 PUSH1 0x60 SHL AND DUP2 MSTORE PUSH1 0x0 PUSH2 0x137A PUSH2 0x1374 PUSH1 0x14 DUP5 ADD DUP9 PUSH2 0x1315 JUMP JUMPDEST DUP7 PUSH2 0x1315 JUMP JUMPDEST SWAP4 DUP5 MSTORE POP POP PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0xA0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x13BD PUSH1 0xA0 DUP4 ADD DUP8 PUSH2 0x101C JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x13CF DUP2 DUP8 PUSH2 0x101C JUMP JUMPDEST PUSH1 0x60 DUP5 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP PUSH1 0x80 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x13FD PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x101C JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x140F DUP2 DUP6 PUSH2 0x101C JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB1 0xB2 PUSH23 0x7E8D44A05F221E6E66D7F0339AAE457B98B484F00ED199 SWAP16 GAS SWAP13 0xAF SWAP4 0xAD PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"1226:4173:27:-:0;;;2274:292;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2462:17;;2425:10;1008:63:0;2425:10:27;1008:33:0;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;736:96:19;-1:-1:-1;;;827:4:19;736:34;:32;:34::i;:::-;:56;:96;:56;:96::i;:::-;-1:-1:-1;;;;;622:39:12;;;;;2491:26:27;;::::2;;::::0;-1:-1:-1;;2527:32:27::2;;::::0;1226:4173;;5065:174:6;5106:16;;926:71;996:1;934:58;926:71;:::i;:::-;918:80;5065:174;-1:-1:-1;;5065:174:6:o;1567:341::-;-1:-1:-1;;;;;1655:26:6;;;1651:152;;1697:30;;-1:-1:-1;;;;;;1697:30:6;-1:-1:-1;;;;;1697:30:6;;;;;;;1746:46;;-1:-1:-1;;1746:46:6;;-1:-1:-1;;1746:46:6;1651:152;1812:89;-1:-1:-1;;;1896:4:6;1812:34;:32;:34::i;:89::-;1567:341;;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:10;;;877:68;;925:20;;-1:-1:-1;;;925:20:10;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:10;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:10;;;;;;;;;;773:235::o;14:139:28:-;-1:-1:-1;;;;;97:31:28;;87:42;;77:70;;143:1;140;133:12;77:70;14:139;:::o;158:607::-;310:6;318;326;379:2;367:9;358:7;354:23;350:32;347:52;;;395:1;392;385:12;347:52;427:9;421:16;446:39;479:5;446:39;:::i;:::-;554:2;539:18;;533:25;504:5;;-1:-1:-1;567:41:28;533:25;567:41;:::i;:::-;679:2;664:18;;658:25;627:7;;-1:-1:-1;692:41:28;658:25;692:41;:::i;:::-;752:7;742:17;;;158:607;;;;;:::o;770:225::-;837:9;;;858:11;;;855:134;;;911:10;906:3;902:20;899:1;892:31;946:4;943:1;936:15;974:4;971:1;964:15;770:225;1226:4173:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@FEE_CONTRACT_2037":{"entryPoint":null,"id":2037,"parameterSlots":0,"returnSlots":0},"@REWARD_CONTRACT_2034":{"entryPoint":null,"id":2034,"parameterSlots":0,"returnSlots":0},"@_efficientHash_1944":{"entryPoint":null,"id":1944,"parameterSlots":2,"returnSlots":1},"@_hashPair_1933":{"entryPoint":3641,"id":1933,"parameterSlots":2,"returnSlots":1},"@_msgSender_2145":{"entryPoint":2270,"id":2145,"parameterSlots":0,"returnSlots":1},"@_msgSender_652":{"entryPoint":3225,"id":652,"parameterSlots":0,"returnSlots":1},"@_processClaimData_2338":{"entryPoint":2437,"id":2338,"parameterSlots":4,"returnSlots":2},"@addMerkleRoot_2415":{"entryPoint":748,"id":2415,"parameterSlots":1,"returnSlots":0},"@claim_2382":{"entryPoint":1541,"id":2382,"parameterSlots":4,"returnSlots":0},"@claimed_2031":{"entryPoint":null,"id":2031,"parameterSlots":0,"returnSlots":0},"@deprecateMerkleRoot_2449":{"entryPoint":951,"id":2449,"parameterSlots":1,"returnSlots":0},"@enforceIsContractOwner_351":{"entryPoint":2326,"id":351,"parameterSlots":2,"returnSlots":0},"@forwarderRegistry_564":{"entryPoint":null,"id":564,"parameterSlots":0,"returnSlots":1},"@isTrustedForwarder_580":{"entryPoint":null,"id":580,"parameterSlots":1,"returnSlots":1},"@layout_383":{"entryPoint":2280,"id":383,"parameterSlots":0,"returnSlots":1},"@layout_531":{"entryPoint":2006,"id":531,"parameterSlots":0,"returnSlots":1},"@msgSender_738":{"entryPoint":null,"id":738,"parameterSlots":0,"returnSlots":1},"@onERC20Received_2222":{"entryPoint":1131,"id":2222,"parameterSlots":5,"returnSlots":1},"@owner_304":{"entryPoint":null,"id":304,"parameterSlots":1,"returnSlots":1},"@owner_62":{"entryPoint":1932,"id":62,"parameterSlots":0,"returnSlots":1},"@processProof_1502":{"entryPoint":3574,"id":1502,"parameterSlots":2,"returnSlots":1},"@roots_2027":{"entryPoint":null,"id":2027,"parameterSlots":0,"returnSlots":0},"@supportsInterface_413":{"entryPoint":722,"id":413,"parameterSlots":1,"returnSlots":1},"@supportsInterface_519":{"entryPoint":2052,"id":519,"parameterSlots":2,"returnSlots":1},"@transferOwnership_291":{"entryPoint":2948,"id":291,"parameterSlots":3,"returnSlots":0},"@transferOwnership_79":{"entryPoint":1976,"id":79,"parameterSlots":1,"returnSlots":0},"@verify_1441":{"entryPoint":3552,"id":1441,"parameterSlots":3,"returnSlots":1},"abi_decode_address":{"entryPoint":3782,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_uint256_dyn":{"entryPoint":4531,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes_calldata":{"entryPoint":3823,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":4007,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr":{"entryPoint":3896,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_bytes_calldata_ptrt_uint256":{"entryPoint":4034,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":4277,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":3757,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_bytes32t_array$_t_bytes32_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":4642,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_bytes4":{"entryPoint":3691,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_uint256_dyn":{"entryPoint":4885,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_uint256_dyn_memory_ptr":{"entryPoint":4124,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":4922,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4184,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__fromStack_reversed":{"entryPoint":5006,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC1155Mintable_$842__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC20_$937__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_uint256_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":5092,"id":null,"parameterSlots":4,"returnSlots":1},"allocate_memory":{"entryPoint":4416,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_array_bytes32_dyn":{"entryPoint":4495,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":4311,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x32":{"entryPoint":5145,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":4369,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:12147:28","nodeType":"YulBlock","src":"0:12147:28","statements":[{"nativeSrc":"6:3:28","nodeType":"YulBlock","src":"6:3:28","statements":[]},{"body":{"nativeSrc":"83:263:28","nodeType":"YulBlock","src":"83:263:28","statements":[{"body":{"nativeSrc":"129:16:28","nodeType":"YulBlock","src":"129:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:28","nodeType":"YulLiteral","src":"138:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:28","nodeType":"YulLiteral","src":"141:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:28","nodeType":"YulIdentifier","src":"131:6:28"},"nativeSrc":"131:12:28","nodeType":"YulFunctionCall","src":"131:12:28"},"nativeSrc":"131:12:28","nodeType":"YulExpressionStatement","src":"131:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:28","nodeType":"YulIdentifier","src":"104:7:28"},{"name":"headStart","nativeSrc":"113:9:28","nodeType":"YulIdentifier","src":"113:9:28"}],"functionName":{"name":"sub","nativeSrc":"100:3:28","nodeType":"YulIdentifier","src":"100:3:28"},"nativeSrc":"100:23:28","nodeType":"YulFunctionCall","src":"100:23:28"},{"kind":"number","nativeSrc":"125:2:28","nodeType":"YulLiteral","src":"125:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:28","nodeType":"YulIdentifier","src":"96:3:28"},"nativeSrc":"96:32:28","nodeType":"YulFunctionCall","src":"96:32:28"},"nativeSrc":"93:52:28","nodeType":"YulIf","src":"93:52:28"},{"nativeSrc":"154:36:28","nodeType":"YulVariableDeclaration","src":"154:36:28","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:28","nodeType":"YulIdentifier","src":"180:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:28","nodeType":"YulIdentifier","src":"167:12:28"},"nativeSrc":"167:23:28","nodeType":"YulFunctionCall","src":"167:23:28"},"variables":[{"name":"value","nativeSrc":"158:5:28","nodeType":"YulTypedName","src":"158:5:28","type":""}]},{"body":{"nativeSrc":"300:16:28","nodeType":"YulBlock","src":"300:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:28","nodeType":"YulLiteral","src":"309:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:28","nodeType":"YulLiteral","src":"312:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:28","nodeType":"YulIdentifier","src":"302:6:28"},"nativeSrc":"302:12:28","nodeType":"YulFunctionCall","src":"302:12:28"},"nativeSrc":"302:12:28","nodeType":"YulExpressionStatement","src":"302:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:28","nodeType":"YulIdentifier","src":"212:5:28"},{"arguments":[{"name":"value","nativeSrc":"223:5:28","nodeType":"YulIdentifier","src":"223:5:28"},{"kind":"number","nativeSrc":"230:66:28","nodeType":"YulLiteral","src":"230:66:28","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:28","nodeType":"YulIdentifier","src":"219:3:28"},"nativeSrc":"219:78:28","nodeType":"YulFunctionCall","src":"219:78:28"}],"functionName":{"name":"eq","nativeSrc":"209:2:28","nodeType":"YulIdentifier","src":"209:2:28"},"nativeSrc":"209:89:28","nodeType":"YulFunctionCall","src":"209:89:28"}],"functionName":{"name":"iszero","nativeSrc":"202:6:28","nodeType":"YulIdentifier","src":"202:6:28"},"nativeSrc":"202:97:28","nodeType":"YulFunctionCall","src":"202:97:28"},"nativeSrc":"199:117:28","nodeType":"YulIf","src":"199:117:28"},{"nativeSrc":"325:15:28","nodeType":"YulAssignment","src":"325:15:28","value":{"name":"value","nativeSrc":"335:5:28","nodeType":"YulIdentifier","src":"335:5:28"},"variableNames":[{"name":"value0","nativeSrc":"325:6:28","nodeType":"YulIdentifier","src":"325:6:28"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:28","nodeType":"YulTypedName","src":"49:9:28","type":""},{"name":"dataEnd","nativeSrc":"60:7:28","nodeType":"YulTypedName","src":"60:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:28","nodeType":"YulTypedName","src":"72:6:28","type":""}],"src":"14:332:28"},{"body":{"nativeSrc":"446:92:28","nodeType":"YulBlock","src":"446:92:28","statements":[{"nativeSrc":"456:26:28","nodeType":"YulAssignment","src":"456:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:28","nodeType":"YulIdentifier","src":"468:9:28"},{"kind":"number","nativeSrc":"479:2:28","nodeType":"YulLiteral","src":"479:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:28","nodeType":"YulIdentifier","src":"464:3:28"},"nativeSrc":"464:18:28","nodeType":"YulFunctionCall","src":"464:18:28"},"variableNames":[{"name":"tail","nativeSrc":"456:4:28","nodeType":"YulIdentifier","src":"456:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:28","nodeType":"YulIdentifier","src":"498:9:28"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:28","nodeType":"YulIdentifier","src":"523:6:28"}],"functionName":{"name":"iszero","nativeSrc":"516:6:28","nodeType":"YulIdentifier","src":"516:6:28"},"nativeSrc":"516:14:28","nodeType":"YulFunctionCall","src":"516:14:28"}],"functionName":{"name":"iszero","nativeSrc":"509:6:28","nodeType":"YulIdentifier","src":"509:6:28"},"nativeSrc":"509:22:28","nodeType":"YulFunctionCall","src":"509:22:28"}],"functionName":{"name":"mstore","nativeSrc":"491:6:28","nodeType":"YulIdentifier","src":"491:6:28"},"nativeSrc":"491:41:28","nodeType":"YulFunctionCall","src":"491:41:28"},"nativeSrc":"491:41:28","nodeType":"YulExpressionStatement","src":"491:41:28"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:28","nodeType":"YulTypedName","src":"415:9:28","type":""},{"name":"value0","nativeSrc":"426:6:28","nodeType":"YulTypedName","src":"426:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:28","nodeType":"YulTypedName","src":"437:4:28","type":""}],"src":"351:187:28"},{"body":{"nativeSrc":"658:125:28","nodeType":"YulBlock","src":"658:125:28","statements":[{"nativeSrc":"668:26:28","nodeType":"YulAssignment","src":"668:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"680:9:28","nodeType":"YulIdentifier","src":"680:9:28"},{"kind":"number","nativeSrc":"691:2:28","nodeType":"YulLiteral","src":"691:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"676:3:28","nodeType":"YulIdentifier","src":"676:3:28"},"nativeSrc":"676:18:28","nodeType":"YulFunctionCall","src":"676:18:28"},"variableNames":[{"name":"tail","nativeSrc":"668:4:28","nodeType":"YulIdentifier","src":"668:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"710:9:28","nodeType":"YulIdentifier","src":"710:9:28"},{"arguments":[{"name":"value0","nativeSrc":"725:6:28","nodeType":"YulIdentifier","src":"725:6:28"},{"kind":"number","nativeSrc":"733:42:28","nodeType":"YulLiteral","src":"733:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"721:3:28","nodeType":"YulIdentifier","src":"721:3:28"},"nativeSrc":"721:55:28","nodeType":"YulFunctionCall","src":"721:55:28"}],"functionName":{"name":"mstore","nativeSrc":"703:6:28","nodeType":"YulIdentifier","src":"703:6:28"},"nativeSrc":"703:74:28","nodeType":"YulFunctionCall","src":"703:74:28"},"nativeSrc":"703:74:28","nodeType":"YulExpressionStatement","src":"703:74:28"}]},"name":"abi_encode_tuple_t_contract$_IERC20_$937__to_t_address__fromStack_reversed","nativeSrc":"543:240:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"627:9:28","nodeType":"YulTypedName","src":"627:9:28","type":""},{"name":"value0","nativeSrc":"638:6:28","nodeType":"YulTypedName","src":"638:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"649:4:28","nodeType":"YulTypedName","src":"649:4:28","type":""}],"src":"543:240:28"},{"body":{"nativeSrc":"915:125:28","nodeType":"YulBlock","src":"915:125:28","statements":[{"nativeSrc":"925:26:28","nodeType":"YulAssignment","src":"925:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"937:9:28","nodeType":"YulIdentifier","src":"937:9:28"},{"kind":"number","nativeSrc":"948:2:28","nodeType":"YulLiteral","src":"948:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"933:3:28","nodeType":"YulIdentifier","src":"933:3:28"},"nativeSrc":"933:18:28","nodeType":"YulFunctionCall","src":"933:18:28"},"variableNames":[{"name":"tail","nativeSrc":"925:4:28","nodeType":"YulIdentifier","src":"925:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"967:9:28","nodeType":"YulIdentifier","src":"967:9:28"},{"arguments":[{"name":"value0","nativeSrc":"982:6:28","nodeType":"YulIdentifier","src":"982:6:28"},{"kind":"number","nativeSrc":"990:42:28","nodeType":"YulLiteral","src":"990:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"978:3:28","nodeType":"YulIdentifier","src":"978:3:28"},"nativeSrc":"978:55:28","nodeType":"YulFunctionCall","src":"978:55:28"}],"functionName":{"name":"mstore","nativeSrc":"960:6:28","nodeType":"YulIdentifier","src":"960:6:28"},"nativeSrc":"960:74:28","nodeType":"YulFunctionCall","src":"960:74:28"},"nativeSrc":"960:74:28","nodeType":"YulExpressionStatement","src":"960:74:28"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed","nativeSrc":"788:252:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"884:9:28","nodeType":"YulTypedName","src":"884:9:28","type":""},{"name":"value0","nativeSrc":"895:6:28","nodeType":"YulTypedName","src":"895:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"906:4:28","nodeType":"YulTypedName","src":"906:4:28","type":""}],"src":"788:252:28"},{"body":{"nativeSrc":"1115:110:28","nodeType":"YulBlock","src":"1115:110:28","statements":[{"body":{"nativeSrc":"1161:16:28","nodeType":"YulBlock","src":"1161:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1170:1:28","nodeType":"YulLiteral","src":"1170:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"1173:1:28","nodeType":"YulLiteral","src":"1173:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1163:6:28","nodeType":"YulIdentifier","src":"1163:6:28"},"nativeSrc":"1163:12:28","nodeType":"YulFunctionCall","src":"1163:12:28"},"nativeSrc":"1163:12:28","nodeType":"YulExpressionStatement","src":"1163:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1136:7:28","nodeType":"YulIdentifier","src":"1136:7:28"},{"name":"headStart","nativeSrc":"1145:9:28","nodeType":"YulIdentifier","src":"1145:9:28"}],"functionName":{"name":"sub","nativeSrc":"1132:3:28","nodeType":"YulIdentifier","src":"1132:3:28"},"nativeSrc":"1132:23:28","nodeType":"YulFunctionCall","src":"1132:23:28"},{"kind":"number","nativeSrc":"1157:2:28","nodeType":"YulLiteral","src":"1157:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1128:3:28","nodeType":"YulIdentifier","src":"1128:3:28"},"nativeSrc":"1128:32:28","nodeType":"YulFunctionCall","src":"1128:32:28"},"nativeSrc":"1125:52:28","nodeType":"YulIf","src":"1125:52:28"},{"nativeSrc":"1186:33:28","nodeType":"YulAssignment","src":"1186:33:28","value":{"arguments":[{"name":"headStart","nativeSrc":"1209:9:28","nodeType":"YulIdentifier","src":"1209:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"1196:12:28","nodeType":"YulIdentifier","src":"1196:12:28"},"nativeSrc":"1196:23:28","nodeType":"YulFunctionCall","src":"1196:23:28"},"variableNames":[{"name":"value0","nativeSrc":"1186:6:28","nodeType":"YulIdentifier","src":"1186:6:28"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"1045:180:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1081:9:28","nodeType":"YulTypedName","src":"1081:9:28","type":""},{"name":"dataEnd","nativeSrc":"1092:7:28","nodeType":"YulTypedName","src":"1092:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1104:6:28","nodeType":"YulTypedName","src":"1104:6:28","type":""}],"src":"1045:180:28"},{"body":{"nativeSrc":"1355:125:28","nodeType":"YulBlock","src":"1355:125:28","statements":[{"nativeSrc":"1365:26:28","nodeType":"YulAssignment","src":"1365:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"1377:9:28","nodeType":"YulIdentifier","src":"1377:9:28"},{"kind":"number","nativeSrc":"1388:2:28","nodeType":"YulLiteral","src":"1388:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1373:3:28","nodeType":"YulIdentifier","src":"1373:3:28"},"nativeSrc":"1373:18:28","nodeType":"YulFunctionCall","src":"1373:18:28"},"variableNames":[{"name":"tail","nativeSrc":"1365:4:28","nodeType":"YulIdentifier","src":"1365:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1407:9:28","nodeType":"YulIdentifier","src":"1407:9:28"},{"arguments":[{"name":"value0","nativeSrc":"1422:6:28","nodeType":"YulIdentifier","src":"1422:6:28"},{"kind":"number","nativeSrc":"1430:42:28","nodeType":"YulLiteral","src":"1430:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1418:3:28","nodeType":"YulIdentifier","src":"1418:3:28"},"nativeSrc":"1418:55:28","nodeType":"YulFunctionCall","src":"1418:55:28"}],"functionName":{"name":"mstore","nativeSrc":"1400:6:28","nodeType":"YulIdentifier","src":"1400:6:28"},"nativeSrc":"1400:74:28","nodeType":"YulFunctionCall","src":"1400:74:28"},"nativeSrc":"1400:74:28","nodeType":"YulExpressionStatement","src":"1400:74:28"}]},"name":"abi_encode_tuple_t_contract$_IERC1155Mintable_$842__to_t_address__fromStack_reversed","nativeSrc":"1230:250:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1324:9:28","nodeType":"YulTypedName","src":"1324:9:28","type":""},{"name":"value0","nativeSrc":"1335:6:28","nodeType":"YulTypedName","src":"1335:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1346:4:28","nodeType":"YulTypedName","src":"1346:4:28","type":""}],"src":"1230:250:28"},{"body":{"nativeSrc":"1534:147:28","nodeType":"YulBlock","src":"1534:147:28","statements":[{"nativeSrc":"1544:29:28","nodeType":"YulAssignment","src":"1544:29:28","value":{"arguments":[{"name":"offset","nativeSrc":"1566:6:28","nodeType":"YulIdentifier","src":"1566:6:28"}],"functionName":{"name":"calldataload","nativeSrc":"1553:12:28","nodeType":"YulIdentifier","src":"1553:12:28"},"nativeSrc":"1553:20:28","nodeType":"YulFunctionCall","src":"1553:20:28"},"variableNames":[{"name":"value","nativeSrc":"1544:5:28","nodeType":"YulIdentifier","src":"1544:5:28"}]},{"body":{"nativeSrc":"1659:16:28","nodeType":"YulBlock","src":"1659:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1668:1:28","nodeType":"YulLiteral","src":"1668:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"1671:1:28","nodeType":"YulLiteral","src":"1671:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1661:6:28","nodeType":"YulIdentifier","src":"1661:6:28"},"nativeSrc":"1661:12:28","nodeType":"YulFunctionCall","src":"1661:12:28"},"nativeSrc":"1661:12:28","nodeType":"YulExpressionStatement","src":"1661:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1595:5:28","nodeType":"YulIdentifier","src":"1595:5:28"},{"arguments":[{"name":"value","nativeSrc":"1606:5:28","nodeType":"YulIdentifier","src":"1606:5:28"},{"kind":"number","nativeSrc":"1613:42:28","nodeType":"YulLiteral","src":"1613:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1602:3:28","nodeType":"YulIdentifier","src":"1602:3:28"},"nativeSrc":"1602:54:28","nodeType":"YulFunctionCall","src":"1602:54:28"}],"functionName":{"name":"eq","nativeSrc":"1592:2:28","nodeType":"YulIdentifier","src":"1592:2:28"},"nativeSrc":"1592:65:28","nodeType":"YulFunctionCall","src":"1592:65:28"}],"functionName":{"name":"iszero","nativeSrc":"1585:6:28","nodeType":"YulIdentifier","src":"1585:6:28"},"nativeSrc":"1585:73:28","nodeType":"YulFunctionCall","src":"1585:73:28"},"nativeSrc":"1582:93:28","nodeType":"YulIf","src":"1582:93:28"}]},"name":"abi_decode_address","nativeSrc":"1485:196:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1513:6:28","nodeType":"YulTypedName","src":"1513:6:28","type":""}],"returnVariables":[{"name":"value","nativeSrc":"1524:5:28","nodeType":"YulTypedName","src":"1524:5:28","type":""}],"src":"1485:196:28"},{"body":{"nativeSrc":"1758:275:28","nodeType":"YulBlock","src":"1758:275:28","statements":[{"body":{"nativeSrc":"1807:16:28","nodeType":"YulBlock","src":"1807:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1816:1:28","nodeType":"YulLiteral","src":"1816:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"1819:1:28","nodeType":"YulLiteral","src":"1819:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1809:6:28","nodeType":"YulIdentifier","src":"1809:6:28"},"nativeSrc":"1809:12:28","nodeType":"YulFunctionCall","src":"1809:12:28"},"nativeSrc":"1809:12:28","nodeType":"YulExpressionStatement","src":"1809:12:28"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1786:6:28","nodeType":"YulIdentifier","src":"1786:6:28"},{"kind":"number","nativeSrc":"1794:4:28","nodeType":"YulLiteral","src":"1794:4:28","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"1782:3:28","nodeType":"YulIdentifier","src":"1782:3:28"},"nativeSrc":"1782:17:28","nodeType":"YulFunctionCall","src":"1782:17:28"},{"name":"end","nativeSrc":"1801:3:28","nodeType":"YulIdentifier","src":"1801:3:28"}],"functionName":{"name":"slt","nativeSrc":"1778:3:28","nodeType":"YulIdentifier","src":"1778:3:28"},"nativeSrc":"1778:27:28","nodeType":"YulFunctionCall","src":"1778:27:28"}],"functionName":{"name":"iszero","nativeSrc":"1771:6:28","nodeType":"YulIdentifier","src":"1771:6:28"},"nativeSrc":"1771:35:28","nodeType":"YulFunctionCall","src":"1771:35:28"},"nativeSrc":"1768:55:28","nodeType":"YulIf","src":"1768:55:28"},{"nativeSrc":"1832:30:28","nodeType":"YulAssignment","src":"1832:30:28","value":{"arguments":[{"name":"offset","nativeSrc":"1855:6:28","nodeType":"YulIdentifier","src":"1855:6:28"}],"functionName":{"name":"calldataload","nativeSrc":"1842:12:28","nodeType":"YulIdentifier","src":"1842:12:28"},"nativeSrc":"1842:20:28","nodeType":"YulFunctionCall","src":"1842:20:28"},"variableNames":[{"name":"length","nativeSrc":"1832:6:28","nodeType":"YulIdentifier","src":"1832:6:28"}]},{"body":{"nativeSrc":"1905:16:28","nodeType":"YulBlock","src":"1905:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1914:1:28","nodeType":"YulLiteral","src":"1914:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"1917:1:28","nodeType":"YulLiteral","src":"1917:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1907:6:28","nodeType":"YulIdentifier","src":"1907:6:28"},"nativeSrc":"1907:12:28","nodeType":"YulFunctionCall","src":"1907:12:28"},"nativeSrc":"1907:12:28","nodeType":"YulExpressionStatement","src":"1907:12:28"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"1877:6:28","nodeType":"YulIdentifier","src":"1877:6:28"},{"kind":"number","nativeSrc":"1885:18:28","nodeType":"YulLiteral","src":"1885:18:28","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1874:2:28","nodeType":"YulIdentifier","src":"1874:2:28"},"nativeSrc":"1874:30:28","nodeType":"YulFunctionCall","src":"1874:30:28"},"nativeSrc":"1871:50:28","nodeType":"YulIf","src":"1871:50:28"},{"nativeSrc":"1930:29:28","nodeType":"YulAssignment","src":"1930:29:28","value":{"arguments":[{"name":"offset","nativeSrc":"1946:6:28","nodeType":"YulIdentifier","src":"1946:6:28"},{"kind":"number","nativeSrc":"1954:4:28","nodeType":"YulLiteral","src":"1954:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1942:3:28","nodeType":"YulIdentifier","src":"1942:3:28"},"nativeSrc":"1942:17:28","nodeType":"YulFunctionCall","src":"1942:17:28"},"variableNames":[{"name":"arrayPos","nativeSrc":"1930:8:28","nodeType":"YulIdentifier","src":"1930:8:28"}]},{"body":{"nativeSrc":"2011:16:28","nodeType":"YulBlock","src":"2011:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2020:1:28","nodeType":"YulLiteral","src":"2020:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"2023:1:28","nodeType":"YulLiteral","src":"2023:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2013:6:28","nodeType":"YulIdentifier","src":"2013:6:28"},"nativeSrc":"2013:12:28","nodeType":"YulFunctionCall","src":"2013:12:28"},"nativeSrc":"2013:12:28","nodeType":"YulExpressionStatement","src":"2013:12:28"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1982:6:28","nodeType":"YulIdentifier","src":"1982:6:28"},{"name":"length","nativeSrc":"1990:6:28","nodeType":"YulIdentifier","src":"1990:6:28"}],"functionName":{"name":"add","nativeSrc":"1978:3:28","nodeType":"YulIdentifier","src":"1978:3:28"},"nativeSrc":"1978:19:28","nodeType":"YulFunctionCall","src":"1978:19:28"},{"kind":"number","nativeSrc":"1999:4:28","nodeType":"YulLiteral","src":"1999:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1974:3:28","nodeType":"YulIdentifier","src":"1974:3:28"},"nativeSrc":"1974:30:28","nodeType":"YulFunctionCall","src":"1974:30:28"},{"name":"end","nativeSrc":"2006:3:28","nodeType":"YulIdentifier","src":"2006:3:28"}],"functionName":{"name":"gt","nativeSrc":"1971:2:28","nodeType":"YulIdentifier","src":"1971:2:28"},"nativeSrc":"1971:39:28","nodeType":"YulFunctionCall","src":"1971:39:28"},"nativeSrc":"1968:59:28","nodeType":"YulIf","src":"1968:59:28"}]},"name":"abi_decode_bytes_calldata","nativeSrc":"1686:347:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1721:6:28","nodeType":"YulTypedName","src":"1721:6:28","type":""},{"name":"end","nativeSrc":"1729:3:28","nodeType":"YulTypedName","src":"1729:3:28","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"1737:8:28","nodeType":"YulTypedName","src":"1737:8:28","type":""},{"name":"length","nativeSrc":"1747:6:28","nodeType":"YulTypedName","src":"1747:6:28","type":""}],"src":"1686:347:28"},{"body":{"nativeSrc":"2178:486:28","nodeType":"YulBlock","src":"2178:486:28","statements":[{"body":{"nativeSrc":"2225:16:28","nodeType":"YulBlock","src":"2225:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2234:1:28","nodeType":"YulLiteral","src":"2234:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"2237:1:28","nodeType":"YulLiteral","src":"2237:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2227:6:28","nodeType":"YulIdentifier","src":"2227:6:28"},"nativeSrc":"2227:12:28","nodeType":"YulFunctionCall","src":"2227:12:28"},"nativeSrc":"2227:12:28","nodeType":"YulExpressionStatement","src":"2227:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2199:7:28","nodeType":"YulIdentifier","src":"2199:7:28"},{"name":"headStart","nativeSrc":"2208:9:28","nodeType":"YulIdentifier","src":"2208:9:28"}],"functionName":{"name":"sub","nativeSrc":"2195:3:28","nodeType":"YulIdentifier","src":"2195:3:28"},"nativeSrc":"2195:23:28","nodeType":"YulFunctionCall","src":"2195:23:28"},{"kind":"number","nativeSrc":"2220:3:28","nodeType":"YulLiteral","src":"2220:3:28","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"2191:3:28","nodeType":"YulIdentifier","src":"2191:3:28"},"nativeSrc":"2191:33:28","nodeType":"YulFunctionCall","src":"2191:33:28"},"nativeSrc":"2188:53:28","nodeType":"YulIf","src":"2188:53:28"},{"nativeSrc":"2250:39:28","nodeType":"YulAssignment","src":"2250:39:28","value":{"arguments":[{"name":"headStart","nativeSrc":"2279:9:28","nodeType":"YulIdentifier","src":"2279:9:28"}],"functionName":{"name":"abi_decode_address","nativeSrc":"2260:18:28","nodeType":"YulIdentifier","src":"2260:18:28"},"nativeSrc":"2260:29:28","nodeType":"YulFunctionCall","src":"2260:29:28"},"variableNames":[{"name":"value0","nativeSrc":"2250:6:28","nodeType":"YulIdentifier","src":"2250:6:28"}]},{"nativeSrc":"2298:48:28","nodeType":"YulAssignment","src":"2298:48:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2331:9:28","nodeType":"YulIdentifier","src":"2331:9:28"},{"kind":"number","nativeSrc":"2342:2:28","nodeType":"YulLiteral","src":"2342:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2327:3:28","nodeType":"YulIdentifier","src":"2327:3:28"},"nativeSrc":"2327:18:28","nodeType":"YulFunctionCall","src":"2327:18:28"}],"functionName":{"name":"abi_decode_address","nativeSrc":"2308:18:28","nodeType":"YulIdentifier","src":"2308:18:28"},"nativeSrc":"2308:38:28","nodeType":"YulFunctionCall","src":"2308:38:28"},"variableNames":[{"name":"value1","nativeSrc":"2298:6:28","nodeType":"YulIdentifier","src":"2298:6:28"}]},{"nativeSrc":"2355:42:28","nodeType":"YulAssignment","src":"2355:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2382:9:28","nodeType":"YulIdentifier","src":"2382:9:28"},{"kind":"number","nativeSrc":"2393:2:28","nodeType":"YulLiteral","src":"2393:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2378:3:28","nodeType":"YulIdentifier","src":"2378:3:28"},"nativeSrc":"2378:18:28","nodeType":"YulFunctionCall","src":"2378:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"2365:12:28","nodeType":"YulIdentifier","src":"2365:12:28"},"nativeSrc":"2365:32:28","nodeType":"YulFunctionCall","src":"2365:32:28"},"variableNames":[{"name":"value2","nativeSrc":"2355:6:28","nodeType":"YulIdentifier","src":"2355:6:28"}]},{"nativeSrc":"2406:46:28","nodeType":"YulVariableDeclaration","src":"2406:46:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2437:9:28","nodeType":"YulIdentifier","src":"2437:9:28"},{"kind":"number","nativeSrc":"2448:2:28","nodeType":"YulLiteral","src":"2448:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"2433:3:28","nodeType":"YulIdentifier","src":"2433:3:28"},"nativeSrc":"2433:18:28","nodeType":"YulFunctionCall","src":"2433:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"2420:12:28","nodeType":"YulIdentifier","src":"2420:12:28"},"nativeSrc":"2420:32:28","nodeType":"YulFunctionCall","src":"2420:32:28"},"variables":[{"name":"offset","nativeSrc":"2410:6:28","nodeType":"YulTypedName","src":"2410:6:28","type":""}]},{"body":{"nativeSrc":"2495:16:28","nodeType":"YulBlock","src":"2495:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2504:1:28","nodeType":"YulLiteral","src":"2504:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"2507:1:28","nodeType":"YulLiteral","src":"2507:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2497:6:28","nodeType":"YulIdentifier","src":"2497:6:28"},"nativeSrc":"2497:12:28","nodeType":"YulFunctionCall","src":"2497:12:28"},"nativeSrc":"2497:12:28","nodeType":"YulExpressionStatement","src":"2497:12:28"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"2467:6:28","nodeType":"YulIdentifier","src":"2467:6:28"},{"kind":"number","nativeSrc":"2475:18:28","nodeType":"YulLiteral","src":"2475:18:28","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2464:2:28","nodeType":"YulIdentifier","src":"2464:2:28"},"nativeSrc":"2464:30:28","nodeType":"YulFunctionCall","src":"2464:30:28"},"nativeSrc":"2461:50:28","nodeType":"YulIf","src":"2461:50:28"},{"nativeSrc":"2520:84:28","nodeType":"YulVariableDeclaration","src":"2520:84:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2576:9:28","nodeType":"YulIdentifier","src":"2576:9:28"},{"name":"offset","nativeSrc":"2587:6:28","nodeType":"YulIdentifier","src":"2587:6:28"}],"functionName":{"name":"add","nativeSrc":"2572:3:28","nodeType":"YulIdentifier","src":"2572:3:28"},"nativeSrc":"2572:22:28","nodeType":"YulFunctionCall","src":"2572:22:28"},{"name":"dataEnd","nativeSrc":"2596:7:28","nodeType":"YulIdentifier","src":"2596:7:28"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"2546:25:28","nodeType":"YulIdentifier","src":"2546:25:28"},"nativeSrc":"2546:58:28","nodeType":"YulFunctionCall","src":"2546:58:28"},"variables":[{"name":"value3_1","nativeSrc":"2524:8:28","nodeType":"YulTypedName","src":"2524:8:28","type":""},{"name":"value4_1","nativeSrc":"2534:8:28","nodeType":"YulTypedName","src":"2534:8:28","type":""}]},{"nativeSrc":"2613:18:28","nodeType":"YulAssignment","src":"2613:18:28","value":{"name":"value3_1","nativeSrc":"2623:8:28","nodeType":"YulIdentifier","src":"2623:8:28"},"variableNames":[{"name":"value3","nativeSrc":"2613:6:28","nodeType":"YulIdentifier","src":"2613:6:28"}]},{"nativeSrc":"2640:18:28","nodeType":"YulAssignment","src":"2640:18:28","value":{"name":"value4_1","nativeSrc":"2650:8:28","nodeType":"YulIdentifier","src":"2650:8:28"},"variableNames":[{"name":"value4","nativeSrc":"2640:6:28","nodeType":"YulIdentifier","src":"2640:6:28"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr","nativeSrc":"2038:626:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2112:9:28","nodeType":"YulTypedName","src":"2112:9:28","type":""},{"name":"dataEnd","nativeSrc":"2123:7:28","nodeType":"YulTypedName","src":"2123:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2135:6:28","nodeType":"YulTypedName","src":"2135:6:28","type":""},{"name":"value1","nativeSrc":"2143:6:28","nodeType":"YulTypedName","src":"2143:6:28","type":""},{"name":"value2","nativeSrc":"2151:6:28","nodeType":"YulTypedName","src":"2151:6:28","type":""},{"name":"value3","nativeSrc":"2159:6:28","nodeType":"YulTypedName","src":"2159:6:28","type":""},{"name":"value4","nativeSrc":"2167:6:28","nodeType":"YulTypedName","src":"2167:6:28","type":""}],"src":"2038:626:28"},{"body":{"nativeSrc":"2768:149:28","nodeType":"YulBlock","src":"2768:149:28","statements":[{"nativeSrc":"2778:26:28","nodeType":"YulAssignment","src":"2778:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"2790:9:28","nodeType":"YulIdentifier","src":"2790:9:28"},{"kind":"number","nativeSrc":"2801:2:28","nodeType":"YulLiteral","src":"2801:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2786:3:28","nodeType":"YulIdentifier","src":"2786:3:28"},"nativeSrc":"2786:18:28","nodeType":"YulFunctionCall","src":"2786:18:28"},"variableNames":[{"name":"tail","nativeSrc":"2778:4:28","nodeType":"YulIdentifier","src":"2778:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2820:9:28","nodeType":"YulIdentifier","src":"2820:9:28"},{"arguments":[{"name":"value0","nativeSrc":"2835:6:28","nodeType":"YulIdentifier","src":"2835:6:28"},{"kind":"number","nativeSrc":"2843:66:28","nodeType":"YulLiteral","src":"2843:66:28","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"2831:3:28","nodeType":"YulIdentifier","src":"2831:3:28"},"nativeSrc":"2831:79:28","nodeType":"YulFunctionCall","src":"2831:79:28"}],"functionName":{"name":"mstore","nativeSrc":"2813:6:28","nodeType":"YulIdentifier","src":"2813:6:28"},"nativeSrc":"2813:98:28","nodeType":"YulFunctionCall","src":"2813:98:28"},"nativeSrc":"2813:98:28","nodeType":"YulExpressionStatement","src":"2813:98:28"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nativeSrc":"2669:248:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2737:9:28","nodeType":"YulTypedName","src":"2737:9:28","type":""},{"name":"value0","nativeSrc":"2748:6:28","nodeType":"YulTypedName","src":"2748:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2759:4:28","nodeType":"YulTypedName","src":"2759:4:28","type":""}],"src":"2669:248:28"},{"body":{"nativeSrc":"2992:116:28","nodeType":"YulBlock","src":"2992:116:28","statements":[{"body":{"nativeSrc":"3038:16:28","nodeType":"YulBlock","src":"3038:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3047:1:28","nodeType":"YulLiteral","src":"3047:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"3050:1:28","nodeType":"YulLiteral","src":"3050:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3040:6:28","nodeType":"YulIdentifier","src":"3040:6:28"},"nativeSrc":"3040:12:28","nodeType":"YulFunctionCall","src":"3040:12:28"},"nativeSrc":"3040:12:28","nodeType":"YulExpressionStatement","src":"3040:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3013:7:28","nodeType":"YulIdentifier","src":"3013:7:28"},{"name":"headStart","nativeSrc":"3022:9:28","nodeType":"YulIdentifier","src":"3022:9:28"}],"functionName":{"name":"sub","nativeSrc":"3009:3:28","nodeType":"YulIdentifier","src":"3009:3:28"},"nativeSrc":"3009:23:28","nodeType":"YulFunctionCall","src":"3009:23:28"},{"kind":"number","nativeSrc":"3034:2:28","nodeType":"YulLiteral","src":"3034:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"3005:3:28","nodeType":"YulIdentifier","src":"3005:3:28"},"nativeSrc":"3005:32:28","nodeType":"YulFunctionCall","src":"3005:32:28"},"nativeSrc":"3002:52:28","nodeType":"YulIf","src":"3002:52:28"},{"nativeSrc":"3063:39:28","nodeType":"YulAssignment","src":"3063:39:28","value":{"arguments":[{"name":"headStart","nativeSrc":"3092:9:28","nodeType":"YulIdentifier","src":"3092:9:28"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3073:18:28","nodeType":"YulIdentifier","src":"3073:18:28"},"nativeSrc":"3073:29:28","nodeType":"YulFunctionCall","src":"3073:29:28"},"variableNames":[{"name":"value0","nativeSrc":"3063:6:28","nodeType":"YulIdentifier","src":"3063:6:28"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"2922:186:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2958:9:28","nodeType":"YulTypedName","src":"2958:9:28","type":""},{"name":"dataEnd","nativeSrc":"2969:7:28","nodeType":"YulTypedName","src":"2969:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2981:6:28","nodeType":"YulTypedName","src":"2981:6:28","type":""}],"src":"2922:186:28"},{"body":{"nativeSrc":"3236:428:28","nodeType":"YulBlock","src":"3236:428:28","statements":[{"body":{"nativeSrc":"3282:16:28","nodeType":"YulBlock","src":"3282:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3291:1:28","nodeType":"YulLiteral","src":"3291:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"3294:1:28","nodeType":"YulLiteral","src":"3294:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3284:6:28","nodeType":"YulIdentifier","src":"3284:6:28"},"nativeSrc":"3284:12:28","nodeType":"YulFunctionCall","src":"3284:12:28"},"nativeSrc":"3284:12:28","nodeType":"YulExpressionStatement","src":"3284:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3257:7:28","nodeType":"YulIdentifier","src":"3257:7:28"},{"name":"headStart","nativeSrc":"3266:9:28","nodeType":"YulIdentifier","src":"3266:9:28"}],"functionName":{"name":"sub","nativeSrc":"3253:3:28","nodeType":"YulIdentifier","src":"3253:3:28"},"nativeSrc":"3253:23:28","nodeType":"YulFunctionCall","src":"3253:23:28"},{"kind":"number","nativeSrc":"3278:2:28","nodeType":"YulLiteral","src":"3278:2:28","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"3249:3:28","nodeType":"YulIdentifier","src":"3249:3:28"},"nativeSrc":"3249:32:28","nodeType":"YulFunctionCall","src":"3249:32:28"},"nativeSrc":"3246:52:28","nodeType":"YulIf","src":"3246:52:28"},{"nativeSrc":"3307:39:28","nodeType":"YulAssignment","src":"3307:39:28","value":{"arguments":[{"name":"headStart","nativeSrc":"3336:9:28","nodeType":"YulIdentifier","src":"3336:9:28"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3317:18:28","nodeType":"YulIdentifier","src":"3317:18:28"},"nativeSrc":"3317:29:28","nodeType":"YulFunctionCall","src":"3317:29:28"},"variableNames":[{"name":"value0","nativeSrc":"3307:6:28","nodeType":"YulIdentifier","src":"3307:6:28"}]},{"nativeSrc":"3355:46:28","nodeType":"YulVariableDeclaration","src":"3355:46:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3386:9:28","nodeType":"YulIdentifier","src":"3386:9:28"},{"kind":"number","nativeSrc":"3397:2:28","nodeType":"YulLiteral","src":"3397:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3382:3:28","nodeType":"YulIdentifier","src":"3382:3:28"},"nativeSrc":"3382:18:28","nodeType":"YulFunctionCall","src":"3382:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"3369:12:28","nodeType":"YulIdentifier","src":"3369:12:28"},"nativeSrc":"3369:32:28","nodeType":"YulFunctionCall","src":"3369:32:28"},"variables":[{"name":"offset","nativeSrc":"3359:6:28","nodeType":"YulTypedName","src":"3359:6:28","type":""}]},{"body":{"nativeSrc":"3444:16:28","nodeType":"YulBlock","src":"3444:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3453:1:28","nodeType":"YulLiteral","src":"3453:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"3456:1:28","nodeType":"YulLiteral","src":"3456:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3446:6:28","nodeType":"YulIdentifier","src":"3446:6:28"},"nativeSrc":"3446:12:28","nodeType":"YulFunctionCall","src":"3446:12:28"},"nativeSrc":"3446:12:28","nodeType":"YulExpressionStatement","src":"3446:12:28"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3416:6:28","nodeType":"YulIdentifier","src":"3416:6:28"},{"kind":"number","nativeSrc":"3424:18:28","nodeType":"YulLiteral","src":"3424:18:28","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3413:2:28","nodeType":"YulIdentifier","src":"3413:2:28"},"nativeSrc":"3413:30:28","nodeType":"YulFunctionCall","src":"3413:30:28"},"nativeSrc":"3410:50:28","nodeType":"YulIf","src":"3410:50:28"},{"nativeSrc":"3469:84:28","nodeType":"YulVariableDeclaration","src":"3469:84:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3525:9:28","nodeType":"YulIdentifier","src":"3525:9:28"},{"name":"offset","nativeSrc":"3536:6:28","nodeType":"YulIdentifier","src":"3536:6:28"}],"functionName":{"name":"add","nativeSrc":"3521:3:28","nodeType":"YulIdentifier","src":"3521:3:28"},"nativeSrc":"3521:22:28","nodeType":"YulFunctionCall","src":"3521:22:28"},{"name":"dataEnd","nativeSrc":"3545:7:28","nodeType":"YulIdentifier","src":"3545:7:28"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"3495:25:28","nodeType":"YulIdentifier","src":"3495:25:28"},"nativeSrc":"3495:58:28","nodeType":"YulFunctionCall","src":"3495:58:28"},"variables":[{"name":"value1_1","nativeSrc":"3473:8:28","nodeType":"YulTypedName","src":"3473:8:28","type":""},{"name":"value2_1","nativeSrc":"3483:8:28","nodeType":"YulTypedName","src":"3483:8:28","type":""}]},{"nativeSrc":"3562:18:28","nodeType":"YulAssignment","src":"3562:18:28","value":{"name":"value1_1","nativeSrc":"3572:8:28","nodeType":"YulIdentifier","src":"3572:8:28"},"variableNames":[{"name":"value1","nativeSrc":"3562:6:28","nodeType":"YulIdentifier","src":"3562:6:28"}]},{"nativeSrc":"3589:18:28","nodeType":"YulAssignment","src":"3589:18:28","value":{"name":"value2_1","nativeSrc":"3599:8:28","nodeType":"YulIdentifier","src":"3599:8:28"},"variableNames":[{"name":"value2","nativeSrc":"3589:6:28","nodeType":"YulIdentifier","src":"3589:6:28"}]},{"nativeSrc":"3616:42:28","nodeType":"YulAssignment","src":"3616:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3643:9:28","nodeType":"YulIdentifier","src":"3643:9:28"},{"kind":"number","nativeSrc":"3654:2:28","nodeType":"YulLiteral","src":"3654:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3639:3:28","nodeType":"YulIdentifier","src":"3639:3:28"},"nativeSrc":"3639:18:28","nodeType":"YulFunctionCall","src":"3639:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"3626:12:28","nodeType":"YulIdentifier","src":"3626:12:28"},"nativeSrc":"3626:32:28","nodeType":"YulFunctionCall","src":"3626:32:28"},"variableNames":[{"name":"value3","nativeSrc":"3616:6:28","nodeType":"YulIdentifier","src":"3616:6:28"}]}]},"name":"abi_decode_tuple_t_addresst_bytes_calldata_ptrt_uint256","nativeSrc":"3113:551:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3178:9:28","nodeType":"YulTypedName","src":"3178:9:28","type":""},{"name":"dataEnd","nativeSrc":"3189:7:28","nodeType":"YulTypedName","src":"3189:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3201:6:28","nodeType":"YulTypedName","src":"3201:6:28","type":""},{"name":"value1","nativeSrc":"3209:6:28","nodeType":"YulTypedName","src":"3209:6:28","type":""},{"name":"value2","nativeSrc":"3217:6:28","nodeType":"YulTypedName","src":"3217:6:28","type":""},{"name":"value3","nativeSrc":"3225:6:28","nodeType":"YulTypedName","src":"3225:6:28","type":""}],"src":"3113:551:28"},{"body":{"nativeSrc":"3770:125:28","nodeType":"YulBlock","src":"3770:125:28","statements":[{"nativeSrc":"3780:26:28","nodeType":"YulAssignment","src":"3780:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"3792:9:28","nodeType":"YulIdentifier","src":"3792:9:28"},{"kind":"number","nativeSrc":"3803:2:28","nodeType":"YulLiteral","src":"3803:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3788:3:28","nodeType":"YulIdentifier","src":"3788:3:28"},"nativeSrc":"3788:18:28","nodeType":"YulFunctionCall","src":"3788:18:28"},"variableNames":[{"name":"tail","nativeSrc":"3780:4:28","nodeType":"YulIdentifier","src":"3780:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3822:9:28","nodeType":"YulIdentifier","src":"3822:9:28"},{"arguments":[{"name":"value0","nativeSrc":"3837:6:28","nodeType":"YulIdentifier","src":"3837:6:28"},{"kind":"number","nativeSrc":"3845:42:28","nodeType":"YulLiteral","src":"3845:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"3833:3:28","nodeType":"YulIdentifier","src":"3833:3:28"},"nativeSrc":"3833:55:28","nodeType":"YulFunctionCall","src":"3833:55:28"}],"functionName":{"name":"mstore","nativeSrc":"3815:6:28","nodeType":"YulIdentifier","src":"3815:6:28"},"nativeSrc":"3815:74:28","nodeType":"YulFunctionCall","src":"3815:74:28"},"nativeSrc":"3815:74:28","nodeType":"YulExpressionStatement","src":"3815:74:28"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"3669:226:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3739:9:28","nodeType":"YulTypedName","src":"3739:9:28","type":""},{"name":"value0","nativeSrc":"3750:6:28","nodeType":"YulTypedName","src":"3750:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3761:4:28","nodeType":"YulTypedName","src":"3761:4:28","type":""}],"src":"3669:226:28"},{"body":{"nativeSrc":"4001:76:28","nodeType":"YulBlock","src":"4001:76:28","statements":[{"nativeSrc":"4011:26:28","nodeType":"YulAssignment","src":"4011:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"4023:9:28","nodeType":"YulIdentifier","src":"4023:9:28"},{"kind":"number","nativeSrc":"4034:2:28","nodeType":"YulLiteral","src":"4034:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4019:3:28","nodeType":"YulIdentifier","src":"4019:3:28"},"nativeSrc":"4019:18:28","nodeType":"YulFunctionCall","src":"4019:18:28"},"variableNames":[{"name":"tail","nativeSrc":"4011:4:28","nodeType":"YulIdentifier","src":"4011:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4053:9:28","nodeType":"YulIdentifier","src":"4053:9:28"},{"name":"value0","nativeSrc":"4064:6:28","nodeType":"YulIdentifier","src":"4064:6:28"}],"functionName":{"name":"mstore","nativeSrc":"4046:6:28","nodeType":"YulIdentifier","src":"4046:6:28"},"nativeSrc":"4046:25:28","nodeType":"YulFunctionCall","src":"4046:25:28"},"nativeSrc":"4046:25:28","nodeType":"YulExpressionStatement","src":"4046:25:28"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"3900:177:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3970:9:28","nodeType":"YulTypedName","src":"3970:9:28","type":""},{"name":"value0","nativeSrc":"3981:6:28","nodeType":"YulTypedName","src":"3981:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3992:4:28","nodeType":"YulTypedName","src":"3992:4:28","type":""}],"src":"3900:177:28"},{"body":{"nativeSrc":"4211:198:28","nodeType":"YulBlock","src":"4211:198:28","statements":[{"nativeSrc":"4221:26:28","nodeType":"YulAssignment","src":"4221:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"4233:9:28","nodeType":"YulIdentifier","src":"4233:9:28"},{"kind":"number","nativeSrc":"4244:2:28","nodeType":"YulLiteral","src":"4244:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4229:3:28","nodeType":"YulIdentifier","src":"4229:3:28"},"nativeSrc":"4229:18:28","nodeType":"YulFunctionCall","src":"4229:18:28"},"variableNames":[{"name":"tail","nativeSrc":"4221:4:28","nodeType":"YulIdentifier","src":"4221:4:28"}]},{"nativeSrc":"4256:52:28","nodeType":"YulVariableDeclaration","src":"4256:52:28","value":{"kind":"number","nativeSrc":"4266:42:28","nodeType":"YulLiteral","src":"4266:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"4260:2:28","nodeType":"YulTypedName","src":"4260:2:28","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4324:9:28","nodeType":"YulIdentifier","src":"4324:9:28"},{"arguments":[{"name":"value0","nativeSrc":"4339:6:28","nodeType":"YulIdentifier","src":"4339:6:28"},{"name":"_1","nativeSrc":"4347:2:28","nodeType":"YulIdentifier","src":"4347:2:28"}],"functionName":{"name":"and","nativeSrc":"4335:3:28","nodeType":"YulIdentifier","src":"4335:3:28"},"nativeSrc":"4335:15:28","nodeType":"YulFunctionCall","src":"4335:15:28"}],"functionName":{"name":"mstore","nativeSrc":"4317:6:28","nodeType":"YulIdentifier","src":"4317:6:28"},"nativeSrc":"4317:34:28","nodeType":"YulFunctionCall","src":"4317:34:28"},"nativeSrc":"4317:34:28","nodeType":"YulExpressionStatement","src":"4317:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4371:9:28","nodeType":"YulIdentifier","src":"4371:9:28"},{"kind":"number","nativeSrc":"4382:2:28","nodeType":"YulLiteral","src":"4382:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4367:3:28","nodeType":"YulIdentifier","src":"4367:3:28"},"nativeSrc":"4367:18:28","nodeType":"YulFunctionCall","src":"4367:18:28"},{"arguments":[{"name":"value1","nativeSrc":"4391:6:28","nodeType":"YulIdentifier","src":"4391:6:28"},{"name":"_1","nativeSrc":"4399:2:28","nodeType":"YulIdentifier","src":"4399:2:28"}],"functionName":{"name":"and","nativeSrc":"4387:3:28","nodeType":"YulIdentifier","src":"4387:3:28"},"nativeSrc":"4387:15:28","nodeType":"YulFunctionCall","src":"4387:15:28"}],"functionName":{"name":"mstore","nativeSrc":"4360:6:28","nodeType":"YulIdentifier","src":"4360:6:28"},"nativeSrc":"4360:43:28","nodeType":"YulFunctionCall","src":"4360:43:28"},"nativeSrc":"4360:43:28","nodeType":"YulExpressionStatement","src":"4360:43:28"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nativeSrc":"4082:327:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4172:9:28","nodeType":"YulTypedName","src":"4172:9:28","type":""},{"name":"value1","nativeSrc":"4183:6:28","nodeType":"YulTypedName","src":"4183:6:28","type":""},{"name":"value0","nativeSrc":"4191:6:28","nodeType":"YulTypedName","src":"4191:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4202:4:28","nodeType":"YulTypedName","src":"4202:4:28","type":""}],"src":"4082:327:28"},{"body":{"nativeSrc":"4486:378:28","nodeType":"YulBlock","src":"4486:378:28","statements":[{"nativeSrc":"4496:26:28","nodeType":"YulVariableDeclaration","src":"4496:26:28","value":{"arguments":[{"name":"value","nativeSrc":"4516:5:28","nodeType":"YulIdentifier","src":"4516:5:28"}],"functionName":{"name":"mload","nativeSrc":"4510:5:28","nodeType":"YulIdentifier","src":"4510:5:28"},"nativeSrc":"4510:12:28","nodeType":"YulFunctionCall","src":"4510:12:28"},"variables":[{"name":"length","nativeSrc":"4500:6:28","nodeType":"YulTypedName","src":"4500:6:28","type":""}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"4538:3:28","nodeType":"YulIdentifier","src":"4538:3:28"},{"name":"length","nativeSrc":"4543:6:28","nodeType":"YulIdentifier","src":"4543:6:28"}],"functionName":{"name":"mstore","nativeSrc":"4531:6:28","nodeType":"YulIdentifier","src":"4531:6:28"},"nativeSrc":"4531:19:28","nodeType":"YulFunctionCall","src":"4531:19:28"},"nativeSrc":"4531:19:28","nodeType":"YulExpressionStatement","src":"4531:19:28"},{"nativeSrc":"4559:14:28","nodeType":"YulVariableDeclaration","src":"4559:14:28","value":{"kind":"number","nativeSrc":"4569:4:28","nodeType":"YulLiteral","src":"4569:4:28","type":"","value":"0x20"},"variables":[{"name":"_1","nativeSrc":"4563:2:28","nodeType":"YulTypedName","src":"4563:2:28","type":""}]},{"nativeSrc":"4582:21:28","nodeType":"YulAssignment","src":"4582:21:28","value":{"arguments":[{"name":"pos","nativeSrc":"4593:3:28","nodeType":"YulIdentifier","src":"4593:3:28"},{"kind":"number","nativeSrc":"4598:4:28","nodeType":"YulLiteral","src":"4598:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4589:3:28","nodeType":"YulIdentifier","src":"4589:3:28"},"nativeSrc":"4589:14:28","nodeType":"YulFunctionCall","src":"4589:14:28"},"variableNames":[{"name":"pos","nativeSrc":"4582:3:28","nodeType":"YulIdentifier","src":"4582:3:28"}]},{"nativeSrc":"4612:30:28","nodeType":"YulVariableDeclaration","src":"4612:30:28","value":{"arguments":[{"name":"value","nativeSrc":"4630:5:28","nodeType":"YulIdentifier","src":"4630:5:28"},{"kind":"number","nativeSrc":"4637:4:28","nodeType":"YulLiteral","src":"4637:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4626:3:28","nodeType":"YulIdentifier","src":"4626:3:28"},"nativeSrc":"4626:16:28","nodeType":"YulFunctionCall","src":"4626:16:28"},"variables":[{"name":"srcPtr","nativeSrc":"4616:6:28","nodeType":"YulTypedName","src":"4616:6:28","type":""}]},{"nativeSrc":"4651:10:28","nodeType":"YulVariableDeclaration","src":"4651:10:28","value":{"kind":"number","nativeSrc":"4660:1:28","nodeType":"YulLiteral","src":"4660:1:28","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"4655:1:28","nodeType":"YulTypedName","src":"4655:1:28","type":""}]},{"body":{"nativeSrc":"4719:120:28","nodeType":"YulBlock","src":"4719:120:28","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"4740:3:28","nodeType":"YulIdentifier","src":"4740:3:28"},{"arguments":[{"name":"srcPtr","nativeSrc":"4751:6:28","nodeType":"YulIdentifier","src":"4751:6:28"}],"functionName":{"name":"mload","nativeSrc":"4745:5:28","nodeType":"YulIdentifier","src":"4745:5:28"},"nativeSrc":"4745:13:28","nodeType":"YulFunctionCall","src":"4745:13:28"}],"functionName":{"name":"mstore","nativeSrc":"4733:6:28","nodeType":"YulIdentifier","src":"4733:6:28"},"nativeSrc":"4733:26:28","nodeType":"YulFunctionCall","src":"4733:26:28"},"nativeSrc":"4733:26:28","nodeType":"YulExpressionStatement","src":"4733:26:28"},{"nativeSrc":"4772:19:28","nodeType":"YulAssignment","src":"4772:19:28","value":{"arguments":[{"name":"pos","nativeSrc":"4783:3:28","nodeType":"YulIdentifier","src":"4783:3:28"},{"name":"_1","nativeSrc":"4788:2:28","nodeType":"YulIdentifier","src":"4788:2:28"}],"functionName":{"name":"add","nativeSrc":"4779:3:28","nodeType":"YulIdentifier","src":"4779:3:28"},"nativeSrc":"4779:12:28","nodeType":"YulFunctionCall","src":"4779:12:28"},"variableNames":[{"name":"pos","nativeSrc":"4772:3:28","nodeType":"YulIdentifier","src":"4772:3:28"}]},{"nativeSrc":"4804:25:28","nodeType":"YulAssignment","src":"4804:25:28","value":{"arguments":[{"name":"srcPtr","nativeSrc":"4818:6:28","nodeType":"YulIdentifier","src":"4818:6:28"},{"name":"_1","nativeSrc":"4826:2:28","nodeType":"YulIdentifier","src":"4826:2:28"}],"functionName":{"name":"add","nativeSrc":"4814:3:28","nodeType":"YulIdentifier","src":"4814:3:28"},"nativeSrc":"4814:15:28","nodeType":"YulFunctionCall","src":"4814:15:28"},"variableNames":[{"name":"srcPtr","nativeSrc":"4804:6:28","nodeType":"YulIdentifier","src":"4804:6:28"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"4681:1:28","nodeType":"YulIdentifier","src":"4681:1:28"},{"name":"length","nativeSrc":"4684:6:28","nodeType":"YulIdentifier","src":"4684:6:28"}],"functionName":{"name":"lt","nativeSrc":"4678:2:28","nodeType":"YulIdentifier","src":"4678:2:28"},"nativeSrc":"4678:13:28","nodeType":"YulFunctionCall","src":"4678:13:28"},"nativeSrc":"4670:169:28","nodeType":"YulForLoop","post":{"nativeSrc":"4692:18:28","nodeType":"YulBlock","src":"4692:18:28","statements":[{"nativeSrc":"4694:14:28","nodeType":"YulAssignment","src":"4694:14:28","value":{"arguments":[{"name":"i","nativeSrc":"4703:1:28","nodeType":"YulIdentifier","src":"4703:1:28"},{"kind":"number","nativeSrc":"4706:1:28","nodeType":"YulLiteral","src":"4706:1:28","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"4699:3:28","nodeType":"YulIdentifier","src":"4699:3:28"},"nativeSrc":"4699:9:28","nodeType":"YulFunctionCall","src":"4699:9:28"},"variableNames":[{"name":"i","nativeSrc":"4694:1:28","nodeType":"YulIdentifier","src":"4694:1:28"}]}]},"pre":{"nativeSrc":"4674:3:28","nodeType":"YulBlock","src":"4674:3:28","statements":[]},"src":"4670:169:28"},{"nativeSrc":"4848:10:28","nodeType":"YulAssignment","src":"4848:10:28","value":{"name":"pos","nativeSrc":"4855:3:28","nodeType":"YulIdentifier","src":"4855:3:28"},"variableNames":[{"name":"end","nativeSrc":"4848:3:28","nodeType":"YulIdentifier","src":"4848:3:28"}]}]},"name":"abi_encode_array_uint256_dyn_memory_ptr","nativeSrc":"4414:450:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4463:5:28","nodeType":"YulTypedName","src":"4463:5:28","type":""},{"name":"pos","nativeSrc":"4470:3:28","nodeType":"YulTypedName","src":"4470:3:28","type":""}],"returnVariables":[{"name":"end","nativeSrc":"4478:3:28","nodeType":"YulTypedName","src":"4478:3:28","type":""}],"src":"4414:450:28"},{"body":{"nativeSrc":"5226:475:28","nodeType":"YulBlock","src":"5226:475:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5243:9:28","nodeType":"YulIdentifier","src":"5243:9:28"},{"arguments":[{"name":"value0","nativeSrc":"5258:6:28","nodeType":"YulIdentifier","src":"5258:6:28"},{"kind":"number","nativeSrc":"5266:42:28","nodeType":"YulLiteral","src":"5266:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"5254:3:28","nodeType":"YulIdentifier","src":"5254:3:28"},"nativeSrc":"5254:55:28","nodeType":"YulFunctionCall","src":"5254:55:28"}],"functionName":{"name":"mstore","nativeSrc":"5236:6:28","nodeType":"YulIdentifier","src":"5236:6:28"},"nativeSrc":"5236:74:28","nodeType":"YulFunctionCall","src":"5236:74:28"},"nativeSrc":"5236:74:28","nodeType":"YulExpressionStatement","src":"5236:74:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5330:9:28","nodeType":"YulIdentifier","src":"5330:9:28"},{"kind":"number","nativeSrc":"5341:2:28","nodeType":"YulLiteral","src":"5341:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5326:3:28","nodeType":"YulIdentifier","src":"5326:3:28"},"nativeSrc":"5326:18:28","nodeType":"YulFunctionCall","src":"5326:18:28"},{"kind":"number","nativeSrc":"5346:3:28","nodeType":"YulLiteral","src":"5346:3:28","type":"","value":"128"}],"functionName":{"name":"mstore","nativeSrc":"5319:6:28","nodeType":"YulIdentifier","src":"5319:6:28"},"nativeSrc":"5319:31:28","nodeType":"YulFunctionCall","src":"5319:31:28"},"nativeSrc":"5319:31:28","nodeType":"YulExpressionStatement","src":"5319:31:28"},{"nativeSrc":"5359:82:28","nodeType":"YulVariableDeclaration","src":"5359:82:28","value":{"arguments":[{"name":"value1","nativeSrc":"5413:6:28","nodeType":"YulIdentifier","src":"5413:6:28"},{"arguments":[{"name":"headStart","nativeSrc":"5425:9:28","nodeType":"YulIdentifier","src":"5425:9:28"},{"kind":"number","nativeSrc":"5436:3:28","nodeType":"YulLiteral","src":"5436:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"5421:3:28","nodeType":"YulIdentifier","src":"5421:3:28"},"nativeSrc":"5421:19:28","nodeType":"YulFunctionCall","src":"5421:19:28"}],"functionName":{"name":"abi_encode_array_uint256_dyn_memory_ptr","nativeSrc":"5373:39:28","nodeType":"YulIdentifier","src":"5373:39:28"},"nativeSrc":"5373:68:28","nodeType":"YulFunctionCall","src":"5373:68:28"},"variables":[{"name":"tail_1","nativeSrc":"5363:6:28","nodeType":"YulTypedName","src":"5363:6:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5461:9:28","nodeType":"YulIdentifier","src":"5461:9:28"},{"kind":"number","nativeSrc":"5472:2:28","nodeType":"YulLiteral","src":"5472:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5457:3:28","nodeType":"YulIdentifier","src":"5457:3:28"},"nativeSrc":"5457:18:28","nodeType":"YulFunctionCall","src":"5457:18:28"},{"arguments":[{"name":"tail_1","nativeSrc":"5481:6:28","nodeType":"YulIdentifier","src":"5481:6:28"},{"name":"headStart","nativeSrc":"5489:9:28","nodeType":"YulIdentifier","src":"5489:9:28"}],"functionName":{"name":"sub","nativeSrc":"5477:3:28","nodeType":"YulIdentifier","src":"5477:3:28"},"nativeSrc":"5477:22:28","nodeType":"YulFunctionCall","src":"5477:22:28"}],"functionName":{"name":"mstore","nativeSrc":"5450:6:28","nodeType":"YulIdentifier","src":"5450:6:28"},"nativeSrc":"5450:50:28","nodeType":"YulFunctionCall","src":"5450:50:28"},"nativeSrc":"5450:50:28","nodeType":"YulExpressionStatement","src":"5450:50:28"},{"nativeSrc":"5509:69:28","nodeType":"YulVariableDeclaration","src":"5509:69:28","value":{"arguments":[{"name":"value2","nativeSrc":"5563:6:28","nodeType":"YulIdentifier","src":"5563:6:28"},{"name":"tail_1","nativeSrc":"5571:6:28","nodeType":"YulIdentifier","src":"5571:6:28"}],"functionName":{"name":"abi_encode_array_uint256_dyn_memory_ptr","nativeSrc":"5523:39:28","nodeType":"YulIdentifier","src":"5523:39:28"},"nativeSrc":"5523:55:28","nodeType":"YulFunctionCall","src":"5523:55:28"},"variables":[{"name":"tail_2","nativeSrc":"5513:6:28","nodeType":"YulTypedName","src":"5513:6:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5598:9:28","nodeType":"YulIdentifier","src":"5598:9:28"},{"kind":"number","nativeSrc":"5609:2:28","nodeType":"YulLiteral","src":"5609:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"5594:3:28","nodeType":"YulIdentifier","src":"5594:3:28"},"nativeSrc":"5594:18:28","nodeType":"YulFunctionCall","src":"5594:18:28"},{"arguments":[{"name":"tail_2","nativeSrc":"5618:6:28","nodeType":"YulIdentifier","src":"5618:6:28"},{"name":"headStart","nativeSrc":"5626:9:28","nodeType":"YulIdentifier","src":"5626:9:28"}],"functionName":{"name":"sub","nativeSrc":"5614:3:28","nodeType":"YulIdentifier","src":"5614:3:28"},"nativeSrc":"5614:22:28","nodeType":"YulFunctionCall","src":"5614:22:28"}],"functionName":{"name":"mstore","nativeSrc":"5587:6:28","nodeType":"YulIdentifier","src":"5587:6:28"},"nativeSrc":"5587:50:28","nodeType":"YulFunctionCall","src":"5587:50:28"},"nativeSrc":"5587:50:28","nodeType":"YulExpressionStatement","src":"5587:50:28"},{"expression":{"arguments":[{"name":"tail_2","nativeSrc":"5653:6:28","nodeType":"YulIdentifier","src":"5653:6:28"},{"kind":"number","nativeSrc":"5661:1:28","nodeType":"YulLiteral","src":"5661:1:28","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"5646:6:28","nodeType":"YulIdentifier","src":"5646:6:28"},"nativeSrc":"5646:17:28","nodeType":"YulFunctionCall","src":"5646:17:28"},"nativeSrc":"5646:17:28","nodeType":"YulExpressionStatement","src":"5646:17:28"},{"nativeSrc":"5672:23:28","nodeType":"YulAssignment","src":"5672:23:28","value":{"arguments":[{"name":"tail_2","nativeSrc":"5684:6:28","nodeType":"YulIdentifier","src":"5684:6:28"},{"kind":"number","nativeSrc":"5692:2:28","nodeType":"YulLiteral","src":"5692:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5680:3:28","nodeType":"YulIdentifier","src":"5680:3:28"},"nativeSrc":"5680:15:28","nodeType":"YulFunctionCall","src":"5680:15:28"},"variableNames":[{"name":"tail","nativeSrc":"5672:4:28","nodeType":"YulIdentifier","src":"5672:4:28"}]}]},"name":"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"4869:832:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5179:9:28","nodeType":"YulTypedName","src":"5179:9:28","type":""},{"name":"value2","nativeSrc":"5190:6:28","nodeType":"YulTypedName","src":"5190:6:28","type":""},{"name":"value1","nativeSrc":"5198:6:28","nodeType":"YulTypedName","src":"5198:6:28","type":""},{"name":"value0","nativeSrc":"5206:6:28","nodeType":"YulTypedName","src":"5206:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5217:4:28","nodeType":"YulTypedName","src":"5217:4:28","type":""}],"src":"4869:832:28"},{"body":{"nativeSrc":"5863:241:28","nodeType":"YulBlock","src":"5863:241:28","statements":[{"nativeSrc":"5873:26:28","nodeType":"YulAssignment","src":"5873:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"5885:9:28","nodeType":"YulIdentifier","src":"5885:9:28"},{"kind":"number","nativeSrc":"5896:2:28","nodeType":"YulLiteral","src":"5896:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"5881:3:28","nodeType":"YulIdentifier","src":"5881:3:28"},"nativeSrc":"5881:18:28","nodeType":"YulFunctionCall","src":"5881:18:28"},"variableNames":[{"name":"tail","nativeSrc":"5873:4:28","nodeType":"YulIdentifier","src":"5873:4:28"}]},{"nativeSrc":"5908:52:28","nodeType":"YulVariableDeclaration","src":"5908:52:28","value":{"kind":"number","nativeSrc":"5918:42:28","nodeType":"YulLiteral","src":"5918:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"5912:2:28","nodeType":"YulTypedName","src":"5912:2:28","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5976:9:28","nodeType":"YulIdentifier","src":"5976:9:28"},{"arguments":[{"name":"value0","nativeSrc":"5991:6:28","nodeType":"YulIdentifier","src":"5991:6:28"},{"name":"_1","nativeSrc":"5999:2:28","nodeType":"YulIdentifier","src":"5999:2:28"}],"functionName":{"name":"and","nativeSrc":"5987:3:28","nodeType":"YulIdentifier","src":"5987:3:28"},"nativeSrc":"5987:15:28","nodeType":"YulFunctionCall","src":"5987:15:28"}],"functionName":{"name":"mstore","nativeSrc":"5969:6:28","nodeType":"YulIdentifier","src":"5969:6:28"},"nativeSrc":"5969:34:28","nodeType":"YulFunctionCall","src":"5969:34:28"},"nativeSrc":"5969:34:28","nodeType":"YulExpressionStatement","src":"5969:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6023:9:28","nodeType":"YulIdentifier","src":"6023:9:28"},{"kind":"number","nativeSrc":"6034:2:28","nodeType":"YulLiteral","src":"6034:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6019:3:28","nodeType":"YulIdentifier","src":"6019:3:28"},"nativeSrc":"6019:18:28","nodeType":"YulFunctionCall","src":"6019:18:28"},{"arguments":[{"name":"value1","nativeSrc":"6043:6:28","nodeType":"YulIdentifier","src":"6043:6:28"},{"name":"_1","nativeSrc":"6051:2:28","nodeType":"YulIdentifier","src":"6051:2:28"}],"functionName":{"name":"and","nativeSrc":"6039:3:28","nodeType":"YulIdentifier","src":"6039:3:28"},"nativeSrc":"6039:15:28","nodeType":"YulFunctionCall","src":"6039:15:28"}],"functionName":{"name":"mstore","nativeSrc":"6012:6:28","nodeType":"YulIdentifier","src":"6012:6:28"},"nativeSrc":"6012:43:28","nodeType":"YulFunctionCall","src":"6012:43:28"},"nativeSrc":"6012:43:28","nodeType":"YulExpressionStatement","src":"6012:43:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6075:9:28","nodeType":"YulIdentifier","src":"6075:9:28"},{"kind":"number","nativeSrc":"6086:2:28","nodeType":"YulLiteral","src":"6086:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6071:3:28","nodeType":"YulIdentifier","src":"6071:3:28"},"nativeSrc":"6071:18:28","nodeType":"YulFunctionCall","src":"6071:18:28"},{"name":"value2","nativeSrc":"6091:6:28","nodeType":"YulIdentifier","src":"6091:6:28"}],"functionName":{"name":"mstore","nativeSrc":"6064:6:28","nodeType":"YulIdentifier","src":"6064:6:28"},"nativeSrc":"6064:34:28","nodeType":"YulFunctionCall","src":"6064:34:28"},"nativeSrc":"6064:34:28","nodeType":"YulExpressionStatement","src":"6064:34:28"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nativeSrc":"5706:398:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5816:9:28","nodeType":"YulTypedName","src":"5816:9:28","type":""},{"name":"value2","nativeSrc":"5827:6:28","nodeType":"YulTypedName","src":"5827:6:28","type":""},{"name":"value1","nativeSrc":"5835:6:28","nodeType":"YulTypedName","src":"5835:6:28","type":""},{"name":"value0","nativeSrc":"5843:6:28","nodeType":"YulTypedName","src":"5843:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5854:4:28","nodeType":"YulTypedName","src":"5854:4:28","type":""}],"src":"5706:398:28"},{"body":{"nativeSrc":"6187:199:28","nodeType":"YulBlock","src":"6187:199:28","statements":[{"body":{"nativeSrc":"6233:16:28","nodeType":"YulBlock","src":"6233:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6242:1:28","nodeType":"YulLiteral","src":"6242:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"6245:1:28","nodeType":"YulLiteral","src":"6245:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6235:6:28","nodeType":"YulIdentifier","src":"6235:6:28"},"nativeSrc":"6235:12:28","nodeType":"YulFunctionCall","src":"6235:12:28"},"nativeSrc":"6235:12:28","nodeType":"YulExpressionStatement","src":"6235:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6208:7:28","nodeType":"YulIdentifier","src":"6208:7:28"},{"name":"headStart","nativeSrc":"6217:9:28","nodeType":"YulIdentifier","src":"6217:9:28"}],"functionName":{"name":"sub","nativeSrc":"6204:3:28","nodeType":"YulIdentifier","src":"6204:3:28"},"nativeSrc":"6204:23:28","nodeType":"YulFunctionCall","src":"6204:23:28"},{"kind":"number","nativeSrc":"6229:2:28","nodeType":"YulLiteral","src":"6229:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"6200:3:28","nodeType":"YulIdentifier","src":"6200:3:28"},"nativeSrc":"6200:32:28","nodeType":"YulFunctionCall","src":"6200:32:28"},"nativeSrc":"6197:52:28","nodeType":"YulIf","src":"6197:52:28"},{"nativeSrc":"6258:29:28","nodeType":"YulVariableDeclaration","src":"6258:29:28","value":{"arguments":[{"name":"headStart","nativeSrc":"6277:9:28","nodeType":"YulIdentifier","src":"6277:9:28"}],"functionName":{"name":"mload","nativeSrc":"6271:5:28","nodeType":"YulIdentifier","src":"6271:5:28"},"nativeSrc":"6271:16:28","nodeType":"YulFunctionCall","src":"6271:16:28"},"variables":[{"name":"value","nativeSrc":"6262:5:28","nodeType":"YulTypedName","src":"6262:5:28","type":""}]},{"body":{"nativeSrc":"6340:16:28","nodeType":"YulBlock","src":"6340:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6349:1:28","nodeType":"YulLiteral","src":"6349:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"6352:1:28","nodeType":"YulLiteral","src":"6352:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6342:6:28","nodeType":"YulIdentifier","src":"6342:6:28"},"nativeSrc":"6342:12:28","nodeType":"YulFunctionCall","src":"6342:12:28"},"nativeSrc":"6342:12:28","nodeType":"YulExpressionStatement","src":"6342:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6309:5:28","nodeType":"YulIdentifier","src":"6309:5:28"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6330:5:28","nodeType":"YulIdentifier","src":"6330:5:28"}],"functionName":{"name":"iszero","nativeSrc":"6323:6:28","nodeType":"YulIdentifier","src":"6323:6:28"},"nativeSrc":"6323:13:28","nodeType":"YulFunctionCall","src":"6323:13:28"}],"functionName":{"name":"iszero","nativeSrc":"6316:6:28","nodeType":"YulIdentifier","src":"6316:6:28"},"nativeSrc":"6316:21:28","nodeType":"YulFunctionCall","src":"6316:21:28"}],"functionName":{"name":"eq","nativeSrc":"6306:2:28","nodeType":"YulIdentifier","src":"6306:2:28"},"nativeSrc":"6306:32:28","nodeType":"YulFunctionCall","src":"6306:32:28"}],"functionName":{"name":"iszero","nativeSrc":"6299:6:28","nodeType":"YulIdentifier","src":"6299:6:28"},"nativeSrc":"6299:40:28","nodeType":"YulFunctionCall","src":"6299:40:28"},"nativeSrc":"6296:60:28","nodeType":"YulIf","src":"6296:60:28"},{"nativeSrc":"6365:15:28","nodeType":"YulAssignment","src":"6365:15:28","value":{"name":"value","nativeSrc":"6375:5:28","nodeType":"YulIdentifier","src":"6375:5:28"},"variableNames":[{"name":"value0","nativeSrc":"6365:6:28","nodeType":"YulIdentifier","src":"6365:6:28"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"6109:277:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6153:9:28","nodeType":"YulTypedName","src":"6153:9:28","type":""},{"name":"dataEnd","nativeSrc":"6164:7:28","nodeType":"YulTypedName","src":"6164:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6176:6:28","nodeType":"YulTypedName","src":"6176:6:28","type":""}],"src":"6109:277:28"},{"body":{"nativeSrc":"6440:233:28","nodeType":"YulBlock","src":"6440:233:28","statements":[{"nativeSrc":"6450:17:28","nodeType":"YulAssignment","src":"6450:17:28","value":{"arguments":[{"name":"x","nativeSrc":"6462:1:28","nodeType":"YulIdentifier","src":"6462:1:28"},{"name":"y","nativeSrc":"6465:1:28","nodeType":"YulIdentifier","src":"6465:1:28"}],"functionName":{"name":"sub","nativeSrc":"6458:3:28","nodeType":"YulIdentifier","src":"6458:3:28"},"nativeSrc":"6458:9:28","nodeType":"YulFunctionCall","src":"6458:9:28"},"variableNames":[{"name":"diff","nativeSrc":"6450:4:28","nodeType":"YulIdentifier","src":"6450:4:28"}]},{"body":{"nativeSrc":"6499:168:28","nodeType":"YulBlock","src":"6499:168:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6520:1:28","nodeType":"YulLiteral","src":"6520:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"6523:77:28","nodeType":"YulLiteral","src":"6523:77:28","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"6513:6:28","nodeType":"YulIdentifier","src":"6513:6:28"},"nativeSrc":"6513:88:28","nodeType":"YulFunctionCall","src":"6513:88:28"},"nativeSrc":"6513:88:28","nodeType":"YulExpressionStatement","src":"6513:88:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6621:1:28","nodeType":"YulLiteral","src":"6621:1:28","type":"","value":"4"},{"kind":"number","nativeSrc":"6624:4:28","nodeType":"YulLiteral","src":"6624:4:28","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"6614:6:28","nodeType":"YulIdentifier","src":"6614:6:28"},"nativeSrc":"6614:15:28","nodeType":"YulFunctionCall","src":"6614:15:28"},"nativeSrc":"6614:15:28","nodeType":"YulExpressionStatement","src":"6614:15:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6649:1:28","nodeType":"YulLiteral","src":"6649:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"6652:4:28","nodeType":"YulLiteral","src":"6652:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"6642:6:28","nodeType":"YulIdentifier","src":"6642:6:28"},"nativeSrc":"6642:15:28","nodeType":"YulFunctionCall","src":"6642:15:28"},"nativeSrc":"6642:15:28","nodeType":"YulExpressionStatement","src":"6642:15:28"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"6482:4:28","nodeType":"YulIdentifier","src":"6482:4:28"},{"name":"x","nativeSrc":"6488:1:28","nodeType":"YulIdentifier","src":"6488:1:28"}],"functionName":{"name":"gt","nativeSrc":"6479:2:28","nodeType":"YulIdentifier","src":"6479:2:28"},"nativeSrc":"6479:11:28","nodeType":"YulFunctionCall","src":"6479:11:28"},"nativeSrc":"6476:191:28","nodeType":"YulIf","src":"6476:191:28"}]},"name":"checked_sub_t_uint256","nativeSrc":"6391:282:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"6422:1:28","nodeType":"YulTypedName","src":"6422:1:28","type":""},{"name":"y","nativeSrc":"6425:1:28","nodeType":"YulTypedName","src":"6425:1:28","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"6431:4:28","nodeType":"YulTypedName","src":"6431:4:28","type":""}],"src":"6391:282:28"},{"body":{"nativeSrc":"6710:152:28","nodeType":"YulBlock","src":"6710:152:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6727:1:28","nodeType":"YulLiteral","src":"6727:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"6730:77:28","nodeType":"YulLiteral","src":"6730:77:28","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"6720:6:28","nodeType":"YulIdentifier","src":"6720:6:28"},"nativeSrc":"6720:88:28","nodeType":"YulFunctionCall","src":"6720:88:28"},"nativeSrc":"6720:88:28","nodeType":"YulExpressionStatement","src":"6720:88:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6824:1:28","nodeType":"YulLiteral","src":"6824:1:28","type":"","value":"4"},{"kind":"number","nativeSrc":"6827:4:28","nodeType":"YulLiteral","src":"6827:4:28","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"6817:6:28","nodeType":"YulIdentifier","src":"6817:6:28"},"nativeSrc":"6817:15:28","nodeType":"YulFunctionCall","src":"6817:15:28"},"nativeSrc":"6817:15:28","nodeType":"YulExpressionStatement","src":"6817:15:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6848:1:28","nodeType":"YulLiteral","src":"6848:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"6851:4:28","nodeType":"YulLiteral","src":"6851:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"6841:6:28","nodeType":"YulIdentifier","src":"6841:6:28"},"nativeSrc":"6841:15:28","nodeType":"YulFunctionCall","src":"6841:15:28"},"nativeSrc":"6841:15:28","nodeType":"YulExpressionStatement","src":"6841:15:28"}]},"name":"panic_error_0x41","nativeSrc":"6678:184:28","nodeType":"YulFunctionDefinition","src":"6678:184:28"},{"body":{"nativeSrc":"6912:289:28","nodeType":"YulBlock","src":"6912:289:28","statements":[{"nativeSrc":"6922:19:28","nodeType":"YulAssignment","src":"6922:19:28","value":{"arguments":[{"kind":"number","nativeSrc":"6938:2:28","nodeType":"YulLiteral","src":"6938:2:28","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"6932:5:28","nodeType":"YulIdentifier","src":"6932:5:28"},"nativeSrc":"6932:9:28","nodeType":"YulFunctionCall","src":"6932:9:28"},"variableNames":[{"name":"memPtr","nativeSrc":"6922:6:28","nodeType":"YulIdentifier","src":"6922:6:28"}]},{"nativeSrc":"6950:117:28","nodeType":"YulVariableDeclaration","src":"6950:117:28","value":{"arguments":[{"name":"memPtr","nativeSrc":"6972:6:28","nodeType":"YulIdentifier","src":"6972:6:28"},{"arguments":[{"arguments":[{"name":"size","nativeSrc":"6988:4:28","nodeType":"YulIdentifier","src":"6988:4:28"},{"kind":"number","nativeSrc":"6994:2:28","nodeType":"YulLiteral","src":"6994:2:28","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"6984:3:28","nodeType":"YulIdentifier","src":"6984:3:28"},"nativeSrc":"6984:13:28","nodeType":"YulFunctionCall","src":"6984:13:28"},{"kind":"number","nativeSrc":"6999:66:28","nodeType":"YulLiteral","src":"6999:66:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"6980:3:28","nodeType":"YulIdentifier","src":"6980:3:28"},"nativeSrc":"6980:86:28","nodeType":"YulFunctionCall","src":"6980:86:28"}],"functionName":{"name":"add","nativeSrc":"6968:3:28","nodeType":"YulIdentifier","src":"6968:3:28"},"nativeSrc":"6968:99:28","nodeType":"YulFunctionCall","src":"6968:99:28"},"variables":[{"name":"newFreePtr","nativeSrc":"6954:10:28","nodeType":"YulTypedName","src":"6954:10:28","type":""}]},{"body":{"nativeSrc":"7142:22:28","nodeType":"YulBlock","src":"7142:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"7144:16:28","nodeType":"YulIdentifier","src":"7144:16:28"},"nativeSrc":"7144:18:28","nodeType":"YulFunctionCall","src":"7144:18:28"},"nativeSrc":"7144:18:28","nodeType":"YulExpressionStatement","src":"7144:18:28"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"7085:10:28","nodeType":"YulIdentifier","src":"7085:10:28"},{"kind":"number","nativeSrc":"7097:18:28","nodeType":"YulLiteral","src":"7097:18:28","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"7082:2:28","nodeType":"YulIdentifier","src":"7082:2:28"},"nativeSrc":"7082:34:28","nodeType":"YulFunctionCall","src":"7082:34:28"},{"arguments":[{"name":"newFreePtr","nativeSrc":"7121:10:28","nodeType":"YulIdentifier","src":"7121:10:28"},{"name":"memPtr","nativeSrc":"7133:6:28","nodeType":"YulIdentifier","src":"7133:6:28"}],"functionName":{"name":"lt","nativeSrc":"7118:2:28","nodeType":"YulIdentifier","src":"7118:2:28"},"nativeSrc":"7118:22:28","nodeType":"YulFunctionCall","src":"7118:22:28"}],"functionName":{"name":"or","nativeSrc":"7079:2:28","nodeType":"YulIdentifier","src":"7079:2:28"},"nativeSrc":"7079:62:28","nodeType":"YulFunctionCall","src":"7079:62:28"},"nativeSrc":"7076:88:28","nodeType":"YulIf","src":"7076:88:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7180:2:28","nodeType":"YulLiteral","src":"7180:2:28","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"7184:10:28","nodeType":"YulIdentifier","src":"7184:10:28"}],"functionName":{"name":"mstore","nativeSrc":"7173:6:28","nodeType":"YulIdentifier","src":"7173:6:28"},"nativeSrc":"7173:22:28","nodeType":"YulFunctionCall","src":"7173:22:28"},"nativeSrc":"7173:22:28","nodeType":"YulExpressionStatement","src":"7173:22:28"}]},"name":"allocate_memory","nativeSrc":"6867:334:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nativeSrc":"6892:4:28","nodeType":"YulTypedName","src":"6892:4:28","type":""}],"returnVariables":[{"name":"memPtr","nativeSrc":"6901:6:28","nodeType":"YulTypedName","src":"6901:6:28","type":""}],"src":"6867:334:28"},{"body":{"nativeSrc":"7275:114:28","nodeType":"YulBlock","src":"7275:114:28","statements":[{"body":{"nativeSrc":"7319:22:28","nodeType":"YulBlock","src":"7319:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"7321:16:28","nodeType":"YulIdentifier","src":"7321:16:28"},"nativeSrc":"7321:18:28","nodeType":"YulFunctionCall","src":"7321:18:28"},"nativeSrc":"7321:18:28","nodeType":"YulExpressionStatement","src":"7321:18:28"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"7291:6:28","nodeType":"YulIdentifier","src":"7291:6:28"},{"kind":"number","nativeSrc":"7299:18:28","nodeType":"YulLiteral","src":"7299:18:28","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"7288:2:28","nodeType":"YulIdentifier","src":"7288:2:28"},"nativeSrc":"7288:30:28","nodeType":"YulFunctionCall","src":"7288:30:28"},"nativeSrc":"7285:56:28","nodeType":"YulIf","src":"7285:56:28"},{"nativeSrc":"7350:33:28","nodeType":"YulAssignment","src":"7350:33:28","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"7366:1:28","nodeType":"YulLiteral","src":"7366:1:28","type":"","value":"5"},{"name":"length","nativeSrc":"7369:6:28","nodeType":"YulIdentifier","src":"7369:6:28"}],"functionName":{"name":"shl","nativeSrc":"7362:3:28","nodeType":"YulIdentifier","src":"7362:3:28"},"nativeSrc":"7362:14:28","nodeType":"YulFunctionCall","src":"7362:14:28"},{"kind":"number","nativeSrc":"7378:4:28","nodeType":"YulLiteral","src":"7378:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"7358:3:28","nodeType":"YulIdentifier","src":"7358:3:28"},"nativeSrc":"7358:25:28","nodeType":"YulFunctionCall","src":"7358:25:28"},"variableNames":[{"name":"size","nativeSrc":"7350:4:28","nodeType":"YulIdentifier","src":"7350:4:28"}]}]},"name":"array_allocation_size_array_bytes32_dyn","nativeSrc":"7206:183:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nativeSrc":"7255:6:28","nodeType":"YulTypedName","src":"7255:6:28","type":""}],"returnVariables":[{"name":"size","nativeSrc":"7266:4:28","nodeType":"YulTypedName","src":"7266:4:28","type":""}],"src":"7206:183:28"},{"body":{"nativeSrc":"7458:604:28","nodeType":"YulBlock","src":"7458:604:28","statements":[{"body":{"nativeSrc":"7507:16:28","nodeType":"YulBlock","src":"7507:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7516:1:28","nodeType":"YulLiteral","src":"7516:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"7519:1:28","nodeType":"YulLiteral","src":"7519:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7509:6:28","nodeType":"YulIdentifier","src":"7509:6:28"},"nativeSrc":"7509:12:28","nodeType":"YulFunctionCall","src":"7509:12:28"},"nativeSrc":"7509:12:28","nodeType":"YulExpressionStatement","src":"7509:12:28"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"7486:6:28","nodeType":"YulIdentifier","src":"7486:6:28"},{"kind":"number","nativeSrc":"7494:4:28","nodeType":"YulLiteral","src":"7494:4:28","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"7482:3:28","nodeType":"YulIdentifier","src":"7482:3:28"},"nativeSrc":"7482:17:28","nodeType":"YulFunctionCall","src":"7482:17:28"},{"name":"end","nativeSrc":"7501:3:28","nodeType":"YulIdentifier","src":"7501:3:28"}],"functionName":{"name":"slt","nativeSrc":"7478:3:28","nodeType":"YulIdentifier","src":"7478:3:28"},"nativeSrc":"7478:27:28","nodeType":"YulFunctionCall","src":"7478:27:28"}],"functionName":{"name":"iszero","nativeSrc":"7471:6:28","nodeType":"YulIdentifier","src":"7471:6:28"},"nativeSrc":"7471:35:28","nodeType":"YulFunctionCall","src":"7471:35:28"},"nativeSrc":"7468:55:28","nodeType":"YulIf","src":"7468:55:28"},{"nativeSrc":"7532:30:28","nodeType":"YulVariableDeclaration","src":"7532:30:28","value":{"arguments":[{"name":"offset","nativeSrc":"7555:6:28","nodeType":"YulIdentifier","src":"7555:6:28"}],"functionName":{"name":"calldataload","nativeSrc":"7542:12:28","nodeType":"YulIdentifier","src":"7542:12:28"},"nativeSrc":"7542:20:28","nodeType":"YulFunctionCall","src":"7542:20:28"},"variables":[{"name":"_1","nativeSrc":"7536:2:28","nodeType":"YulTypedName","src":"7536:2:28","type":""}]},{"nativeSrc":"7571:14:28","nodeType":"YulVariableDeclaration","src":"7571:14:28","value":{"kind":"number","nativeSrc":"7581:4:28","nodeType":"YulLiteral","src":"7581:4:28","type":"","value":"0x20"},"variables":[{"name":"_2","nativeSrc":"7575:2:28","nodeType":"YulTypedName","src":"7575:2:28","type":""}]},{"nativeSrc":"7594:71:28","nodeType":"YulVariableDeclaration","src":"7594:71:28","value":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"7661:2:28","nodeType":"YulIdentifier","src":"7661:2:28"}],"functionName":{"name":"array_allocation_size_array_bytes32_dyn","nativeSrc":"7621:39:28","nodeType":"YulIdentifier","src":"7621:39:28"},"nativeSrc":"7621:43:28","nodeType":"YulFunctionCall","src":"7621:43:28"}],"functionName":{"name":"allocate_memory","nativeSrc":"7605:15:28","nodeType":"YulIdentifier","src":"7605:15:28"},"nativeSrc":"7605:60:28","nodeType":"YulFunctionCall","src":"7605:60:28"},"variables":[{"name":"dst","nativeSrc":"7598:3:28","nodeType":"YulTypedName","src":"7598:3:28","type":""}]},{"nativeSrc":"7674:16:28","nodeType":"YulVariableDeclaration","src":"7674:16:28","value":{"name":"dst","nativeSrc":"7687:3:28","nodeType":"YulIdentifier","src":"7687:3:28"},"variables":[{"name":"dst_1","nativeSrc":"7678:5:28","nodeType":"YulTypedName","src":"7678:5:28","type":""}]},{"expression":{"arguments":[{"name":"dst","nativeSrc":"7706:3:28","nodeType":"YulIdentifier","src":"7706:3:28"},{"name":"_1","nativeSrc":"7711:2:28","nodeType":"YulIdentifier","src":"7711:2:28"}],"functionName":{"name":"mstore","nativeSrc":"7699:6:28","nodeType":"YulIdentifier","src":"7699:6:28"},"nativeSrc":"7699:15:28","nodeType":"YulFunctionCall","src":"7699:15:28"},"nativeSrc":"7699:15:28","nodeType":"YulExpressionStatement","src":"7699:15:28"},{"nativeSrc":"7723:21:28","nodeType":"YulAssignment","src":"7723:21:28","value":{"arguments":[{"name":"dst","nativeSrc":"7734:3:28","nodeType":"YulIdentifier","src":"7734:3:28"},{"kind":"number","nativeSrc":"7739:4:28","nodeType":"YulLiteral","src":"7739:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"7730:3:28","nodeType":"YulIdentifier","src":"7730:3:28"},"nativeSrc":"7730:14:28","nodeType":"YulFunctionCall","src":"7730:14:28"},"variableNames":[{"name":"dst","nativeSrc":"7723:3:28","nodeType":"YulIdentifier","src":"7723:3:28"}]},{"nativeSrc":"7753:48:28","nodeType":"YulVariableDeclaration","src":"7753:48:28","value":{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"7775:6:28","nodeType":"YulIdentifier","src":"7775:6:28"},{"arguments":[{"kind":"number","nativeSrc":"7787:1:28","nodeType":"YulLiteral","src":"7787:1:28","type":"","value":"5"},{"name":"_1","nativeSrc":"7790:2:28","nodeType":"YulIdentifier","src":"7790:2:28"}],"functionName":{"name":"shl","nativeSrc":"7783:3:28","nodeType":"YulIdentifier","src":"7783:3:28"},"nativeSrc":"7783:10:28","nodeType":"YulFunctionCall","src":"7783:10:28"}],"functionName":{"name":"add","nativeSrc":"7771:3:28","nodeType":"YulIdentifier","src":"7771:3:28"},"nativeSrc":"7771:23:28","nodeType":"YulFunctionCall","src":"7771:23:28"},{"kind":"number","nativeSrc":"7796:4:28","nodeType":"YulLiteral","src":"7796:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"7767:3:28","nodeType":"YulIdentifier","src":"7767:3:28"},"nativeSrc":"7767:34:28","nodeType":"YulFunctionCall","src":"7767:34:28"},"variables":[{"name":"srcEnd","nativeSrc":"7757:6:28","nodeType":"YulTypedName","src":"7757:6:28","type":""}]},{"body":{"nativeSrc":"7829:16:28","nodeType":"YulBlock","src":"7829:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7838:1:28","nodeType":"YulLiteral","src":"7838:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"7841:1:28","nodeType":"YulLiteral","src":"7841:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7831:6:28","nodeType":"YulIdentifier","src":"7831:6:28"},"nativeSrc":"7831:12:28","nodeType":"YulFunctionCall","src":"7831:12:28"},"nativeSrc":"7831:12:28","nodeType":"YulExpressionStatement","src":"7831:12:28"}]},"condition":{"arguments":[{"name":"srcEnd","nativeSrc":"7816:6:28","nodeType":"YulIdentifier","src":"7816:6:28"},{"name":"end","nativeSrc":"7824:3:28","nodeType":"YulIdentifier","src":"7824:3:28"}],"functionName":{"name":"gt","nativeSrc":"7813:2:28","nodeType":"YulIdentifier","src":"7813:2:28"},"nativeSrc":"7813:15:28","nodeType":"YulFunctionCall","src":"7813:15:28"},"nativeSrc":"7810:35:28","nodeType":"YulIf","src":"7810:35:28"},{"nativeSrc":"7854:28:28","nodeType":"YulVariableDeclaration","src":"7854:28:28","value":{"arguments":[{"name":"offset","nativeSrc":"7869:6:28","nodeType":"YulIdentifier","src":"7869:6:28"},{"kind":"number","nativeSrc":"7877:4:28","nodeType":"YulLiteral","src":"7877:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"7865:3:28","nodeType":"YulIdentifier","src":"7865:3:28"},"nativeSrc":"7865:17:28","nodeType":"YulFunctionCall","src":"7865:17:28"},"variables":[{"name":"src","nativeSrc":"7858:3:28","nodeType":"YulTypedName","src":"7858:3:28","type":""}]},{"body":{"nativeSrc":"7947:86:28","nodeType":"YulBlock","src":"7947:86:28","statements":[{"expression":{"arguments":[{"name":"dst","nativeSrc":"7968:3:28","nodeType":"YulIdentifier","src":"7968:3:28"},{"arguments":[{"name":"src","nativeSrc":"7986:3:28","nodeType":"YulIdentifier","src":"7986:3:28"}],"functionName":{"name":"calldataload","nativeSrc":"7973:12:28","nodeType":"YulIdentifier","src":"7973:12:28"},"nativeSrc":"7973:17:28","nodeType":"YulFunctionCall","src":"7973:17:28"}],"functionName":{"name":"mstore","nativeSrc":"7961:6:28","nodeType":"YulIdentifier","src":"7961:6:28"},"nativeSrc":"7961:30:28","nodeType":"YulFunctionCall","src":"7961:30:28"},"nativeSrc":"7961:30:28","nodeType":"YulExpressionStatement","src":"7961:30:28"},{"nativeSrc":"8004:19:28","nodeType":"YulAssignment","src":"8004:19:28","value":{"arguments":[{"name":"dst","nativeSrc":"8015:3:28","nodeType":"YulIdentifier","src":"8015:3:28"},{"name":"_2","nativeSrc":"8020:2:28","nodeType":"YulIdentifier","src":"8020:2:28"}],"functionName":{"name":"add","nativeSrc":"8011:3:28","nodeType":"YulIdentifier","src":"8011:3:28"},"nativeSrc":"8011:12:28","nodeType":"YulFunctionCall","src":"8011:12:28"},"variableNames":[{"name":"dst","nativeSrc":"8004:3:28","nodeType":"YulIdentifier","src":"8004:3:28"}]}]},"condition":{"arguments":[{"name":"src","nativeSrc":"7902:3:28","nodeType":"YulIdentifier","src":"7902:3:28"},{"name":"srcEnd","nativeSrc":"7907:6:28","nodeType":"YulIdentifier","src":"7907:6:28"}],"functionName":{"name":"lt","nativeSrc":"7899:2:28","nodeType":"YulIdentifier","src":"7899:2:28"},"nativeSrc":"7899:15:28","nodeType":"YulFunctionCall","src":"7899:15:28"},"nativeSrc":"7891:142:28","nodeType":"YulForLoop","post":{"nativeSrc":"7915:23:28","nodeType":"YulBlock","src":"7915:23:28","statements":[{"nativeSrc":"7917:19:28","nodeType":"YulAssignment","src":"7917:19:28","value":{"arguments":[{"name":"src","nativeSrc":"7928:3:28","nodeType":"YulIdentifier","src":"7928:3:28"},{"name":"_2","nativeSrc":"7933:2:28","nodeType":"YulIdentifier","src":"7933:2:28"}],"functionName":{"name":"add","nativeSrc":"7924:3:28","nodeType":"YulIdentifier","src":"7924:3:28"},"nativeSrc":"7924:12:28","nodeType":"YulFunctionCall","src":"7924:12:28"},"variableNames":[{"name":"src","nativeSrc":"7917:3:28","nodeType":"YulIdentifier","src":"7917:3:28"}]}]},"pre":{"nativeSrc":"7895:3:28","nodeType":"YulBlock","src":"7895:3:28","statements":[]},"src":"7891:142:28"},{"nativeSrc":"8042:14:28","nodeType":"YulAssignment","src":"8042:14:28","value":{"name":"dst_1","nativeSrc":"8051:5:28","nodeType":"YulIdentifier","src":"8051:5:28"},"variableNames":[{"name":"array","nativeSrc":"8042:5:28","nodeType":"YulIdentifier","src":"8042:5:28"}]}]},"name":"abi_decode_array_uint256_dyn","nativeSrc":"7394:668:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"7432:6:28","nodeType":"YulTypedName","src":"7432:6:28","type":""},{"name":"end","nativeSrc":"7440:3:28","nodeType":"YulTypedName","src":"7440:3:28","type":""}],"returnVariables":[{"name":"array","nativeSrc":"7448:5:28","nodeType":"YulTypedName","src":"7448:5:28","type":""}],"src":"7394:668:28"},{"body":{"nativeSrc":"8280:1289:28","nodeType":"YulBlock","src":"8280:1289:28","statements":[{"body":{"nativeSrc":"8327:16:28","nodeType":"YulBlock","src":"8327:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8336:1:28","nodeType":"YulLiteral","src":"8336:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"8339:1:28","nodeType":"YulLiteral","src":"8339:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8329:6:28","nodeType":"YulIdentifier","src":"8329:6:28"},"nativeSrc":"8329:12:28","nodeType":"YulFunctionCall","src":"8329:12:28"},"nativeSrc":"8329:12:28","nodeType":"YulExpressionStatement","src":"8329:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8301:7:28","nodeType":"YulIdentifier","src":"8301:7:28"},{"name":"headStart","nativeSrc":"8310:9:28","nodeType":"YulIdentifier","src":"8310:9:28"}],"functionName":{"name":"sub","nativeSrc":"8297:3:28","nodeType":"YulIdentifier","src":"8297:3:28"},"nativeSrc":"8297:23:28","nodeType":"YulFunctionCall","src":"8297:23:28"},{"kind":"number","nativeSrc":"8322:3:28","nodeType":"YulLiteral","src":"8322:3:28","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"8293:3:28","nodeType":"YulIdentifier","src":"8293:3:28"},"nativeSrc":"8293:33:28","nodeType":"YulFunctionCall","src":"8293:33:28"},"nativeSrc":"8290:53:28","nodeType":"YulIf","src":"8290:53:28"},{"nativeSrc":"8352:33:28","nodeType":"YulAssignment","src":"8352:33:28","value":{"arguments":[{"name":"headStart","nativeSrc":"8375:9:28","nodeType":"YulIdentifier","src":"8375:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"8362:12:28","nodeType":"YulIdentifier","src":"8362:12:28"},"nativeSrc":"8362:23:28","nodeType":"YulFunctionCall","src":"8362:23:28"},"variableNames":[{"name":"value0","nativeSrc":"8352:6:28","nodeType":"YulIdentifier","src":"8352:6:28"}]},{"nativeSrc":"8394:12:28","nodeType":"YulVariableDeclaration","src":"8394:12:28","value":{"kind":"number","nativeSrc":"8404:2:28","nodeType":"YulLiteral","src":"8404:2:28","type":"","value":"32"},"variables":[{"name":"_1","nativeSrc":"8398:2:28","nodeType":"YulTypedName","src":"8398:2:28","type":""}]},{"nativeSrc":"8415:42:28","nodeType":"YulAssignment","src":"8415:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8442:9:28","nodeType":"YulIdentifier","src":"8442:9:28"},{"name":"_1","nativeSrc":"8453:2:28","nodeType":"YulIdentifier","src":"8453:2:28"}],"functionName":{"name":"add","nativeSrc":"8438:3:28","nodeType":"YulIdentifier","src":"8438:3:28"},"nativeSrc":"8438:18:28","nodeType":"YulFunctionCall","src":"8438:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"8425:12:28","nodeType":"YulIdentifier","src":"8425:12:28"},"nativeSrc":"8425:32:28","nodeType":"YulFunctionCall","src":"8425:32:28"},"variableNames":[{"name":"value1","nativeSrc":"8415:6:28","nodeType":"YulIdentifier","src":"8415:6:28"}]},{"nativeSrc":"8466:46:28","nodeType":"YulVariableDeclaration","src":"8466:46:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8497:9:28","nodeType":"YulIdentifier","src":"8497:9:28"},{"kind":"number","nativeSrc":"8508:2:28","nodeType":"YulLiteral","src":"8508:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8493:3:28","nodeType":"YulIdentifier","src":"8493:3:28"},"nativeSrc":"8493:18:28","nodeType":"YulFunctionCall","src":"8493:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"8480:12:28","nodeType":"YulIdentifier","src":"8480:12:28"},"nativeSrc":"8480:32:28","nodeType":"YulFunctionCall","src":"8480:32:28"},"variables":[{"name":"offset","nativeSrc":"8470:6:28","nodeType":"YulTypedName","src":"8470:6:28","type":""}]},{"nativeSrc":"8521:28:28","nodeType":"YulVariableDeclaration","src":"8521:28:28","value":{"kind":"number","nativeSrc":"8531:18:28","nodeType":"YulLiteral","src":"8531:18:28","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nativeSrc":"8525:2:28","nodeType":"YulTypedName","src":"8525:2:28","type":""}]},{"body":{"nativeSrc":"8576:16:28","nodeType":"YulBlock","src":"8576:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8585:1:28","nodeType":"YulLiteral","src":"8585:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"8588:1:28","nodeType":"YulLiteral","src":"8588:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8578:6:28","nodeType":"YulIdentifier","src":"8578:6:28"},"nativeSrc":"8578:12:28","nodeType":"YulFunctionCall","src":"8578:12:28"},"nativeSrc":"8578:12:28","nodeType":"YulExpressionStatement","src":"8578:12:28"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"8564:6:28","nodeType":"YulIdentifier","src":"8564:6:28"},{"name":"_2","nativeSrc":"8572:2:28","nodeType":"YulIdentifier","src":"8572:2:28"}],"functionName":{"name":"gt","nativeSrc":"8561:2:28","nodeType":"YulIdentifier","src":"8561:2:28"},"nativeSrc":"8561:14:28","nodeType":"YulFunctionCall","src":"8561:14:28"},"nativeSrc":"8558:34:28","nodeType":"YulIf","src":"8558:34:28"},{"nativeSrc":"8601:32:28","nodeType":"YulVariableDeclaration","src":"8601:32:28","value":{"arguments":[{"name":"headStart","nativeSrc":"8615:9:28","nodeType":"YulIdentifier","src":"8615:9:28"},{"name":"offset","nativeSrc":"8626:6:28","nodeType":"YulIdentifier","src":"8626:6:28"}],"functionName":{"name":"add","nativeSrc":"8611:3:28","nodeType":"YulIdentifier","src":"8611:3:28"},"nativeSrc":"8611:22:28","nodeType":"YulFunctionCall","src":"8611:22:28"},"variables":[{"name":"_3","nativeSrc":"8605:2:28","nodeType":"YulTypedName","src":"8605:2:28","type":""}]},{"body":{"nativeSrc":"8681:16:28","nodeType":"YulBlock","src":"8681:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8690:1:28","nodeType":"YulLiteral","src":"8690:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"8693:1:28","nodeType":"YulLiteral","src":"8693:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8683:6:28","nodeType":"YulIdentifier","src":"8683:6:28"},"nativeSrc":"8683:12:28","nodeType":"YulFunctionCall","src":"8683:12:28"},"nativeSrc":"8683:12:28","nodeType":"YulExpressionStatement","src":"8683:12:28"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nativeSrc":"8660:2:28","nodeType":"YulIdentifier","src":"8660:2:28"},{"kind":"number","nativeSrc":"8664:4:28","nodeType":"YulLiteral","src":"8664:4:28","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"8656:3:28","nodeType":"YulIdentifier","src":"8656:3:28"},"nativeSrc":"8656:13:28","nodeType":"YulFunctionCall","src":"8656:13:28"},{"name":"dataEnd","nativeSrc":"8671:7:28","nodeType":"YulIdentifier","src":"8671:7:28"}],"functionName":{"name":"slt","nativeSrc":"8652:3:28","nodeType":"YulIdentifier","src":"8652:3:28"},"nativeSrc":"8652:27:28","nodeType":"YulFunctionCall","src":"8652:27:28"}],"functionName":{"name":"iszero","nativeSrc":"8645:6:28","nodeType":"YulIdentifier","src":"8645:6:28"},"nativeSrc":"8645:35:28","nodeType":"YulFunctionCall","src":"8645:35:28"},"nativeSrc":"8642:55:28","nodeType":"YulIf","src":"8642:55:28"},{"nativeSrc":"8706:26:28","nodeType":"YulVariableDeclaration","src":"8706:26:28","value":{"arguments":[{"name":"_3","nativeSrc":"8729:2:28","nodeType":"YulIdentifier","src":"8729:2:28"}],"functionName":{"name":"calldataload","nativeSrc":"8716:12:28","nodeType":"YulIdentifier","src":"8716:12:28"},"nativeSrc":"8716:16:28","nodeType":"YulFunctionCall","src":"8716:16:28"},"variables":[{"name":"_4","nativeSrc":"8710:2:28","nodeType":"YulTypedName","src":"8710:2:28","type":""}]},{"nativeSrc":"8741:71:28","nodeType":"YulVariableDeclaration","src":"8741:71:28","value":{"arguments":[{"arguments":[{"name":"_4","nativeSrc":"8808:2:28","nodeType":"YulIdentifier","src":"8808:2:28"}],"functionName":{"name":"array_allocation_size_array_bytes32_dyn","nativeSrc":"8768:39:28","nodeType":"YulIdentifier","src":"8768:39:28"},"nativeSrc":"8768:43:28","nodeType":"YulFunctionCall","src":"8768:43:28"}],"functionName":{"name":"allocate_memory","nativeSrc":"8752:15:28","nodeType":"YulIdentifier","src":"8752:15:28"},"nativeSrc":"8752:60:28","nodeType":"YulFunctionCall","src":"8752:60:28"},"variables":[{"name":"dst","nativeSrc":"8745:3:28","nodeType":"YulTypedName","src":"8745:3:28","type":""}]},{"nativeSrc":"8821:16:28","nodeType":"YulVariableDeclaration","src":"8821:16:28","value":{"name":"dst","nativeSrc":"8834:3:28","nodeType":"YulIdentifier","src":"8834:3:28"},"variables":[{"name":"dst_1","nativeSrc":"8825:5:28","nodeType":"YulTypedName","src":"8825:5:28","type":""}]},{"expression":{"arguments":[{"name":"dst","nativeSrc":"8853:3:28","nodeType":"YulIdentifier","src":"8853:3:28"},{"name":"_4","nativeSrc":"8858:2:28","nodeType":"YulIdentifier","src":"8858:2:28"}],"functionName":{"name":"mstore","nativeSrc":"8846:6:28","nodeType":"YulIdentifier","src":"8846:6:28"},"nativeSrc":"8846:15:28","nodeType":"YulFunctionCall","src":"8846:15:28"},"nativeSrc":"8846:15:28","nodeType":"YulExpressionStatement","src":"8846:15:28"},{"nativeSrc":"8870:19:28","nodeType":"YulAssignment","src":"8870:19:28","value":{"arguments":[{"name":"dst","nativeSrc":"8881:3:28","nodeType":"YulIdentifier","src":"8881:3:28"},{"name":"_1","nativeSrc":"8886:2:28","nodeType":"YulIdentifier","src":"8886:2:28"}],"functionName":{"name":"add","nativeSrc":"8877:3:28","nodeType":"YulIdentifier","src":"8877:3:28"},"nativeSrc":"8877:12:28","nodeType":"YulFunctionCall","src":"8877:12:28"},"variableNames":[{"name":"dst","nativeSrc":"8870:3:28","nodeType":"YulIdentifier","src":"8870:3:28"}]},{"nativeSrc":"8898:42:28","nodeType":"YulVariableDeclaration","src":"8898:42:28","value":{"arguments":[{"arguments":[{"name":"_3","nativeSrc":"8920:2:28","nodeType":"YulIdentifier","src":"8920:2:28"},{"arguments":[{"kind":"number","nativeSrc":"8928:1:28","nodeType":"YulLiteral","src":"8928:1:28","type":"","value":"5"},{"name":"_4","nativeSrc":"8931:2:28","nodeType":"YulIdentifier","src":"8931:2:28"}],"functionName":{"name":"shl","nativeSrc":"8924:3:28","nodeType":"YulIdentifier","src":"8924:3:28"},"nativeSrc":"8924:10:28","nodeType":"YulFunctionCall","src":"8924:10:28"}],"functionName":{"name":"add","nativeSrc":"8916:3:28","nodeType":"YulIdentifier","src":"8916:3:28"},"nativeSrc":"8916:19:28","nodeType":"YulFunctionCall","src":"8916:19:28"},{"name":"_1","nativeSrc":"8937:2:28","nodeType":"YulIdentifier","src":"8937:2:28"}],"functionName":{"name":"add","nativeSrc":"8912:3:28","nodeType":"YulIdentifier","src":"8912:3:28"},"nativeSrc":"8912:28:28","nodeType":"YulFunctionCall","src":"8912:28:28"},"variables":[{"name":"srcEnd","nativeSrc":"8902:6:28","nodeType":"YulTypedName","src":"8902:6:28","type":""}]},{"body":{"nativeSrc":"8972:16:28","nodeType":"YulBlock","src":"8972:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8981:1:28","nodeType":"YulLiteral","src":"8981:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"8984:1:28","nodeType":"YulLiteral","src":"8984:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8974:6:28","nodeType":"YulIdentifier","src":"8974:6:28"},"nativeSrc":"8974:12:28","nodeType":"YulFunctionCall","src":"8974:12:28"},"nativeSrc":"8974:12:28","nodeType":"YulExpressionStatement","src":"8974:12:28"}]},"condition":{"arguments":[{"name":"srcEnd","nativeSrc":"8955:6:28","nodeType":"YulIdentifier","src":"8955:6:28"},{"name":"dataEnd","nativeSrc":"8963:7:28","nodeType":"YulIdentifier","src":"8963:7:28"}],"functionName":{"name":"gt","nativeSrc":"8952:2:28","nodeType":"YulIdentifier","src":"8952:2:28"},"nativeSrc":"8952:19:28","nodeType":"YulFunctionCall","src":"8952:19:28"},"nativeSrc":"8949:39:28","nodeType":"YulIf","src":"8949:39:28"},{"nativeSrc":"8997:22:28","nodeType":"YulVariableDeclaration","src":"8997:22:28","value":{"arguments":[{"name":"_3","nativeSrc":"9012:2:28","nodeType":"YulIdentifier","src":"9012:2:28"},{"name":"_1","nativeSrc":"9016:2:28","nodeType":"YulIdentifier","src":"9016:2:28"}],"functionName":{"name":"add","nativeSrc":"9008:3:28","nodeType":"YulIdentifier","src":"9008:3:28"},"nativeSrc":"9008:11:28","nodeType":"YulFunctionCall","src":"9008:11:28"},"variables":[{"name":"src","nativeSrc":"9001:3:28","nodeType":"YulTypedName","src":"9001:3:28","type":""}]},{"body":{"nativeSrc":"9084:86:28","nodeType":"YulBlock","src":"9084:86:28","statements":[{"expression":{"arguments":[{"name":"dst","nativeSrc":"9105:3:28","nodeType":"YulIdentifier","src":"9105:3:28"},{"arguments":[{"name":"src","nativeSrc":"9123:3:28","nodeType":"YulIdentifier","src":"9123:3:28"}],"functionName":{"name":"calldataload","nativeSrc":"9110:12:28","nodeType":"YulIdentifier","src":"9110:12:28"},"nativeSrc":"9110:17:28","nodeType":"YulFunctionCall","src":"9110:17:28"}],"functionName":{"name":"mstore","nativeSrc":"9098:6:28","nodeType":"YulIdentifier","src":"9098:6:28"},"nativeSrc":"9098:30:28","nodeType":"YulFunctionCall","src":"9098:30:28"},"nativeSrc":"9098:30:28","nodeType":"YulExpressionStatement","src":"9098:30:28"},{"nativeSrc":"9141:19:28","nodeType":"YulAssignment","src":"9141:19:28","value":{"arguments":[{"name":"dst","nativeSrc":"9152:3:28","nodeType":"YulIdentifier","src":"9152:3:28"},{"name":"_1","nativeSrc":"9157:2:28","nodeType":"YulIdentifier","src":"9157:2:28"}],"functionName":{"name":"add","nativeSrc":"9148:3:28","nodeType":"YulIdentifier","src":"9148:3:28"},"nativeSrc":"9148:12:28","nodeType":"YulFunctionCall","src":"9148:12:28"},"variableNames":[{"name":"dst","nativeSrc":"9141:3:28","nodeType":"YulIdentifier","src":"9141:3:28"}]}]},"condition":{"arguments":[{"name":"src","nativeSrc":"9039:3:28","nodeType":"YulIdentifier","src":"9039:3:28"},{"name":"srcEnd","nativeSrc":"9044:6:28","nodeType":"YulIdentifier","src":"9044:6:28"}],"functionName":{"name":"lt","nativeSrc":"9036:2:28","nodeType":"YulIdentifier","src":"9036:2:28"},"nativeSrc":"9036:15:28","nodeType":"YulFunctionCall","src":"9036:15:28"},"nativeSrc":"9028:142:28","nodeType":"YulForLoop","post":{"nativeSrc":"9052:23:28","nodeType":"YulBlock","src":"9052:23:28","statements":[{"nativeSrc":"9054:19:28","nodeType":"YulAssignment","src":"9054:19:28","value":{"arguments":[{"name":"src","nativeSrc":"9065:3:28","nodeType":"YulIdentifier","src":"9065:3:28"},{"name":"_1","nativeSrc":"9070:2:28","nodeType":"YulIdentifier","src":"9070:2:28"}],"functionName":{"name":"add","nativeSrc":"9061:3:28","nodeType":"YulIdentifier","src":"9061:3:28"},"nativeSrc":"9061:12:28","nodeType":"YulFunctionCall","src":"9061:12:28"},"variableNames":[{"name":"src","nativeSrc":"9054:3:28","nodeType":"YulIdentifier","src":"9054:3:28"}]}]},"pre":{"nativeSrc":"9032:3:28","nodeType":"YulBlock","src":"9032:3:28","statements":[]},"src":"9028:142:28"},{"nativeSrc":"9179:15:28","nodeType":"YulAssignment","src":"9179:15:28","value":{"name":"dst_1","nativeSrc":"9189:5:28","nodeType":"YulIdentifier","src":"9189:5:28"},"variableNames":[{"name":"value2","nativeSrc":"9179:6:28","nodeType":"YulIdentifier","src":"9179:6:28"}]},{"nativeSrc":"9203:48:28","nodeType":"YulVariableDeclaration","src":"9203:48:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9236:9:28","nodeType":"YulIdentifier","src":"9236:9:28"},{"kind":"number","nativeSrc":"9247:2:28","nodeType":"YulLiteral","src":"9247:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9232:3:28","nodeType":"YulIdentifier","src":"9232:3:28"},"nativeSrc":"9232:18:28","nodeType":"YulFunctionCall","src":"9232:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"9219:12:28","nodeType":"YulIdentifier","src":"9219:12:28"},"nativeSrc":"9219:32:28","nodeType":"YulFunctionCall","src":"9219:32:28"},"variables":[{"name":"offset_1","nativeSrc":"9207:8:28","nodeType":"YulTypedName","src":"9207:8:28","type":""}]},{"body":{"nativeSrc":"9280:16:28","nodeType":"YulBlock","src":"9280:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9289:1:28","nodeType":"YulLiteral","src":"9289:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"9292:1:28","nodeType":"YulLiteral","src":"9292:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9282:6:28","nodeType":"YulIdentifier","src":"9282:6:28"},"nativeSrc":"9282:12:28","nodeType":"YulFunctionCall","src":"9282:12:28"},"nativeSrc":"9282:12:28","nodeType":"YulExpressionStatement","src":"9282:12:28"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"9266:8:28","nodeType":"YulIdentifier","src":"9266:8:28"},{"name":"_2","nativeSrc":"9276:2:28","nodeType":"YulIdentifier","src":"9276:2:28"}],"functionName":{"name":"gt","nativeSrc":"9263:2:28","nodeType":"YulIdentifier","src":"9263:2:28"},"nativeSrc":"9263:16:28","nodeType":"YulFunctionCall","src":"9263:16:28"},"nativeSrc":"9260:36:28","nodeType":"YulIf","src":"9260:36:28"},{"nativeSrc":"9305:73:28","nodeType":"YulAssignment","src":"9305:73:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9348:9:28","nodeType":"YulIdentifier","src":"9348:9:28"},{"name":"offset_1","nativeSrc":"9359:8:28","nodeType":"YulIdentifier","src":"9359:8:28"}],"functionName":{"name":"add","nativeSrc":"9344:3:28","nodeType":"YulIdentifier","src":"9344:3:28"},"nativeSrc":"9344:24:28","nodeType":"YulFunctionCall","src":"9344:24:28"},{"name":"dataEnd","nativeSrc":"9370:7:28","nodeType":"YulIdentifier","src":"9370:7:28"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nativeSrc":"9315:28:28","nodeType":"YulIdentifier","src":"9315:28:28"},"nativeSrc":"9315:63:28","nodeType":"YulFunctionCall","src":"9315:63:28"},"variableNames":[{"name":"value3","nativeSrc":"9305:6:28","nodeType":"YulIdentifier","src":"9305:6:28"}]},{"nativeSrc":"9387:49:28","nodeType":"YulVariableDeclaration","src":"9387:49:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9420:9:28","nodeType":"YulIdentifier","src":"9420:9:28"},{"kind":"number","nativeSrc":"9431:3:28","nodeType":"YulLiteral","src":"9431:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"9416:3:28","nodeType":"YulIdentifier","src":"9416:3:28"},"nativeSrc":"9416:19:28","nodeType":"YulFunctionCall","src":"9416:19:28"}],"functionName":{"name":"calldataload","nativeSrc":"9403:12:28","nodeType":"YulIdentifier","src":"9403:12:28"},"nativeSrc":"9403:33:28","nodeType":"YulFunctionCall","src":"9403:33:28"},"variables":[{"name":"offset_2","nativeSrc":"9391:8:28","nodeType":"YulTypedName","src":"9391:8:28","type":""}]},{"body":{"nativeSrc":"9465:16:28","nodeType":"YulBlock","src":"9465:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9474:1:28","nodeType":"YulLiteral","src":"9474:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"9477:1:28","nodeType":"YulLiteral","src":"9477:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9467:6:28","nodeType":"YulIdentifier","src":"9467:6:28"},"nativeSrc":"9467:12:28","nodeType":"YulFunctionCall","src":"9467:12:28"},"nativeSrc":"9467:12:28","nodeType":"YulExpressionStatement","src":"9467:12:28"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"9451:8:28","nodeType":"YulIdentifier","src":"9451:8:28"},{"name":"_2","nativeSrc":"9461:2:28","nodeType":"YulIdentifier","src":"9461:2:28"}],"functionName":{"name":"gt","nativeSrc":"9448:2:28","nodeType":"YulIdentifier","src":"9448:2:28"},"nativeSrc":"9448:16:28","nodeType":"YulFunctionCall","src":"9448:16:28"},"nativeSrc":"9445:36:28","nodeType":"YulIf","src":"9445:36:28"},{"nativeSrc":"9490:73:28","nodeType":"YulAssignment","src":"9490:73:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9533:9:28","nodeType":"YulIdentifier","src":"9533:9:28"},{"name":"offset_2","nativeSrc":"9544:8:28","nodeType":"YulIdentifier","src":"9544:8:28"}],"functionName":{"name":"add","nativeSrc":"9529:3:28","nodeType":"YulIdentifier","src":"9529:3:28"},"nativeSrc":"9529:24:28","nodeType":"YulFunctionCall","src":"9529:24:28"},{"name":"dataEnd","nativeSrc":"9555:7:28","nodeType":"YulIdentifier","src":"9555:7:28"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nativeSrc":"9500:28:28","nodeType":"YulIdentifier","src":"9500:28:28"},"nativeSrc":"9500:63:28","nodeType":"YulFunctionCall","src":"9500:63:28"},"variableNames":[{"name":"value4","nativeSrc":"9490:6:28","nodeType":"YulIdentifier","src":"9490:6:28"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32t_array$_t_bytes32_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr","nativeSrc":"8067:1502:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8214:9:28","nodeType":"YulTypedName","src":"8214:9:28","type":""},{"name":"dataEnd","nativeSrc":"8225:7:28","nodeType":"YulTypedName","src":"8225:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8237:6:28","nodeType":"YulTypedName","src":"8237:6:28","type":""},{"name":"value1","nativeSrc":"8245:6:28","nodeType":"YulTypedName","src":"8245:6:28","type":""},{"name":"value2","nativeSrc":"8253:6:28","nodeType":"YulTypedName","src":"8253:6:28","type":""},{"name":"value3","nativeSrc":"8261:6:28","nodeType":"YulTypedName","src":"8261:6:28","type":""},{"name":"value4","nativeSrc":"8269:6:28","nodeType":"YulTypedName","src":"8269:6:28","type":""}],"src":"8067:1502:28"},{"body":{"nativeSrc":"9635:339:28","nodeType":"YulBlock","src":"9635:339:28","statements":[{"nativeSrc":"9645:26:28","nodeType":"YulVariableDeclaration","src":"9645:26:28","value":{"arguments":[{"name":"value","nativeSrc":"9665:5:28","nodeType":"YulIdentifier","src":"9665:5:28"}],"functionName":{"name":"mload","nativeSrc":"9659:5:28","nodeType":"YulIdentifier","src":"9659:5:28"},"nativeSrc":"9659:12:28","nodeType":"YulFunctionCall","src":"9659:12:28"},"variables":[{"name":"length","nativeSrc":"9649:6:28","nodeType":"YulTypedName","src":"9649:6:28","type":""}]},{"nativeSrc":"9680:10:28","nodeType":"YulAssignment","src":"9680:10:28","value":{"name":"pos","nativeSrc":"9687:3:28","nodeType":"YulIdentifier","src":"9687:3:28"},"variableNames":[{"name":"pos","nativeSrc":"9680:3:28","nodeType":"YulIdentifier","src":"9680:3:28"}]},{"nativeSrc":"9699:14:28","nodeType":"YulVariableDeclaration","src":"9699:14:28","value":{"kind":"number","nativeSrc":"9709:4:28","nodeType":"YulLiteral","src":"9709:4:28","type":"","value":"0x20"},"variables":[{"name":"_1","nativeSrc":"9703:2:28","nodeType":"YulTypedName","src":"9703:2:28","type":""}]},{"nativeSrc":"9722:30:28","nodeType":"YulVariableDeclaration","src":"9722:30:28","value":{"arguments":[{"name":"value","nativeSrc":"9740:5:28","nodeType":"YulIdentifier","src":"9740:5:28"},{"kind":"number","nativeSrc":"9747:4:28","nodeType":"YulLiteral","src":"9747:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"9736:3:28","nodeType":"YulIdentifier","src":"9736:3:28"},"nativeSrc":"9736:16:28","nodeType":"YulFunctionCall","src":"9736:16:28"},"variables":[{"name":"srcPtr","nativeSrc":"9726:6:28","nodeType":"YulTypedName","src":"9726:6:28","type":""}]},{"nativeSrc":"9761:10:28","nodeType":"YulVariableDeclaration","src":"9761:10:28","value":{"kind":"number","nativeSrc":"9770:1:28","nodeType":"YulLiteral","src":"9770:1:28","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"9765:1:28","nodeType":"YulTypedName","src":"9765:1:28","type":""}]},{"body":{"nativeSrc":"9829:120:28","nodeType":"YulBlock","src":"9829:120:28","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"9850:3:28","nodeType":"YulIdentifier","src":"9850:3:28"},{"arguments":[{"name":"srcPtr","nativeSrc":"9861:6:28","nodeType":"YulIdentifier","src":"9861:6:28"}],"functionName":{"name":"mload","nativeSrc":"9855:5:28","nodeType":"YulIdentifier","src":"9855:5:28"},"nativeSrc":"9855:13:28","nodeType":"YulFunctionCall","src":"9855:13:28"}],"functionName":{"name":"mstore","nativeSrc":"9843:6:28","nodeType":"YulIdentifier","src":"9843:6:28"},"nativeSrc":"9843:26:28","nodeType":"YulFunctionCall","src":"9843:26:28"},"nativeSrc":"9843:26:28","nodeType":"YulExpressionStatement","src":"9843:26:28"},{"nativeSrc":"9882:19:28","nodeType":"YulAssignment","src":"9882:19:28","value":{"arguments":[{"name":"pos","nativeSrc":"9893:3:28","nodeType":"YulIdentifier","src":"9893:3:28"},{"name":"_1","nativeSrc":"9898:2:28","nodeType":"YulIdentifier","src":"9898:2:28"}],"functionName":{"name":"add","nativeSrc":"9889:3:28","nodeType":"YulIdentifier","src":"9889:3:28"},"nativeSrc":"9889:12:28","nodeType":"YulFunctionCall","src":"9889:12:28"},"variableNames":[{"name":"pos","nativeSrc":"9882:3:28","nodeType":"YulIdentifier","src":"9882:3:28"}]},{"nativeSrc":"9914:25:28","nodeType":"YulAssignment","src":"9914:25:28","value":{"arguments":[{"name":"srcPtr","nativeSrc":"9928:6:28","nodeType":"YulIdentifier","src":"9928:6:28"},{"name":"_1","nativeSrc":"9936:2:28","nodeType":"YulIdentifier","src":"9936:2:28"}],"functionName":{"name":"add","nativeSrc":"9924:3:28","nodeType":"YulIdentifier","src":"9924:3:28"},"nativeSrc":"9924:15:28","nodeType":"YulFunctionCall","src":"9924:15:28"},"variableNames":[{"name":"srcPtr","nativeSrc":"9914:6:28","nodeType":"YulIdentifier","src":"9914:6:28"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"9791:1:28","nodeType":"YulIdentifier","src":"9791:1:28"},{"name":"length","nativeSrc":"9794:6:28","nodeType":"YulIdentifier","src":"9794:6:28"}],"functionName":{"name":"lt","nativeSrc":"9788:2:28","nodeType":"YulIdentifier","src":"9788:2:28"},"nativeSrc":"9788:13:28","nodeType":"YulFunctionCall","src":"9788:13:28"},"nativeSrc":"9780:169:28","nodeType":"YulForLoop","post":{"nativeSrc":"9802:18:28","nodeType":"YulBlock","src":"9802:18:28","statements":[{"nativeSrc":"9804:14:28","nodeType":"YulAssignment","src":"9804:14:28","value":{"arguments":[{"name":"i","nativeSrc":"9813:1:28","nodeType":"YulIdentifier","src":"9813:1:28"},{"kind":"number","nativeSrc":"9816:1:28","nodeType":"YulLiteral","src":"9816:1:28","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"9809:3:28","nodeType":"YulIdentifier","src":"9809:3:28"},"nativeSrc":"9809:9:28","nodeType":"YulFunctionCall","src":"9809:9:28"},"variableNames":[{"name":"i","nativeSrc":"9804:1:28","nodeType":"YulIdentifier","src":"9804:1:28"}]}]},"pre":{"nativeSrc":"9784:3:28","nodeType":"YulBlock","src":"9784:3:28","statements":[]},"src":"9780:169:28"},{"nativeSrc":"9958:10:28","nodeType":"YulAssignment","src":"9958:10:28","value":{"name":"pos","nativeSrc":"9965:3:28","nodeType":"YulIdentifier","src":"9965:3:28"},"variableNames":[{"name":"end","nativeSrc":"9958:3:28","nodeType":"YulIdentifier","src":"9958:3:28"}]}]},"name":"abi_encode_array_uint256_dyn","nativeSrc":"9574:400:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"9612:5:28","nodeType":"YulTypedName","src":"9612:5:28","type":""},{"name":"pos","nativeSrc":"9619:3:28","nodeType":"YulTypedName","src":"9619:3:28","type":""}],"returnVariables":[{"name":"end","nativeSrc":"9627:3:28","nodeType":"YulTypedName","src":"9627:3:28","type":""}],"src":"9574:400:28"},{"body":{"nativeSrc":"10310:326:28","nodeType":"YulBlock","src":"10310:326:28","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"10327:3:28","nodeType":"YulIdentifier","src":"10327:3:28"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"10340:2:28","nodeType":"YulLiteral","src":"10340:2:28","type":"","value":"96"},{"name":"value0","nativeSrc":"10344:6:28","nodeType":"YulIdentifier","src":"10344:6:28"}],"functionName":{"name":"shl","nativeSrc":"10336:3:28","nodeType":"YulIdentifier","src":"10336:3:28"},"nativeSrc":"10336:15:28","nodeType":"YulFunctionCall","src":"10336:15:28"},{"kind":"number","nativeSrc":"10353:66:28","nodeType":"YulLiteral","src":"10353:66:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"10332:3:28","nodeType":"YulIdentifier","src":"10332:3:28"},"nativeSrc":"10332:88:28","nodeType":"YulFunctionCall","src":"10332:88:28"}],"functionName":{"name":"mstore","nativeSrc":"10320:6:28","nodeType":"YulIdentifier","src":"10320:6:28"},"nativeSrc":"10320:101:28","nodeType":"YulFunctionCall","src":"10320:101:28"},"nativeSrc":"10320:101:28","nodeType":"YulExpressionStatement","src":"10320:101:28"},{"nativeSrc":"10430:101:28","nodeType":"YulVariableDeclaration","src":"10430:101:28","value":{"arguments":[{"name":"value2","nativeSrc":"10472:6:28","nodeType":"YulIdentifier","src":"10472:6:28"},{"arguments":[{"name":"value1","nativeSrc":"10509:6:28","nodeType":"YulIdentifier","src":"10509:6:28"},{"arguments":[{"name":"pos","nativeSrc":"10521:3:28","nodeType":"YulIdentifier","src":"10521:3:28"},{"kind":"number","nativeSrc":"10526:2:28","nodeType":"YulLiteral","src":"10526:2:28","type":"","value":"20"}],"functionName":{"name":"add","nativeSrc":"10517:3:28","nodeType":"YulIdentifier","src":"10517:3:28"},"nativeSrc":"10517:12:28","nodeType":"YulFunctionCall","src":"10517:12:28"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nativeSrc":"10480:28:28","nodeType":"YulIdentifier","src":"10480:28:28"},"nativeSrc":"10480:50:28","nodeType":"YulFunctionCall","src":"10480:50:28"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nativeSrc":"10443:28:28","nodeType":"YulIdentifier","src":"10443:28:28"},"nativeSrc":"10443:88:28","nodeType":"YulFunctionCall","src":"10443:88:28"},"variables":[{"name":"pos_1","nativeSrc":"10434:5:28","nodeType":"YulTypedName","src":"10434:5:28","type":""}]},{"expression":{"arguments":[{"name":"pos_1","nativeSrc":"10547:5:28","nodeType":"YulIdentifier","src":"10547:5:28"},{"name":"value3","nativeSrc":"10554:6:28","nodeType":"YulIdentifier","src":"10554:6:28"}],"functionName":{"name":"mstore","nativeSrc":"10540:6:28","nodeType":"YulIdentifier","src":"10540:6:28"},"nativeSrc":"10540:21:28","nodeType":"YulFunctionCall","src":"10540:21:28"},"nativeSrc":"10540:21:28","nodeType":"YulExpressionStatement","src":"10540:21:28"},{"expression":{"arguments":[{"arguments":[{"name":"pos_1","nativeSrc":"10581:5:28","nodeType":"YulIdentifier","src":"10581:5:28"},{"kind":"number","nativeSrc":"10588:2:28","nodeType":"YulLiteral","src":"10588:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10577:3:28","nodeType":"YulIdentifier","src":"10577:3:28"},"nativeSrc":"10577:14:28","nodeType":"YulFunctionCall","src":"10577:14:28"},{"name":"value4","nativeSrc":"10593:6:28","nodeType":"YulIdentifier","src":"10593:6:28"}],"functionName":{"name":"mstore","nativeSrc":"10570:6:28","nodeType":"YulIdentifier","src":"10570:6:28"},"nativeSrc":"10570:30:28","nodeType":"YulFunctionCall","src":"10570:30:28"},"nativeSrc":"10570:30:28","nodeType":"YulExpressionStatement","src":"10570:30:28"},{"nativeSrc":"10609:21:28","nodeType":"YulAssignment","src":"10609:21:28","value":{"arguments":[{"name":"pos_1","nativeSrc":"10620:5:28","nodeType":"YulIdentifier","src":"10620:5:28"},{"kind":"number","nativeSrc":"10627:2:28","nodeType":"YulLiteral","src":"10627:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10616:3:28","nodeType":"YulIdentifier","src":"10616:3:28"},"nativeSrc":"10616:14:28","nodeType":"YulFunctionCall","src":"10616:14:28"},"variableNames":[{"name":"end","nativeSrc":"10609:3:28","nodeType":"YulIdentifier","src":"10609:3:28"}]}]},"name":"abi_encode_tuple_packed_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__nonPadded_inplace_fromStack_reversed","nativeSrc":"9979:657:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"10254:3:28","nodeType":"YulTypedName","src":"10254:3:28","type":""},{"name":"value4","nativeSrc":"10259:6:28","nodeType":"YulTypedName","src":"10259:6:28","type":""},{"name":"value3","nativeSrc":"10267:6:28","nodeType":"YulTypedName","src":"10267:6:28","type":""},{"name":"value2","nativeSrc":"10275:6:28","nodeType":"YulTypedName","src":"10275:6:28","type":""},{"name":"value1","nativeSrc":"10283:6:28","nodeType":"YulTypedName","src":"10283:6:28","type":""},{"name":"value0","nativeSrc":"10291:6:28","nodeType":"YulTypedName","src":"10291:6:28","type":""}],"returnVariables":[{"name":"end","nativeSrc":"10302:3:28","nodeType":"YulTypedName","src":"10302:3:28","type":""}],"src":"9979:657:28"},{"body":{"nativeSrc":"10954:439:28","nodeType":"YulBlock","src":"10954:439:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10971:9:28","nodeType":"YulIdentifier","src":"10971:9:28"},{"arguments":[{"name":"value0","nativeSrc":"10986:6:28","nodeType":"YulIdentifier","src":"10986:6:28"},{"kind":"number","nativeSrc":"10994:42:28","nodeType":"YulLiteral","src":"10994:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"10982:3:28","nodeType":"YulIdentifier","src":"10982:3:28"},"nativeSrc":"10982:55:28","nodeType":"YulFunctionCall","src":"10982:55:28"}],"functionName":{"name":"mstore","nativeSrc":"10964:6:28","nodeType":"YulIdentifier","src":"10964:6:28"},"nativeSrc":"10964:74:28","nodeType":"YulFunctionCall","src":"10964:74:28"},"nativeSrc":"10964:74:28","nodeType":"YulExpressionStatement","src":"10964:74:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11058:9:28","nodeType":"YulIdentifier","src":"11058:9:28"},{"kind":"number","nativeSrc":"11069:2:28","nodeType":"YulLiteral","src":"11069:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11054:3:28","nodeType":"YulIdentifier","src":"11054:3:28"},"nativeSrc":"11054:18:28","nodeType":"YulFunctionCall","src":"11054:18:28"},{"kind":"number","nativeSrc":"11074:3:28","nodeType":"YulLiteral","src":"11074:3:28","type":"","value":"160"}],"functionName":{"name":"mstore","nativeSrc":"11047:6:28","nodeType":"YulIdentifier","src":"11047:6:28"},"nativeSrc":"11047:31:28","nodeType":"YulFunctionCall","src":"11047:31:28"},"nativeSrc":"11047:31:28","nodeType":"YulExpressionStatement","src":"11047:31:28"},{"nativeSrc":"11087:82:28","nodeType":"YulVariableDeclaration","src":"11087:82:28","value":{"arguments":[{"name":"value1","nativeSrc":"11141:6:28","nodeType":"YulIdentifier","src":"11141:6:28"},{"arguments":[{"name":"headStart","nativeSrc":"11153:9:28","nodeType":"YulIdentifier","src":"11153:9:28"},{"kind":"number","nativeSrc":"11164:3:28","nodeType":"YulLiteral","src":"11164:3:28","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"11149:3:28","nodeType":"YulIdentifier","src":"11149:3:28"},"nativeSrc":"11149:19:28","nodeType":"YulFunctionCall","src":"11149:19:28"}],"functionName":{"name":"abi_encode_array_uint256_dyn_memory_ptr","nativeSrc":"11101:39:28","nodeType":"YulIdentifier","src":"11101:39:28"},"nativeSrc":"11101:68:28","nodeType":"YulFunctionCall","src":"11101:68:28"},"variables":[{"name":"tail_1","nativeSrc":"11091:6:28","nodeType":"YulTypedName","src":"11091:6:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11189:9:28","nodeType":"YulIdentifier","src":"11189:9:28"},{"kind":"number","nativeSrc":"11200:2:28","nodeType":"YulLiteral","src":"11200:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11185:3:28","nodeType":"YulIdentifier","src":"11185:3:28"},"nativeSrc":"11185:18:28","nodeType":"YulFunctionCall","src":"11185:18:28"},{"arguments":[{"name":"tail_1","nativeSrc":"11209:6:28","nodeType":"YulIdentifier","src":"11209:6:28"},{"name":"headStart","nativeSrc":"11217:9:28","nodeType":"YulIdentifier","src":"11217:9:28"}],"functionName":{"name":"sub","nativeSrc":"11205:3:28","nodeType":"YulIdentifier","src":"11205:3:28"},"nativeSrc":"11205:22:28","nodeType":"YulFunctionCall","src":"11205:22:28"}],"functionName":{"name":"mstore","nativeSrc":"11178:6:28","nodeType":"YulIdentifier","src":"11178:6:28"},"nativeSrc":"11178:50:28","nodeType":"YulFunctionCall","src":"11178:50:28"},"nativeSrc":"11178:50:28","nodeType":"YulExpressionStatement","src":"11178:50:28"},{"nativeSrc":"11237:63:28","nodeType":"YulAssignment","src":"11237:63:28","value":{"arguments":[{"name":"value2","nativeSrc":"11285:6:28","nodeType":"YulIdentifier","src":"11285:6:28"},{"name":"tail_1","nativeSrc":"11293:6:28","nodeType":"YulIdentifier","src":"11293:6:28"}],"functionName":{"name":"abi_encode_array_uint256_dyn_memory_ptr","nativeSrc":"11245:39:28","nodeType":"YulIdentifier","src":"11245:39:28"},"nativeSrc":"11245:55:28","nodeType":"YulFunctionCall","src":"11245:55:28"},"variableNames":[{"name":"tail","nativeSrc":"11237:4:28","nodeType":"YulIdentifier","src":"11237:4:28"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11320:9:28","nodeType":"YulIdentifier","src":"11320:9:28"},{"kind":"number","nativeSrc":"11331:2:28","nodeType":"YulLiteral","src":"11331:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"11316:3:28","nodeType":"YulIdentifier","src":"11316:3:28"},"nativeSrc":"11316:18:28","nodeType":"YulFunctionCall","src":"11316:18:28"},{"name":"value3","nativeSrc":"11336:6:28","nodeType":"YulIdentifier","src":"11336:6:28"}],"functionName":{"name":"mstore","nativeSrc":"11309:6:28","nodeType":"YulIdentifier","src":"11309:6:28"},"nativeSrc":"11309:34:28","nodeType":"YulFunctionCall","src":"11309:34:28"},"nativeSrc":"11309:34:28","nodeType":"YulExpressionStatement","src":"11309:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11363:9:28","nodeType":"YulIdentifier","src":"11363:9:28"},{"kind":"number","nativeSrc":"11374:3:28","nodeType":"YulLiteral","src":"11374:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"11359:3:28","nodeType":"YulIdentifier","src":"11359:3:28"},"nativeSrc":"11359:19:28","nodeType":"YulFunctionCall","src":"11359:19:28"},{"name":"value4","nativeSrc":"11380:6:28","nodeType":"YulIdentifier","src":"11380:6:28"}],"functionName":{"name":"mstore","nativeSrc":"11352:6:28","nodeType":"YulIdentifier","src":"11352:6:28"},"nativeSrc":"11352:35:28","nodeType":"YulFunctionCall","src":"11352:35:28"},"nativeSrc":"11352:35:28","nodeType":"YulExpressionStatement","src":"11352:35:28"}]},"name":"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__fromStack_reversed","nativeSrc":"10641:752:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10891:9:28","nodeType":"YulTypedName","src":"10891:9:28","type":""},{"name":"value4","nativeSrc":"10902:6:28","nodeType":"YulTypedName","src":"10902:6:28","type":""},{"name":"value3","nativeSrc":"10910:6:28","nodeType":"YulTypedName","src":"10910:6:28","type":""},{"name":"value2","nativeSrc":"10918:6:28","nodeType":"YulTypedName","src":"10918:6:28","type":""},{"name":"value1","nativeSrc":"10926:6:28","nodeType":"YulTypedName","src":"10926:6:28","type":""},{"name":"value0","nativeSrc":"10934:6:28","nodeType":"YulTypedName","src":"10934:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10945:4:28","nodeType":"YulTypedName","src":"10945:4:28","type":""}],"src":"10641:752:28"},{"body":{"nativeSrc":"11655:301:28","nodeType":"YulBlock","src":"11655:301:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11672:9:28","nodeType":"YulIdentifier","src":"11672:9:28"},{"name":"value0","nativeSrc":"11683:6:28","nodeType":"YulIdentifier","src":"11683:6:28"}],"functionName":{"name":"mstore","nativeSrc":"11665:6:28","nodeType":"YulIdentifier","src":"11665:6:28"},"nativeSrc":"11665:25:28","nodeType":"YulFunctionCall","src":"11665:25:28"},"nativeSrc":"11665:25:28","nodeType":"YulExpressionStatement","src":"11665:25:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11710:9:28","nodeType":"YulIdentifier","src":"11710:9:28"},{"kind":"number","nativeSrc":"11721:2:28","nodeType":"YulLiteral","src":"11721:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11706:3:28","nodeType":"YulIdentifier","src":"11706:3:28"},"nativeSrc":"11706:18:28","nodeType":"YulFunctionCall","src":"11706:18:28"},{"kind":"number","nativeSrc":"11726:2:28","nodeType":"YulLiteral","src":"11726:2:28","type":"","value":"96"}],"functionName":{"name":"mstore","nativeSrc":"11699:6:28","nodeType":"YulIdentifier","src":"11699:6:28"},"nativeSrc":"11699:30:28","nodeType":"YulFunctionCall","src":"11699:30:28"},"nativeSrc":"11699:30:28","nodeType":"YulExpressionStatement","src":"11699:30:28"},{"nativeSrc":"11738:81:28","nodeType":"YulVariableDeclaration","src":"11738:81:28","value":{"arguments":[{"name":"value1","nativeSrc":"11792:6:28","nodeType":"YulIdentifier","src":"11792:6:28"},{"arguments":[{"name":"headStart","nativeSrc":"11804:9:28","nodeType":"YulIdentifier","src":"11804:9:28"},{"kind":"number","nativeSrc":"11815:2:28","nodeType":"YulLiteral","src":"11815:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"11800:3:28","nodeType":"YulIdentifier","src":"11800:3:28"},"nativeSrc":"11800:18:28","nodeType":"YulFunctionCall","src":"11800:18:28"}],"functionName":{"name":"abi_encode_array_uint256_dyn_memory_ptr","nativeSrc":"11752:39:28","nodeType":"YulIdentifier","src":"11752:39:28"},"nativeSrc":"11752:67:28","nodeType":"YulFunctionCall","src":"11752:67:28"},"variables":[{"name":"tail_1","nativeSrc":"11742:6:28","nodeType":"YulTypedName","src":"11742:6:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11839:9:28","nodeType":"YulIdentifier","src":"11839:9:28"},{"kind":"number","nativeSrc":"11850:2:28","nodeType":"YulLiteral","src":"11850:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11835:3:28","nodeType":"YulIdentifier","src":"11835:3:28"},"nativeSrc":"11835:18:28","nodeType":"YulFunctionCall","src":"11835:18:28"},{"arguments":[{"name":"tail_1","nativeSrc":"11859:6:28","nodeType":"YulIdentifier","src":"11859:6:28"},{"name":"headStart","nativeSrc":"11867:9:28","nodeType":"YulIdentifier","src":"11867:9:28"}],"functionName":{"name":"sub","nativeSrc":"11855:3:28","nodeType":"YulIdentifier","src":"11855:3:28"},"nativeSrc":"11855:22:28","nodeType":"YulFunctionCall","src":"11855:22:28"}],"functionName":{"name":"mstore","nativeSrc":"11828:6:28","nodeType":"YulIdentifier","src":"11828:6:28"},"nativeSrc":"11828:50:28","nodeType":"YulFunctionCall","src":"11828:50:28"},"nativeSrc":"11828:50:28","nodeType":"YulExpressionStatement","src":"11828:50:28"},{"nativeSrc":"11887:63:28","nodeType":"YulAssignment","src":"11887:63:28","value":{"arguments":[{"name":"value2","nativeSrc":"11935:6:28","nodeType":"YulIdentifier","src":"11935:6:28"},{"name":"tail_1","nativeSrc":"11943:6:28","nodeType":"YulIdentifier","src":"11943:6:28"}],"functionName":{"name":"abi_encode_array_uint256_dyn_memory_ptr","nativeSrc":"11895:39:28","nodeType":"YulIdentifier","src":"11895:39:28"},"nativeSrc":"11895:55:28","nodeType":"YulFunctionCall","src":"11895:55:28"},"variableNames":[{"name":"tail","nativeSrc":"11887:4:28","nodeType":"YulIdentifier","src":"11887:4:28"}]}]},"name":"abi_encode_tuple_t_uint256_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_uint256_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"11398:558:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11608:9:28","nodeType":"YulTypedName","src":"11608:9:28","type":""},{"name":"value2","nativeSrc":"11619:6:28","nodeType":"YulTypedName","src":"11619:6:28","type":""},{"name":"value1","nativeSrc":"11627:6:28","nodeType":"YulTypedName","src":"11627:6:28","type":""},{"name":"value0","nativeSrc":"11635:6:28","nodeType":"YulTypedName","src":"11635:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11646:4:28","nodeType":"YulTypedName","src":"11646:4:28","type":""}],"src":"11398:558:28"},{"body":{"nativeSrc":"11993:152:28","nodeType":"YulBlock","src":"11993:152:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"12010:1:28","nodeType":"YulLiteral","src":"12010:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"12013:77:28","nodeType":"YulLiteral","src":"12013:77:28","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"12003:6:28","nodeType":"YulIdentifier","src":"12003:6:28"},"nativeSrc":"12003:88:28","nodeType":"YulFunctionCall","src":"12003:88:28"},"nativeSrc":"12003:88:28","nodeType":"YulExpressionStatement","src":"12003:88:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"12107:1:28","nodeType":"YulLiteral","src":"12107:1:28","type":"","value":"4"},{"kind":"number","nativeSrc":"12110:4:28","nodeType":"YulLiteral","src":"12110:4:28","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"12100:6:28","nodeType":"YulIdentifier","src":"12100:6:28"},"nativeSrc":"12100:15:28","nodeType":"YulFunctionCall","src":"12100:15:28"},"nativeSrc":"12100:15:28","nodeType":"YulExpressionStatement","src":"12100:15:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"12131:1:28","nodeType":"YulLiteral","src":"12131:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"12134:4:28","nodeType":"YulLiteral","src":"12134:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"12124:6:28","nodeType":"YulIdentifier","src":"12124:6:28"},"nativeSrc":"12124:15:28","nodeType":"YulFunctionCall","src":"12124:15:28"},"nativeSrc":"12124:15:28","nodeType":"YulExpressionStatement","src":"12124:15:28"}]},"name":"panic_error_0x32","nativeSrc":"11961:184:28","nodeType":"YulFunctionDefinition","src":"11961:184:28"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_IERC20_$937__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_contract$_IERC1155Mintable_$842__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value3_1, value4_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff00000000000000000000000000000000000000000000000000000000))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_bytes_calldata_ptrt_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n        value3 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_array_uint256_dyn_memory_ptr(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, 0x20)\n        let srcPtr := add(value, 0x20)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), 128)\n        let tail_1 := abi_encode_array_uint256_dyn_memory_ptr(value1, add(headStart, 128))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn_memory_ptr(value2, tail_1)\n        mstore(add(headStart, 96), sub(tail_2, headStart))\n        mstore(tail_2, 0)\n        tail := add(tail_2, 32)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_bytes32_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_bytes32_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, 0x20)\n        let srcEnd := add(add(offset, shl(5, _1)), 0x20)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, 0x20)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_bytes32t_bytes32t_array$_t_bytes32_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let _1 := 32\n        value1 := calldataload(add(headStart, _1))\n        let offset := calldataload(add(headStart, 64))\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := calldataload(_3)\n        let dst := allocate_memory(array_allocation_size_array_bytes32_dyn(_4))\n        let dst_1 := dst\n        mstore(dst, _4)\n        dst := add(dst, _1)\n        let srcEnd := add(add(_3, shl(5, _4)), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _1)\n        }\n        value2 := dst_1\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _2) { revert(0, 0) }\n        value3 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _2) { revert(0, 0) }\n        value4 := abi_decode_array_uint256_dyn(add(headStart, offset_2), dataEnd)\n    }\n    function abi_encode_array_uint256_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        pos := pos\n        let _1 := 0x20\n        let srcPtr := add(value, 0x20)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_packed_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value4, value3, value2, value1, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        let pos_1 := abi_encode_array_uint256_dyn(value2, abi_encode_array_uint256_dyn(value1, add(pos, 20)))\n        mstore(pos_1, value3)\n        mstore(add(pos_1, 32), value4)\n        end := add(pos_1, 64)\n    }\n    function abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), 160)\n        let tail_1 := abi_encode_array_uint256_dyn_memory_ptr(value1, add(headStart, 160))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn_memory_ptr(value2, tail_1)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_encode_tuple_t_uint256_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_uint256_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), 96)\n        let tail_1 := abi_encode_array_uint256_dyn_memory_ptr(value1, add(headStart, 96))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn_memory_ptr(value2, tail_1)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n}","id":28,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"591":[{"length":32,"start":346},{"length":32,"start":545},{"length":32,"start":3292},{"length":32,"start":3428}],"2034":[{"length":32,"start":427},{"length":32,"start":1388},{"length":32,"start":1817}],"2037":[{"length":32,"start":273},{"length":32,"start":1135},{"length":32,"start":1261},{"length":32,"start":1644}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100df5760003560e01c80634fc358591161008c5780638da5cb5b116100665780638da5cb5b14610271578063ae6dead714610279578063cc3c0f061461029c578063f2fde38b146102bf57600080fd5b80634fc35859146101cd578063572b6c05146102115780638bd8d0a91461025e57600080fd5b80633323c807116100bd5780633323c8071461017e5780633572aa8d146101935780633a5af339146101a657600080fd5b806301ffc9a7146100e45780631352acac1461010c5780632b4c9f1614610158575b600080fd5b6100f76100f2366004610e6b565b6102d2565b60405190151581526020015b60405180910390f35b6101337f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610103565b7f0000000000000000000000000000000000000000000000000000000000000000610133565b61019161018c366004610ead565b6102ec565b005b6101916101a1366004610ead565b6103b7565b6101337f000000000000000000000000000000000000000000000000000000000000000081565b6101e06101db366004610f38565b61046b565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610103565b6100f761021f366004610fa7565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b61019161026c366004610fc2565b610605565b61013361078c565b6100f7610287366004610ead565b60006020819052908152604090205460ff1681565b6100f76102aa366004610ead565b60016020526000908152604090205460ff1681565b6101916102cd366004610fa7565b6107b8565b60006102e6826102e06107d6565b90610804565b92915050565b6103056102f76108de565b6102ff6108e8565b90610916565b60008181526020819052604090205460ff1615610356576040517f5d35de37000000000000000000000000000000000000000000000000000000008152600481018290526024015b60405180910390fd5b60008181526020819052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555182917fbdd203dd78bf49cf79e4db0ecdf7d27adc380fb1f33beef2667a50db9d2a0e0491a250565b6103c26102f76108de565b60008181526020819052604090205460ff1661040d576040517f6d8257430000000000000000000000000000000000000000000000000000000081526004810182905260240161034d565b60008181526020819052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555182917f578eab65d47cffa57066b105301289ff86bfdc0adc2a701c3356d2a6eb6a612391a250565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331461051a576040517f6c50e90500000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016602482015260440161034d565b8360008061052a88878786610985565b6040517f0d6a5bbb000000000000000000000000000000000000000000000000000000008152919350915073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690630d6a5bbb906105a5908b9086908690600401611058565b600060405180830381600087803b1580156105bf57600080fd5b505af11580156105d3573d6000803e3d6000fd5b507f4fc35859000000000000000000000000000000000000000000000000000000009c9b505050505050505050505050565b60008061061486868686610985565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152306024830152604482018790529294509092507f0000000000000000000000000000000000000000000000000000000000000000909116906323b872dd906064016020604051808303816000875af11580156106b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106db91906110b5565b506040517f0d6a5bbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690630d6a5bbb9061075290899086908690600401611058565b600060405180830381600087803b15801561076c57600080fd5b505af1158015610780573d6000803e3d6000fd5b50505050505050505050565b60006107b36107996108e8565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b6107d36107c36108de565b826107cc6108e8565b9190610b84565b50565b6000806102e660017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6110d7565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610854575060006102e6565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016108a5575060016102e6565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b60006107b3610c99565b6000806102e660017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd6110d7565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610981576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260240161034d565b5050565b60608060008080808061099a898b018b611222565b6000858152602081905260409020549499509297509095509350915060ff166109f2576040517f6d8257430000000000000000000000000000000000000000000000000000000081526004810186905260240161034d565b60008b83838b88604051602001610a0d95949392919061133a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000818152600190935291205490915060ff1615610a97578b83838b886040517ff048f37a00000000000000000000000000000000000000000000000000000000815260040161034d95949392919061138e565b610aa2848783610de0565b610ae2578b83838b886040517fdbf2ac7c00000000000000000000000000000000000000000000000000000000815260040161034d95949392919061138e565b60008181526001602081905260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690911790555173ffffffffffffffffffffffffffffffffffffffff8d1690869088907fbf561a0ae8123352abf33f8f113e6b265c2e7fe7ba9b4d450750454bcbb7233a90610b6b908e90899089906113e4565b60405180910390a450909a909950975050505050505050565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610bf1576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161034d565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c935783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b600033321480610ca95750601836105b15610cb357503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480610dcf57506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa158015610dab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcf91906110b5565b15610dd957919050565b3391505090565b600082610ded8584610df6565b14949350505050565b600081815b8451811015610e3157610e2782868381518110610e1a57610e1a611419565b6020026020010151610e39565b9150600101610dfb565b509392505050565b6000818310610e55576000828152602084905260409020610e64565b60008381526020839052604090205b9392505050565b600060208284031215610e7d57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610e6457600080fd5b600060208284031215610ebf57600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610eea57600080fd5b919050565b60008083601f840112610f0157600080fd5b50813567ffffffffffffffff811115610f1957600080fd5b602083019150836020828501011115610f3157600080fd5b9250929050565b600080600080600060808688031215610f5057600080fd5b610f5986610ec6565b9450610f6760208701610ec6565b935060408601359250606086013567ffffffffffffffff811115610f8a57600080fd5b610f9688828901610eef565b969995985093965092949392505050565b600060208284031215610fb957600080fd5b610e6482610ec6565b60008060008060608587031215610fd857600080fd5b610fe185610ec6565b9350602085013567ffffffffffffffff811115610ffd57600080fd5b61100987828801610eef565b9598909750949560400135949350505050565b60008151808452602080850194506020840160005b8381101561104d57815187529582019590820190600101611031565b509495945050505050565b73ffffffffffffffffffffffffffffffffffffffff84168152608060208201526000611087608083018561101c565b8281036040840152611099818561101c565b8381036060909401939093525050600081526020019392505050565b6000602082840312156110c757600080fd5b81518015158114610e6457600080fd5b818103818111156102e6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561118757611187611111565b604052919050565b600067ffffffffffffffff8211156111a9576111a9611111565b5060051b60200190565b600082601f8301126111c457600080fd5b813560206111d96111d48361118f565b611140565b8083825260208201915060208460051b8701019350868411156111fb57600080fd5b602086015b848110156112175780358352918301918301611200565b509695505050505050565b600080600080600060a0868803121561123a57600080fd5b853594506020808701359450604087013567ffffffffffffffff8082111561126157600080fd5b818901915089601f83011261127557600080fd5b81356112836111d48261118f565b81815260059190911b8301840190848101908c8311156112a257600080fd5b938501935b828510156112c0578435825293850193908501906112a7565b9750505060608901359250808311156112d857600080fd5b6112e48a848b016111b3565b945060808901359250808311156112fa57600080fd5b5050611308888289016111b3565b9150509295509295909350565b8051600090602080840183831561104d57815187529582019590820190600101611031565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008660601b168152600061137a6113746014840188611315565b86611315565b938452505060208201526040019392505050565b73ffffffffffffffffffffffffffffffffffffffff8616815260a0602082015260006113bd60a083018761101c565b82810360408401526113cf818761101c565b60608401959095525050608001529392505050565b8381526060602082015260006113fd606083018561101c565b828103604084015261140f818561101c565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220b1b2767e8d44a05f221e6e66d7f0339aae457b98b484f00ed1999f5a9caf93ad64736f6c63430008160033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xDF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4FC35859 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x271 JUMPI DUP1 PUSH4 0xAE6DEAD7 EQ PUSH2 0x279 JUMPI DUP1 PUSH4 0xCC3C0F06 EQ PUSH2 0x29C JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4FC35859 EQ PUSH2 0x1CD JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x211 JUMPI DUP1 PUSH4 0x8BD8D0A9 EQ PUSH2 0x25E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3323C807 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0x3323C807 EQ PUSH2 0x17E JUMPI DUP1 PUSH4 0x3572AA8D EQ PUSH2 0x193 JUMPI DUP1 PUSH4 0x3A5AF339 EQ PUSH2 0x1A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xE4 JUMPI DUP1 PUSH4 0x1352ACAC EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x158 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF7 PUSH2 0xF2 CALLDATASIZE PUSH1 0x4 PUSH2 0xE6B JUMP JUMPDEST PUSH2 0x2D2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x133 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x103 JUMP JUMPDEST PUSH32 0x0 PUSH2 0x133 JUMP JUMPDEST PUSH2 0x191 PUSH2 0x18C CALLDATASIZE PUSH1 0x4 PUSH2 0xEAD JUMP JUMPDEST PUSH2 0x2EC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x191 PUSH2 0x1A1 CALLDATASIZE PUSH1 0x4 PUSH2 0xEAD JUMP JUMPDEST PUSH2 0x3B7 JUMP JUMPDEST PUSH2 0x133 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1E0 PUSH2 0x1DB CALLDATASIZE PUSH1 0x4 PUSH2 0xF38 JUMP JUMPDEST PUSH2 0x46B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x103 JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x21F CALLDATASIZE PUSH1 0x4 PUSH2 0xFA7 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x191 PUSH2 0x26C CALLDATASIZE PUSH1 0x4 PUSH2 0xFC2 JUMP JUMPDEST PUSH2 0x605 JUMP JUMPDEST PUSH2 0x133 PUSH2 0x78C JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x287 CALLDATASIZE PUSH1 0x4 PUSH2 0xEAD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x2AA CALLDATASIZE PUSH1 0x4 PUSH2 0xEAD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x191 PUSH2 0x2CD CALLDATASIZE PUSH1 0x4 PUSH2 0xFA7 JUMP JUMPDEST PUSH2 0x7B8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E6 DUP3 PUSH2 0x2E0 PUSH2 0x7D6 JUMP JUMPDEST SWAP1 PUSH2 0x804 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x305 PUSH2 0x2F7 PUSH2 0x8DE JUMP JUMPDEST PUSH2 0x2FF PUSH2 0x8E8 JUMP JUMPDEST SWAP1 PUSH2 0x916 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x356 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5D35DE3700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD DUP3 SWAP2 PUSH32 0xBDD203DD78BF49CF79E4DB0ECDF7D27ADC380FB1F33BEEF2667A50DB9D2A0E04 SWAP2 LOG2 POP JUMP JUMPDEST PUSH2 0x3C2 PUSH2 0x2F7 PUSH2 0x8DE JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x40D JUMPI PUSH1 0x40 MLOAD PUSH32 0x6D82574300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x34D JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE MLOAD DUP3 SWAP2 PUSH32 0x578EAB65D47CFFA57066B105301289FF86BFDC0ADC2A701C3356D2A6EB6A6123 SWAP2 LOG2 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x51A JUMPI PUSH1 0x40 MLOAD PUSH32 0x6C50E90500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x34D JUMP JUMPDEST DUP4 PUSH1 0x0 DUP1 PUSH2 0x52A DUP9 DUP8 DUP8 DUP7 PUSH2 0x985 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xD6A5BBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 SWAP4 POP SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xD6A5BBB SWAP1 PUSH2 0x5A5 SWAP1 DUP12 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x1058 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5D3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH32 0x4FC3585900000000000000000000000000000000000000000000000000000000 SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x614 DUP7 DUP7 DUP7 DUP7 PUSH2 0x985 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE ADDRESS PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP8 SWAP1 MSTORE SWAP3 SWAP5 POP SWAP1 SWAP3 POP PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6DB SWAP2 SWAP1 PUSH2 0x10B5 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0xD6A5BBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xD6A5BBB SWAP1 PUSH2 0x752 SWAP1 DUP10 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x1058 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x76C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x780 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7B3 PUSH2 0x799 PUSH2 0x8E8 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7D3 PUSH2 0x7C3 PUSH2 0x8DE JUMP JUMPDEST DUP3 PUSH2 0x7CC PUSH2 0x8E8 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xB84 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2E6 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x10D7 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x854 JUMPI POP PUSH1 0x0 PUSH2 0x2E6 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x8A5 JUMPI POP PUSH1 0x1 PUSH2 0x2E6 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7B3 PUSH2 0xC99 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2E6 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x10D7 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x981 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x34D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 PUSH2 0x99A DUP10 DUP12 ADD DUP12 PUSH2 0x1222 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP5 SWAP10 POP SWAP3 SWAP8 POP SWAP1 SWAP6 POP SWAP4 POP SWAP2 POP PUSH1 0xFF AND PUSH2 0x9F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6D82574300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x34D JUMP JUMPDEST PUSH1 0x0 DUP12 DUP4 DUP4 DUP12 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xA0D SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x133A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP4 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0xA97 JUMPI DUP12 DUP4 DUP4 DUP12 DUP9 PUSH1 0x40 MLOAD PUSH32 0xF048F37A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x34D SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x138E JUMP JUMPDEST PUSH2 0xAA2 DUP5 DUP8 DUP4 PUSH2 0xDE0 JUMP JUMPDEST PUSH2 0xAE2 JUMPI DUP12 DUP4 DUP4 DUP12 DUP9 PUSH1 0x40 MLOAD PUSH32 0xDBF2AC7C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x34D SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x138E JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SWAP2 OR SWAP1 SSTORE MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP14 AND SWAP1 DUP7 SWAP1 DUP9 SWAP1 PUSH32 0xBF561A0AE8123352ABF33F8F113E6B265C2E7FE7BA9B4D450750454BCBB7233A SWAP1 PUSH2 0xB6B SWAP1 DUP15 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH2 0x13E4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP SWAP1 SWAP11 SWAP1 SWAP10 POP SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xBF1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x34D JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC93 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xCA9 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xCB3 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xDCF JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDAB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDCF SWAP2 SWAP1 PUSH2 0x10B5 JUMP JUMPDEST ISZERO PUSH2 0xDD9 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xDED DUP6 DUP5 PUSH2 0xDF6 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xE31 JUMPI PUSH2 0xE27 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xE1A JUMPI PUSH2 0xE1A PUSH2 0x1419 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xE39 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0xDFB JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xE55 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xE64 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xE64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xEEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xF01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xF31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xF50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF59 DUP7 PUSH2 0xEC6 JUMP JUMPDEST SWAP5 POP PUSH2 0xF67 PUSH1 0x20 DUP8 ADD PUSH2 0xEC6 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF96 DUP9 DUP3 DUP10 ADD PUSH2 0xEEF JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE64 DUP3 PUSH2 0xEC6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xFD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFE1 DUP6 PUSH2 0xEC6 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xFFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1009 DUP8 DUP3 DUP9 ADD PUSH2 0xEEF JUMP JUMPDEST SWAP6 SWAP9 SWAP1 SWAP8 POP SWAP5 SWAP6 PUSH1 0x40 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x104D JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1031 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1087 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x101C JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1099 DUP2 DUP6 PUSH2 0x101C JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x60 SWAP1 SWAP5 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xE64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x2E6 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1187 JUMPI PUSH2 0x1187 PUSH2 0x1111 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x11A9 JUMPI PUSH2 0x11A9 PUSH2 0x1111 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x11C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x11D9 PUSH2 0x11D4 DUP4 PUSH2 0x118F JUMP JUMPDEST PUSH2 0x1140 JUMP JUMPDEST DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP5 PUSH1 0x5 SHL DUP8 ADD ADD SWAP4 POP DUP7 DUP5 GT ISZERO PUSH2 0x11FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1217 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x1200 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x123A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP1 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1261 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP10 ADD SWAP2 POP DUP10 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1283 PUSH2 0x11D4 DUP3 PUSH2 0x118F JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP4 ADD DUP5 ADD SWAP1 DUP5 DUP2 ADD SWAP1 DUP13 DUP4 GT ISZERO PUSH2 0x12A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x12C0 JUMPI DUP5 CALLDATALOAD DUP3 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP1 DUP6 ADD SWAP1 PUSH2 0x12A7 JUMP JUMPDEST SWAP8 POP POP POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP3 POP DUP1 DUP4 GT ISZERO PUSH2 0x12D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12E4 DUP11 DUP5 DUP12 ADD PUSH2 0x11B3 JUMP JUMPDEST SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD SWAP3 POP DUP1 DUP4 GT ISZERO PUSH2 0x12FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH2 0x1308 DUP9 DUP3 DUP10 ADD PUSH2 0x11B3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x20 DUP1 DUP5 ADD DUP4 DUP4 ISZERO PUSH2 0x104D JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1031 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP7 PUSH1 0x60 SHL AND DUP2 MSTORE PUSH1 0x0 PUSH2 0x137A PUSH2 0x1374 PUSH1 0x14 DUP5 ADD DUP9 PUSH2 0x1315 JUMP JUMPDEST DUP7 PUSH2 0x1315 JUMP JUMPDEST SWAP4 DUP5 MSTORE POP POP PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0xA0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x13BD PUSH1 0xA0 DUP4 ADD DUP8 PUSH2 0x101C JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x13CF DUP2 DUP8 PUSH2 0x101C JUMP JUMPDEST PUSH1 0x60 DUP5 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP PUSH1 0x80 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x13FD PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x101C JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x140F DUP2 DUP6 PUSH2 0x101C JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB1 0xB2 PUSH23 0x7E8D44A05F221E6E66D7F0339AAE457B98B484F00ED199 SWAP16 GAS SWAP13 0xAF SWAP4 0xAD PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"1226:4173:27:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:7;;;;;;:::i;:::-;;:::i;:::-;;;516:14:28;;509:22;491:41;;479:2;464:18;542:165:7;;;;;;;;1584:36:27;;;;;;;;733:42:28;721:55;;;703:74;;691:2;676:18;1584:36:27;543:240:28;728:115:11;817:19;728:115;;4806:289:27;;;;;;:::i;:::-;;:::i;:::-;;5101:296;;;;;;:::i;:::-;;:::i;1529:49::-;;;;;3035:503;;;;;;:::i;:::-;;:::i;:::-;;;2843:66:28;2831:79;;;2813:98;;2801:2;2786:18;3035:503:27;2669:248:28;878:149:11;;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;4473:327:27;;;;;;:::i;:::-;;:::i;710:120:1:-;;;:::i;1440:37:27:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1483:39;;;;;;:::i;:::-;;;;;;;;;;;;;;;;864:152:1;;;;;;:::i;:::-;;:::i;542:165:7:-;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:7:o;4806:289:27:-;4866:70;4923:12;:10;:12::i;:::-;4866:33;:31;:33::i;:::-;:56;;:70::i;:::-;4950:5;:17;;;;;;;;;;;;;4946:65;;;4976:35;;;;;;;;4046:25:28;;;4019:18;;4976:35:27;;;;;;;;4946:65;5022:5;:17;;;;;;;;;;;:24;;;;5042:4;5022:24;;;5061:27;5028:10;;5061:27;;;4806:289;:::o;5101:296::-;5167:70;5224:12;:10;:12::i;5167:70::-;5252:5;:17;;;;;;;;;;;;;5247:60;;5278:29;;;;;;;;4046:25:28;;;4019:18;;5278:29:27;3900:177:28;5247:60:27;5338:5;5318:17;;;;;;;;;;;:25;;;;;;5358:32;5324:10;;5358:32;;;5101:296;:::o;3035:503::-;3155:17;3196:12;3188:35;;3213:10;3188:35;3184:102;;3232:54;;;;;3252:10;3232:54;;;4317:34:28;4266:42;3272:12:27;4387:15:28;4367:18;;;4360:43;4229:18;;3232:54:27;4082:327:28;3184:102:27;3311:5;3297:11;;3377:34;3395:4;3401;;3311:5;3377:17;:34::i;:::-;3422:52;;;;;3327:84;;-1:-1:-1;3327:84:27;-1:-1:-1;3422:29:27;:15;:29;;;;:52;;3452:4;;3327:84;;;;3422:52;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3492:39:27;;3035:503;-1:-1:-1;;;;;;;;;;;;3035:503:27:o;4473:327::-;4566:20;4588:23;4615:44;4633:9;4644;;4655:3;4615:17;:44::i;:::-;4670:56;;;;;:25;5987:15:28;;;4670:56:27;;;5969:34:28;4715:4:27;6019:18:28;;;6012:43;6071:18;;;6064:34;;;4565:94:27;;-1:-1:-1;4565:94:27;;-1:-1:-1;4670:12:27;:25;;;;;;5881:18:28;;4670:56:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;4736:57:27;;;;;:29;:15;:29;;;;:57;;4766:9;;4777:3;;4782:6;;4736:57;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4555:245;;4473:327;;;;:::o;710:120:1:-;756:7;782:41;:33;:31;:33::i;:::-;3652:15:6;;;;3556:118;782:41:1;775:48;;710:120;:::o;864:152::-;934:75;986:12;:10;:12::i;:::-;1000:8;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;864:152;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:10;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:10;1620:11;;1560:82;-1:-1:-1;1658:34:10;;:21;:34;;;;;;;;;;;;;;;1359:340::o;2621:175:27:-;2722:7;2748:41;:39;:41::i;5065:174:6:-;5106:16;;926:71;996:1;934:58;926:71;:::i;4413:162::-;4519:15;;;4508:26;;;4519:15;;4508:26;4504:64;;4543:25;;;;;733:42:28;721:55;;4543:25:6;;;703:74:28;676:18;;4543:25:6;543:240:28;4504:64:6;4413:162;;:::o;3544:923:27:-;3677:20;;3735:18;;;;;3847:108;;;;3871:9;3847:108;:::i;:::-;3970:5;:17;;;;;;;;;;;3734:221;;-1:-1:-1;3734:221:27;;-1:-1:-1;3734:221:27;;-1:-1:-1;3734:221:27;-1:-1:-1;3734:221:27;-1:-1:-1;3970:17:27;;3965:60;;3996:29;;;;;;;;4046:25:28;;;4019:18;;3996:29:27;3900:177:28;3965:60:27;4036:12;4078:9;4089:4;4095:7;4104:3;4109:7;4061:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;4051:67;;4061:56;4051:67;;;;4133:13;;;;:7;:13;;;;;;4051:67;;-1:-1:-1;4133:13:27;;4129:80;;;4170:9;4181:4;4187:7;4196:3;4201:7;4155:54;;;;;;;;;;;;;;;:::i;4129:80::-;4224:30;:5;4237:10;4249:4;4224:12;:30::i;:::-;4219:96;;4276:9;4287:4;4293:7;4302:3;4307:7;4263:52;;;;;;;;;;;;;;;:::i;4219:96::-;4326:13;;;;4342:4;4326:13;;;;;;;;;:20;;;;;;;;;4362:65;;;;;4388:7;;4376:10;;4362:65;;;;4397:3;;4413:4;;4419:7;;4362:65;:::i;:::-;;;;;;;;-1:-1:-1;4446:4:27;;;;-1:-1:-1;3544:923:27;-1:-1:-1;;;;;;;;3544:923:27:o;3060:369:6:-;3182:15;;;;;;;3211:23;;;;3207:60;;3243:24;;;;;733:42:28;721:55;;3243:24:6;;;703:74:28;676:18;;3243:24:6;543:240:28;3207:60:6;3298:8;3281:25;;:13;:25;;;3277:146;;3322:26;;;;;;;;;;;;;3367:45;;;;;;;;-1:-1:-1;;3367:45:6;3277:146;3148:281;3060:369;;;:::o;784:745:12:-;837:7;1047:10;1061:9;1047:23;;:47;;-1:-1:-1;1092:2:12;1074:8;:20;1047:47;1043:95;;;-1:-1:-1;1117:10:12;;784:745::o;1043:95::-;462:23:15;466:14;462:23;449:37;445:2;441:46;1372:19:12;1350:42;;:10;:42;;:105;;-1:-1:-1;1396:59:12;;;;;:39;4335:15:28;;;1396:59:12;;;4317:34:28;1444:10:12;4367:18:28;;;4360:43;1396:19:12;:39;;;;4229:18:28;;1396:59:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1346:149;;;1478:6;784:745;-1:-1:-1;784:745:12:o;1346:149::-;1512:10;1505:17;;;784:745;:::o;1156:154:25:-;1247:4;1299;1270:25;1283:5;1290:4;1270:12;:25::i;:::-;:33;;1156:154;-1:-1:-1;;;;1156:154:25:o;1934:290::-;2017:7;2059:4;2017:7;2073:116;2097:5;:12;2093:1;:16;2073:116;;;2145:33;2155:12;2169:5;2175:1;2169:8;;;;;;;;:::i;:::-;;;;;;;2145:9;:33::i;:::-;2130:48;-1:-1:-1;2111:3:25;;2073:116;;;-1:-1:-1;2205:12:25;1934:290;-1:-1:-1;;;1934:290:25:o;9205:147::-;9268:7;9298:1;9294;:5;:51;;9426:13;9517:15;;;9552:4;9545:15;;;9598:4;9582:21;;9294:51;;;9426:13;9517:15;;;9552:4;9545:15;;;9598:4;9582:21;;9302:20;9287:58;9205:147;-1:-1:-1;;;9205:147:25:o;14:332:28:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;1045:180;1104:6;1157:2;1145:9;1136:7;1132:23;1128:32;1125:52;;;1173:1;1170;1163:12;1125:52;-1:-1:-1;1196:23:28;;1045:180;-1:-1:-1;1045:180:28:o;1485:196::-;1553:20;;1613:42;1602:54;;1592:65;;1582:93;;1671:1;1668;1661:12;1582:93;1485:196;;;:::o;1686:347::-;1737:8;1747:6;1801:3;1794:4;1786:6;1782:17;1778:27;1768:55;;1819:1;1816;1809:12;1768:55;-1:-1:-1;1842:20:28;;1885:18;1874:30;;1871:50;;;1917:1;1914;1907:12;1871:50;1954:4;1946:6;1942:17;1930:29;;2006:3;1999:4;1990:6;1982;1978:19;1974:30;1971:39;1968:59;;;2023:1;2020;2013:12;1968:59;1686:347;;;;;:::o;2038:626::-;2135:6;2143;2151;2159;2167;2220:3;2208:9;2199:7;2195:23;2191:33;2188:53;;;2237:1;2234;2227:12;2188:53;2260:29;2279:9;2260:29;:::i;:::-;2250:39;;2308:38;2342:2;2331:9;2327:18;2308:38;:::i;:::-;2298:48;;2393:2;2382:9;2378:18;2365:32;2355:42;;2448:2;2437:9;2433:18;2420:32;2475:18;2467:6;2464:30;2461:50;;;2507:1;2504;2497:12;2461:50;2546:58;2596:7;2587:6;2576:9;2572:22;2546:58;:::i;:::-;2038:626;;;;-1:-1:-1;2038:626:28;;-1:-1:-1;2623:8:28;;2520:84;2038:626;-1:-1:-1;;;2038:626:28:o;2922:186::-;2981:6;3034:2;3022:9;3013:7;3009:23;3005:32;3002:52;;;3050:1;3047;3040:12;3002:52;3073:29;3092:9;3073:29;:::i;3113:551::-;3201:6;3209;3217;3225;3278:2;3266:9;3257:7;3253:23;3249:32;3246:52;;;3294:1;3291;3284:12;3246:52;3317:29;3336:9;3317:29;:::i;:::-;3307:39;;3397:2;3386:9;3382:18;3369:32;3424:18;3416:6;3413:30;3410:50;;;3456:1;3453;3446:12;3410:50;3495:58;3545:7;3536:6;3525:9;3521:22;3495:58;:::i;:::-;3113:551;;3572:8;;-1:-1:-1;3469:84:28;;3654:2;3639:18;3626:32;;3113:551;-1:-1:-1;;;;3113:551:28:o;4414:450::-;4478:3;4516:5;4510:12;4543:6;4538:3;4531:19;4569:4;4598;4593:3;4589:14;4582:21;;4637:4;4630:5;4626:16;4660:1;4670:169;4684:6;4681:1;4678:13;4670:169;;;4745:13;;4733:26;;4779:12;;;;4814:15;;;;4706:1;4699:9;4670:169;;;-1:-1:-1;4855:3:28;;4414:450;-1:-1:-1;;;;;4414:450:28:o;4869:832::-;5266:42;5258:6;5254:55;5243:9;5236:74;5346:3;5341:2;5330:9;5326:18;5319:31;5217:4;5373:68;5436:3;5425:9;5421:19;5413:6;5373:68;:::i;:::-;5489:9;5481:6;5477:22;5472:2;5461:9;5457:18;5450:50;5523:55;5571:6;5563;5523:55;:::i;:::-;5614:22;;;5609:2;5594:18;;;5587:50;;;;-1:-1:-1;;5661:1:28;5646:17;;5692:2;5680:15;;4869:832;-1:-1:-1;;;4869:832:28:o;6109:277::-;6176:6;6229:2;6217:9;6208:7;6204:23;6200:32;6197:52;;;6245:1;6242;6235:12;6197:52;6277:9;6271:16;6330:5;6323:13;6316:21;6309:5;6306:32;6296:60;;6352:1;6349;6342:12;6391:282;6458:9;;;6479:11;;;6476:191;;;6523:77;6520:1;6513:88;6624:4;6621:1;6614:15;6652:4;6649:1;6642:15;6678:184;6730:77;6727:1;6720:88;6827:4;6824:1;6817:15;6851:4;6848:1;6841:15;6867:334;6938:2;6932:9;6994:2;6984:13;;6999:66;6980:86;6968:99;;7097:18;7082:34;;7118:22;;;7079:62;7076:88;;;7144:18;;:::i;:::-;7180:2;7173:22;6867:334;;-1:-1:-1;6867:334:28:o;7206:183::-;7266:4;7299:18;7291:6;7288:30;7285:56;;;7321:18;;:::i;:::-;-1:-1:-1;7366:1:28;7362:14;7378:4;7358:25;;7206:183::o;7394:668::-;7448:5;7501:3;7494:4;7486:6;7482:17;7478:27;7468:55;;7519:1;7516;7509:12;7468:55;7555:6;7542:20;7581:4;7605:60;7621:43;7661:2;7621:43;:::i;:::-;7605:60;:::i;:::-;7687:3;7711:2;7706:3;7699:15;7739:4;7734:3;7730:14;7723:21;;7796:4;7790:2;7787:1;7783:10;7775:6;7771:23;7767:34;7753:48;;7824:3;7816:6;7813:15;7810:35;;;7841:1;7838;7831:12;7810:35;7877:4;7869:6;7865:17;7891:142;7907:6;7902:3;7899:15;7891:142;;;7973:17;;7961:30;;8011:12;;;;7924;;7891:142;;;-1:-1:-1;8051:5:28;7394:668;-1:-1:-1;;;;;;7394:668:28:o;8067:1502::-;8237:6;8245;8253;8261;8269;8322:3;8310:9;8301:7;8297:23;8293:33;8290:53;;;8339:1;8336;8329:12;8290:53;8375:9;8362:23;8352:33;;8404:2;8453;8442:9;8438:18;8425:32;8415:42;;8508:2;8497:9;8493:18;8480:32;8531:18;8572:2;8564:6;8561:14;8558:34;;;8588:1;8585;8578:12;8558:34;8626:6;8615:9;8611:22;8601:32;;8671:7;8664:4;8660:2;8656:13;8652:27;8642:55;;8693:1;8690;8683:12;8642:55;8729:2;8716:16;8752:60;8768:43;8808:2;8768:43;:::i;8752:60::-;8846:15;;;8928:1;8924:10;;;;8916:19;;8912:28;;;8877:12;;;;8952:19;;;8949:39;;;8984:1;8981;8974:12;8949:39;9008:11;;;;9028:142;9044:6;9039:3;9036:15;9028:142;;;9110:17;;9098:30;;9061:12;;;;9148;;;;9028:142;;;9189:5;-1:-1:-1;;;9247:2:28;9232:18;;9219:32;;-1:-1:-1;9263:16:28;;;9260:36;;;9292:1;9289;9282:12;9260:36;9315:63;9370:7;9359:8;9348:9;9344:24;9315:63;:::i;:::-;9305:73;;9431:3;9420:9;9416:19;9403:33;9387:49;;9461:2;9451:8;9448:16;9445:36;;;9477:1;9474;9467:12;9445:36;;;9500:63;9555:7;9544:8;9533:9;9529:24;9500:63;:::i;:::-;9490:73;;;8067:1502;;;;;;;;:::o;9574:400::-;9659:12;;9627:3;;9709:4;9736:16;;;9627:3;9788:13;;9780:169;;9855:13;;9843:26;;9889:12;;;;9924:15;;;;9816:1;9809:9;9780:169;;9979:657;10353:66;10344:6;10340:2;10336:15;10332:88;10327:3;10320:101;10302:3;10443:88;10480:50;10526:2;10521:3;10517:12;10509:6;10480:50;:::i;:::-;10472:6;10443:88;:::i;:::-;10540:21;;;-1:-1:-1;;10588:2:28;10577:14;;10570:30;10627:2;10616:14;;9979:657;-1:-1:-1;;;9979:657:28:o;10641:752::-;10994:42;10986:6;10982:55;10971:9;10964:74;11074:3;11069:2;11058:9;11054:18;11047:31;10945:4;11101:68;11164:3;11153:9;11149:19;11141:6;11101:68;:::i;:::-;11217:9;11209:6;11205:22;11200:2;11189:9;11185:18;11178:50;11245:55;11293:6;11285;11245:55;:::i;:::-;11331:2;11316:18;;11309:34;;;;-1:-1:-1;;11374:3:28;11359:19;11352:35;11237:63;10641:752;-1:-1:-1;;;10641:752:28:o;11398:558::-;11683:6;11672:9;11665:25;11726:2;11721;11710:9;11706:18;11699:30;11646:4;11752:67;11815:2;11804:9;11800:18;11792:6;11752:67;:::i;:::-;11867:9;11859:6;11855:22;11850:2;11839:9;11835:18;11828:50;11895:55;11943:6;11935;11895:55;:::i;:::-;11887:63;11398:558;-1:-1:-1;;;;;;11398:558:28:o;11961:184::-;12013:77;12010:1;12003:88;12110:4;12107:1;12100:15;12134:4;12131:1;12124:15"},"gasEstimates":{"creation":{"codeDepositCost":"1049200","executionCost":"infinite","totalCost":"infinite"},"external":{"FEE_CONTRACT()":"infinite","REWARD_CONTRACT()":"infinite","addMerkleRoot(bytes32)":"infinite","claim(address,bytes,uint256)":"infinite","claimed(bytes32)":"2505","deprecateMerkleRoot(bytes32)":"infinite","forwarderRegistry()":"infinite","isTrustedForwarder(address)":"infinite","onERC20Received(address,address,uint256,bytes)":"infinite","owner()":"infinite","roots(bytes32)":"2486","supportsInterface(bytes4)":"infinite","transferOwnership(address)":"infinite"},"internal":{"_msgData()":"infinite","_msgSender()":"infinite","_processClaimData(address,bytes calldata,uint256)":"infinite"}},"methodIdentifiers":{"FEE_CONTRACT()":"1352acac","REWARD_CONTRACT()":"3a5af339","addMerkleRoot(bytes32)":"3323c807","claim(address,bytes,uint256)":"8bd8d0a9","claimed(bytes32)":"cc3c0f06","deprecateMerkleRoot(bytes32)":"3572aa8d","forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05","onERC20Received(address,address,uint256,bytes)":"4fc35859","owner()":"8da5cb5b","roots(bytes32)":"ae6dead7","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"feeContract\",\"type\":\"address\"},{\"internalType\":\"contract IERC1155Mintable\",\"name\":\"rewardContract\",\"type\":\"address\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"}],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expectedContract\",\"type\":\"address\"}],\"name\":\"FeeContractMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"InvalidMerkleRoot\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"}],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"MerkleRootAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"MerkleRootAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"MerkleRootDeprecated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"PayoutClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IERC1155Mintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"addMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"claimData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"deprecateMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC20Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"roots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"onERC20Received(address,address,uint256,bytes)\":{\"details\":\"Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\",\"params\":{\"data\":\"Optional additional data with no specified format.\",\"from\":\"The previous tokens owner.\",\"operator\":\"The initiator of the safe transfer.\",\"value\":\"The amount of tokens transferred.\"},\"returns\":{\"magicValue\":\"`bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"onERC20Received(address,address,uint256,bytes)\":{\"notice\":\"Handles the receipt of ERC20 tokens.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/payment/ChaosKingdomResourcesClaim.sol\":\"ChaosKingdomResourcesClaim\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x21ad59ed5a9dca82b5b1190ed399a7f664d627e3198538baedbf93f03ee49955\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\\ninterface IERC1155Mintable {\\n    /// @notice Safely mints some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely mints a batch of tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xe7b1645bd7a2745c96cece104c3ef4ef07552b5ad35b2cbbf6926f85885a409f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC20Receiver} from \\\"./interfaces/IERC20Receiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20Receiver is IERC20Receiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Receiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Receiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0xa251f9496fb7e6034f007615a9882f1bbb1c3b8fa79f8eacde92549a92fe9ac4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC20 Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20 {\\n    /// @notice Sets the allowance to an account from the sender.\\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param spender The account being granted the allowance by the message caller.\\n    /// @param value The allowance amount to grant.\\n    /// @return result Whether the operation succeeded.\\n    function approve(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transfer(address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transferFrom(address from, address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Gets the total token supply.\\n    /// @return supply The total token supply.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice Gets an account balance.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 value);\\n}\\n\",\"keccak256\":\"0x803a0e165c5bd1d40fbcce9abae98d48d25734a1d48e9af516a121abdb8d9c2b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xde544cd110ba40b2e9dad7ae46d2764be54ae09028f32bb45893f64f25f9282d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf688741f79f4838d5301dcf72d0af9eff11bbab6ab0bb112ad144c7fb672dac\",\"license\":\"MIT\"},\"contracts/payment/ChaosKingdomResourcesClaim.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {IERC20} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\\\";\\nimport {IERC20Receiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\\\";\\nimport {ERC20Receiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\\\";\\nimport {IERC1155Mintable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\n\\ncontract ChaosKingdomResourcesClaim is ContractOwnership, ERC20Receiver, ForwarderRegistryContext {\\n    using MerkleProof for bytes32[];\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    mapping(bytes32 => bool) public roots;\\n    mapping(bytes32 => bool) public claimed;\\n\\n    IERC1155Mintable public immutable REWARD_CONTRACT;\\n    IERC20 public immutable FEE_CONTRACT;\\n\\n    event MerkleRootAdded(bytes32 indexed root);\\n\\n    event MerkleRootDeprecated(bytes32 indexed root);\\n\\n    event PayoutClaimed(bytes32 indexed root, bytes32 indexed epochId, uint256 fee, address indexed recipient, uint256[] ids, uint256[] values);\\n\\n    error MerkleRootAlreadyExists(bytes32 merkleRoot);\\n\\n    error InvalidMerkleRoot(bytes32 merkleRoot);\\n\\n    error AlreadyClaimed(address recipient, uint256[] ids, uint256[] values, uint256 fee, bytes32 epochId);\\n\\n    error InvalidProof(address recipient, uint256[] ids, uint256[] values, uint256 fee, bytes32 epochId);\\n\\n    error FeeContractMismatch(address sender, address expectedContract);\\n\\n    constructor(\\n        IERC20 feeContract,\\n        IERC1155Mintable rewardContract,\\n        IForwarderRegistry forwarderRegistry\\n    ) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {\\n        FEE_CONTRACT = feeContract;\\n        REWARD_CONTRACT = rewardContract;\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n\\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external override returns (bytes4 magicValue) {\\n        if (address(FEE_CONTRACT) != msg.sender) revert FeeContractMismatch(msg.sender, address(FEE_CONTRACT));\\n\\n        uint256 fee = value;\\n\\n        (uint256[] memory ids, uint256[] memory values) = _processClaimData(from, data, fee);\\n\\n        REWARD_CONTRACT.safeBatchMint(from, ids, values, \\\"\\\");\\n\\n        return IERC20Receiver.onERC20Received.selector;\\n    }\\n\\n    function _processClaimData(\\n        address recipient,\\n        bytes calldata claimData,\\n        uint256 fee\\n    ) internal returns (uint256[] memory ids, uint256[] memory values) {\\n        (bytes32 merkleRoot, bytes32 epochId, bytes32[] memory proof, uint256[] memory _ids, uint256[] memory _values) = abi.decode(\\n            claimData,\\n            (bytes32, bytes32, bytes32[], uint256[], uint256[])\\n        );\\n        if (!roots[merkleRoot]) revert InvalidMerkleRoot(merkleRoot);\\n\\n        bytes32 leaf = keccak256(abi.encodePacked(recipient, _ids, _values, fee, epochId));\\n\\n        if (claimed[leaf]) revert AlreadyClaimed(recipient, _ids, _values, fee, epochId);\\n        if (!proof.verify(merkleRoot, leaf)) revert InvalidProof(recipient, _ids, _values, fee, epochId);\\n\\n        claimed[leaf] = true;\\n\\n        emit PayoutClaimed(merkleRoot, epochId, fee, recipient, _ids, _values);\\n\\n        return (_ids, _values);\\n    }\\n\\n    function claim(address recipient, bytes calldata claimData, uint256 fee) external {\\n        (uint256[] memory ids, uint256[] memory values) = _processClaimData(recipient, claimData, fee);\\n\\n        FEE_CONTRACT.transferFrom(recipient, address(this), fee);\\n        REWARD_CONTRACT.safeBatchMint(recipient, ids, values, \\\"\\\");\\n    }\\n\\n    function addMerkleRoot(bytes32 merkleRoot) public {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        if (roots[merkleRoot]) revert MerkleRootAlreadyExists(merkleRoot);\\n\\n        roots[merkleRoot] = true;\\n        emit MerkleRootAdded(merkleRoot);\\n    }\\n\\n    function deprecateMerkleRoot(bytes32 merkleRoot) public {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        if (!roots[merkleRoot]) revert InvalidMerkleRoot(merkleRoot);\\n\\n        roots[merkleRoot] = false;\\n        emit MerkleRootDeprecated(merkleRoot);\\n    }\\n}\\n\",\"keccak256\":\"0xefa377dd906ba3b083dd7d93f42a7edceb73e26fc67914f91550e754105ce880\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2027,"contract":"contracts/payment/ChaosKingdomResourcesClaim.sol:ChaosKingdomResourcesClaim","label":"roots","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_bool)"},{"astId":2031,"contract":"contracts/payment/ChaosKingdomResourcesClaim.sol:ChaosKingdomResourcesClaim","label":"claimed","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_bool)"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"}}},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"onERC20Received(address,address,uint256,bytes)":{"notice":"Handles the receipt of ERC20 tokens."},"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}}}}}