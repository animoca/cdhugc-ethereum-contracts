{"id":"5c42a8fe8cf65a7f367b3fa61e032bbd","_format":"hh-sol-build-info-1","solcVersion":"0.8.22","solcLongVersion":"0.8.22+commit.4fc1097e","input":{"language":"Solidity","sources":{"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC173 Contract Ownership Standard (proxiable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ContractOwnershipBase is IERC173, Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc IERC173\n    function owner() public view virtual returns (address) {\n        return ContractOwnershipStorage.layout().owner();\n    }\n\n    /// @inheritdoc IERC173\n    function transferOwnership(address newOwner) public virtual {\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {ContractOwnershipStorage} from \"./libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnershipBase} from \"./base/ContractOwnershipBase.sol\";\nimport {InterfaceDetection} from \"./../introspection/InterfaceDetection.sol\";\n\n/// @title ERC173 Contract Ownership Standard (immutable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Initializes the storage with an initial contract owner.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner the initial contract owner.\n    constructor(address initialOwner) {\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when the target contract is actually not a contract.\n/// @param targetContract The contract that was checked\nerror TargetIsNotAContract(address targetContract);\n"},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when an account is not the contract owner but is required to.\n/// @param account The account that was checked.\nerror NotContractOwner(address account);\n\n/// @notice Thrown when an account is not the target contract owner but is required to.\n/// @param targetContract The contract that was checked.\n/// @param account The account that was checked.\nerror NotTargetContractOwner(address targetContract, address account);\n"},"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Emitted when the contract ownership changes.\n/// @param previousOwner the previous contract owner.\n/// @param newOwner the new contract owner.\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC-173 Contract Ownership Standard (functions)\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173 {\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(address newOwner) external;\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner() external view returns (address contractOwner);\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {NotContractOwner, NotTargetContractOwner} from \"./../errors/ContractOwnershipErrors.sol\";\nimport {TargetIsNotAContract} from \"./../errors/Common.sol\";\nimport {OwnershipTransferred} from \"./../events/ERC173Events.sol\";\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ContractOwnershipStorage {\n    using Address for address;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        address contractOwner;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.phase\")) - 1);\n\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function constructorInit(Layout storage s, address initialOwner) internal {\n        if (initialOwner != address(0)) {\n            s.contractOwner = initialOwner;\n            emit OwnershipTransferred(address(0), initialOwner);\n        }\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function proxyInit(Layout storage s, address initialOwner) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(initialOwner);\n    }\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\n        address previousOwner = s.contractOwner;\n        if (sender != previousOwner) revert NotContractOwner(sender);\n        if (previousOwner != newOwner) {\n            s.contractOwner = newOwner;\n            emit OwnershipTransferred(previousOwner, newOwner);\n        }\n    }\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner(Layout storage s) internal view returns (address contractOwner) {\n        return s.contractOwner;\n    }\n\n    /// @notice Checks whether an account is the owner of a target contract.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\n        return IERC173(targetContract).owner() == account;\n    }\n\n    /// @notice Ensures that an account is the contract owner.\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n    /// @param account The account.\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\n        if (account != s.contractOwner) revert NotContractOwner(account);\n    }\n\n    /// @notice Enforces that an account is the owner of a target contract.\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/CommonErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\nerror EtherReceptionDisabled();\n\n/// @notice Thrown when the multiple related arrays have different lengths.\nerror InconsistentArrayLengths();\n\n/// @notice Thrown when an ETH transfer has failed.\nerror TransferFailed();\n"},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\nerror IllegalInterfaceId();\n"},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC165} from \"./interfaces/IERC165.sol\";\nimport {InterfaceDetectionStorage} from \"./libraries/InterfaceDetectionStorage.sol\";\n\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\nabstract contract InterfaceDetection is IERC165 {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC165 Interface Detection Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\ninterface IERC165 {\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId the interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IllegalInterfaceId} from \"./../errors/InterfaceDetectionErrors.sol\";\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\n\nlibrary InterfaceDetectionStorage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.introspection.InterfaceDetection.storage\")) - 1);\n\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\n\n    /// @notice Sets or unsets an ERC165 interface.\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n    /// @param interfaceId the interface identifier.\n    /// @param supported True to set the interface, false to unset it.\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\n        s.supportedInterfaces[interfaceId] = supported;\n    }\n\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId The interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return s.supportedInterfaces[interfaceId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/payment/base/PayoutWalletBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IPayoutWallet} from \"./../interfaces/IPayoutWallet.sol\";\nimport {ContractOwnershipStorage} from \"./../../access/libraries/ContractOwnershipStorage.sol\";\nimport {PayoutWalletStorage} from \"./../libraries/PayoutWalletStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title Payout wallet (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract PayoutWalletBase is IPayoutWallet, Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\n\n    /// @notice Sets the payout wallet.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.\n    /// @dev Emits a {PayoutWalletSet} event.\n    /// @param newPayoutWallet The payout wallet.\n    function setPayoutWallet(address payable newPayoutWallet) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        PayoutWalletStorage.layout().setPayoutWallet(newPayoutWallet);\n    }\n\n    /// @notice Gets the payout wallet.\n    /// @return wallet The payout wallet.\n    function payoutWallet() external view returns (address payable wallet) {\n        return PayoutWalletStorage.layout().payoutWallet();\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/payment/errors/PayoutWalletErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when setting the zero address as the payout wallet.\nerror ZeroAddressPayoutWallet();\n"},"@animoca/ethereum-contracts/contracts/payment/events/PayoutWalletEvents.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Emitted when the payout wallet address changes.\n/// @param payoutWallet the new payout wallet address.\nevent PayoutWalletSet(address payoutWallet);\n"},"@animoca/ethereum-contracts/contracts/payment/interfaces/IPayoutWallet.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title Payout wallet (functions)\ninterface IPayoutWallet {\n    /// @notice Gets the payout wallet.\n    /// @return wallet The payout wallet.\n    function payoutWallet() external view returns (address payable wallet);\n}\n"},"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {ZeroAddressPayoutWallet} from \"./../errors/PayoutWalletErrors.sol\";\nimport {PayoutWalletSet} from \"./../events/PayoutWalletEvents.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\n\nlibrary PayoutWalletStorage {\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\n\n    struct Layout {\n        address payable wallet;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.payment.PayoutWallet.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.payment.PayoutWallet.phase\")) - 1);\n\n    /// @notice Initializes the storage with an initial payout wallet (immutable version).\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\n    /// @dev Emits a {PayoutWalletSet} event.\n    /// @param initialPayoutWallet The initial payout wallet.\n    function constructorInit(Layout storage s, address payable initialPayoutWallet) internal {\n        s.setPayoutWallet(initialPayoutWallet);\n    }\n\n    /// @notice Initializes the storage with an initial payout wallet (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\n    /// @dev Emits a {PayoutWalletSet} event.\n    /// @param initialPayoutWallet The initial payout wallet.\n    function proxyInit(Layout storage s, address payable initialPayoutWallet) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.setPayoutWallet(initialPayoutWallet);\n    }\n\n    /// @notice Sets the payout wallet.\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.\n    /// @dev Emits a {PayoutWalletSet} event.\n    /// @param newPayoutWallet The payout wallet.\n    function setPayoutWallet(Layout storage s, address payable newPayoutWallet) internal {\n        if (newPayoutWallet == address(0)) revert ZeroAddressPayoutWallet();\n        s.wallet = newPayoutWallet;\n        emit PayoutWalletSet(newPayoutWallet);\n    }\n\n    /// @notice Gets the payout wallet.\n    /// @return wallet The payout wallet.\n    function payoutWallet(Layout storage s) internal view returns (address payable) {\n        return s.wallet;\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/payment/PayoutWallet.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {PayoutWalletStorage} from \"./libraries/PayoutWalletStorage.sol\";\nimport {PayoutWalletBase} from \"./base/PayoutWalletBase.sol\";\nimport {ContractOwnership} from \"../access/ContractOwnership.sol\";\n\n/// @title Payout wallet (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract PayoutWallet is PayoutWalletBase, ContractOwnership {\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\n\n    /// @notice Initializes the storage with an initial payout wallet.\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\n    /// @dev Emits a {PayoutWalletSet} event.\n    /// @param initialPayoutWallet The initial payout wallet.\n    constructor(address payable initialPayoutWallet) {\n        PayoutWalletStorage.layout().constructorInit(initialPayoutWallet);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Emitted when trying to set a phase value that has already been reached.\n/// @param currentPhase The current phase.\n/// @param newPhase The new phase trying to be set.\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\n"},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {InitializationPhaseAlreadyReached} from \"./../errors/ProxyInitializationErrors.sol\";\nimport {StorageSlot} from \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\nlibrary ProxyInitialization {\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n    /// @param storageSlot the storage slot where `phase` is stored.\n    /// @param phase the initialization phase.\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\n        uint256 currentPhase = currentVersion.value;\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\n        currentVersion.value = phase;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {InconsistentArrayLengths} from \"./../../CommonErrors.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport {IERC721} from \"./../../token/ERC721/interfaces/IERC721.sol\";\nimport {ContractOwnershipStorage} from \"./../../access/libraries/ContractOwnershipStorage.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract TokenRecoveryBase is Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using SafeERC20 for IERC20;\n    using Address for address payable;\n\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\n    ///  so that the extraction is limited to only amounts sent accidentally.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param amounts the list of token amounts to transfer.\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) public virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        uint256 length = accounts.length;\n        if (length != amounts.length) revert InconsistentArrayLengths();\n        for (uint256 i; i < length; ++i) {\n            accounts[i].sendValue(amounts[i]);\n        }\n    }\n\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\n    ///  so that the extraction is limited to only amounts sent accidentally.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param tokens the list of ERC20 token addresses.\n    /// @param amounts the list of token amounts to transfer.\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        uint256 length = accounts.length;\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\n        for (uint256 i; i < length; ++i) {\n            tokens[i].safeTransfer(accounts[i], amounts[i]);\n        }\n    }\n\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\n    ///  so that the extraction is limited to only tokens sent accidentally.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param contracts the list of ERC721 contract addresses.\n    /// @param tokenIds the list of token ids to transfer.\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) public virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        uint256 length = accounts.length;\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\n        for (uint256 i; i < length; ++i) {\n            contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {TokenRecoveryBase} from \"./base/TokenRecoveryBase.sol\";\nimport {ContractOwnership} from \"./../access/ContractOwnership.sol\";\n\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {\n\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.22;\n\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\ninterface IERC1155Mintable {\n    /// @notice Safely mints some token.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `to`'s balance of `id` overflows.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n    /// @dev Emits an {IERC1155-TransferSingle} event.\n    /// @param to Address of the new token owner.\n    /// @param id Identifier of the token to mint.\n    /// @param value Amount of token to mint.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /// @notice Safely mints a batch of tokens.\n    /// @dev Reverts if `ids` and `values` have different lengths.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\n    /// @dev Emits an {IERC1155-TransferBatch} event.\n    /// @param to Address of the new tokens owner.\n    /// @param ids Identifiers of the tokens to mint.\n    /// @param values Amounts of tokens to mint.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC20Receiver} from \"./interfaces/IERC20Receiver.sol\";\nimport {InterfaceDetectionStorage} from \"../../introspection/libraries/InterfaceDetectionStorage.sol\";\nimport {InterfaceDetection} from \"../../introspection/InterfaceDetection.sol\";\n\n/// @title ERC20 Fungible Token Standard, Receiver (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC20Receiver is IERC20Receiver, InterfaceDetection {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Receiver.\n    constructor() {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Receiver).interfaceId, true);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC20 Token Standard, Tokens Receiver.\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\ninterface IERC20Receiver {\n    /// @notice Handles the receipt of ERC20 tokens.\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\n    /// @param operator The initiator of the safe transfer.\n    /// @param from The previous tokens owner.\n    /// @param value The amount of tokens transferred.\n    /// @param data Optional additional data with no specified format.\n    /// @return magicValue `bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse.\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\ninterface IERC20SafeTransfers {\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if the sender does not have at least `value` of balance.\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\n    /// @dev Emits an {IERC20-Transfer} event.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\n    /// @return result Whether the operation succeeded.\n    function safeTransfer(address to, uint256 value, bytes calldata data) external returns (bool result);\n\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` does not have at least `value` of balance.\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\n    /// @dev Emits an {IERC20-Transfer} event.\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\n    /// @param from The account which owns the tokens to transfer.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\n    /// @return result Whether the operation succeeded.\n    function safeTransferFrom(address from, address to, uint256 value, bytes calldata data) external returns (bool result);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\ninterface IERC721 {\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n    /// @dev Note: There can only be one approved address per token at a given time.\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @dev Reverts if `to` is the token owner.\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\n    /// @dev Emits an {Approval} event.\n    /// @param to The address to approve, or the zero address to remove any existing approval.\n    /// @param tokenId The token identifier to give approval for.\n    function approve(address to, uint256 tokenId) external;\n\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n    /// @dev Reverts if the sender is the same as `operator`.\n    /// @dev Emits an {ApprovalForAll} event.\n    /// @param operator The address to approve for all tokens.\n    /// @param approved True to set an approval for all tokens, false to unset it.\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\n    /// @param tokenId The identifier of the token to transfer.\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /// @notice Safely transfers the ownership of a token to a recipient.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /// @notice Safely transfers the ownership of a token to a recipient.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /// @notice Gets the balance of an address.\n    /// @dev Reverts if `owner` is the zero address.\n    /// @param owner The address to query the balance of.\n    /// @return balance The amount owned by the owner.\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /// @notice Gets the owner of a token.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the owner of.\n    /// @return tokenOwner The owner of the token identifier.\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\n\n    /// @notice Gets the approved address for a token.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the approval of.\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\n    function getApproved(uint256 tokenId) external view returns (address approved);\n\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\n    /// @param owner The address which gives the approval for all tokens.\n    /// @param operator The address which receives the approval for all tokens.\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\n}\n"},"@openzeppelin/contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proofLen - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            require(proofPos == proofLen, \"MerkleProof: invalid multiproof\");\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proofLen - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            require(proofPos == proofLen, \"MerkleProof: invalid multiproof\");\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"},"contracts/payment/ChaosKingdomResourcesClaim.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport {ContractOwnershipStorage} from \"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnership} from \"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\";\nimport {IERC20SafeTransfers} from \"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\";\nimport {IERC20Receiver} from \"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\";\nimport {ERC20Receiver} from \"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\";\nimport {IERC1155Mintable} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {TokenRecovery} from \"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\";\nimport {PayoutWalletStorage} from \"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol\";\nimport {PayoutWallet} from \"@animoca/ethereum-contracts/contracts/payment/PayoutWallet.sol\";\n\ncontract ChaosKingdomResourcesClaim is ContractOwnership, ERC20Receiver, TokenRecovery, PayoutWallet {\n    using MerkleProof for bytes32[];\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\n\n    mapping(bytes32 => bool) public roots;\n    mapping(bytes32 => bool) public claimed;\n\n    IERC1155Mintable public immutable REWARD_CONTRACT;\n    IERC20SafeTransfers public immutable FEE_CONTRACT;\n\n    event MerkleRootAdded(bytes32 indexed root);\n\n    event MerkleRootDeprecated(bytes32 indexed root);\n\n    event PayoutClaimed(bytes32 indexed root, bytes32 indexed epochId, uint256 fee, address indexed recipient, uint256[] ids, uint256[] values);\n\n    error MerkleRootAlreadyExists(bytes32 merkleRoot);\n\n    error InvalidMerkleRoot(bytes32 merkleRoot);\n\n    error AlreadyClaimed(address recipient, uint256[] ids, uint256[] values, uint256 fee, bytes32 epochId);\n\n    error InvalidProof(address recipient, uint256[] ids, uint256[] values, uint256 fee, bytes32 epochId);\n\n    error InvalidFeeContract(address receivedContract, address expectedContract);\n\n    constructor(\n        IERC20SafeTransfers feeContract,\n        IERC1155Mintable rewardContract,\n        address payable payoutWallet\n    ) ContractOwnership(msg.sender) PayoutWallet(payoutWallet) {\n        FEE_CONTRACT = feeContract;\n        REWARD_CONTRACT = rewardContract;\n    }\n\n    function onERC20Received(address, address, uint256 value, bytes calldata data) external override returns (bytes4 magicValue) {\n        if (address(FEE_CONTRACT) != msg.sender) revert InvalidFeeContract(msg.sender, address(FEE_CONTRACT));\n\n        (bytes32 merkleRoot, bytes32 epochId, bytes32[] memory proof, address recipient, uint256[] memory _ids, uint256[] memory _values) = abi\n            .decode(data, (bytes32, bytes32, bytes32[], address, uint256[], uint256[]));\n\n        if (!roots[merkleRoot]) revert InvalidMerkleRoot(merkleRoot);\n\n        bytes32 leaf = keccak256(abi.encodePacked(recipient, _ids, _values, value, epochId));\n\n        if (!proof.verify(merkleRoot, leaf)) revert InvalidProof(recipient, _ids, _values, value, epochId);\n        if (claimed[leaf]) revert AlreadyClaimed(recipient, _ids, _values, value, epochId);\n\n        address payable payoutWallet = PayoutWalletStorage.layout().payoutWallet();\n        FEE_CONTRACT.safeTransfer(payoutWallet, value, \"\");\n        claimed[leaf] = true;\n        REWARD_CONTRACT.safeBatchMint(recipient, _ids, _values, \"\");\n        emit PayoutClaimed(merkleRoot, epochId, value, recipient, _ids, _values);\n\n        return IERC20Receiver.onERC20Received.selector;\n    }\n\n    function addMerkleRoot(bytes32 merkleRoot) public {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        if (roots[merkleRoot]) revert MerkleRootAlreadyExists(merkleRoot);\n\n        roots[merkleRoot] = true;\n        emit MerkleRootAdded(merkleRoot);\n    }\n\n    function deprecateMerkleRoot(bytes32 merkleRoot) public {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        if (!roots[merkleRoot]) revert InvalidMerkleRoot(merkleRoot);\n\n        roots[merkleRoot] = false;\n        emit MerkleRootDeprecated(merkleRoot);\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":99999},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@animoca/ethereum-contracts/contracts/CommonErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/CommonErrors.sol","exportedSymbols":{"EtherReceptionDisabled":[4],"InconsistentArrayLengths":[7],"TransferFailed":[10]},"id":11,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:0"},{"documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"58:84:0","text":"@notice Thrown when trying to transfer tokens without calldata to the contract."},"errorSelector":"7b5c3290","id":4,"name":"EtherReceptionDisabled","nameLocation":"148:22:0","nodeType":"ErrorDefinition","parameters":{"id":3,"nodeType":"ParameterList","parameters":[],"src":"170:2:0"},"src":"142:31:0"},{"documentation":{"id":5,"nodeType":"StructuredDocumentation","src":"175:76:0","text":"@notice Thrown when the multiple related arrays have different lengths."},"errorSelector":"65825336","id":7,"name":"InconsistentArrayLengths","nameLocation":"257:24:0","nodeType":"ErrorDefinition","parameters":{"id":6,"nodeType":"ParameterList","parameters":[],"src":"281:2:0"},"src":"251:33:0"},{"documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"286:52:0","text":"@notice Thrown when an ETH transfer has failed."},"errorSelector":"90b8ec18","id":10,"name":"TransferFailed","nameLocation":"344:14:0","nodeType":"ErrorDefinition","parameters":{"id":9,"nodeType":"ParameterList","parameters":[],"src":"358:2:0"},"src":"338:23:0"}],"src":"32:330:0"},"id":0},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","exportedSymbols":{"ContractOwnership":[43],"ContractOwnershipBase":[91],"ContractOwnershipStorage":[395],"InterfaceDetection":[425]},"id":44,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":12,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:1"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./libraries/ContractOwnershipStorage.sol","id":14,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":44,"sourceUnit":396,"src":"58:82:1","symbolAliases":[{"foreign":{"id":13,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":395,"src":"66:24:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","file":"./base/ContractOwnershipBase.sol","id":16,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":44,"sourceUnit":92,"src":"141:71:1","symbolAliases":[{"foreign":{"id":15,"name":"ContractOwnershipBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":91,"src":"149:21:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../introspection/InterfaceDetection.sol","id":18,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":44,"sourceUnit":426,"src":"213:77:1","symbolAliases":[{"foreign":{"id":17,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":425,"src":"221:18:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":20,"name":"ContractOwnershipBase","nameLocations":["549:21:1"],"nodeType":"IdentifierPath","referencedDeclaration":91,"src":"549:21:1"},"id":21,"nodeType":"InheritanceSpecifier","src":"549:21:1"},{"baseName":{"id":22,"name":"InterfaceDetection","nameLocations":["572:18:1"],"nodeType":"IdentifierPath","referencedDeclaration":425,"src":"572:18:1"},"id":23,"nodeType":"InheritanceSpecifier","src":"572:18:1"}],"canonicalName":"ContractOwnership","contractDependencies":[],"contractKind":"contract","documentation":{"id":19,"nodeType":"StructuredDocumentation","src":"292:218:1","text":"@title ERC173 Contract Ownership Standard (immutable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":43,"linearizedBaseContracts":[43,425,442,91,2125,137],"name":"ContractOwnership","nameLocation":"528:17:1","nodeType":"ContractDefinition","nodes":[{"global":false,"id":27,"libraryName":{"id":24,"name":"ContractOwnershipStorage","nameLocations":["603:24:1"],"nodeType":"IdentifierPath","referencedDeclaration":395,"src":"603:24:1"},"nodeType":"UsingForDirective","src":"597:67:1","typeName":{"id":26,"nodeType":"UserDefinedTypeName","pathNode":{"id":25,"name":"ContractOwnershipStorage.Layout","nameLocations":["632:24:1","657:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":168,"src":"632:31:1"},"referencedDeclaration":168,"src":"632:31:1","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":41,"nodeType":"Block","src":"998:80:1","statements":[{"expression":{"arguments":[{"id":38,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"1058:12:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":33,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":395,"src":"1008:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$395_$","typeString":"type(library ContractOwnershipStorage)"}},"id":35,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1033:6:1","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":394,"src":"1008:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$168_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":36,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":37,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1042:15:1","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":238,"src":"1008:49:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$168_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$168_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":39,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:63:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":40,"nodeType":"ExpressionStatement","src":"1008:63:1"}]},"documentation":{"id":28,"nodeType":"StructuredDocumentation","src":"670:289:1","text":"@notice Initializes the storage with an initial contract owner.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner the initial contract owner."},"id":42,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":31,"nodeType":"ParameterList","parameters":[{"constant":false,"id":30,"mutability":"mutable","name":"initialOwner","nameLocation":"984:12:1","nodeType":"VariableDeclaration","scope":42,"src":"976:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":29,"name":"address","nodeType":"ElementaryTypeName","src":"976:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"975:22:1"},"returnParameters":{"id":32,"nodeType":"ParameterList","parameters":[],"src":"998:0:1"},"scope":43,"src":"964:114:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":44,"src":"510:570:1","usedErrors":[105,430],"usedEvents":[121]}],"src":"32:1049:1"},"id":1},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","exportedSymbols":{"Context":[2125],"ContractOwnershipBase":[91],"ContractOwnershipStorage":[395],"IERC173":[137]},"id":92,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":45,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:2"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":47,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":92,"sourceUnit":138,"src":"58:52:2","symbolAliases":[{"foreign":{"id":46,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":137,"src":"66:7:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":49,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":92,"sourceUnit":396,"src":"111:85:2","symbolAliases":[{"foreign":{"id":48,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":395,"src":"119:24:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":51,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":92,"sourceUnit":2126,"src":"197:66:2","symbolAliases":[{"foreign":{"id":50,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2125,"src":"205:7:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":53,"name":"IERC173","nameLocations":["586:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":137,"src":"586:7:2"},"id":54,"nodeType":"InheritanceSpecifier","src":"586:7:2"},{"baseName":{"id":55,"name":"Context","nameLocations":["595:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":2125,"src":"595:7:2"},"id":56,"nodeType":"InheritanceSpecifier","src":"595:7:2"}],"canonicalName":"ContractOwnershipBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":52,"nodeType":"StructuredDocumentation","src":"265:278:2","text":"@title ERC173 Contract Ownership Standard (proxiable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC165 (Interface Detection Standard)."},"fullyImplemented":true,"id":91,"linearizedBaseContracts":[91,2125,137],"name":"ContractOwnershipBase","nameLocation":"561:21:2","nodeType":"ContractDefinition","nodes":[{"global":false,"id":60,"libraryName":{"id":57,"name":"ContractOwnershipStorage","nameLocations":["615:24:2"],"nodeType":"IdentifierPath","referencedDeclaration":395,"src":"615:24:2"},"nodeType":"UsingForDirective","src":"609:67:2","typeName":{"id":59,"nodeType":"UserDefinedTypeName","pathNode":{"id":58,"name":"ContractOwnershipStorage.Layout","nameLocations":["644:24:2","669:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":168,"src":"644:31:2"},"referencedDeclaration":168,"src":"644:31:2","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"baseFunctions":[136],"body":{"id":72,"nodeType":"Block","src":"765:65:2","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":66,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":395,"src":"782:24:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$395_$","typeString":"type(library ContractOwnershipStorage)"}},"id":67,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"807:6:2","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":394,"src":"782:31:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$168_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":68,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":69,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"816:5:2","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":315,"src":"782:39:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$168_storage_ptr_$returns$_t_address_$attached_to$_t_struct$_Layout_$168_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer) view returns (address)"}},"id":70,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:41:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":65,"id":71,"nodeType":"Return","src":"775:48:2"}]},"documentation":{"id":61,"nodeType":"StructuredDocumentation","src":"682:23:2","text":"@inheritdoc IERC173"},"functionSelector":"8da5cb5b","id":73,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"719:5:2","nodeType":"FunctionDefinition","parameters":{"id":62,"nodeType":"ParameterList","parameters":[],"src":"724:2:2"},"returnParameters":{"id":65,"nodeType":"ParameterList","parameters":[{"constant":false,"id":64,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":73,"src":"756:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":63,"name":"address","nodeType":"ElementaryTypeName","src":"756:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"755:9:2"},"scope":91,"src":"710:120:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[130],"body":{"id":89,"nodeType":"Block","src":"924:92:2","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":84,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"986:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":85,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"986:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":86,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":76,"src":"1000:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":79,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":395,"src":"934:24:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$395_$","typeString":"type(library ContractOwnershipStorage)"}},"id":81,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"959:6:2","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":394,"src":"934:31:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$168_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":83,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"968:17:2","memberName":"transferOwnership","nodeType":"MemberAccess","referencedDeclaration":302,"src":"934:51:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$168_storage_ptr_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$168_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address,address)"}},"id":87,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:75:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":88,"nodeType":"ExpressionStatement","src":"934:75:2"}]},"documentation":{"id":74,"nodeType":"StructuredDocumentation","src":"836:23:2","text":"@inheritdoc IERC173"},"functionSelector":"f2fde38b","id":90,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"873:17:2","nodeType":"FunctionDefinition","parameters":{"id":77,"nodeType":"ParameterList","parameters":[{"constant":false,"id":76,"mutability":"mutable","name":"newOwner","nameLocation":"899:8:2","nodeType":"VariableDeclaration","scope":90,"src":"891:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":75,"name":"address","nodeType":"ElementaryTypeName","src":"891:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"890:18:2"},"returnParameters":{"id":78,"nodeType":"ParameterList","parameters":[],"src":"924:0:2"},"scope":91,"src":"864:152:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":92,"src":"543:475:2","usedErrors":[105],"usedEvents":[121]}],"src":"32:987:2"},"id":2},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","exportedSymbols":{"TargetIsNotAContract":[98]},"id":99,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":93,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:3"},{"documentation":{"id":94,"nodeType":"StructuredDocumentation","src":"58:128:3","text":"@notice Thrown when the target contract is actually not a contract.\n @param targetContract The contract that was checked"},"errorSelector":"73a5b5e3","id":98,"name":"TargetIsNotAContract","nameLocation":"192:20:3","nodeType":"ErrorDefinition","parameters":{"id":97,"nodeType":"ParameterList","parameters":[{"constant":false,"id":96,"mutability":"mutable","name":"targetContract","nameLocation":"221:14:3","nodeType":"VariableDeclaration","scope":98,"src":"213:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":95,"name":"address","nodeType":"ElementaryTypeName","src":"213:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"212:24:3"},"src":"186:51:3"}],"src":"32:206:3"},"id":3},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","exportedSymbols":{"NotContractOwner":[105],"NotTargetContractOwner":[112]},"id":113,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":100,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:4"},{"documentation":{"id":101,"nodeType":"StructuredDocumentation","src":"58:130:4","text":"@notice Thrown when an account is not the contract owner but is required to.\n @param account The account that was checked."},"errorSelector":"2ef4875e","id":105,"name":"NotContractOwner","nameLocation":"194:16:4","nodeType":"ErrorDefinition","parameters":{"id":104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":103,"mutability":"mutable","name":"account","nameLocation":"219:7:4","nodeType":"VariableDeclaration","scope":105,"src":"211:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":102,"name":"address","nodeType":"ElementaryTypeName","src":"211:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"210:17:4"},"src":"188:40:4"},{"documentation":{"id":106,"nodeType":"StructuredDocumentation","src":"230:194:4","text":"@notice Thrown when an account is not the target contract owner but is required to.\n @param targetContract The contract that was checked.\n @param account The account that was checked."},"errorSelector":"29b9b08b","id":112,"name":"NotTargetContractOwner","nameLocation":"430:22:4","nodeType":"ErrorDefinition","parameters":{"id":111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":108,"mutability":"mutable","name":"targetContract","nameLocation":"461:14:4","nodeType":"VariableDeclaration","scope":112,"src":"453:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"453:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":110,"mutability":"mutable","name":"account","nameLocation":"485:7:4","nodeType":"VariableDeclaration","scope":112,"src":"477:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":109,"name":"address","nodeType":"ElementaryTypeName","src":"477:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"452:41:4"},"src":"424:70:4"}],"src":"32:463:4"},"id":4},"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol","exportedSymbols":{"OwnershipTransferred":[121]},"id":122,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":114,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:5"},{"anonymous":false,"documentation":{"id":115,"nodeType":"StructuredDocumentation","src":"58:155:5","text":"@notice Emitted when the contract ownership changes.\n @param previousOwner the previous contract owner.\n @param newOwner the new contract owner."},"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":121,"name":"OwnershipTransferred","nameLocation":"219:20:5","nodeType":"EventDefinition","parameters":{"id":120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":117,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"256:13:5","nodeType":"VariableDeclaration","scope":121,"src":"240:29:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":116,"name":"address","nodeType":"ElementaryTypeName","src":"240:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":119,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"287:8:5","nodeType":"VariableDeclaration","scope":121,"src":"271:24:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":118,"name":"address","nodeType":"ElementaryTypeName","src":"271:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"239:57:5"},"src":"213:84:5"}],"src":"32:269:5"},"id":5},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","exportedSymbols":{"IERC173":[137]},"id":138,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":123,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:6"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC173","contractDependencies":[],"contractKind":"interface","documentation":{"id":124,"nodeType":"StructuredDocumentation","src":"58:182:6","text":"@title ERC-173 Contract Ownership Standard (functions)\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0"},"fullyImplemented":false,"id":137,"linearizedBaseContracts":[137],"name":"IERC173","nameLocation":"250:7:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":125,"nodeType":"StructuredDocumentation","src":"264:342:6","text":"@notice Sets the address of the new contract owner.\n @dev Reverts if the sender is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"functionSelector":"f2fde38b","id":130,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"620:17:6","nodeType":"FunctionDefinition","parameters":{"id":128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":127,"mutability":"mutable","name":"newOwner","nameLocation":"646:8:6","nodeType":"VariableDeclaration","scope":130,"src":"638:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":126,"name":"address","nodeType":"ElementaryTypeName","src":"638:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"637:18:6"},"returnParameters":{"id":129,"nodeType":"ParameterList","parameters":[],"src":"664:0:6"},"scope":137,"src":"611:54:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":131,"nodeType":"StructuredDocumentation","src":"671:116:6","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"functionSelector":"8da5cb5b","id":136,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"801:5:6","nodeType":"FunctionDefinition","parameters":{"id":132,"nodeType":"ParameterList","parameters":[],"src":"806:2:6"},"returnParameters":{"id":135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":134,"mutability":"mutable","name":"contractOwner","nameLocation":"840:13:6","nodeType":"VariableDeclaration","scope":136,"src":"832:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":133,"name":"address","nodeType":"ElementaryTypeName","src":"832:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"831:23:6"},"scope":137,"src":"792:63:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":138,"src":"240:617:6","usedErrors":[],"usedEvents":[]}],"src":"32:826:6"},"id":6},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","exportedSymbols":{"Address":[2103],"ContractOwnershipStorage":[395],"IERC173":[137],"InterfaceDetectionStorage":[543],"NotContractOwner":[105],"NotTargetContractOwner":[112],"OwnershipTransferred":[121],"ProxyInitialization":[851],"TargetIsNotAContract":[98]},"id":396,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":139,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:7"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","file":"./../errors/ContractOwnershipErrors.sol","id":142,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":396,"sourceUnit":113,"src":"58:97:7","symbolAliases":[{"foreign":{"id":140,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":105,"src":"66:16:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":141,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"84:22:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","file":"./../errors/Common.sol","id":144,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":396,"sourceUnit":99,"src":"156:60:7","symbolAliases":[{"foreign":{"id":143,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"164:20:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol","file":"./../events/ERC173Events.sol","id":146,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":396,"sourceUnit":122,"src":"217:66:7","symbolAliases":[{"foreign":{"id":145,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":121,"src":"225:20:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":148,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":396,"sourceUnit":138,"src":"284:52:7","symbolAliases":[{"foreign":{"id":147,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":137,"src":"292:7:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":150,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":396,"sourceUnit":2104,"src":"337:66:7","symbolAliases":[{"foreign":{"id":149,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2103,"src":"345:7:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../proxy/libraries/ProxyInitialization.sol","id":152,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":396,"sourceUnit":852,"src":"404:84:7","symbolAliases":[{"foreign":{"id":151,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"412:19:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":154,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":396,"sourceUnit":544,"src":"489:104:7","symbolAliases":[{"foreign":{"id":153,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"497:25:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ContractOwnershipStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":395,"linearizedBaseContracts":[395],"name":"ContractOwnershipStorage","nameLocation":"603:24:7","nodeType":"ContractDefinition","nodes":[{"global":false,"id":157,"libraryName":{"id":155,"name":"Address","nameLocations":["640:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":2103,"src":"640:7:7"},"nodeType":"UsingForDirective","src":"634:26:7","typeName":{"id":156,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":161,"libraryName":{"id":158,"name":"ContractOwnershipStorage","nameLocations":["671:24:7"],"nodeType":"IdentifierPath","referencedDeclaration":395,"src":"671:24:7"},"nodeType":"UsingForDirective","src":"665:67:7","typeName":{"id":160,"nodeType":"UserDefinedTypeName","pathNode":{"id":159,"name":"ContractOwnershipStorage.Layout","nameLocations":["700:24:7","725:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":168,"src":"700:31:7"},"referencedDeclaration":168,"src":"700:31:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":165,"libraryName":{"id":162,"name":"InterfaceDetectionStorage","nameLocations":["743:25:7"],"nodeType":"IdentifierPath","referencedDeclaration":543,"src":"743:25:7"},"nodeType":"UsingForDirective","src":"737:69:7","typeName":{"id":164,"nodeType":"UserDefinedTypeName","pathNode":{"id":163,"name":"InterfaceDetectionStorage.Layout","nameLocations":["773:25:7","799:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":453,"src":"773:32:7"},"referencedDeclaration":453,"src":"773:32:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$453_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ContractOwnershipStorage.Layout","id":168,"members":[{"constant":false,"id":167,"mutability":"mutable","name":"contractOwner","nameLocation":"844:13:7","nodeType":"VariableDeclaration","scope":168,"src":"836:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":166,"name":"address","nodeType":"ElementaryTypeName","src":"836:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"Layout","nameLocation":"819:6:7","nodeType":"StructDefinition","scope":395,"src":"812:52:7","visibility":"public"},{"constant":true,"id":181,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"896:19:7","nodeType":"VariableDeclaration","scope":395,"src":"870:128:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":169,"name":"bytes32","nodeType":"ElementaryTypeName","src":"870:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":179,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e73746f72616765","id":175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"944:47:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""},"value":"animoca.core.access.ContractOwnership.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""}],"id":174,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"934:9:7","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:58:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":173,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"926:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":172,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:7","typeDescriptions":{}}},"id":177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"926:67:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"996:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"926:71:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":171,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"918:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":170,"name":"bytes32","nodeType":"ElementaryTypeName","src":"918:7:7","typeDescriptions":{}}},"id":180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"918:80:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":194,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"1030:21:7","nodeType":"VariableDeclaration","scope":395,"src":"1004:128:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":182,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1004:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":192,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e7068617365","id":188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1080:45:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""},"value":"animoca.core.access.ContractOwnership.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""}],"id":187,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1070:9:7","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1070:56:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":186,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1062:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":185,"name":"uint256","nodeType":"ElementaryTypeName","src":"1062:7:7","typeDescriptions":{}}},"id":190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1062:65:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1130:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1062:69:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":184,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1054:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":183,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1054:7:7","typeDescriptions":{}}},"id":193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1054:78:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":237,"nodeType":"Block","src":"1641:267:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":203,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":200,"src":"1655:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1679:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":205,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1671:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":204,"name":"address","nodeType":"ElementaryTypeName","src":"1671:7:7","typeDescriptions":{}}},"id":207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1671:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1655:26:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":224,"nodeType":"IfStatement","src":"1651:152:7","trueBody":{"id":223,"nodeType":"Block","src":"1683:120:7","statements":[{"expression":{"id":213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":209,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":198,"src":"1697:1:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":211,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1699:13:7","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":167,"src":"1697:15:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":212,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":200,"src":"1715:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1697:30:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":214,"nodeType":"ExpressionStatement","src":"1697:30:7"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1775:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":217,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1767:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":216,"name":"address","nodeType":"ElementaryTypeName","src":"1767:7:7","typeDescriptions":{}}},"id":219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1767:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":220,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":200,"src":"1779:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":215,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":121,"src":"1746:20:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1746:46:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":222,"nodeType":"EmitStatement","src":"1741:51:7"}]}},{"expression":{"arguments":[{"expression":{"arguments":[{"id":231,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":137,"src":"1874:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$137_$","typeString":"type(contract IERC173)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC173_$137_$","typeString":"type(contract IERC173)"}],"id":230,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1869:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1869:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC173_$137","typeString":"type(contract IERC173)"}},"id":233,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1883:11:7","memberName":"interfaceId","nodeType":"MemberAccess","src":"1869:25:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1896:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":225,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"1812:25:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$543_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1838:6:7","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":542,"src":"1812:32:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$453_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1812:34:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$453_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":229,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1847:21:7","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":496,"src":"1812:56:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$453_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$453_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1812:89:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":236,"nodeType":"ExpressionStatement","src":"1812:89:7"}]},"documentation":{"id":195,"nodeType":"StructuredDocumentation","src":"1139:423:7","text":"@notice Initializes the storage with an initial contract owner (immutable version).\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":238,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1576:15:7","nodeType":"FunctionDefinition","parameters":{"id":201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":198,"mutability":"mutable","name":"s","nameLocation":"1607:1:7","nodeType":"VariableDeclaration","scope":238,"src":"1592:16:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":197,"nodeType":"UserDefinedTypeName","pathNode":{"id":196,"name":"Layout","nameLocations":["1592:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":168,"src":"1592:6:7"},"referencedDeclaration":168,"src":"1592:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":200,"mutability":"mutable","name":"initialOwner","nameLocation":"1618:12:7","nodeType":"VariableDeclaration","scope":238,"src":"1610:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":199,"name":"address","nodeType":"ElementaryTypeName","src":"1610:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1591:40:7"},"returnParameters":{"id":202,"nodeType":"ParameterList","parameters":[],"src":"1641:0:7"},"scope":395,"src":"1567:341:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":260,"nodeType":"Block","src":"2573:112:7","statements":[{"expression":{"arguments":[{"id":250,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"2612:21:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2635:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":247,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"2583:19:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$851_$","typeString":"type(library ProxyInitialization)"}},"id":249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2603:8:7","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":850,"src":"2583:28:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2583:54:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":253,"nodeType":"ExpressionStatement","src":"2583:54:7"},{"expression":{"arguments":[{"id":257,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":244,"src":"2665:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":254,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"2647:1:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":256,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2649:15:7","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":238,"src":"2647:17:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$168_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$168_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2647:31:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":259,"nodeType":"ExpressionStatement","src":"2647:31:7"}]},"documentation":{"id":239,"nodeType":"StructuredDocumentation","src":"1914:586:7","text":"@notice Initializes the storage with an initial contract owner (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":261,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"2514:9:7","nodeType":"FunctionDefinition","parameters":{"id":245,"nodeType":"ParameterList","parameters":[{"constant":false,"id":242,"mutability":"mutable","name":"s","nameLocation":"2539:1:7","nodeType":"VariableDeclaration","scope":261,"src":"2524:16:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":241,"nodeType":"UserDefinedTypeName","pathNode":{"id":240,"name":"Layout","nameLocations":["2524:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":168,"src":"2524:6:7"},"referencedDeclaration":168,"src":"2524:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":244,"mutability":"mutable","name":"initialOwner","nameLocation":"2550:12:7","nodeType":"VariableDeclaration","scope":261,"src":"2542:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":243,"name":"address","nodeType":"ElementaryTypeName","src":"2542:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2523:40:7"},"returnParameters":{"id":246,"nodeType":"ParameterList","parameters":[],"src":"2573:0:7"},"scope":395,"src":"2505:180:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":301,"nodeType":"Block","src":"3148:281:7","statements":[{"assignments":[273],"declarations":[{"constant":false,"id":273,"mutability":"mutable","name":"previousOwner","nameLocation":"3166:13:7","nodeType":"VariableDeclaration","scope":301,"src":"3158:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":272,"name":"address","nodeType":"ElementaryTypeName","src":"3158:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":276,"initialValue":{"expression":{"id":274,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":265,"src":"3182:1:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":275,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3184:13:7","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":167,"src":"3182:15:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3158:39:7"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":277,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":267,"src":"3211:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":278,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":273,"src":"3221:13:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3211:23:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":284,"nodeType":"IfStatement","src":"3207:60:7","trueBody":{"errorCall":{"arguments":[{"id":281,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":267,"src":"3260:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":280,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":105,"src":"3243:16:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":282,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3243:24:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":283,"nodeType":"RevertStatement","src":"3236:31:7"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":285,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":273,"src":"3281:13:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":286,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"3298:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3281:25:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":300,"nodeType":"IfStatement","src":"3277:146:7","trueBody":{"id":299,"nodeType":"Block","src":"3308:115:7","statements":[{"expression":{"id":292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":288,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":265,"src":"3322:1:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":290,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3324:13:7","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":167,"src":"3322:15:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":291,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"3340:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3322:26:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":293,"nodeType":"ExpressionStatement","src":"3322:26:7"},{"eventCall":{"arguments":[{"id":295,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":273,"src":"3388:13:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":296,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":269,"src":"3403:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":294,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":121,"src":"3367:20:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":297,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3367:45:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":298,"nodeType":"EmitStatement","src":"3362:50:7"}]}}]},"documentation":{"id":262,"nodeType":"StructuredDocumentation","src":"2691:364:7","text":"@notice Sets the address of the new contract owner.\n @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"id":302,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"3069:17:7","nodeType":"FunctionDefinition","parameters":{"id":270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":265,"mutability":"mutable","name":"s","nameLocation":"3102:1:7","nodeType":"VariableDeclaration","scope":302,"src":"3087:16:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":264,"nodeType":"UserDefinedTypeName","pathNode":{"id":263,"name":"Layout","nameLocations":["3087:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":168,"src":"3087:6:7"},"referencedDeclaration":168,"src":"3087:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":267,"mutability":"mutable","name":"sender","nameLocation":"3113:6:7","nodeType":"VariableDeclaration","scope":302,"src":"3105:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":266,"name":"address","nodeType":"ElementaryTypeName","src":"3105:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":269,"mutability":"mutable","name":"newOwner","nameLocation":"3129:8:7","nodeType":"VariableDeclaration","scope":302,"src":"3121:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":268,"name":"address","nodeType":"ElementaryTypeName","src":"3121:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3086:52:7"},"returnParameters":{"id":271,"nodeType":"ParameterList","parameters":[],"src":"3148:0:7"},"scope":395,"src":"3060:369:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":314,"nodeType":"Block","src":"3635:39:7","statements":[{"expression":{"expression":{"id":311,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"3652:1:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":312,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3654:13:7","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":167,"src":"3652:15:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":310,"id":313,"nodeType":"Return","src":"3645:22:7"}]},"documentation":{"id":303,"nodeType":"StructuredDocumentation","src":"3435:116:7","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"id":315,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"3565:5:7","nodeType":"FunctionDefinition","parameters":{"id":307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":306,"mutability":"mutable","name":"s","nameLocation":"3586:1:7","nodeType":"VariableDeclaration","scope":315,"src":"3571:16:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":305,"nodeType":"UserDefinedTypeName","pathNode":{"id":304,"name":"Layout","nameLocations":["3571:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":168,"src":"3571:6:7"},"referencedDeclaration":168,"src":"3571:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"3570:18:7"},"returnParameters":{"id":310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":309,"mutability":"mutable","name":"contractOwner","nameLocation":"3620:13:7","nodeType":"VariableDeclaration","scope":315,"src":"3612:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":308,"name":"address","nodeType":"ElementaryTypeName","src":"3612:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3611:23:7"},"scope":395,"src":"3556:118:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":342,"nodeType":"Block","src":"4070:153:7","statements":[{"condition":{"id":328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4084:28:7","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":325,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"4085:14:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4100:10:7","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1791,"src":"4085:25:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4085:27:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":333,"nodeType":"IfStatement","src":"4080:77:7","trueBody":{"errorCall":{"arguments":[{"id":330,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"4142:14:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":329,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"4121:20:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4121:36:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":332,"nodeType":"RevertStatement","src":"4114:43:7"}},{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":335,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"4182:14:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":334,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":137,"src":"4174:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$137_$","typeString":"type(contract IERC173)"}},"id":336,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4174:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC173_$137","typeString":"contract IERC173"}},"id":337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4198:5:7","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":136,"src":"4174:29:7","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":338,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4174:31:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":339,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":320,"src":"4209:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4174:42:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":324,"id":341,"nodeType":"Return","src":"4167:49:7"}]},"documentation":{"id":316,"nodeType":"StructuredDocumentation","src":"3680:261:7","text":"@notice Checks whether an account is the owner of a target contract.\n @param targetContract The contract to check.\n @param account The account to check.\n @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`."},"id":343,"implemented":true,"kind":"function","modifiers":[],"name":"isTargetContractOwner","nameLocation":"3955:21:7","nodeType":"FunctionDefinition","parameters":{"id":321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":318,"mutability":"mutable","name":"targetContract","nameLocation":"3985:14:7","nodeType":"VariableDeclaration","scope":343,"src":"3977:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":317,"name":"address","nodeType":"ElementaryTypeName","src":"3977:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":320,"mutability":"mutable","name":"account","nameLocation":"4009:7:7","nodeType":"VariableDeclaration","scope":343,"src":"4001:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":319,"name":"address","nodeType":"ElementaryTypeName","src":"4001:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3976:41:7"},"returnParameters":{"id":324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":323,"mutability":"mutable","name":"isTargetContractOwner_","nameLocation":"4046:22:7","nodeType":"VariableDeclaration","scope":343,"src":"4041:27:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":322,"name":"bool","nodeType":"ElementaryTypeName","src":"4041:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4040:29:7"},"scope":395,"src":"3946:277:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":361,"nodeType":"Block","src":"4494:81:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":352,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":349,"src":"4508:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":353,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":347,"src":"4519:1:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":354,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4521:13:7","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":167,"src":"4519:15:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4508:26:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":360,"nodeType":"IfStatement","src":"4504:64:7","trueBody":{"errorCall":{"arguments":[{"id":357,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":349,"src":"4560:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":356,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":105,"src":"4543:16:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4543:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":359,"nodeType":"RevertStatement","src":"4536:32:7"}}]},"documentation":{"id":344,"nodeType":"StructuredDocumentation","src":"4229:179:7","text":"@notice Ensures that an account is the contract owner.\n @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n @param account The account."},"id":362,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsContractOwner","nameLocation":"4422:22:7","nodeType":"FunctionDefinition","parameters":{"id":350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":347,"mutability":"mutable","name":"s","nameLocation":"4460:1:7","nodeType":"VariableDeclaration","scope":362,"src":"4445:16:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":346,"nodeType":"UserDefinedTypeName","pathNode":{"id":345,"name":"Layout","nameLocations":["4445:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":168,"src":"4445:6:7"},"referencedDeclaration":168,"src":"4445:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":349,"mutability":"mutable","name":"account","nameLocation":"4471:7:7","nodeType":"VariableDeclaration","scope":362,"src":"4463:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":348,"name":"address","nodeType":"ElementaryTypeName","src":"4463:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4444:35:7"},"returnParameters":{"id":351,"nodeType":"ParameterList","parameters":[],"src":"4494:0:7"},"scope":395,"src":"4413:162:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":381,"nodeType":"Block","src":"4935:124:7","statements":[{"condition":{"id":374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4949:47:7","subExpression":{"arguments":[{"id":371,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":365,"src":"4972:14:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":372,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":367,"src":"4988:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":370,"name":"isTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"4950:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":373,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4950:46:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":380,"nodeType":"IfStatement","src":"4945:107:7","trueBody":{"errorCall":{"arguments":[{"id":376,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":365,"src":"5028:14:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":377,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":367,"src":"5044:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":375,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"5005:22:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":378,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5005:47:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":379,"nodeType":"RevertStatement","src":"4998:54:7"}}]},"documentation":{"id":363,"nodeType":"StructuredDocumentation","src":"4581:256:7","text":"@notice Enforces that an account is the owner of a target contract.\n @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n @param targetContract The contract to check.\n @param account The account to check."},"id":382,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsTargetContractOwner","nameLocation":"4851:28:7","nodeType":"FunctionDefinition","parameters":{"id":368,"nodeType":"ParameterList","parameters":[{"constant":false,"id":365,"mutability":"mutable","name":"targetContract","nameLocation":"4888:14:7","nodeType":"VariableDeclaration","scope":382,"src":"4880:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":364,"name":"address","nodeType":"ElementaryTypeName","src":"4880:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":367,"mutability":"mutable","name":"account","nameLocation":"4912:7:7","nodeType":"VariableDeclaration","scope":382,"src":"4904:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":366,"name":"address","nodeType":"ElementaryTypeName","src":"4904:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4879:41:7"},"returnParameters":{"id":369,"nodeType":"ParameterList","parameters":[],"src":"4935:0:7"},"scope":395,"src":"4842:217:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":393,"nodeType":"Block","src":"5124:115:7","statements":[{"assignments":[389],"declarations":[{"constant":false,"id":389,"mutability":"mutable","name":"position","nameLocation":"5142:8:7","nodeType":"VariableDeclaration","scope":393,"src":"5134:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":388,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5134:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":391,"initialValue":{"id":390,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":181,"src":"5153:19:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5134:38:7"},{"AST":{"nativeSrc":"5191:42:7","nodeType":"YulBlock","src":"5191:42:7","statements":[{"nativeSrc":"5205:18:7","nodeType":"YulAssignment","src":"5205:18:7","value":{"name":"position","nativeSrc":"5215:8:7","nodeType":"YulIdentifier","src":"5215:8:7"},"variableNames":[{"name":"s.slot","nativeSrc":"5205:6:7","nodeType":"YulIdentifier","src":"5205:6:7"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":389,"isOffset":false,"isSlot":false,"src":"5215:8:7","valueSize":1},{"declaration":386,"isOffset":false,"isSlot":true,"src":"5205:6:7","suffix":"slot","valueSize":1}],"id":392,"nodeType":"InlineAssembly","src":"5182:51:7"}]},"id":394,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"5074:6:7","nodeType":"FunctionDefinition","parameters":{"id":383,"nodeType":"ParameterList","parameters":[],"src":"5080:2:7"},"returnParameters":{"id":387,"nodeType":"ParameterList","parameters":[{"constant":false,"id":386,"mutability":"mutable","name":"s","nameLocation":"5121:1:7","nodeType":"VariableDeclaration","scope":394,"src":"5106:16:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":385,"nodeType":"UserDefinedTypeName","pathNode":{"id":384,"name":"Layout","nameLocations":["5106:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":168,"src":"5106:6:7"},"referencedDeclaration":168,"src":"5106:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"5105:18:7"},"scope":395,"src":"5065:174:7","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":396,"src":"595:4646:7","usedErrors":[],"usedEvents":[]}],"src":"32:5210:7"},"id":7},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","exportedSymbols":{"IERC165":[442],"InterfaceDetection":[425],"InterfaceDetectionStorage":[543]},"id":426,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":397,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:8"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./interfaces/IERC165.sol","id":399,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":426,"sourceUnit":443,"src":"58:49:8","symbolAliases":[{"foreign":{"id":398,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":442,"src":"66:7:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./libraries/InterfaceDetectionStorage.sol","id":401,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":426,"sourceUnit":544,"src":"108:84:8","symbolAliases":[{"foreign":{"id":400,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"116:25:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":403,"name":"IERC165","nameLocations":["425:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"425:7:8"},"id":404,"nodeType":"InheritanceSpecifier","src":"425:7:8"}],"canonicalName":"InterfaceDetection","contractDependencies":[],"contractKind":"contract","documentation":{"id":402,"nodeType":"StructuredDocumentation","src":"194:191:8","text":"@title ERC165 Interface Detection Standard (immutable or proxiable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation."},"fullyImplemented":true,"id":425,"linearizedBaseContracts":[425,442],"name":"InterfaceDetection","nameLocation":"403:18:8","nodeType":"ContractDefinition","nodes":[{"global":false,"id":408,"libraryName":{"id":405,"name":"InterfaceDetectionStorage","nameLocations":["445:25:8"],"nodeType":"IdentifierPath","referencedDeclaration":543,"src":"445:25:8"},"nodeType":"UsingForDirective","src":"439:69:8","typeName":{"id":407,"nodeType":"UserDefinedTypeName","pathNode":{"id":406,"name":"InterfaceDetectionStorage.Layout","nameLocations":["475:25:8","501:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":453,"src":"475:32:8"},"referencedDeclaration":453,"src":"475:32:8","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$453_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"baseFunctions":[441],"body":{"id":423,"nodeType":"Block","src":"618:89:8","statements":[{"expression":{"arguments":[{"id":420,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"688:11:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":416,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"635:25:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$543_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"661:6:8","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":542,"src":"635:32:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$453_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:34:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$453_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":419,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"670:17:8","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":530,"src":"635:52:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$453_storage_ptr_$_t_bytes4_$returns$_t_bool_$attached_to$_t_struct$_Layout_$453_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4) view returns (bool)"}},"id":421,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:65:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":415,"id":422,"nodeType":"Return","src":"628:72:8"}]},"documentation":{"id":409,"nodeType":"StructuredDocumentation","src":"514:23:8","text":"@inheritdoc IERC165"},"functionSelector":"01ffc9a7","id":424,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"551:17:8","nodeType":"FunctionDefinition","parameters":{"id":412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":411,"mutability":"mutable","name":"interfaceId","nameLocation":"576:11:8","nodeType":"VariableDeclaration","scope":424,"src":"569:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":410,"name":"bytes4","nodeType":"ElementaryTypeName","src":"569:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"568:20:8"},"returnParameters":{"id":415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":414,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":424,"src":"612:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":413,"name":"bool","nodeType":"ElementaryTypeName","src":"612:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"611:6:8"},"scope":425,"src":"542:165:8","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":426,"src":"385:324:8","usedErrors":[],"usedEvents":[]}],"src":"32:678:8"},"id":8},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","exportedSymbols":{"IllegalInterfaceId":[430]},"id":431,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":427,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:9"},{"documentation":{"id":428,"nodeType":"StructuredDocumentation","src":"58:68:9","text":"@notice Thrown when setting the illegal interfaceId 0xffffffff."},"errorSelector":"72c683bb","id":430,"name":"IllegalInterfaceId","nameLocation":"132:18:9","nodeType":"ErrorDefinition","parameters":{"id":429,"nodeType":"ParameterList","parameters":[],"src":"150:2:9"},"src":"126:27:9"}],"src":"32:122:9"},"id":9},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[442]},"id":443,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":432,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:10"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":433,"nodeType":"StructuredDocumentation","src":"58:173:10","text":"@title ERC165 Interface Detection Standard.\n @dev See https://eips.ethereum.org/EIPS/eip-165.\n @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7."},"fullyImplemented":false,"id":442,"linearizedBaseContracts":[442],"name":"IERC165","nameLocation":"241:7:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":434,"nodeType":"StructuredDocumentation","src":"255:340:10","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId the interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"functionSelector":"01ffc9a7","id":441,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"609:17:10","nodeType":"FunctionDefinition","parameters":{"id":437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":436,"mutability":"mutable","name":"interfaceId","nameLocation":"634:11:10","nodeType":"VariableDeclaration","scope":441,"src":"627:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":435,"name":"bytes4","nodeType":"ElementaryTypeName","src":"627:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"626:20:10"},"returnParameters":{"id":440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":439,"mutability":"mutable","name":"supported","nameLocation":"675:9:10","nodeType":"VariableDeclaration","scope":441,"src":"670:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":438,"name":"bool","nodeType":"ElementaryTypeName","src":"670:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"669:16:10"},"scope":442,"src":"600:86:10","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":443,"src":"231:457:10","usedErrors":[],"usedEvents":[]}],"src":"32:657:10"},"id":10},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","exportedSymbols":{"IERC165":[442],"IllegalInterfaceId":[430],"InterfaceDetectionStorage":[543]},"id":544,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":444,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:11"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","file":"./../errors/InterfaceDetectionErrors.sol","id":446,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":544,"sourceUnit":431,"src":"58:76:11","symbolAliases":[{"foreign":{"id":445,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"66:18:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./../interfaces/IERC165.sol","id":448,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":544,"sourceUnit":443,"src":"135:52:11","symbolAliases":[{"foreign":{"id":447,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":442,"src":"143:7:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"InterfaceDetectionStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":543,"linearizedBaseContracts":[543],"name":"InterfaceDetectionStorage","nameLocation":"197:25:11","nodeType":"ContractDefinition","nodes":[{"canonicalName":"InterfaceDetectionStorage.Layout","id":453,"members":[{"constant":false,"id":452,"mutability":"mutable","name":"supportedInterfaces","nameLocation":"277:19:11","nodeType":"VariableDeclaration","scope":453,"src":"253:43:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"typeName":{"id":451,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":449,"name":"bytes4","nodeType":"ElementaryTypeName","src":"261:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"253:23:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":450,"name":"bool","nodeType":"ElementaryTypeName","src":"271:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"}],"name":"Layout","nameLocation":"236:6:11","nodeType":"StructDefinition","scope":543,"src":"229:74:11","visibility":"public"},{"constant":true,"id":466,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"335:19:11","nodeType":"VariableDeclaration","scope":543,"src":"309:136:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":454,"name":"bytes32","nodeType":"ElementaryTypeName","src":"309:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":464,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e696e74726f7370656374696f6e2e496e74657266616365446574656374696f6e2e73746f72616765","id":460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"383:55:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""},"value":"animoca.core.introspection.InterfaceDetection.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""}],"id":459,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"373:9:11","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"373:66:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":458,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"365:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":457,"name":"uint256","nodeType":"ElementaryTypeName","src":"365:7:11","typeDescriptions":{}}},"id":462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"365:75:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"443:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"365:79:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":456,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"357:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":455,"name":"bytes32","nodeType":"ElementaryTypeName","src":"357:7:11","typeDescriptions":{}}},"id":465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"357:88:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":469,"mutability":"constant","name":"ILLEGAL_INTERFACE_ID","nameLocation":"477:20:11","nodeType":"VariableDeclaration","scope":543,"src":"452:58:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":467,"name":"bytes4","nodeType":"ElementaryTypeName","src":"452:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"500:10:11","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"internal"},{"body":{"id":495,"nodeType":"Block","src":"867:141:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":480,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":475,"src":"881:11:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":481,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":469,"src":"896:20:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"881:35:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":486,"nodeType":"IfStatement","src":"877:68:11","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":483,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"925:18:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:20:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":485,"nodeType":"RevertStatement","src":"918:27:11"}},{"expression":{"id":493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":487,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":473,"src":"955:1:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$453_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":490,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"957:19:11","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":452,"src":"955:21:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":491,"indexExpression":{"id":489,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":475,"src":"977:11:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"955:34:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":492,"name":"supported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"992:9:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"955:46:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":494,"nodeType":"ExpressionStatement","src":"955:46:11"}]},"documentation":{"id":470,"nodeType":"StructuredDocumentation","src":"517:251:11","text":"@notice Sets or unsets an ERC165 interface.\n @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n @param interfaceId the interface identifier.\n @param supported True to set the interface, false to unset it."},"id":496,"implemented":true,"kind":"function","modifiers":[],"name":"setSupportedInterface","nameLocation":"782:21:11","nodeType":"FunctionDefinition","parameters":{"id":478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":473,"mutability":"mutable","name":"s","nameLocation":"819:1:11","nodeType":"VariableDeclaration","scope":496,"src":"804:16:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$453_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":472,"nodeType":"UserDefinedTypeName","pathNode":{"id":471,"name":"Layout","nameLocations":["804:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":453,"src":"804:6:11"},"referencedDeclaration":453,"src":"804:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$453_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":475,"mutability":"mutable","name":"interfaceId","nameLocation":"829:11:11","nodeType":"VariableDeclaration","scope":496,"src":"822:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":474,"name":"bytes4","nodeType":"ElementaryTypeName","src":"822:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":477,"mutability":"mutable","name":"supported","nameLocation":"847:9:11","nodeType":"VariableDeclaration","scope":496,"src":"842:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":476,"name":"bool","nodeType":"ElementaryTypeName","src":"842:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"803:54:11"},"returnParameters":{"id":479,"nodeType":"ParameterList","parameters":[],"src":"867:0:11"},"scope":543,"src":"773:235:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":529,"nodeType":"Block","src":"1463:236:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":507,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":502,"src":"1477:11:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":508,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":469,"src":"1492:20:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1477:35:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":513,"nodeType":"IfStatement","src":"1473:78:11","trueBody":{"id":512,"nodeType":"Block","src":"1514:37:11","statements":[{"expression":{"hexValue":"66616c7365","id":510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1535:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":506,"id":511,"nodeType":"Return","src":"1528:12:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":514,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":502,"src":"1564:11:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":516,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":442,"src":"1584:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$442_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$442_$","typeString":"type(contract IERC165)"}],"id":515,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1579:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1579:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$442","typeString":"type(contract IERC165)"}},"id":518,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1593:11:11","memberName":"interfaceId","nodeType":"MemberAccess","src":"1579:25:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1564:40:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":523,"nodeType":"IfStatement","src":"1560:82:11","trueBody":{"id":522,"nodeType":"Block","src":"1606:36:11","statements":[{"expression":{"hexValue":"74727565","id":520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1627:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":506,"id":521,"nodeType":"Return","src":"1620:11:11"}]}},{"expression":{"baseExpression":{"expression":{"id":524,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":500,"src":"1658:1:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$453_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":525,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1660:19:11","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":452,"src":"1658:21:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":527,"indexExpression":{"id":526,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":502,"src":"1680:11:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1658:34:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":506,"id":528,"nodeType":"Return","src":"1651:41:11"}]},"documentation":{"id":497,"nodeType":"StructuredDocumentation","src":"1014:340:11","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId The interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"id":530,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1368:17:11","nodeType":"FunctionDefinition","parameters":{"id":503,"nodeType":"ParameterList","parameters":[{"constant":false,"id":500,"mutability":"mutable","name":"s","nameLocation":"1401:1:11","nodeType":"VariableDeclaration","scope":530,"src":"1386:16:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$453_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":499,"nodeType":"UserDefinedTypeName","pathNode":{"id":498,"name":"Layout","nameLocations":["1386:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":453,"src":"1386:6:11"},"referencedDeclaration":453,"src":"1386:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$453_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":502,"mutability":"mutable","name":"interfaceId","nameLocation":"1411:11:11","nodeType":"VariableDeclaration","scope":530,"src":"1404:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":501,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1404:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1385:38:11"},"returnParameters":{"id":506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":505,"mutability":"mutable","name":"supported","nameLocation":"1452:9:11","nodeType":"VariableDeclaration","scope":530,"src":"1447:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":504,"name":"bool","nodeType":"ElementaryTypeName","src":"1447:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1446:16:11"},"scope":543,"src":"1359:340:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":541,"nodeType":"Block","src":"1764:115:11","statements":[{"assignments":[537],"declarations":[{"constant":false,"id":537,"mutability":"mutable","name":"position","nameLocation":"1782:8:11","nodeType":"VariableDeclaration","scope":541,"src":"1774:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":536,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1774:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":539,"initialValue":{"id":538,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"1793:19:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1774:38:11"},{"AST":{"nativeSrc":"1831:42:11","nodeType":"YulBlock","src":"1831:42:11","statements":[{"nativeSrc":"1845:18:11","nodeType":"YulAssignment","src":"1845:18:11","value":{"name":"position","nativeSrc":"1855:8:11","nodeType":"YulIdentifier","src":"1855:8:11"},"variableNames":[{"name":"s.slot","nativeSrc":"1845:6:11","nodeType":"YulIdentifier","src":"1845:6:11"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":537,"isOffset":false,"isSlot":false,"src":"1855:8:11","valueSize":1},{"declaration":534,"isOffset":false,"isSlot":true,"src":"1845:6:11","suffix":"slot","valueSize":1}],"id":540,"nodeType":"InlineAssembly","src":"1822:51:11"}]},"id":542,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"1714:6:11","nodeType":"FunctionDefinition","parameters":{"id":531,"nodeType":"ParameterList","parameters":[],"src":"1720:2:11"},"returnParameters":{"id":535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":534,"mutability":"mutable","name":"s","nameLocation":"1761:1:11","nodeType":"VariableDeclaration","scope":542,"src":"1746:16:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$453_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":533,"nodeType":"UserDefinedTypeName","pathNode":{"id":532,"name":"Layout","nameLocations":["1746:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":453,"src":"1746:6:11"},"referencedDeclaration":453,"src":"1746:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$453_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"}],"src":"1745:18:11"},"scope":543,"src":"1705:174:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":544,"src":"189:1692:11","usedErrors":[],"usedEvents":[]}],"src":"32:1850:11"},"id":11},"@animoca/ethereum-contracts/contracts/payment/PayoutWallet.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/PayoutWallet.sol","exportedSymbols":{"ContractOwnership":[43],"PayoutWallet":[576],"PayoutWalletBase":[637],"PayoutWalletStorage":[795]},"id":577,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":545,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:12"},{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol","file":"./libraries/PayoutWalletStorage.sol","id":547,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":577,"sourceUnit":796,"src":"58:72:12","symbolAliases":[{"foreign":{"id":546,"name":"PayoutWalletStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"66:19:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/base/PayoutWalletBase.sol","file":"./base/PayoutWalletBase.sol","id":549,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":577,"sourceUnit":638,"src":"131:61:12","symbolAliases":[{"foreign":{"id":548,"name":"PayoutWalletBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":637,"src":"139:16:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"../access/ContractOwnership.sol","id":551,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":577,"sourceUnit":44,"src":"193:66:12","symbolAliases":[{"foreign":{"id":550,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43,"src":"201:17:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":553,"name":"PayoutWalletBase","nameLocations":["440:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":637,"src":"440:16:12"},"id":554,"nodeType":"InheritanceSpecifier","src":"440:16:12"},{"baseName":{"id":555,"name":"ContractOwnership","nameLocations":["458:17:12"],"nodeType":"IdentifierPath","referencedDeclaration":43,"src":"458:17:12"},"id":556,"nodeType":"InheritanceSpecifier","src":"458:17:12"}],"canonicalName":"PayoutWallet","contractDependencies":[],"contractKind":"contract","documentation":{"id":552,"nodeType":"StructuredDocumentation","src":"261:145:12","text":"@title Payout wallet (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":576,"linearizedBaseContracts":[576,43,425,442,91,637,2125,137,659],"name":"PayoutWallet","nameLocation":"424:12:12","nodeType":"ContractDefinition","nodes":[{"global":false,"id":560,"libraryName":{"id":557,"name":"PayoutWalletStorage","nameLocations":["488:19:12"],"nodeType":"IdentifierPath","referencedDeclaration":795,"src":"488:19:12"},"nodeType":"UsingForDirective","src":"482:57:12","typeName":{"id":559,"nodeType":"UserDefinedTypeName","pathNode":{"id":558,"name":"PayoutWalletStorage.Layout","nameLocations":["512:19:12","532:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":674,"src":"512:26:12"},"referencedDeclaration":674,"src":"512:26:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$674_storage_ptr","typeString":"struct PayoutWalletStorage.Layout"}}},{"body":{"id":574,"nodeType":"Block","src":"871:82:12","statements":[{"expression":{"arguments":[{"id":571,"name":"initialPayoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"926:19:12","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":566,"name":"PayoutWalletStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"881:19:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PayoutWalletStorage_$795_$","typeString":"type(library PayoutWalletStorage)"}},"id":568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"901:6:12","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":794,"src":"881:26:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$674_storage_ptr_$","typeString":"function () pure returns (struct PayoutWalletStorage.Layout storage pointer)"}},"id":569,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"881:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$674_storage_ptr","typeString":"struct PayoutWalletStorage.Layout storage pointer"}},"id":570,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"910:15:12","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":716,"src":"881:44:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$674_storage_ptr_$_t_address_payable_$returns$__$attached_to$_t_struct$_Layout_$674_storage_ptr_$","typeString":"function (struct PayoutWalletStorage.Layout storage pointer,address payable)"}},"id":572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"881:65:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":573,"nodeType":"ExpressionStatement","src":"881:65:12"}]},"documentation":{"id":561,"nodeType":"StructuredDocumentation","src":"545:272:12","text":"@notice Initializes the storage with an initial payout wallet.\n @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\n @dev Emits a {PayoutWalletSet} event.\n @param initialPayoutWallet The initial payout wallet."},"id":575,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":563,"mutability":"mutable","name":"initialPayoutWallet","nameLocation":"850:19:12","nodeType":"VariableDeclaration","scope":575,"src":"834:35:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":562,"name":"address","nodeType":"ElementaryTypeName","src":"834:15:12","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"833:37:12"},"returnParameters":{"id":565,"nodeType":"ParameterList","parameters":[],"src":"871:0:12"},"scope":576,"src":"822:131:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":577,"src":"406:549:12","usedErrors":[105,430,642],"usedEvents":[121,649]}],"src":"32:924:12"},"id":12},"@animoca/ethereum-contracts/contracts/payment/base/PayoutWalletBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/base/PayoutWalletBase.sol","exportedSymbols":{"Context":[2125],"ContractOwnershipStorage":[395],"IPayoutWallet":[659],"PayoutWalletBase":[637],"PayoutWalletStorage":[795]},"id":638,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":578,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:13"},{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/interfaces/IPayoutWallet.sol","file":"./../interfaces/IPayoutWallet.sol","id":580,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":638,"sourceUnit":660,"src":"58:64:13","symbolAliases":[{"foreign":{"id":579,"name":"IPayoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":659,"src":"66:13:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../../access/libraries/ContractOwnershipStorage.sol","id":582,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":638,"sourceUnit":396,"src":"123:95:13","symbolAliases":[{"foreign":{"id":581,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":395,"src":"131:24:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol","file":"./../libraries/PayoutWalletStorage.sol","id":584,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":638,"sourceUnit":796,"src":"219:75:13","symbolAliases":[{"foreign":{"id":583,"name":"PayoutWalletStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"227:19:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":586,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":638,"sourceUnit":2126,"src":"295:66:13","symbolAliases":[{"foreign":{"id":585,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2125,"src":"303:7:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":588,"name":"IPayoutWallet","nameLocations":["605:13:13"],"nodeType":"IdentifierPath","referencedDeclaration":659,"src":"605:13:13"},"id":589,"nodeType":"InheritanceSpecifier","src":"605:13:13"},{"baseName":{"id":590,"name":"Context","nameLocations":["620:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":2125,"src":"620:7:13"},"id":591,"nodeType":"InheritanceSpecifier","src":"620:7:13"}],"canonicalName":"PayoutWalletBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":587,"nodeType":"StructuredDocumentation","src":"363:204:13","text":"@title Payout wallet (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC173 (Contract Ownership standard)."},"fullyImplemented":true,"id":637,"linearizedBaseContracts":[637,2125,659],"name":"PayoutWalletBase","nameLocation":"585:16:13","nodeType":"ContractDefinition","nodes":[{"global":false,"id":595,"libraryName":{"id":592,"name":"ContractOwnershipStorage","nameLocations":["640:24:13"],"nodeType":"IdentifierPath","referencedDeclaration":395,"src":"640:24:13"},"nodeType":"UsingForDirective","src":"634:67:13","typeName":{"id":594,"nodeType":"UserDefinedTypeName","pathNode":{"id":593,"name":"ContractOwnershipStorage.Layout","nameLocations":["669:24:13","694:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":168,"src":"669:31:13"},"referencedDeclaration":168,"src":"669:31:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":599,"libraryName":{"id":596,"name":"PayoutWalletStorage","nameLocations":["712:19:13"],"nodeType":"IdentifierPath","referencedDeclaration":795,"src":"712:19:13"},"nodeType":"UsingForDirective","src":"706:57:13","typeName":{"id":598,"nodeType":"UserDefinedTypeName","pathNode":{"id":597,"name":"PayoutWalletStorage.Layout","nameLocations":["736:19:13","756:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":674,"src":"736:26:13"},"referencedDeclaration":674,"src":"736:26:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$674_storage_ptr","typeString":"struct PayoutWalletStorage.Layout"}}},{"body":{"id":622,"nodeType":"Block","src":"1152:158:13","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":610,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"1219:10:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1219:12:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":605,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":395,"src":"1162:24:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$395_$","typeString":"type(library ContractOwnershipStorage)"}},"id":607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1187:6:13","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":394,"src":"1162:31:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$168_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1162:33:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":609,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1196:22:13","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":362,"src":"1162:56:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$168_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$168_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1162:70:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":613,"nodeType":"ExpressionStatement","src":"1162:70:13"},{"expression":{"arguments":[{"id":619,"name":"newPayoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"1287:15:13","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":614,"name":"PayoutWalletStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"1242:19:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PayoutWalletStorage_$795_$","typeString":"type(library PayoutWalletStorage)"}},"id":616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1262:6:13","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":794,"src":"1242:26:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$674_storage_ptr_$","typeString":"function () pure returns (struct PayoutWalletStorage.Layout storage pointer)"}},"id":617,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1242:28:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$674_storage_ptr","typeString":"struct PayoutWalletStorage.Layout storage pointer"}},"id":618,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1271:15:13","memberName":"setPayoutWallet","nodeType":"MemberAccess","referencedDeclaration":769,"src":"1242:44:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$674_storage_ptr_$_t_address_payable_$returns$__$attached_to$_t_struct$_Layout_$674_storage_ptr_$","typeString":"function (struct PayoutWalletStorage.Layout storage pointer,address payable)"}},"id":620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1242:61:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":621,"nodeType":"ExpressionStatement","src":"1242:61:13"}]},"documentation":{"id":600,"nodeType":"StructuredDocumentation","src":"769:311:13","text":"@notice Sets the payout wallet.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.\n @dev Emits a {PayoutWalletSet} event.\n @param newPayoutWallet The payout wallet."},"functionSelector":"6b8f9c43","id":623,"implemented":true,"kind":"function","modifiers":[],"name":"setPayoutWallet","nameLocation":"1094:15:13","nodeType":"FunctionDefinition","parameters":{"id":603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":602,"mutability":"mutable","name":"newPayoutWallet","nameLocation":"1126:15:13","nodeType":"VariableDeclaration","scope":623,"src":"1110:31:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":601,"name":"address","nodeType":"ElementaryTypeName","src":"1110:15:13","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"1109:33:13"},"returnParameters":{"id":604,"nodeType":"ParameterList","parameters":[],"src":"1152:0:13"},"scope":637,"src":"1085:225:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[658],"body":{"id":635,"nodeType":"Block","src":"1469:67:13","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":629,"name":"PayoutWalletStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"1486:19:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PayoutWalletStorage_$795_$","typeString":"type(library PayoutWalletStorage)"}},"id":630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1506:6:13","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":794,"src":"1486:26:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$674_storage_ptr_$","typeString":"function () pure returns (struct PayoutWalletStorage.Layout storage pointer)"}},"id":631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1486:28:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$674_storage_ptr","typeString":"struct PayoutWalletStorage.Layout storage pointer"}},"id":632,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1515:12:13","memberName":"payoutWallet","nodeType":"MemberAccess","referencedDeclaration":782,"src":"1486:41:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$674_storage_ptr_$returns$_t_address_payable_$attached_to$_t_struct$_Layout_$674_storage_ptr_$","typeString":"function (struct PayoutWalletStorage.Layout storage pointer) view returns (address payable)"}},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1486:43:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":628,"id":634,"nodeType":"Return","src":"1479:50:13"}]},"documentation":{"id":624,"nodeType":"StructuredDocumentation","src":"1316:77:13","text":"@notice Gets the payout wallet.\n @return wallet The payout wallet."},"functionSelector":"8488bb4e","id":636,"implemented":true,"kind":"function","modifiers":[],"name":"payoutWallet","nameLocation":"1407:12:13","nodeType":"FunctionDefinition","parameters":{"id":625,"nodeType":"ParameterList","parameters":[],"src":"1419:2:13"},"returnParameters":{"id":628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":627,"mutability":"mutable","name":"wallet","nameLocation":"1461:6:13","nodeType":"VariableDeclaration","scope":636,"src":"1445:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":626,"name":"address","nodeType":"ElementaryTypeName","src":"1445:15:13","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"1444:24:13"},"scope":637,"src":"1398:138:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":638,"src":"567:971:13","usedErrors":[105,642],"usedEvents":[649]}],"src":"32:1507:13"},"id":13},"@animoca/ethereum-contracts/contracts/payment/errors/PayoutWalletErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/errors/PayoutWalletErrors.sol","exportedSymbols":{"ZeroAddressPayoutWallet":[642]},"id":643,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":639,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:14"},{"documentation":{"id":640,"nodeType":"StructuredDocumentation","src":"58:71:14","text":"@notice Thrown when setting the zero address as the payout wallet."},"errorSelector":"40b539cf","id":642,"name":"ZeroAddressPayoutWallet","nameLocation":"135:23:14","nodeType":"ErrorDefinition","parameters":{"id":641,"nodeType":"ParameterList","parameters":[],"src":"158:2:14"},"src":"129:32:14"}],"src":"32:130:14"},"id":14},"@animoca/ethereum-contracts/contracts/payment/events/PayoutWalletEvents.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/events/PayoutWalletEvents.sol","exportedSymbols":{"PayoutWalletSet":[649]},"id":650,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":644,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:15"},{"anonymous":false,"documentation":{"id":645,"nodeType":"StructuredDocumentation","src":"58:115:15","text":"@notice Emitted when the payout wallet address changes.\n @param payoutWallet the new payout wallet address."},"eventSelector":"dd880d24a789958a6398c99c2e54ce31bc10a638cbc42f7dd34285479ae0f855","id":649,"name":"PayoutWalletSet","nameLocation":"179:15:15","nodeType":"EventDefinition","parameters":{"id":648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":647,"indexed":false,"mutability":"mutable","name":"payoutWallet","nameLocation":"203:12:15","nodeType":"VariableDeclaration","scope":649,"src":"195:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":646,"name":"address","nodeType":"ElementaryTypeName","src":"195:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"194:22:15"},"src":"173:44:15"}],"src":"32:186:15"},"id":15},"@animoca/ethereum-contracts/contracts/payment/interfaces/IPayoutWallet.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/interfaces/IPayoutWallet.sol","exportedSymbols":{"IPayoutWallet":[659]},"id":660,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":651,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:16"},{"abstract":false,"baseContracts":[],"canonicalName":"IPayoutWallet","contractDependencies":[],"contractKind":"interface","documentation":{"id":652,"nodeType":"StructuredDocumentation","src":"58:37:16","text":"@title Payout wallet (functions)"},"fullyImplemented":false,"id":659,"linearizedBaseContracts":[659],"name":"IPayoutWallet","nameLocation":"105:13:16","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":653,"nodeType":"StructuredDocumentation","src":"125:77:16","text":"@notice Gets the payout wallet.\n @return wallet The payout wallet."},"functionSelector":"8488bb4e","id":658,"implemented":false,"kind":"function","modifiers":[],"name":"payoutWallet","nameLocation":"216:12:16","nodeType":"FunctionDefinition","parameters":{"id":654,"nodeType":"ParameterList","parameters":[],"src":"228:2:16"},"returnParameters":{"id":657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":656,"mutability":"mutable","name":"wallet","nameLocation":"270:6:16","nodeType":"VariableDeclaration","scope":658,"src":"254:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":655,"name":"address","nodeType":"ElementaryTypeName","src":"254:15:16","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"253:24:16"},"scope":659,"src":"207:71:16","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":660,"src":"95:185:16","usedErrors":[],"usedEvents":[]}],"src":"32:249:16"},"id":16},"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol","exportedSymbols":{"PayoutWalletSet":[649],"PayoutWalletStorage":[795],"ProxyInitialization":[851],"ZeroAddressPayoutWallet":[642]},"id":796,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":661,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:17"},{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/errors/PayoutWalletErrors.sol","file":"./../errors/PayoutWalletErrors.sol","id":663,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":796,"sourceUnit":643,"src":"58:75:17","symbolAliases":[{"foreign":{"id":662,"name":"ZeroAddressPayoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":642,"src":"66:23:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/events/PayoutWalletEvents.sol","file":"./../events/PayoutWalletEvents.sol","id":665,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":796,"sourceUnit":650,"src":"134:67:17","symbolAliases":[{"foreign":{"id":664,"name":"PayoutWalletSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"142:15:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../proxy/libraries/ProxyInitialization.sol","id":667,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":796,"sourceUnit":852,"src":"202:84:17","symbolAliases":[{"foreign":{"id":666,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"210:19:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"PayoutWalletStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":795,"linearizedBaseContracts":[795],"name":"PayoutWalletStorage","nameLocation":"296:19:17","nodeType":"ContractDefinition","nodes":[{"global":false,"id":671,"libraryName":{"id":668,"name":"PayoutWalletStorage","nameLocations":["328:19:17"],"nodeType":"IdentifierPath","referencedDeclaration":795,"src":"328:19:17"},"nodeType":"UsingForDirective","src":"322:57:17","typeName":{"id":670,"nodeType":"UserDefinedTypeName","pathNode":{"id":669,"name":"PayoutWalletStorage.Layout","nameLocations":["352:19:17","372:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":674,"src":"352:26:17"},"referencedDeclaration":674,"src":"352:26:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$674_storage_ptr","typeString":"struct PayoutWalletStorage.Layout"}}},{"canonicalName":"PayoutWalletStorage.Layout","id":674,"members":[{"constant":false,"id":673,"mutability":"mutable","name":"wallet","nameLocation":"425:6:17","nodeType":"VariableDeclaration","scope":674,"src":"409:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":672,"name":"address","nodeType":"ElementaryTypeName","src":"409:15:17","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"name":"Layout","nameLocation":"392:6:17","nodeType":"StructDefinition","scope":795,"src":"385:53:17","visibility":"public"},{"constant":true,"id":687,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"470:19:17","nodeType":"VariableDeclaration","scope":795,"src":"444:124:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":675,"name":"bytes32","nodeType":"ElementaryTypeName","src":"444:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":685,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e7061796d656e742e5061796f757457616c6c65742e73746f72616765","id":681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"518:43:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_4fb5f8cdfbce77f22b0931a39e9f476a60a0f66524b2f379e96485471eb700ae","typeString":"literal_string \"animoca.core.payment.PayoutWallet.storage\""},"value":"animoca.core.payment.PayoutWallet.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_4fb5f8cdfbce77f22b0931a39e9f476a60a0f66524b2f379e96485471eb700ae","typeString":"literal_string \"animoca.core.payment.PayoutWallet.storage\""}],"id":680,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"508:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"508:54:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":679,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"500:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":678,"name":"uint256","nodeType":"ElementaryTypeName","src":"500:7:17","typeDescriptions":{}}},"id":683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"500:63:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":684,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"566:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"500:67:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":677,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"492:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":676,"name":"bytes32","nodeType":"ElementaryTypeName","src":"492:7:17","typeDescriptions":{}}},"id":686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"492:76:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":700,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"600:21:17","nodeType":"VariableDeclaration","scope":795,"src":"574:124:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":688,"name":"bytes32","nodeType":"ElementaryTypeName","src":"574:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":698,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e7061796d656e742e5061796f757457616c6c65742e7068617365","id":694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"650:41:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_03497821c97e7d2bd8e34992e1a723a2edcf97a05eef937ff657491b38cca19e","typeString":"literal_string \"animoca.core.payment.PayoutWallet.phase\""},"value":"animoca.core.payment.PayoutWallet.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_03497821c97e7d2bd8e34992e1a723a2edcf97a05eef937ff657491b38cca19e","typeString":"literal_string \"animoca.core.payment.PayoutWallet.phase\""}],"id":693,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"640:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"640:52:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":692,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"632:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":691,"name":"uint256","nodeType":"ElementaryTypeName","src":"632:7:17","typeDescriptions":{}}},"id":696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"632:61:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"696:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"632:65:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":690,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"624:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":689,"name":"bytes32","nodeType":"ElementaryTypeName","src":"624:7:17","typeDescriptions":{}}},"id":699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"624:74:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":715,"nodeType":"Block","src":"1205:55:17","statements":[{"expression":{"arguments":[{"id":712,"name":"initialPayoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"1233:19:17","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"id":709,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":704,"src":"1215:1:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$674_storage_ptr","typeString":"struct PayoutWalletStorage.Layout storage pointer"}},"id":711,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1217:15:17","memberName":"setPayoutWallet","nodeType":"MemberAccess","referencedDeclaration":769,"src":"1215:17:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$674_storage_ptr_$_t_address_payable_$returns$__$attached_to$_t_struct$_Layout_$674_storage_ptr_$","typeString":"function (struct PayoutWalletStorage.Layout storage pointer,address payable)"}},"id":713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1215:38:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":714,"nodeType":"ExpressionStatement","src":"1215:38:17"}]},"documentation":{"id":701,"nodeType":"StructuredDocumentation","src":"705:406:17","text":"@notice Initializes the storage with an initial payout wallet (immutable version).\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\n @dev Emits a {PayoutWalletSet} event.\n @param initialPayoutWallet The initial payout wallet."},"id":716,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1125:15:17","nodeType":"FunctionDefinition","parameters":{"id":707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":704,"mutability":"mutable","name":"s","nameLocation":"1156:1:17","nodeType":"VariableDeclaration","scope":716,"src":"1141:16:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$674_storage_ptr","typeString":"struct PayoutWalletStorage.Layout"},"typeName":{"id":703,"nodeType":"UserDefinedTypeName","pathNode":{"id":702,"name":"Layout","nameLocations":["1141:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":674,"src":"1141:6:17"},"referencedDeclaration":674,"src":"1141:6:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$674_storage_ptr","typeString":"struct PayoutWalletStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":706,"mutability":"mutable","name":"initialPayoutWallet","nameLocation":"1175:19:17","nodeType":"VariableDeclaration","scope":716,"src":"1159:35:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":705,"name":"address","nodeType":"ElementaryTypeName","src":"1159:15:17","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"1140:55:17"},"returnParameters":{"id":708,"nodeType":"ParameterList","parameters":[],"src":"1205:0:17"},"scope":795,"src":"1116:144:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":738,"nodeType":"Block","src":"1923:119:17","statements":[{"expression":{"arguments":[{"id":728,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":700,"src":"1962:21:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1985:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":725,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"1933:19:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$851_$","typeString":"type(library ProxyInitialization)"}},"id":727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1953:8:17","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":850,"src":"1933:28:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":730,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1933:54:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":731,"nodeType":"ExpressionStatement","src":"1933:54:17"},{"expression":{"arguments":[{"id":735,"name":"initialPayoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":722,"src":"2015:19:17","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"id":732,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"1997:1:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$674_storage_ptr","typeString":"struct PayoutWalletStorage.Layout storage pointer"}},"id":734,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1999:15:17","memberName":"setPayoutWallet","nodeType":"MemberAccess","referencedDeclaration":769,"src":"1997:17:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$674_storage_ptr_$_t_address_payable_$returns$__$attached_to$_t_struct$_Layout_$674_storage_ptr_$","typeString":"function (struct PayoutWalletStorage.Layout storage pointer,address payable)"}},"id":736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1997:38:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":737,"nodeType":"ExpressionStatement","src":"1997:38:17"}]},"documentation":{"id":717,"nodeType":"StructuredDocumentation","src":"1266:569:17","text":"@notice Initializes the storage with an initial payout wallet (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\n @dev Emits a {PayoutWalletSet} event.\n @param initialPayoutWallet The initial payout wallet."},"id":739,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"1849:9:17","nodeType":"FunctionDefinition","parameters":{"id":723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":720,"mutability":"mutable","name":"s","nameLocation":"1874:1:17","nodeType":"VariableDeclaration","scope":739,"src":"1859:16:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$674_storage_ptr","typeString":"struct PayoutWalletStorage.Layout"},"typeName":{"id":719,"nodeType":"UserDefinedTypeName","pathNode":{"id":718,"name":"Layout","nameLocations":["1859:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":674,"src":"1859:6:17"},"referencedDeclaration":674,"src":"1859:6:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$674_storage_ptr","typeString":"struct PayoutWalletStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":722,"mutability":"mutable","name":"initialPayoutWallet","nameLocation":"1893:19:17","nodeType":"VariableDeclaration","scope":739,"src":"1877:35:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":721,"name":"address","nodeType":"ElementaryTypeName","src":"1877:15:17","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"1858:55:17"},"returnParameters":{"id":724,"nodeType":"ParameterList","parameters":[],"src":"1923:0:17"},"scope":795,"src":"1840:202:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":768,"nodeType":"Block","src":"2363:167:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":748,"name":"newPayoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":745,"src":"2377:15:17","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2404:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":750,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2396:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":749,"name":"address","nodeType":"ElementaryTypeName","src":"2396:7:17","typeDescriptions":{}}},"id":752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2396:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2377:29:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":757,"nodeType":"IfStatement","src":"2373:67:17","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":754,"name":"ZeroAddressPayoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":642,"src":"2415:23:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":755,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2415:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":756,"nodeType":"RevertStatement","src":"2408:32:17"}},{"expression":{"id":762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":758,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":743,"src":"2450:1:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$674_storage_ptr","typeString":"struct PayoutWalletStorage.Layout storage pointer"}},"id":760,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2452:6:17","memberName":"wallet","nodeType":"MemberAccess","referencedDeclaration":673,"src":"2450:8:17","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":761,"name":"newPayoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":745,"src":"2461:15:17","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"2450:26:17","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":763,"nodeType":"ExpressionStatement","src":"2450:26:17"},{"eventCall":{"arguments":[{"id":765,"name":"newPayoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":745,"src":"2507:15:17","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":764,"name":"PayoutWalletSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"2491:15:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2491:32:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":767,"nodeType":"EmitStatement","src":"2486:37:17"}]},"documentation":{"id":740,"nodeType":"StructuredDocumentation","src":"2048:225:17","text":"@notice Sets the payout wallet.\n @dev Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.\n @dev Emits a {PayoutWalletSet} event.\n @param newPayoutWallet The payout wallet."},"id":769,"implemented":true,"kind":"function","modifiers":[],"name":"setPayoutWallet","nameLocation":"2287:15:17","nodeType":"FunctionDefinition","parameters":{"id":746,"nodeType":"ParameterList","parameters":[{"constant":false,"id":743,"mutability":"mutable","name":"s","nameLocation":"2318:1:17","nodeType":"VariableDeclaration","scope":769,"src":"2303:16:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$674_storage_ptr","typeString":"struct PayoutWalletStorage.Layout"},"typeName":{"id":742,"nodeType":"UserDefinedTypeName","pathNode":{"id":741,"name":"Layout","nameLocations":["2303:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":674,"src":"2303:6:17"},"referencedDeclaration":674,"src":"2303:6:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$674_storage_ptr","typeString":"struct PayoutWalletStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":745,"mutability":"mutable","name":"newPayoutWallet","nameLocation":"2337:15:17","nodeType":"VariableDeclaration","scope":769,"src":"2321:31:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":744,"name":"address","nodeType":"ElementaryTypeName","src":"2321:15:17","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"2302:51:17"},"returnParameters":{"id":747,"nodeType":"ParameterList","parameters":[],"src":"2363:0:17"},"scope":795,"src":"2278:252:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":781,"nodeType":"Block","src":"2698:32:17","statements":[{"expression":{"expression":{"id":778,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":773,"src":"2715:1:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$674_storage_ptr","typeString":"struct PayoutWalletStorage.Layout storage pointer"}},"id":779,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2717:6:17","memberName":"wallet","nodeType":"MemberAccess","referencedDeclaration":673,"src":"2715:8:17","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":777,"id":780,"nodeType":"Return","src":"2708:15:17"}]},"documentation":{"id":770,"nodeType":"StructuredDocumentation","src":"2536:77:17","text":"@notice Gets the payout wallet.\n @return wallet The payout wallet."},"id":782,"implemented":true,"kind":"function","modifiers":[],"name":"payoutWallet","nameLocation":"2627:12:17","nodeType":"FunctionDefinition","parameters":{"id":774,"nodeType":"ParameterList","parameters":[{"constant":false,"id":773,"mutability":"mutable","name":"s","nameLocation":"2655:1:17","nodeType":"VariableDeclaration","scope":782,"src":"2640:16:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$674_storage_ptr","typeString":"struct PayoutWalletStorage.Layout"},"typeName":{"id":772,"nodeType":"UserDefinedTypeName","pathNode":{"id":771,"name":"Layout","nameLocations":["2640:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":674,"src":"2640:6:17"},"referencedDeclaration":674,"src":"2640:6:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$674_storage_ptr","typeString":"struct PayoutWalletStorage.Layout"}},"visibility":"internal"}],"src":"2639:18:17"},"returnParameters":{"id":777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":776,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":782,"src":"2681:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":775,"name":"address","nodeType":"ElementaryTypeName","src":"2681:15:17","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"2680:17:17"},"scope":795,"src":"2618:112:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":793,"nodeType":"Block","src":"2795:115:17","statements":[{"assignments":[789],"declarations":[{"constant":false,"id":789,"mutability":"mutable","name":"position","nameLocation":"2813:8:17","nodeType":"VariableDeclaration","scope":793,"src":"2805:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":788,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2805:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":791,"initialValue":{"id":790,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":687,"src":"2824:19:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2805:38:17"},{"AST":{"nativeSrc":"2862:42:17","nodeType":"YulBlock","src":"2862:42:17","statements":[{"nativeSrc":"2876:18:17","nodeType":"YulAssignment","src":"2876:18:17","value":{"name":"position","nativeSrc":"2886:8:17","nodeType":"YulIdentifier","src":"2886:8:17"},"variableNames":[{"name":"s.slot","nativeSrc":"2876:6:17","nodeType":"YulIdentifier","src":"2876:6:17"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":789,"isOffset":false,"isSlot":false,"src":"2886:8:17","valueSize":1},{"declaration":786,"isOffset":false,"isSlot":true,"src":"2876:6:17","suffix":"slot","valueSize":1}],"id":792,"nodeType":"InlineAssembly","src":"2853:51:17"}]},"id":794,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"2745:6:17","nodeType":"FunctionDefinition","parameters":{"id":783,"nodeType":"ParameterList","parameters":[],"src":"2751:2:17"},"returnParameters":{"id":787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":786,"mutability":"mutable","name":"s","nameLocation":"2792:1:17","nodeType":"VariableDeclaration","scope":794,"src":"2777:16:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$674_storage_ptr","typeString":"struct PayoutWalletStorage.Layout"},"typeName":{"id":785,"nodeType":"UserDefinedTypeName","pathNode":{"id":784,"name":"Layout","nameLocations":["2777:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":674,"src":"2777:6:17"},"referencedDeclaration":674,"src":"2777:6:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$674_storage_ptr","typeString":"struct PayoutWalletStorage.Layout"}},"visibility":"internal"}],"src":"2776:18:17"},"scope":795,"src":"2736:174:17","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":796,"src":"288:2624:17","usedErrors":[],"usedEvents":[]}],"src":"32:2881:17"},"id":17},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[804]},"id":805,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":797,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:18"},{"documentation":{"id":798,"nodeType":"StructuredDocumentation","src":"58:179:18","text":"@notice Emitted when trying to set a phase value that has already been reached.\n @param currentPhase The current phase.\n @param newPhase The new phase trying to be set."},"errorSelector":"bf0c18ec","id":804,"name":"InitializationPhaseAlreadyReached","nameLocation":"243:33:18","nodeType":"ErrorDefinition","parameters":{"id":803,"nodeType":"ParameterList","parameters":[{"constant":false,"id":800,"mutability":"mutable","name":"currentPhase","nameLocation":"285:12:18","nodeType":"VariableDeclaration","scope":804,"src":"277:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":799,"name":"uint256","nodeType":"ElementaryTypeName","src":"277:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":802,"mutability":"mutable","name":"newPhase","nameLocation":"307:8:18","nodeType":"VariableDeclaration","scope":804,"src":"299:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":801,"name":"uint256","nodeType":"ElementaryTypeName","src":"299:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"276:40:18"},"src":"237:80:18"}],"src":"32:286:18"},"id":18},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[804],"ProxyInitialization":[851],"StorageSlot":[2235]},"id":852,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":806,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:19"},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","file":"./../errors/ProxyInitializationErrors.sol","id":808,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":852,"sourceUnit":805,"src":"58:92:19","symbolAliases":[{"foreign":{"id":807,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"66:33:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"@openzeppelin/contracts/utils/StorageSlot.sol","id":810,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":852,"sourceUnit":2236,"src":"151:74:19","symbolAliases":[{"foreign":{"id":809,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"159:11:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ProxyInitialization","contractDependencies":[],"contractKind":"library","documentation":{"id":811,"nodeType":"StructuredDocumentation","src":"227:92:19","text":"@notice Multiple calls protection for storage-modifying proxy initialization functions."},"fullyImplemented":true,"id":851,"linearizedBaseContracts":[851],"name":"ProxyInitialization","nameLocation":"327:19:19","nodeType":"ContractDefinition","nodes":[{"body":{"id":849,"nodeType":"Block","src":"735:294:19","statements":[{"assignments":[823],"declarations":[{"constant":false,"id":823,"mutability":"mutable","name":"currentVersion","nameLocation":"777:14:19","nodeType":"VariableDeclaration","scope":849,"src":"745:46:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2140_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":822,"nodeType":"UserDefinedTypeName","pathNode":{"id":821,"name":"StorageSlot.Uint256Slot","nameLocations":["745:11:19","757:11:19"],"nodeType":"IdentifierPath","referencedDeclaration":2140,"src":"745:23:19"},"referencedDeclaration":2140,"src":"745:23:19","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2140_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"id":828,"initialValue":{"arguments":[{"id":826,"name":"storageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"821:11:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":824,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"794:11:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$2235_$","typeString":"type(library StorageSlot)"}},"id":825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"806:14:19","memberName":"getUint256Slot","nodeType":"MemberAccess","referencedDeclaration":2190,"src":"794:26:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Uint256Slot_$2140_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.Uint256Slot storage pointer)"}},"id":827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"794:39:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2140_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"745:88:19"},{"assignments":[830],"declarations":[{"constant":false,"id":830,"mutability":"mutable","name":"currentPhase","nameLocation":"851:12:19","nodeType":"VariableDeclaration","scope":849,"src":"843:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":829,"name":"uint256","nodeType":"ElementaryTypeName","src":"843:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":833,"initialValue":{"expression":{"id":831,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":823,"src":"866:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2140_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":832,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"881:5:19","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2139,"src":"866:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"843:43:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":834,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":830,"src":"900:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":835,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":816,"src":"916:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"900:21:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":842,"nodeType":"IfStatement","src":"896:88:19","trueBody":{"errorCall":{"arguments":[{"id":838,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":830,"src":"964:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":839,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":816,"src":"978:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":837,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"930:33:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"930:54:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":841,"nodeType":"RevertStatement","src":"923:61:19"}},{"expression":{"id":847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":843,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":823,"src":"994:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2140_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":845,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1009:5:19","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2139,"src":"994:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":846,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":816,"src":"1017:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"994:28:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":848,"nodeType":"ExpressionStatement","src":"994:28:19"}]},"documentation":{"id":812,"nodeType":"StructuredDocumentation","src":"353:314:19","text":"@notice Sets the initialization phase during a storage-modifying proxy initialization function.\n @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n @param storageSlot the storage slot where `phase` is stored.\n @param phase the initialization phase."},"id":850,"implemented":true,"kind":"function","modifiers":[],"name":"setPhase","nameLocation":"681:8:19","nodeType":"FunctionDefinition","parameters":{"id":817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":814,"mutability":"mutable","name":"storageSlot","nameLocation":"698:11:19","nodeType":"VariableDeclaration","scope":850,"src":"690:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":813,"name":"bytes32","nodeType":"ElementaryTypeName","src":"690:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":816,"mutability":"mutable","name":"phase","nameLocation":"719:5:19","nodeType":"VariableDeclaration","scope":850,"src":"711:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":815,"name":"uint256","nodeType":"ElementaryTypeName","src":"711:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"689:36:19"},"returnParameters":{"id":818,"nodeType":"ParameterList","parameters":[],"src":"735:0:19"},"scope":851,"src":"672:357:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":852,"src":"319:712:19","usedErrors":[],"usedEvents":[]}],"src":"32:1000:19"},"id":19},"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol","exportedSymbols":{"ContractOwnership":[43],"TokenRecovery":[863],"TokenRecoveryBase":[1081]},"id":864,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":853,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:20"},{"absolutePath":"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol","file":"./base/TokenRecoveryBase.sol","id":855,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":864,"sourceUnit":1082,"src":"58:63:20","symbolAliases":[{"foreign":{"id":854,"name":"TokenRecoveryBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"66:17:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"./../access/ContractOwnership.sol","id":857,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":864,"sourceUnit":44,"src":"122:68:20","symbolAliases":[{"foreign":{"id":856,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43,"src":"130:17:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":859,"name":"TokenRecoveryBase","nameLocations":["440:17:20"],"nodeType":"IdentifierPath","referencedDeclaration":1081,"src":"440:17:20"},"id":860,"nodeType":"InheritanceSpecifier","src":"440:17:20"},{"baseName":{"id":861,"name":"ContractOwnership","nameLocations":["459:17:20"],"nodeType":"IdentifierPath","referencedDeclaration":43,"src":"459:17:20"},"id":862,"nodeType":"InheritanceSpecifier","src":"459:17:20"}],"canonicalName":"TokenRecovery","contractDependencies":[],"contractKind":"contract","documentation":{"id":858,"nodeType":"StructuredDocumentation","src":"192:213:20","text":"@title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":863,"linearizedBaseContracts":[863,43,425,442,91,1081,2125,137],"name":"TokenRecovery","nameLocation":"423:13:20","nodeType":"ContractDefinition","nodes":[],"scope":864,"src":"405:76:20","usedErrors":[7,105,430],"usedEvents":[121]}],"src":"32:450:20"},"id":20},"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol","exportedSymbols":{"Address":[2103],"Context":[2125],"ContractOwnershipStorage":[395],"IERC20":[1361],"IERC721":[1280],"InconsistentArrayLengths":[7],"SafeERC20":[1773],"TokenRecoveryBase":[1081]},"id":1082,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":865,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:21"},{"absolutePath":"@animoca/ethereum-contracts/contracts/CommonErrors.sol","file":"./../../CommonErrors.sol","id":867,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1082,"sourceUnit":11,"src":"58:66:21","symbolAliases":[{"foreign":{"id":866,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"66:24:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","file":"@openzeppelin/contracts/interfaces/IERC20.sol","id":869,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1082,"sourceUnit":1284,"src":"125:69:21","symbolAliases":[{"foreign":{"id":868,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1361,"src":"133:6:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","file":"./../../token/ERC721/interfaces/IERC721.sol","id":871,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1082,"sourceUnit":1281,"src":"195:68:21","symbolAliases":[{"foreign":{"id":870,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"203:7:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../../access/libraries/ContractOwnershipStorage.sol","id":873,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1082,"sourceUnit":396,"src":"264:95:21","symbolAliases":[{"foreign":{"id":872,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":395,"src":"272:24:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":875,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1082,"sourceUnit":1774,"src":"360:82:21","symbolAliases":[{"foreign":{"id":874,"name":"SafeERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1773,"src":"368:9:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":877,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1082,"sourceUnit":2126,"src":"443:66:21","symbolAliases":[{"foreign":{"id":876,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2125,"src":"451:7:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":879,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1082,"sourceUnit":2104,"src":"510:66:21","symbolAliases":[{"foreign":{"id":878,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2103,"src":"518:7:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":881,"name":"Context","nameLocations":["889:7:21"],"nodeType":"IdentifierPath","referencedDeclaration":2125,"src":"889:7:21"},"id":882,"nodeType":"InheritanceSpecifier","src":"889:7:21"}],"canonicalName":"TokenRecoveryBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":880,"nodeType":"StructuredDocumentation","src":"578:272:21","text":"@title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC173 (Contract Ownership standard)."},"fullyImplemented":true,"id":1081,"linearizedBaseContracts":[1081,2125],"name":"TokenRecoveryBase","nameLocation":"868:17:21","nodeType":"ContractDefinition","nodes":[{"global":false,"id":886,"libraryName":{"id":883,"name":"ContractOwnershipStorage","nameLocations":["909:24:21"],"nodeType":"IdentifierPath","referencedDeclaration":395,"src":"909:24:21"},"nodeType":"UsingForDirective","src":"903:67:21","typeName":{"id":885,"nodeType":"UserDefinedTypeName","pathNode":{"id":884,"name":"ContractOwnershipStorage.Layout","nameLocations":["938:24:21","963:6:21"],"nodeType":"IdentifierPath","referencedDeclaration":168,"src":"938:31:21"},"referencedDeclaration":168,"src":"938:31:21","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":890,"libraryName":{"id":887,"name":"SafeERC20","nameLocations":["981:9:21"],"nodeType":"IdentifierPath","referencedDeclaration":1773,"src":"981:9:21"},"nodeType":"UsingForDirective","src":"975:27:21","typeName":{"id":889,"nodeType":"UserDefinedTypeName","pathNode":{"id":888,"name":"IERC20","nameLocations":["995:6:21"],"nodeType":"IdentifierPath","referencedDeclaration":1361,"src":"995:6:21"},"referencedDeclaration":1361,"src":"995:6:21","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}}},{"global":false,"id":893,"libraryName":{"id":891,"name":"Address","nameLocations":["1013:7:21"],"nodeType":"IdentifierPath","referencedDeclaration":2103,"src":"1013:7:21"},"nodeType":"UsingForDirective","src":"1007:34:21","typeName":{"id":892,"name":"address","nodeType":"ElementaryTypeName","src":"1025:15:21","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}},{"body":{"id":945,"nodeType":"Block","src":"2042:302:21","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":908,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"2109:10:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2109:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":903,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":395,"src":"2052:24:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$395_$","typeString":"type(library ContractOwnershipStorage)"}},"id":905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2077:6:21","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":394,"src":"2052:31:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$168_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2052:33:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":907,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2086:22:21","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":362,"src":"2052:56:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$168_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$168_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2052:70:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":911,"nodeType":"ExpressionStatement","src":"2052:70:21"},{"assignments":[913],"declarations":[{"constant":false,"id":913,"mutability":"mutable","name":"length","nameLocation":"2140:6:21","nodeType":"VariableDeclaration","scope":945,"src":"2132:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":912,"name":"uint256","nodeType":"ElementaryTypeName","src":"2132:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":916,"initialValue":{"expression":{"id":914,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"2149:8:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[] calldata"}},"id":915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2158:6:21","memberName":"length","nodeType":"MemberAccess","src":"2149:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2132:32:21"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":917,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"2178:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":918,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":900,"src":"2188:7:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2196:6:21","memberName":"length","nodeType":"MemberAccess","src":"2188:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2178:24:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":924,"nodeType":"IfStatement","src":"2174:63:21","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":921,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2211:24:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2211:26:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":923,"nodeType":"RevertStatement","src":"2204:33:21"}},{"body":{"id":943,"nodeType":"Block","src":"2280:58:21","statements":[{"expression":{"arguments":[{"baseExpression":{"id":938,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":900,"src":"2316:7:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":940,"indexExpression":{"id":939,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"2324:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2316:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":934,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"2294:8:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[] calldata"}},"id":936,"indexExpression":{"id":935,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"2303:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2294:11:21","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2306:9:21","memberName":"sendValue","nodeType":"MemberAccess","referencedDeclaration":1825,"src":"2294:21:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$attached_to$_t_address_payable_$","typeString":"function (address payable,uint256)"}},"id":941,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2294:33:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":942,"nodeType":"ExpressionStatement","src":"2294:33:21"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":928,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"2263:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":929,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"2267:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2263:10:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":944,"initializationExpression":{"assignments":[926],"declarations":[{"constant":false,"id":926,"mutability":"mutable","name":"i","nameLocation":"2260:1:21","nodeType":"VariableDeclaration","scope":944,"src":"2252:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":925,"name":"uint256","nodeType":"ElementaryTypeName","src":"2252:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":927,"nodeType":"VariableDeclarationStatement","src":"2252:9:21"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"2275:3:21","subExpression":{"id":931,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"2277:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":933,"nodeType":"ExpressionStatement","src":"2275:3:21"},"nodeType":"ForStatement","src":"2247:91:21"}]},"documentation":{"id":894,"nodeType":"StructuredDocumentation","src":"1047:890:21","text":"@notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\n @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\n  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\n  so that the extraction is limited to only amounts sent accidentally.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\n @dev Reverts if one of the ETH transfers fails for any reason.\n @param accounts the list of accounts to transfer the tokens to.\n @param amounts the list of token amounts to transfer."},"functionSelector":"f7ba94bd","id":946,"implemented":true,"kind":"function","modifiers":[],"name":"recoverETH","nameLocation":"1951:10:21","nodeType":"FunctionDefinition","parameters":{"id":901,"nodeType":"ParameterList","parameters":[{"constant":false,"id":897,"mutability":"mutable","name":"accounts","nameLocation":"1989:8:21","nodeType":"VariableDeclaration","scope":946,"src":"1962:35:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[]"},"typeName":{"baseType":{"id":895,"name":"address","nodeType":"ElementaryTypeName","src":"1962:15:21","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":896,"nodeType":"ArrayTypeName","src":"1962:17:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"internal"},{"constant":false,"id":900,"mutability":"mutable","name":"amounts","nameLocation":"2018:7:21","nodeType":"VariableDeclaration","scope":946,"src":"1999:26:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":898,"name":"uint256","nodeType":"ElementaryTypeName","src":"1999:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":899,"nodeType":"ArrayTypeName","src":"1999:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1961:65:21"},"returnParameters":{"id":902,"nodeType":"ParameterList","parameters":[],"src":"2042:0:21"},"scope":1081,"src":"1942:402:21","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1010,"nodeType":"Block","src":"3234:343:21","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":965,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"3301:10:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3301:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":960,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":395,"src":"3244:24:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$395_$","typeString":"type(library ContractOwnershipStorage)"}},"id":962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3269:6:21","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":394,"src":"3244:31:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$168_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":963,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3244:33:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":964,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3278:22:21","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":362,"src":"3244:56:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$168_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$168_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3244:70:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":968,"nodeType":"ExpressionStatement","src":"3244:70:21"},{"assignments":[970],"declarations":[{"constant":false,"id":970,"mutability":"mutable","name":"length","nameLocation":"3332:6:21","nodeType":"VariableDeclaration","scope":1010,"src":"3324:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":969,"name":"uint256","nodeType":"ElementaryTypeName","src":"3324:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":973,"initialValue":{"expression":{"id":971,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":950,"src":"3341:8:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3350:6:21","memberName":"length","nodeType":"MemberAccess","src":"3341:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3324:32:21"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":974,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"3370:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":975,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"3380:6:21","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$1361_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},"id":976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3387:6:21","memberName":"length","nodeType":"MemberAccess","src":"3380:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3370:23:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":978,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"3397:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":979,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":957,"src":"3407:7:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3415:6:21","memberName":"length","nodeType":"MemberAccess","src":"3407:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3397:24:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3370:51:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":986,"nodeType":"IfStatement","src":"3366:90:21","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":983,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"3430:24:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3430:26:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":985,"nodeType":"RevertStatement","src":"3423:33:21"}},{"body":{"id":1008,"nodeType":"Block","src":"3499:72:21","statements":[{"expression":{"arguments":[{"baseExpression":{"id":1000,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":950,"src":"3536:8:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":1002,"indexExpression":{"id":1001,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"3545:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3536:11:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":1003,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":957,"src":"3549:7:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1005,"indexExpression":{"id":1004,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"3557:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3549:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":996,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"3513:6:21","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$1361_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},"id":998,"indexExpression":{"id":997,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"3520:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3513:9:21","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}},"id":999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3523:12:21","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":1430,"src":"3513:22:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1361_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$1361_$","typeString":"function (contract IERC20,address,uint256)"}},"id":1006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3513:47:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1007,"nodeType":"ExpressionStatement","src":"3513:47:21"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":990,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"3482:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":991,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"3486:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3482:10:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1009,"initializationExpression":{"assignments":[988],"declarations":[{"constant":false,"id":988,"mutability":"mutable","name":"i","nameLocation":"3479:1:21","nodeType":"VariableDeclaration","scope":1009,"src":"3471:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":987,"name":"uint256","nodeType":"ElementaryTypeName","src":"3471:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":989,"nodeType":"VariableDeclarationStatement","src":"3471:9:21"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"3494:3:21","subExpression":{"id":993,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"3496:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":995,"nodeType":"ExpressionStatement","src":"3494:3:21"},"nodeType":"ForStatement","src":"3466:105:21"}]},"documentation":{"id":947,"nodeType":"StructuredDocumentation","src":"2350:758:21","text":"@notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\n  so that the extraction is limited to only amounts sent accidentally.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\n @dev Reverts if one of the ERC20 transfers fails for any reason.\n @param accounts the list of accounts to transfer the tokens to.\n @param tokens the list of ERC20 token addresses.\n @param amounts the list of token amounts to transfer."},"functionSelector":"73c8a958","id":1011,"implemented":true,"kind":"function","modifiers":[],"name":"recoverERC20s","nameLocation":"3122:13:21","nodeType":"FunctionDefinition","parameters":{"id":958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":950,"mutability":"mutable","name":"accounts","nameLocation":"3155:8:21","nodeType":"VariableDeclaration","scope":1011,"src":"3136:27:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":948,"name":"address","nodeType":"ElementaryTypeName","src":"3136:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":949,"nodeType":"ArrayTypeName","src":"3136:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":954,"mutability":"mutable","name":"tokens","nameLocation":"3183:6:21","nodeType":"VariableDeclaration","scope":1011,"src":"3165:24:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$1361_$dyn_calldata_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":952,"nodeType":"UserDefinedTypeName","pathNode":{"id":951,"name":"IERC20","nameLocations":["3165:6:21"],"nodeType":"IdentifierPath","referencedDeclaration":1361,"src":"3165:6:21"},"referencedDeclaration":1361,"src":"3165:6:21","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}},"id":953,"nodeType":"ArrayTypeName","src":"3165:8:21","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$1361_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":957,"mutability":"mutable","name":"amounts","nameLocation":"3210:7:21","nodeType":"VariableDeclaration","scope":1011,"src":"3191:26:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":955,"name":"uint256","nodeType":"ElementaryTypeName","src":"3191:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":956,"nodeType":"ArrayTypeName","src":"3191:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3135:83:21"},"returnParameters":{"id":959,"nodeType":"ParameterList","parameters":[],"src":"3234:0:21"},"scope":1081,"src":"3113:464:21","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1079,"nodeType":"Block","src":"4482:366:21","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1030,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"4549:10:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4549:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1025,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":395,"src":"4492:24:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$395_$","typeString":"type(library ContractOwnershipStorage)"}},"id":1027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4517:6:21","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":394,"src":"4492:31:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$168_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":1028,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4492:33:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":1029,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4526:22:21","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":362,"src":"4492:56:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$168_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$168_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":1032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4492:70:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1033,"nodeType":"ExpressionStatement","src":"4492:70:21"},{"assignments":[1035],"declarations":[{"constant":false,"id":1035,"mutability":"mutable","name":"length","nameLocation":"4580:6:21","nodeType":"VariableDeclaration","scope":1079,"src":"4572:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1034,"name":"uint256","nodeType":"ElementaryTypeName","src":"4572:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1038,"initialValue":{"expression":{"id":1036,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1015,"src":"4589:8:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":1037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4598:6:21","memberName":"length","nodeType":"MemberAccess","src":"4589:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4572:32:21"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1039,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1035,"src":"4618:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1040,"name":"contracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"4628:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$1280_$dyn_calldata_ptr","typeString":"contract IERC721[] calldata"}},"id":1041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4638:6:21","memberName":"length","nodeType":"MemberAccess","src":"4628:16:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4618:26:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1043,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1035,"src":"4648:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1044,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1022,"src":"4658:8:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4667:6:21","memberName":"length","nodeType":"MemberAccess","src":"4658:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4648:25:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4618:55:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1051,"nodeType":"IfStatement","src":"4614:94:21","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1048,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"4682:24:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4682:26:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1050,"nodeType":"RevertStatement","src":"4675:33:21"}},{"body":{"id":1077,"nodeType":"Block","src":"4751:91:21","statements":[{"expression":{"arguments":[{"arguments":[{"id":1067,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4799:4:21","typeDescriptions":{"typeIdentifier":"t_contract$_TokenRecoveryBase_$1081","typeString":"contract TokenRecoveryBase"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TokenRecoveryBase_$1081","typeString":"contract TokenRecoveryBase"}],"id":1066,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4791:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1065,"name":"address","nodeType":"ElementaryTypeName","src":"4791:7:21","typeDescriptions":{}}},"id":1068,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4791:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":1069,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1015,"src":"4806:8:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":1071,"indexExpression":{"id":1070,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1053,"src":"4815:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4806:11:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":1072,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1022,"src":"4819:8:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1074,"indexExpression":{"id":1073,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1053,"src":"4828:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4819:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":1061,"name":"contracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"4765:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$1280_$dyn_calldata_ptr","typeString":"contract IERC721[] calldata"}},"id":1063,"indexExpression":{"id":1062,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1053,"src":"4775:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4765:12:21","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$1280","typeString":"contract IERC721"}},"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4778:12:21","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":1223,"src":"4765:25:21","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) external"}},"id":1075,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4765:66:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1076,"nodeType":"ExpressionStatement","src":"4765:66:21"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1055,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1053,"src":"4734:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1056,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1035,"src":"4738:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4734:10:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1078,"initializationExpression":{"assignments":[1053],"declarations":[{"constant":false,"id":1053,"mutability":"mutable","name":"i","nameLocation":"4731:1:21","nodeType":"VariableDeclaration","scope":1078,"src":"4723:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1052,"name":"uint256","nodeType":"ElementaryTypeName","src":"4723:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1054,"nodeType":"VariableDeclarationStatement","src":"4723:9:21"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"4746:3:21","subExpression":{"id":1058,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1053,"src":"4748:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1060,"nodeType":"ExpressionStatement","src":"4746:3:21"},"nodeType":"ForStatement","src":"4718:124:21"}]},"documentation":{"id":1012,"nodeType":"StructuredDocumentation","src":"3583:767:21","text":"@notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\n  so that the extraction is limited to only tokens sent accidentally.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\n @dev Reverts if one of the ERC721 transfers fails for any reason.\n @param accounts the list of accounts to transfer the tokens to.\n @param contracts the list of ERC721 contract addresses.\n @param tokenIds the list of token ids to transfer."},"functionSelector":"c3666c36","id":1080,"implemented":true,"kind":"function","modifiers":[],"name":"recoverERC721s","nameLocation":"4364:14:21","nodeType":"FunctionDefinition","parameters":{"id":1023,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1015,"mutability":"mutable","name":"accounts","nameLocation":"4398:8:21","nodeType":"VariableDeclaration","scope":1080,"src":"4379:27:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1013,"name":"address","nodeType":"ElementaryTypeName","src":"4379:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1014,"nodeType":"ArrayTypeName","src":"4379:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1019,"mutability":"mutable","name":"contracts","nameLocation":"4427:9:21","nodeType":"VariableDeclaration","scope":1080,"src":"4408:28:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$1280_$dyn_calldata_ptr","typeString":"contract IERC721[]"},"typeName":{"baseType":{"id":1017,"nodeType":"UserDefinedTypeName","pathNode":{"id":1016,"name":"IERC721","nameLocations":["4408:7:21"],"nodeType":"IdentifierPath","referencedDeclaration":1280,"src":"4408:7:21"},"referencedDeclaration":1280,"src":"4408:7:21","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$1280","typeString":"contract IERC721"}},"id":1018,"nodeType":"ArrayTypeName","src":"4408:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$1280_$dyn_storage_ptr","typeString":"contract IERC721[]"}},"visibility":"internal"},{"constant":false,"id":1022,"mutability":"mutable","name":"tokenIds","nameLocation":"4457:8:21","nodeType":"VariableDeclaration","scope":1080,"src":"4438:27:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1020,"name":"uint256","nodeType":"ElementaryTypeName","src":"4438:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1021,"nodeType":"ArrayTypeName","src":"4438:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4378:88:21"},"returnParameters":{"id":1024,"nodeType":"ParameterList","parameters":[],"src":"4482:0:21"},"scope":1081,"src":"4355:493:21","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":1082,"src":"850:4000:21","usedErrors":[7,105],"usedEvents":[]}],"src":"32:4819:21"},"id":21},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","exportedSymbols":{"IERC1155Mintable":[1111]},"id":1112,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1083,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"33:24:22"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Mintable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1084,"nodeType":"StructuredDocumentation","src":"59:196:22","text":"@title ERC1155 Multi Token Standard, optional extension: Mintable.\n @dev See https://eips.ethereum.org/EIPS/eip-1155\n @dev Note: The ERC-165 identifier for this interface is 0x5190c92c."},"fullyImplemented":false,"id":1111,"linearizedBaseContracts":[1111],"name":"IERC1155Mintable","nameLocation":"265:16:22","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1085,"nodeType":"StructuredDocumentation","src":"288:550:22","text":"@notice Safely mints some token.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `to`'s balance of `id` overflows.\n @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n @dev Emits an {IERC1155-TransferSingle} event.\n @param to Address of the new token owner.\n @param id Identifier of the token to mint.\n @param value Amount of token to mint.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"5cfa9297","id":1096,"implemented":false,"kind":"function","modifiers":[],"name":"safeMint","nameLocation":"852:8:22","nodeType":"FunctionDefinition","parameters":{"id":1094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1087,"mutability":"mutable","name":"to","nameLocation":"869:2:22","nodeType":"VariableDeclaration","scope":1096,"src":"861:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1086,"name":"address","nodeType":"ElementaryTypeName","src":"861:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1089,"mutability":"mutable","name":"id","nameLocation":"881:2:22","nodeType":"VariableDeclaration","scope":1096,"src":"873:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1088,"name":"uint256","nodeType":"ElementaryTypeName","src":"873:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1091,"mutability":"mutable","name":"value","nameLocation":"893:5:22","nodeType":"VariableDeclaration","scope":1096,"src":"885:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1090,"name":"uint256","nodeType":"ElementaryTypeName","src":"885:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1093,"mutability":"mutable","name":"data","nameLocation":"915:4:22","nodeType":"VariableDeclaration","scope":1096,"src":"900:19:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1092,"name":"bytes","nodeType":"ElementaryTypeName","src":"900:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"860:60:22"},"returnParameters":{"id":1095,"nodeType":"ParameterList","parameters":[],"src":"929:0:22"},"scope":1111,"src":"843:87:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1097,"nodeType":"StructuredDocumentation","src":"936:644:22","text":"@notice Safely mints a batch of tokens.\n @dev Reverts if `ids` and `values` have different lengths.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `to`'s balance overflows for one of `ids`.\n @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\n @dev Emits an {IERC1155-TransferBatch} event.\n @param to Address of the new tokens owner.\n @param ids Identifiers of the tokens to mint.\n @param values Amounts of tokens to mint.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"0d6a5bbb","id":1110,"implemented":false,"kind":"function","modifiers":[],"name":"safeBatchMint","nameLocation":"1594:13:22","nodeType":"FunctionDefinition","parameters":{"id":1108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1099,"mutability":"mutable","name":"to","nameLocation":"1616:2:22","nodeType":"VariableDeclaration","scope":1110,"src":"1608:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1098,"name":"address","nodeType":"ElementaryTypeName","src":"1608:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1102,"mutability":"mutable","name":"ids","nameLocation":"1639:3:22","nodeType":"VariableDeclaration","scope":1110,"src":"1620:22:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1100,"name":"uint256","nodeType":"ElementaryTypeName","src":"1620:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1101,"nodeType":"ArrayTypeName","src":"1620:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1105,"mutability":"mutable","name":"values","nameLocation":"1663:6:22","nodeType":"VariableDeclaration","scope":1110,"src":"1644:25:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1103,"name":"uint256","nodeType":"ElementaryTypeName","src":"1644:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1104,"nodeType":"ArrayTypeName","src":"1644:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1107,"mutability":"mutable","name":"data","nameLocation":"1686:4:22","nodeType":"VariableDeclaration","scope":1110,"src":"1671:19:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1106,"name":"bytes","nodeType":"ElementaryTypeName","src":"1671:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1607:84:22"},"returnParameters":{"id":1109,"nodeType":"ParameterList","parameters":[],"src":"1700:0:22"},"scope":1111,"src":"1585:116:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1112,"src":"255:1448:22","usedErrors":[],"usedEvents":[]}],"src":"33:1671:22"},"id":22},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol","exportedSymbols":{"ERC20Receiver":[1146],"IERC20Receiver":[1164],"InterfaceDetection":[425],"InterfaceDetectionStorage":[543]},"id":1147,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1113,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:23"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol","file":"./interfaces/IERC20Receiver.sol","id":1115,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1147,"sourceUnit":1165,"src":"58:63:23","symbolAliases":[{"foreign":{"id":1114,"name":"IERC20Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"66:14:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"../../introspection/libraries/InterfaceDetectionStorage.sol","id":1117,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1147,"sourceUnit":544,"src":"122:102:23","symbolAliases":[{"foreign":{"id":1116,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"130:25:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"../../introspection/InterfaceDetection.sol","id":1119,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1147,"sourceUnit":426,"src":"225:78:23","symbolAliases":[{"foreign":{"id":1118,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":425,"src":"233:18:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1121,"name":"IERC20Receiver","nameLocations":["511:14:23"],"nodeType":"IdentifierPath","referencedDeclaration":1164,"src":"511:14:23"},"id":1122,"nodeType":"InheritanceSpecifier","src":"511:14:23"},{"baseName":{"id":1123,"name":"InterfaceDetection","nameLocations":["527:18:23"],"nodeType":"IdentifierPath","referencedDeclaration":425,"src":"527:18:23"},"id":1124,"nodeType":"InheritanceSpecifier","src":"527:18:23"}],"canonicalName":"ERC20Receiver","contractDependencies":[],"contractKind":"contract","documentation":{"id":1120,"nodeType":"StructuredDocumentation","src":"305:171:23","text":"@title ERC20 Fungible Token Standard, Receiver (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":false,"id":1146,"linearizedBaseContracts":[1146,425,442,1164],"name":"ERC20Receiver","nameLocation":"494:13:23","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1128,"libraryName":{"id":1125,"name":"InterfaceDetectionStorage","nameLocations":["558:25:23"],"nodeType":"IdentifierPath","referencedDeclaration":543,"src":"558:25:23"},"nodeType":"UsingForDirective","src":"552:69:23","typeName":{"id":1127,"nodeType":"UserDefinedTypeName","pathNode":{"id":1126,"name":"InterfaceDetectionStorage.Layout","nameLocations":["588:25:23","614:6:23"],"nodeType":"IdentifierPath","referencedDeclaration":453,"src":"588:32:23"},"referencedDeclaration":453,"src":"588:32:23","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$453_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"body":{"id":1144,"nodeType":"Block","src":"726:113:23","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":1138,"name":"IERC20Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"798:14:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Receiver_$1164_$","typeString":"type(contract IERC20Receiver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC20Receiver_$1164_$","typeString":"type(contract IERC20Receiver)"}],"id":1137,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"793:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"793:20:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC20Receiver_$1164","typeString":"type(contract IERC20Receiver)"}},"id":1140,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"814:11:23","memberName":"interfaceId","nodeType":"MemberAccess","src":"793:32:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":1141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"827:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1132,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"736:25:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$543_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":1134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"762:6:23","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":542,"src":"736:32:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$453_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":1135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"736:34:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$453_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":1136,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"771:21:23","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":496,"src":"736:56:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$453_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$453_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":1142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"736:96:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1143,"nodeType":"ExpressionStatement","src":"736:96:23"}]},"documentation":{"id":1129,"nodeType":"StructuredDocumentation","src":"627:80:23","text":"@notice Marks the following ERC165 interface(s) as supported: ERC20Receiver."},"id":1145,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1130,"nodeType":"ParameterList","parameters":[],"src":"723:2:23"},"returnParameters":{"id":1131,"nodeType":"ParameterList","parameters":[],"src":"726:0:23"},"scope":1146,"src":"712:127:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1147,"src":"476:365:23","usedErrors":[430],"usedEvents":[]}],"src":"32:810:23"},"id":23},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol","exportedSymbols":{"IERC20Receiver":[1164]},"id":1165,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1148,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:24"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":1149,"nodeType":"StructuredDocumentation","src":"58:281:24","text":"@title ERC20 Token Standard, Tokens Receiver.\n @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\n @dev See https://eips.ethereum.org/EIPS/eip-20\n @dev Note: the ERC-165 identifier for this interface is 0x4fc35859."},"fullyImplemented":false,"id":1164,"linearizedBaseContracts":[1164],"name":"IERC20Receiver","nameLocation":"349:14:24","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1150,"nodeType":"StructuredDocumentation","src":"370:532:24","text":"@notice Handles the receipt of ERC20 tokens.\n @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\n @param operator The initiator of the safe transfer.\n @param from The previous tokens owner.\n @param value The amount of tokens transferred.\n @param data Optional additional data with no specified format.\n @return magicValue `bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse."},"functionSelector":"4fc35859","id":1163,"implemented":false,"kind":"function","modifiers":[],"name":"onERC20Received","nameLocation":"916:15:24","nodeType":"FunctionDefinition","parameters":{"id":1159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1152,"mutability":"mutable","name":"operator","nameLocation":"940:8:24","nodeType":"VariableDeclaration","scope":1163,"src":"932:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1151,"name":"address","nodeType":"ElementaryTypeName","src":"932:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1154,"mutability":"mutable","name":"from","nameLocation":"958:4:24","nodeType":"VariableDeclaration","scope":1163,"src":"950:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1153,"name":"address","nodeType":"ElementaryTypeName","src":"950:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1156,"mutability":"mutable","name":"value","nameLocation":"972:5:24","nodeType":"VariableDeclaration","scope":1163,"src":"964:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1155,"name":"uint256","nodeType":"ElementaryTypeName","src":"964:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1158,"mutability":"mutable","name":"data","nameLocation":"994:4:24","nodeType":"VariableDeclaration","scope":1163,"src":"979:19:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1157,"name":"bytes","nodeType":"ElementaryTypeName","src":"979:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"931:68:24"},"returnParameters":{"id":1162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1161,"mutability":"mutable","name":"magicValue","nameLocation":"1025:10:24","nodeType":"VariableDeclaration","scope":1163,"src":"1018:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1160,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1018:6:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1017:19:24"},"scope":1164,"src":"907:130:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1165,"src":"339:700:24","usedErrors":[],"usedEvents":[]}],"src":"32:1008:24"},"id":24},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol","exportedSymbols":{"IERC20SafeTransfers":[1194]},"id":1195,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1166,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:25"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20SafeTransfers","contractDependencies":[],"contractKind":"interface","documentation":{"id":1167,"nodeType":"StructuredDocumentation","src":"58:192:25","text":"@title ERC20 Token Standard, optional extension: Safe Transfers.\n @dev See https://eips.ethereum.org/EIPS/eip-20\n @dev Note: the ERC-165 identifier for this interface is 0x53f41a97."},"fullyImplemented":false,"id":1194,"linearizedBaseContracts":[1194],"name":"IERC20SafeTransfers","nameLocation":"260:19:25","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1168,"nodeType":"StructuredDocumentation","src":"286:697:25","text":"@notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if the sender does not have at least `value` of balance.\n @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\n @dev Emits an {IERC20-Transfer} event.\n @param to The account to transfer the tokens to.\n @param value The amount of tokens to transfer.\n @param data Optional additional data with no specified format, to be passed to the receiver contract.\n @return result Whether the operation succeeded."},"functionSelector":"eb795549","id":1179,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"997:12:25","nodeType":"FunctionDefinition","parameters":{"id":1175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1170,"mutability":"mutable","name":"to","nameLocation":"1018:2:25","nodeType":"VariableDeclaration","scope":1179,"src":"1010:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1169,"name":"address","nodeType":"ElementaryTypeName","src":"1010:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1172,"mutability":"mutable","name":"value","nameLocation":"1030:5:25","nodeType":"VariableDeclaration","scope":1179,"src":"1022:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1171,"name":"uint256","nodeType":"ElementaryTypeName","src":"1022:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1174,"mutability":"mutable","name":"data","nameLocation":"1052:4:25","nodeType":"VariableDeclaration","scope":1179,"src":"1037:19:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1173,"name":"bytes","nodeType":"ElementaryTypeName","src":"1037:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1009:48:25"},"returnParameters":{"id":1178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1177,"mutability":"mutable","name":"result","nameLocation":"1081:6:25","nodeType":"VariableDeclaration","scope":1179,"src":"1076:11:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1176,"name":"bool","nodeType":"ElementaryTypeName","src":"1076:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1075:13:25"},"scope":1194,"src":"988:101:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1180,"nodeType":"StructuredDocumentation","src":"1095:1009:25","text":"@notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` does not have at least `value` of balance.\n @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\n @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\n @dev Emits an {IERC20-Transfer} event.\n @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\n @param from The account which owns the tokens to transfer.\n @param to The account to transfer the tokens to.\n @param value The amount of tokens to transfer.\n @param data Optional additional data with no specified format, to be passed to the receiver contract.\n @return result Whether the operation succeeded."},"functionSelector":"b88d4fde","id":1193,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2118:16:25","nodeType":"FunctionDefinition","parameters":{"id":1189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1182,"mutability":"mutable","name":"from","nameLocation":"2143:4:25","nodeType":"VariableDeclaration","scope":1193,"src":"2135:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1181,"name":"address","nodeType":"ElementaryTypeName","src":"2135:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1184,"mutability":"mutable","name":"to","nameLocation":"2157:2:25","nodeType":"VariableDeclaration","scope":1193,"src":"2149:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1183,"name":"address","nodeType":"ElementaryTypeName","src":"2149:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1186,"mutability":"mutable","name":"value","nameLocation":"2169:5:25","nodeType":"VariableDeclaration","scope":1193,"src":"2161:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1185,"name":"uint256","nodeType":"ElementaryTypeName","src":"2161:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1188,"mutability":"mutable","name":"data","nameLocation":"2191:4:25","nodeType":"VariableDeclaration","scope":1193,"src":"2176:19:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1187,"name":"bytes","nodeType":"ElementaryTypeName","src":"2176:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2134:62:25"},"returnParameters":{"id":1192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1191,"mutability":"mutable","name":"result","nameLocation":"2220:6:25","nodeType":"VariableDeclaration","scope":1193,"src":"2215:11:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1190,"name":"bool","nodeType":"ElementaryTypeName","src":"2215:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2214:13:25"},"scope":1194,"src":"2109:119:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1195,"src":"250:1980:25","usedErrors":[],"usedEvents":[]}],"src":"32:2199:25"},"id":25},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","exportedSymbols":{"IERC721":[1280]},"id":1281,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1196,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:26"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":1197,"nodeType":"StructuredDocumentation","src":"58:296:26","text":"@title ERC721 Non-Fungible Token Standard, basic interface (functions).\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev This interface only contains the standard functions. See IERC721Events for the events.\n @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd."},"fullyImplemented":false,"id":1280,"linearizedBaseContracts":[1280],"name":"IERC721","nameLocation":"364:7:26","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1198,"nodeType":"StructuredDocumentation","src":"378:684:26","text":"@notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n @dev Note: There can only be one approved address per token at a given time.\n @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\n @dev Reverts if `tokenId` does not exist.\n @dev Reverts if `to` is the token owner.\n @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\n @dev Emits an {Approval} event.\n @param to The address to approve, or the zero address to remove any existing approval.\n @param tokenId The token identifier to give approval for."},"functionSelector":"095ea7b3","id":1205,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"1076:7:26","nodeType":"FunctionDefinition","parameters":{"id":1203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1200,"mutability":"mutable","name":"to","nameLocation":"1092:2:26","nodeType":"VariableDeclaration","scope":1205,"src":"1084:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1199,"name":"address","nodeType":"ElementaryTypeName","src":"1084:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1202,"mutability":"mutable","name":"tokenId","nameLocation":"1104:7:26","nodeType":"VariableDeclaration","scope":1205,"src":"1096:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1201,"name":"uint256","nodeType":"ElementaryTypeName","src":"1096:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1083:29:26"},"returnParameters":{"id":1204,"nodeType":"ParameterList","parameters":[],"src":"1121:0:26"},"scope":1280,"src":"1067:55:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1206,"nodeType":"StructuredDocumentation","src":"1128:341:26","text":"@notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n @dev Reverts if the sender is the same as `operator`.\n @dev Emits an {ApprovalForAll} event.\n @param operator The address to approve for all tokens.\n @param approved True to set an approval for all tokens, false to unset it."},"functionSelector":"a22cb465","id":1213,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"1483:17:26","nodeType":"FunctionDefinition","parameters":{"id":1211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1208,"mutability":"mutable","name":"operator","nameLocation":"1509:8:26","nodeType":"VariableDeclaration","scope":1213,"src":"1501:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1207,"name":"address","nodeType":"ElementaryTypeName","src":"1501:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1210,"mutability":"mutable","name":"approved","nameLocation":"1524:8:26","nodeType":"VariableDeclaration","scope":1213,"src":"1519:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1209,"name":"bool","nodeType":"ElementaryTypeName","src":"1519:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1500:33:26"},"returnParameters":{"id":1212,"nodeType":"ParameterList","parameters":[],"src":"1542:0:26"},"scope":1280,"src":"1474:69:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1214,"nodeType":"StructuredDocumentation","src":"1549:667:26","text":"@notice Unsafely transfers the ownership of a token to a recipient.\n @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer. Self-transfers are possible.\n @param tokenId The identifier of the token to transfer."},"functionSelector":"23b872dd","id":1223,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2230:12:26","nodeType":"FunctionDefinition","parameters":{"id":1221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1216,"mutability":"mutable","name":"from","nameLocation":"2251:4:26","nodeType":"VariableDeclaration","scope":1223,"src":"2243:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1215,"name":"address","nodeType":"ElementaryTypeName","src":"2243:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1218,"mutability":"mutable","name":"to","nameLocation":"2265:2:26","nodeType":"VariableDeclaration","scope":1223,"src":"2257:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1217,"name":"address","nodeType":"ElementaryTypeName","src":"2257:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1220,"mutability":"mutable","name":"tokenId","nameLocation":"2277:7:26","nodeType":"VariableDeclaration","scope":1223,"src":"2269:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1219,"name":"uint256","nodeType":"ElementaryTypeName","src":"2269:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2242:43:26"},"returnParameters":{"id":1222,"nodeType":"ParameterList","parameters":[],"src":"2294:0:26"},"scope":1280,"src":"2221:74:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1224,"nodeType":"StructuredDocumentation","src":"2301:663:26","text":"@notice Safely transfers the ownership of a token to a recipient.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer."},"functionSelector":"42842e0e","id":1233,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2978:16:26","nodeType":"FunctionDefinition","parameters":{"id":1231,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1226,"mutability":"mutable","name":"from","nameLocation":"3003:4:26","nodeType":"VariableDeclaration","scope":1233,"src":"2995:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1225,"name":"address","nodeType":"ElementaryTypeName","src":"2995:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1228,"mutability":"mutable","name":"to","nameLocation":"3017:2:26","nodeType":"VariableDeclaration","scope":1233,"src":"3009:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1227,"name":"address","nodeType":"ElementaryTypeName","src":"3009:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1230,"mutability":"mutable","name":"tokenId","nameLocation":"3029:7:26","nodeType":"VariableDeclaration","scope":1233,"src":"3021:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1229,"name":"uint256","nodeType":"ElementaryTypeName","src":"3021:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2994:43:26"},"returnParameters":{"id":1232,"nodeType":"ParameterList","parameters":[],"src":"3046:0:26"},"scope":1280,"src":"2969:78:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1234,"nodeType":"StructuredDocumentation","src":"3053:735:26","text":"@notice Safely transfers the ownership of a token to a recipient.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"b88d4fde","id":1245,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"3802:16:26","nodeType":"FunctionDefinition","parameters":{"id":1243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1236,"mutability":"mutable","name":"from","nameLocation":"3827:4:26","nodeType":"VariableDeclaration","scope":1245,"src":"3819:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1235,"name":"address","nodeType":"ElementaryTypeName","src":"3819:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1238,"mutability":"mutable","name":"to","nameLocation":"3841:2:26","nodeType":"VariableDeclaration","scope":1245,"src":"3833:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1237,"name":"address","nodeType":"ElementaryTypeName","src":"3833:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1240,"mutability":"mutable","name":"tokenId","nameLocation":"3853:7:26","nodeType":"VariableDeclaration","scope":1245,"src":"3845:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1239,"name":"uint256","nodeType":"ElementaryTypeName","src":"3845:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1242,"mutability":"mutable","name":"data","nameLocation":"3877:4:26","nodeType":"VariableDeclaration","scope":1245,"src":"3862:19:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1241,"name":"bytes","nodeType":"ElementaryTypeName","src":"3862:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3818:64:26"},"returnParameters":{"id":1244,"nodeType":"ParameterList","parameters":[],"src":"3891:0:26"},"scope":1280,"src":"3793:99:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1246,"nodeType":"StructuredDocumentation","src":"3898:209:26","text":"@notice Gets the balance of an address.\n @dev Reverts if `owner` is the zero address.\n @param owner The address to query the balance of.\n @return balance The amount owned by the owner."},"functionSelector":"70a08231","id":1253,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"4121:9:26","nodeType":"FunctionDefinition","parameters":{"id":1249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1248,"mutability":"mutable","name":"owner","nameLocation":"4139:5:26","nodeType":"VariableDeclaration","scope":1253,"src":"4131:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1247,"name":"address","nodeType":"ElementaryTypeName","src":"4131:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4130:15:26"},"returnParameters":{"id":1252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1251,"mutability":"mutable","name":"balance","nameLocation":"4177:7:26","nodeType":"VariableDeclaration","scope":1253,"src":"4169:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1250,"name":"uint256","nodeType":"ElementaryTypeName","src":"4169:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4168:17:26"},"scope":1280,"src":"4112:74:26","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1254,"nodeType":"StructuredDocumentation","src":"4192:217:26","text":"@notice Gets the owner of a token.\n @dev Reverts if `tokenId` does not exist.\n @param tokenId The token identifier to query the owner of.\n @return tokenOwner The owner of the token identifier."},"functionSelector":"6352211e","id":1261,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"4423:7:26","nodeType":"FunctionDefinition","parameters":{"id":1257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1256,"mutability":"mutable","name":"tokenId","nameLocation":"4439:7:26","nodeType":"VariableDeclaration","scope":1261,"src":"4431:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1255,"name":"uint256","nodeType":"ElementaryTypeName","src":"4431:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4430:17:26"},"returnParameters":{"id":1260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1259,"mutability":"mutable","name":"tokenOwner","nameLocation":"4479:10:26","nodeType":"VariableDeclaration","scope":1261,"src":"4471:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1258,"name":"address","nodeType":"ElementaryTypeName","src":"4471:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4470:20:26"},"scope":1280,"src":"4414:77:26","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1262,"nodeType":"StructuredDocumentation","src":"4497:285:26","text":"@notice Gets the approved address for a token.\n @dev Reverts if `tokenId` does not exist.\n @param tokenId The token identifier to query the approval of.\n @return approved The approved address for the token identifier, or the zero address if no approval is set."},"functionSelector":"081812fc","id":1269,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4796:11:26","nodeType":"FunctionDefinition","parameters":{"id":1265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1264,"mutability":"mutable","name":"tokenId","nameLocation":"4816:7:26","nodeType":"VariableDeclaration","scope":1269,"src":"4808:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1263,"name":"uint256","nodeType":"ElementaryTypeName","src":"4808:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4807:17:26"},"returnParameters":{"id":1268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1267,"mutability":"mutable","name":"approved","nameLocation":"4856:8:26","nodeType":"VariableDeclaration","scope":1269,"src":"4848:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1266,"name":"address","nodeType":"ElementaryTypeName","src":"4848:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4847:18:26"},"scope":1280,"src":"4787:79:26","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1270,"nodeType":"StructuredDocumentation","src":"4872:323:26","text":"@notice Gets whether an operator is approved for all tokens by an owner.\n @param owner The address which gives the approval for all tokens.\n @param operator The address which receives the approval for all tokens.\n @return approvedForAll Whether the operator is approved for all tokens by the owner."},"functionSelector":"e985e9c5","id":1279,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"5209:16:26","nodeType":"FunctionDefinition","parameters":{"id":1275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1272,"mutability":"mutable","name":"owner","nameLocation":"5234:5:26","nodeType":"VariableDeclaration","scope":1279,"src":"5226:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1271,"name":"address","nodeType":"ElementaryTypeName","src":"5226:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1274,"mutability":"mutable","name":"operator","nameLocation":"5249:8:26","nodeType":"VariableDeclaration","scope":1279,"src":"5241:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1273,"name":"address","nodeType":"ElementaryTypeName","src":"5241:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5225:33:26"},"returnParameters":{"id":1278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1277,"mutability":"mutable","name":"approvedForAll","nameLocation":"5287:14:26","nodeType":"VariableDeclaration","scope":1279,"src":"5282:19:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1276,"name":"bool","nodeType":"ElementaryTypeName","src":"5282:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5281:21:26"},"scope":1280,"src":"5200:103:26","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1281,"src":"354:4951:26","usedErrors":[],"usedEvents":[]}],"src":"32:5274:26"},"id":26},"@openzeppelin/contracts/interfaces/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","exportedSymbols":{"IERC20":[1361]},"id":1284,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1282,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"90:23:27"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../token/ERC20/IERC20.sol","id":1283,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1284,"sourceUnit":1362,"src":"115:35:27","symbolAliases":[],"unitAlias":""}],"src":"90:61:27"},"id":27},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[1361]},"id":1362,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1285,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:28"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":1286,"nodeType":"StructuredDocumentation","src":"131:70:28","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":1361,"linearizedBaseContracts":[1361],"name":"IERC20","nameLocation":"212:6:28","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1287,"nodeType":"StructuredDocumentation","src":"225:158:28","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1295,"name":"Transfer","nameLocation":"394:8:28","nodeType":"EventDefinition","parameters":{"id":1294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1289,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:28","nodeType":"VariableDeclaration","scope":1295,"src":"403:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1288,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1291,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:28","nodeType":"VariableDeclaration","scope":1295,"src":"425:18:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1290,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1293,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:28","nodeType":"VariableDeclaration","scope":1295,"src":"445:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1292,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:28"},"src":"388:72:28"},{"anonymous":false,"documentation":{"id":1296,"nodeType":"StructuredDocumentation","src":"466:148:28","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1304,"name":"Approval","nameLocation":"625:8:28","nodeType":"EventDefinition","parameters":{"id":1303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1298,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:28","nodeType":"VariableDeclaration","scope":1304,"src":"634:21:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1297,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1300,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:28","nodeType":"VariableDeclaration","scope":1304,"src":"657:23:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1299,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1302,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:28","nodeType":"VariableDeclaration","scope":1304,"src":"682:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1301,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:28"},"src":"619:78:28"},{"documentation":{"id":1305,"nodeType":"StructuredDocumentation","src":"703:66:28","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":1310,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:28","nodeType":"FunctionDefinition","parameters":{"id":1306,"nodeType":"ParameterList","parameters":[],"src":"794:2:28"},"returnParameters":{"id":1309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1308,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1310,"src":"820:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1307,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:28"},"scope":1361,"src":"774:55:28","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1311,"nodeType":"StructuredDocumentation","src":"835:72:28","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":1318,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:28","nodeType":"FunctionDefinition","parameters":{"id":1314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1313,"mutability":"mutable","name":"account","nameLocation":"939:7:28","nodeType":"VariableDeclaration","scope":1318,"src":"931:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1312,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:28"},"returnParameters":{"id":1317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1316,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1318,"src":"971:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1315,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:28"},"scope":1361,"src":"912:68:28","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1319,"nodeType":"StructuredDocumentation","src":"986:202:28","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":1328,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:28","nodeType":"FunctionDefinition","parameters":{"id":1324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1321,"mutability":"mutable","name":"to","nameLocation":"1219:2:28","nodeType":"VariableDeclaration","scope":1328,"src":"1211:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1320,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1323,"mutability":"mutable","name":"amount","nameLocation":"1231:6:28","nodeType":"VariableDeclaration","scope":1328,"src":"1223:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1322,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:28"},"returnParameters":{"id":1327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1326,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1328,"src":"1257:4:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1325,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:28"},"scope":1361,"src":"1193:70:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1329,"nodeType":"StructuredDocumentation","src":"1269:264:28","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":1338,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:28","nodeType":"FunctionDefinition","parameters":{"id":1334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1331,"mutability":"mutable","name":"owner","nameLocation":"1565:5:28","nodeType":"VariableDeclaration","scope":1338,"src":"1557:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1330,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1333,"mutability":"mutable","name":"spender","nameLocation":"1580:7:28","nodeType":"VariableDeclaration","scope":1338,"src":"1572:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1332,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:28"},"returnParameters":{"id":1337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1336,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1338,"src":"1612:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1335,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:28"},"scope":1361,"src":"1538:83:28","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1339,"nodeType":"StructuredDocumentation","src":"1627:642:28","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1348,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:28","nodeType":"FunctionDefinition","parameters":{"id":1344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1341,"mutability":"mutable","name":"spender","nameLocation":"2299:7:28","nodeType":"VariableDeclaration","scope":1348,"src":"2291:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1340,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1343,"mutability":"mutable","name":"amount","nameLocation":"2316:6:28","nodeType":"VariableDeclaration","scope":1348,"src":"2308:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1342,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:28"},"returnParameters":{"id":1347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1346,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1348,"src":"2342:4:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1345,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:28"},"scope":1361,"src":"2274:74:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1349,"nodeType":"StructuredDocumentation","src":"2354:287:28","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1360,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:28","nodeType":"FunctionDefinition","parameters":{"id":1356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1351,"mutability":"mutable","name":"from","nameLocation":"2676:4:28","nodeType":"VariableDeclaration","scope":1360,"src":"2668:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1350,"name":"address","nodeType":"ElementaryTypeName","src":"2668:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1353,"mutability":"mutable","name":"to","nameLocation":"2690:2:28","nodeType":"VariableDeclaration","scope":1360,"src":"2682:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1352,"name":"address","nodeType":"ElementaryTypeName","src":"2682:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1355,"mutability":"mutable","name":"amount","nameLocation":"2702:6:28","nodeType":"VariableDeclaration","scope":1360,"src":"2694:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1354,"name":"uint256","nodeType":"ElementaryTypeName","src":"2694:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:42:28"},"returnParameters":{"id":1359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1358,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1360,"src":"2728:4:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1357,"name":"bool","nodeType":"ElementaryTypeName","src":"2728:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2727:6:28"},"scope":1361,"src":"2646:88:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1362,"src":"202:2534:28","usedErrors":[],"usedEvents":[1295,1304]}],"src":"106:2631:28"},"id":28},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","exportedSymbols":{"IERC20Permit":[1397]},"id":1398,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1363,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"123:23:29"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Permit","contractDependencies":[],"contractKind":"interface","documentation":{"id":1364,"nodeType":"StructuredDocumentation","src":"148:480:29","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."},"fullyImplemented":false,"id":1397,"linearizedBaseContracts":[1397],"name":"IERC20Permit","nameLocation":"639:12:29","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1365,"nodeType":"StructuredDocumentation","src":"658:792:29","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."},"functionSelector":"d505accf","id":1382,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1464:6:29","nodeType":"FunctionDefinition","parameters":{"id":1380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1367,"mutability":"mutable","name":"owner","nameLocation":"1488:5:29","nodeType":"VariableDeclaration","scope":1382,"src":"1480:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1366,"name":"address","nodeType":"ElementaryTypeName","src":"1480:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1369,"mutability":"mutable","name":"spender","nameLocation":"1511:7:29","nodeType":"VariableDeclaration","scope":1382,"src":"1503:15:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1368,"name":"address","nodeType":"ElementaryTypeName","src":"1503:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1371,"mutability":"mutable","name":"value","nameLocation":"1536:5:29","nodeType":"VariableDeclaration","scope":1382,"src":"1528:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1370,"name":"uint256","nodeType":"ElementaryTypeName","src":"1528:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1373,"mutability":"mutable","name":"deadline","nameLocation":"1559:8:29","nodeType":"VariableDeclaration","scope":1382,"src":"1551:16:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1372,"name":"uint256","nodeType":"ElementaryTypeName","src":"1551:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1375,"mutability":"mutable","name":"v","nameLocation":"1583:1:29","nodeType":"VariableDeclaration","scope":1382,"src":"1577:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1374,"name":"uint8","nodeType":"ElementaryTypeName","src":"1577:5:29","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1377,"mutability":"mutable","name":"r","nameLocation":"1602:1:29","nodeType":"VariableDeclaration","scope":1382,"src":"1594:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1376,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1594:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1379,"mutability":"mutable","name":"s","nameLocation":"1621:1:29","nodeType":"VariableDeclaration","scope":1382,"src":"1613:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1378,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1613:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1470:158:29"},"returnParameters":{"id":1381,"nodeType":"ParameterList","parameters":[],"src":"1637:0:29"},"scope":1397,"src":"1455:183:29","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1383,"nodeType":"StructuredDocumentation","src":"1644:294:29","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":1390,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1952:6:29","nodeType":"FunctionDefinition","parameters":{"id":1386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1385,"mutability":"mutable","name":"owner","nameLocation":"1967:5:29","nodeType":"VariableDeclaration","scope":1390,"src":"1959:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1384,"name":"address","nodeType":"ElementaryTypeName","src":"1959:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1958:15:29"},"returnParameters":{"id":1389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1388,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1390,"src":"1997:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1387,"name":"uint256","nodeType":"ElementaryTypeName","src":"1997:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1996:9:29"},"scope":1397,"src":"1943:63:29","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1391,"nodeType":"StructuredDocumentation","src":"2012:128:29","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":1396,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"2207:16:29","nodeType":"FunctionDefinition","parameters":{"id":1392,"nodeType":"ParameterList","parameters":[],"src":"2223:2:29"},"returnParameters":{"id":1395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1394,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1396,"src":"2249:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1393,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2249:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2248:9:29"},"scope":1397,"src":"2198:60:29","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1398,"src":"629:1631:29","usedErrors":[],"usedEvents":[]}],"src":"123:2138:29"},"id":29},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","exportedSymbols":{"Address":[2103],"IERC20":[1361],"IERC20Permit":[1397],"SafeERC20":[1773]},"id":1774,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1399,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:30"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":1400,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1774,"sourceUnit":1362,"src":"140:23:30","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","file":"../extensions/IERC20Permit.sol","id":1401,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1774,"sourceUnit":1398,"src":"164:40:30","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../../utils/Address.sol","id":1402,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1774,"sourceUnit":2104,"src":"205:36:30","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20","contractDependencies":[],"contractKind":"library","documentation":{"id":1403,"nodeType":"StructuredDocumentation","src":"243:457:30","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":1773,"linearizedBaseContracts":[1773],"name":"SafeERC20","nameLocation":"709:9:30","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1406,"libraryName":{"id":1404,"name":"Address","nameLocations":["731:7:30"],"nodeType":"IdentifierPath","referencedDeclaration":2103,"src":"731:7:30"},"nodeType":"UsingForDirective","src":"725:26:30","typeName":{"id":1405,"name":"address","nodeType":"ElementaryTypeName","src":"743:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":1429,"nodeType":"Block","src":"1013:103:30","statements":[{"expression":{"arguments":[{"id":1418,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1410,"src":"1043:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1421,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1410,"src":"1073:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}},"id":1422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1079:8:30","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":1328,"src":"1073:14:30","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1088:8:30","memberName":"selector","nodeType":"MemberAccess","src":"1073:23:30","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1424,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"1098:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1425,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1414,"src":"1102:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1419,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1050:3:30","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1420,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1054:18:30","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1050:22:30","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1050:58:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1417,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"1023:19:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1361_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1023:86:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1428,"nodeType":"ExpressionStatement","src":"1023:86:30"}]},"documentation":{"id":1407,"nodeType":"StructuredDocumentation","src":"757:179:30","text":" @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":1430,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"950:12:30","nodeType":"FunctionDefinition","parameters":{"id":1415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1410,"mutability":"mutable","name":"token","nameLocation":"970:5:30","nodeType":"VariableDeclaration","scope":1430,"src":"963:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"},"typeName":{"id":1409,"nodeType":"UserDefinedTypeName","pathNode":{"id":1408,"name":"IERC20","nameLocations":["963:6:30"],"nodeType":"IdentifierPath","referencedDeclaration":1361,"src":"963:6:30"},"referencedDeclaration":1361,"src":"963:6:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1412,"mutability":"mutable","name":"to","nameLocation":"985:2:30","nodeType":"VariableDeclaration","scope":1430,"src":"977:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1411,"name":"address","nodeType":"ElementaryTypeName","src":"977:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1414,"mutability":"mutable","name":"value","nameLocation":"997:5:30","nodeType":"VariableDeclaration","scope":1430,"src":"989:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1413,"name":"uint256","nodeType":"ElementaryTypeName","src":"989:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"962:41:30"},"returnParameters":{"id":1416,"nodeType":"ParameterList","parameters":[],"src":"1013:0:30"},"scope":1773,"src":"941:175:30","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1456,"nodeType":"Block","src":"1445:113:30","statements":[{"expression":{"arguments":[{"id":1444,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1434,"src":"1475:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1447,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1434,"src":"1505:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}},"id":1448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1511:12:30","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":1360,"src":"1505:18:30","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":1449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1524:8:30","memberName":"selector","nodeType":"MemberAccess","src":"1505:27:30","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1450,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1436,"src":"1534:4:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1451,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"1540:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1452,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1440,"src":"1544:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1445,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1482:3:30","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1446,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1486:18:30","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1482:22:30","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1482:68:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1443,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"1455:19:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1361_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1455:96:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1455,"nodeType":"ExpressionStatement","src":"1455:96:30"}]},"documentation":{"id":1431,"nodeType":"StructuredDocumentation","src":"1122:228:30","text":" @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."},"id":1457,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1364:16:30","nodeType":"FunctionDefinition","parameters":{"id":1441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1434,"mutability":"mutable","name":"token","nameLocation":"1388:5:30","nodeType":"VariableDeclaration","scope":1457,"src":"1381:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"},"typeName":{"id":1433,"nodeType":"UserDefinedTypeName","pathNode":{"id":1432,"name":"IERC20","nameLocations":["1381:6:30"],"nodeType":"IdentifierPath","referencedDeclaration":1361,"src":"1381:6:30"},"referencedDeclaration":1361,"src":"1381:6:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1436,"mutability":"mutable","name":"from","nameLocation":"1403:4:30","nodeType":"VariableDeclaration","scope":1457,"src":"1395:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1435,"name":"address","nodeType":"ElementaryTypeName","src":"1395:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1438,"mutability":"mutable","name":"to","nameLocation":"1417:2:30","nodeType":"VariableDeclaration","scope":1457,"src":"1409:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1437,"name":"address","nodeType":"ElementaryTypeName","src":"1409:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1440,"mutability":"mutable","name":"value","nameLocation":"1429:5:30","nodeType":"VariableDeclaration","scope":1457,"src":"1421:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1439,"name":"uint256","nodeType":"ElementaryTypeName","src":"1421:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1380:55:30"},"returnParameters":{"id":1442,"nodeType":"ParameterList","parameters":[],"src":"1445:0:30"},"scope":1773,"src":"1355:203:30","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1500,"nodeType":"Block","src":"1894:497:30","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1469,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1465,"src":"2143:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2152:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2143:10:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1472,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2142:12:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1477,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2183:4:30","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1773","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1773","typeString":"library SafeERC20"}],"id":1476,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2175:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1475,"name":"address","nodeType":"ElementaryTypeName","src":"2175:7:30","typeDescriptions":{}}},"id":1478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2175:13:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1479,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1463,"src":"2190:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1473,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"2159:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}},"id":1474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2165:9:30","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1338,"src":"2159:15:30","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2159:39:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2202:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2159:44:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1483,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2158:46:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2142:62:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":1485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2218:56:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":1468,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2121:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2121:163:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1487,"nodeType":"ExpressionStatement","src":"2121:163:30"},{"expression":{"arguments":[{"id":1489,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"2314:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1492,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"2344:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}},"id":1493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2350:7:30","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1348,"src":"2344:13:30","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2358:8:30","memberName":"selector","nodeType":"MemberAccess","src":"2344:22:30","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1495,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1463,"src":"2368:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1496,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1465,"src":"2377:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1490,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2321:3:30","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1491,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2325:18:30","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2321:22:30","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2321:62:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1488,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"2294:19:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1361_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1498,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2294:90:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1499,"nodeType":"ExpressionStatement","src":"2294:90:30"}]},"documentation":{"id":1458,"nodeType":"StructuredDocumentation","src":"1564:249:30","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":1501,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1827:11:30","nodeType":"FunctionDefinition","parameters":{"id":1466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1461,"mutability":"mutable","name":"token","nameLocation":"1846:5:30","nodeType":"VariableDeclaration","scope":1501,"src":"1839:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"},"typeName":{"id":1460,"nodeType":"UserDefinedTypeName","pathNode":{"id":1459,"name":"IERC20","nameLocations":["1839:6:30"],"nodeType":"IdentifierPath","referencedDeclaration":1361,"src":"1839:6:30"},"referencedDeclaration":1361,"src":"1839:6:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1463,"mutability":"mutable","name":"spender","nameLocation":"1861:7:30","nodeType":"VariableDeclaration","scope":1501,"src":"1853:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1462,"name":"address","nodeType":"ElementaryTypeName","src":"1853:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1465,"mutability":"mutable","name":"value","nameLocation":"1878:5:30","nodeType":"VariableDeclaration","scope":1501,"src":"1870:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1464,"name":"uint256","nodeType":"ElementaryTypeName","src":"1870:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:46:30"},"returnParameters":{"id":1467,"nodeType":"ParameterList","parameters":[],"src":"1894:0:30"},"scope":1773,"src":"1818:573:30","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1537,"nodeType":"Block","src":"2668:194:30","statements":[{"assignments":[1513],"declarations":[{"constant":false,"id":1513,"mutability":"mutable","name":"oldAllowance","nameLocation":"2686:12:30","nodeType":"VariableDeclaration","scope":1537,"src":"2678:20:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1512,"name":"uint256","nodeType":"ElementaryTypeName","src":"2678:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1522,"initialValue":{"arguments":[{"arguments":[{"id":1518,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2725:4:30","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1773","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1773","typeString":"library SafeERC20"}],"id":1517,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2717:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1516,"name":"address","nodeType":"ElementaryTypeName","src":"2717:7:30","typeDescriptions":{}}},"id":1519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2717:13:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1520,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1507,"src":"2732:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1514,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1505,"src":"2701:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}},"id":1515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2707:9:30","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1338,"src":"2701:15:30","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2701:39:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2678:62:30"},{"expression":{"arguments":[{"id":1524,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1505,"src":"2770:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1527,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1505,"src":"2800:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}},"id":1528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2806:7:30","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1348,"src":"2800:13:30","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2814:8:30","memberName":"selector","nodeType":"MemberAccess","src":"2800:22:30","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1530,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1507,"src":"2824:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1531,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"2833:12:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1532,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1509,"src":"2848:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2833:20:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1525,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2777:3:30","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1526,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2781:18:30","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2777:22:30","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2777:77:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1523,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"2750:19:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1361_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2750:105:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1536,"nodeType":"ExpressionStatement","src":"2750:105:30"}]},"documentation":{"id":1502,"nodeType":"StructuredDocumentation","src":"2397:180:30","text":" @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":1538,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2591:21:30","nodeType":"FunctionDefinition","parameters":{"id":1510,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1505,"mutability":"mutable","name":"token","nameLocation":"2620:5:30","nodeType":"VariableDeclaration","scope":1538,"src":"2613:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"},"typeName":{"id":1504,"nodeType":"UserDefinedTypeName","pathNode":{"id":1503,"name":"IERC20","nameLocations":["2613:6:30"],"nodeType":"IdentifierPath","referencedDeclaration":1361,"src":"2613:6:30"},"referencedDeclaration":1361,"src":"2613:6:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1507,"mutability":"mutable","name":"spender","nameLocation":"2635:7:30","nodeType":"VariableDeclaration","scope":1538,"src":"2627:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1506,"name":"address","nodeType":"ElementaryTypeName","src":"2627:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1509,"mutability":"mutable","name":"value","nameLocation":"2652:5:30","nodeType":"VariableDeclaration","scope":1538,"src":"2644:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1508,"name":"uint256","nodeType":"ElementaryTypeName","src":"2644:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2612:46:30"},"returnParameters":{"id":1511,"nodeType":"ParameterList","parameters":[],"src":"2668:0:30"},"scope":1773,"src":"2582:280:30","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1582,"nodeType":"Block","src":"3139:321:30","statements":[{"id":1581,"nodeType":"UncheckedBlock","src":"3149:305:30","statements":[{"assignments":[1550],"declarations":[{"constant":false,"id":1550,"mutability":"mutable","name":"oldAllowance","nameLocation":"3181:12:30","nodeType":"VariableDeclaration","scope":1581,"src":"3173:20:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1549,"name":"uint256","nodeType":"ElementaryTypeName","src":"3173:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1559,"initialValue":{"arguments":[{"arguments":[{"id":1555,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3220:4:30","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1773","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1773","typeString":"library SafeERC20"}],"id":1554,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3212:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1553,"name":"address","nodeType":"ElementaryTypeName","src":"3212:7:30","typeDescriptions":{}}},"id":1556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3212:13:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1557,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1544,"src":"3227:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1551,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1542,"src":"3196:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}},"id":1552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3202:9:30","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1338,"src":"3196:15:30","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3196:39:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3173:62:30"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1561,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1550,"src":"3257:12:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1562,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"3273:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3257:21:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":1564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3280:43:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":1560,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3249:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3249:75:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1566,"nodeType":"ExpressionStatement","src":"3249:75:30"},{"expression":{"arguments":[{"id":1568,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1542,"src":"3358:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1571,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1542,"src":"3388:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}},"id":1572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3394:7:30","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1348,"src":"3388:13:30","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3402:8:30","memberName":"selector","nodeType":"MemberAccess","src":"3388:22:30","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1574,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1544,"src":"3412:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1575,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1550,"src":"3421:12:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1576,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"3436:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3421:20:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1569,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3365:3:30","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1570,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3369:18:30","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3365:22:30","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1578,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3365:77:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1567,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"3338:19:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1361_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3338:105:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1580,"nodeType":"ExpressionStatement","src":"3338:105:30"}]}]},"documentation":{"id":1539,"nodeType":"StructuredDocumentation","src":"2868:180:30","text":" @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":1583,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"3062:21:30","nodeType":"FunctionDefinition","parameters":{"id":1547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1542,"mutability":"mutable","name":"token","nameLocation":"3091:5:30","nodeType":"VariableDeclaration","scope":1583,"src":"3084:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"},"typeName":{"id":1541,"nodeType":"UserDefinedTypeName","pathNode":{"id":1540,"name":"IERC20","nameLocations":["3084:6:30"],"nodeType":"IdentifierPath","referencedDeclaration":1361,"src":"3084:6:30"},"referencedDeclaration":1361,"src":"3084:6:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1544,"mutability":"mutable","name":"spender","nameLocation":"3106:7:30","nodeType":"VariableDeclaration","scope":1583,"src":"3098:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1543,"name":"address","nodeType":"ElementaryTypeName","src":"3098:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1546,"mutability":"mutable","name":"value","nameLocation":"3123:5:30","nodeType":"VariableDeclaration","scope":1583,"src":"3115:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1545,"name":"uint256","nodeType":"ElementaryTypeName","src":"3115:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3083:46:30"},"returnParameters":{"id":1548,"nodeType":"ParameterList","parameters":[],"src":"3139:0:30"},"scope":1773,"src":"3053:407:30","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1629,"nodeType":"Block","src":"3856:333:30","statements":[{"assignments":[1595],"declarations":[{"constant":false,"id":1595,"mutability":"mutable","name":"approvalCall","nameLocation":"3879:12:30","nodeType":"VariableDeclaration","scope":1629,"src":"3866:25:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1594,"name":"bytes","nodeType":"ElementaryTypeName","src":"3866:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1604,"initialValue":{"arguments":[{"expression":{"expression":{"id":1598,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1587,"src":"3917:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}},"id":1599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3923:7:30","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1348,"src":"3917:13:30","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3931:8:30","memberName":"selector","nodeType":"MemberAccess","src":"3917:22:30","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1601,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1589,"src":"3941:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1602,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"3950:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1596,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3894:3:30","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1597,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3898:18:30","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3894:22:30","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3894:62:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3866:90:30"},{"condition":{"id":1609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3971:45:30","subExpression":{"arguments":[{"id":1606,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1587,"src":"3996:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}},{"id":1607,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1595,"src":"4003:12:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1605,"name":"_callOptionalReturnBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1772,"src":"3972:23:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1361_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (contract IERC20,bytes memory) returns (bool)"}},"id":1608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3972:44:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1628,"nodeType":"IfStatement","src":"3967:216:30","trueBody":{"id":1627,"nodeType":"Block","src":"4018:165:30","statements":[{"expression":{"arguments":[{"id":1611,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1587,"src":"4052:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1614,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1587,"src":"4082:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}},"id":1615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4088:7:30","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1348,"src":"4082:13:30","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4096:8:30","memberName":"selector","nodeType":"MemberAccess","src":"4082:22:30","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1617,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1589,"src":"4106:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":1618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4115:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":1612,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4059:3:30","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1613,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4063:18:30","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4059:22:30","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4059:58:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1610,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"4032:19:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1361_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4032:86:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1621,"nodeType":"ExpressionStatement","src":"4032:86:30"},{"expression":{"arguments":[{"id":1623,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1587,"src":"4152:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}},{"id":1624,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1595,"src":"4159:12:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1622,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"4132:19:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1361_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4132:40:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1626,"nodeType":"ExpressionStatement","src":"4132:40:30"}]}}]},"documentation":{"id":1584,"nodeType":"StructuredDocumentation","src":"3466:308:30","text":" @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."},"id":1630,"implemented":true,"kind":"function","modifiers":[],"name":"forceApprove","nameLocation":"3788:12:30","nodeType":"FunctionDefinition","parameters":{"id":1592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1587,"mutability":"mutable","name":"token","nameLocation":"3808:5:30","nodeType":"VariableDeclaration","scope":1630,"src":"3801:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"},"typeName":{"id":1586,"nodeType":"UserDefinedTypeName","pathNode":{"id":1585,"name":"IERC20","nameLocations":["3801:6:30"],"nodeType":"IdentifierPath","referencedDeclaration":1361,"src":"3801:6:30"},"referencedDeclaration":1361,"src":"3801:6:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1589,"mutability":"mutable","name":"spender","nameLocation":"3823:7:30","nodeType":"VariableDeclaration","scope":1630,"src":"3815:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1588,"name":"address","nodeType":"ElementaryTypeName","src":"3815:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1591,"mutability":"mutable","name":"value","nameLocation":"3840:5:30","nodeType":"VariableDeclaration","scope":1630,"src":"3832:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1590,"name":"uint256","nodeType":"ElementaryTypeName","src":"3832:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3800:46:30"},"returnParameters":{"id":1593,"nodeType":"ParameterList","parameters":[],"src":"3856:0:30"},"scope":1773,"src":"3779:410:30","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1686,"nodeType":"Block","src":"4556:257:30","statements":[{"assignments":[1652],"declarations":[{"constant":false,"id":1652,"mutability":"mutable","name":"nonceBefore","nameLocation":"4574:11:30","nodeType":"VariableDeclaration","scope":1686,"src":"4566:19:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1651,"name":"uint256","nodeType":"ElementaryTypeName","src":"4566:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1657,"initialValue":{"arguments":[{"id":1655,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1636,"src":"4601:5:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1653,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1634,"src":"4588:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1397","typeString":"contract IERC20Permit"}},"id":1654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4594:6:30","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":1390,"src":"4588:12:30","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4588:19:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4566:41:30"},{"expression":{"arguments":[{"id":1661,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1636,"src":"4630:5:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1662,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1638,"src":"4637:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1663,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1640,"src":"4646:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1664,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1642,"src":"4653:8:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1665,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1644,"src":"4663:1:30","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1666,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"4666:1:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1667,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1648,"src":"4669:1:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1658,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1634,"src":"4617:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1397","typeString":"contract IERC20Permit"}},"id":1660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4623:6:30","memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":1382,"src":"4617:12:30","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":1668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4617:54:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1669,"nodeType":"ExpressionStatement","src":"4617:54:30"},{"assignments":[1671],"declarations":[{"constant":false,"id":1671,"mutability":"mutable","name":"nonceAfter","nameLocation":"4689:10:30","nodeType":"VariableDeclaration","scope":1686,"src":"4681:18:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1670,"name":"uint256","nodeType":"ElementaryTypeName","src":"4681:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1676,"initialValue":{"arguments":[{"id":1674,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1636,"src":"4715:5:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1672,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1634,"src":"4702:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1397","typeString":"contract IERC20Permit"}},"id":1673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4708:6:30","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":1390,"src":"4702:12:30","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4702:19:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4681:40:30"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1678,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1671,"src":"4739:10:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1679,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1652,"src":"4753:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4767:1:30","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4753:15:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4739:29:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":1683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4770:35:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":1677,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4731:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4731:75:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1685,"nodeType":"ExpressionStatement","src":"4731:75:30"}]},"documentation":{"id":1631,"nodeType":"StructuredDocumentation","src":"4195:141:30","text":" @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n Revert on invalid signature."},"id":1687,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"4350:10:30","nodeType":"FunctionDefinition","parameters":{"id":1649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1634,"mutability":"mutable","name":"token","nameLocation":"4383:5:30","nodeType":"VariableDeclaration","scope":1687,"src":"4370:18:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1397","typeString":"contract IERC20Permit"},"typeName":{"id":1633,"nodeType":"UserDefinedTypeName","pathNode":{"id":1632,"name":"IERC20Permit","nameLocations":["4370:12:30"],"nodeType":"IdentifierPath","referencedDeclaration":1397,"src":"4370:12:30"},"referencedDeclaration":1397,"src":"4370:12:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1397","typeString":"contract IERC20Permit"}},"visibility":"internal"},{"constant":false,"id":1636,"mutability":"mutable","name":"owner","nameLocation":"4406:5:30","nodeType":"VariableDeclaration","scope":1687,"src":"4398:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1635,"name":"address","nodeType":"ElementaryTypeName","src":"4398:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1638,"mutability":"mutable","name":"spender","nameLocation":"4429:7:30","nodeType":"VariableDeclaration","scope":1687,"src":"4421:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1637,"name":"address","nodeType":"ElementaryTypeName","src":"4421:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1640,"mutability":"mutable","name":"value","nameLocation":"4454:5:30","nodeType":"VariableDeclaration","scope":1687,"src":"4446:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1639,"name":"uint256","nodeType":"ElementaryTypeName","src":"4446:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1642,"mutability":"mutable","name":"deadline","nameLocation":"4477:8:30","nodeType":"VariableDeclaration","scope":1687,"src":"4469:16:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1641,"name":"uint256","nodeType":"ElementaryTypeName","src":"4469:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1644,"mutability":"mutable","name":"v","nameLocation":"4501:1:30","nodeType":"VariableDeclaration","scope":1687,"src":"4495:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1643,"name":"uint8","nodeType":"ElementaryTypeName","src":"4495:5:30","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1646,"mutability":"mutable","name":"r","nameLocation":"4520:1:30","nodeType":"VariableDeclaration","scope":1687,"src":"4512:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1645,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4512:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1648,"mutability":"mutable","name":"s","nameLocation":"4539:1:30","nodeType":"VariableDeclaration","scope":1687,"src":"4531:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1647,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4531:7:30","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4360:186:30"},"returnParameters":{"id":1650,"nodeType":"ParameterList","parameters":[],"src":"4556:0:30"},"scope":1773,"src":"4341:472:30","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1723,"nodeType":"Block","src":"5266:572:30","statements":[{"assignments":[1697],"declarations":[{"constant":false,"id":1697,"mutability":"mutable","name":"returndata","nameLocation":"5628:10:30","nodeType":"VariableDeclaration","scope":1723,"src":"5615:23:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1696,"name":"bytes","nodeType":"ElementaryTypeName","src":"5615:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1706,"initialValue":{"arguments":[{"id":1703,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1693,"src":"5669:4:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":1704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5675:34:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":1700,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"5649:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}],"id":1699,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5641:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1698,"name":"address","nodeType":"ElementaryTypeName","src":"5641:7:30","typeDescriptions":{}}},"id":1701,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5641:14:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5656:12:30","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":1863,"src":"5641:27:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5641:69:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"5615:95:30"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1708,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"5728:10:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5739:6:30","memberName":"length","nodeType":"MemberAccess","src":"5728:17:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5749:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5728:22:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1714,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"5765:10:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":1716,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5778:4:30","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":1715,"name":"bool","nodeType":"ElementaryTypeName","src":"5778:4:30","typeDescriptions":{}}}],"id":1717,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5777:6:30","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":1712,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5754:3:30","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1713,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5758:6:30","memberName":"decode","nodeType":"MemberAccess","src":"5754:10:30","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1718,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5754:30:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5728:56:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":1720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5786:44:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":1707,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5720:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5720:111:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1722,"nodeType":"ExpressionStatement","src":"5720:111:30"}]},"documentation":{"id":1688,"nodeType":"StructuredDocumentation","src":"4819:372:30","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":1724,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"5205:19:30","nodeType":"FunctionDefinition","parameters":{"id":1694,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1691,"mutability":"mutable","name":"token","nameLocation":"5232:5:30","nodeType":"VariableDeclaration","scope":1724,"src":"5225:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"},"typeName":{"id":1690,"nodeType":"UserDefinedTypeName","pathNode":{"id":1689,"name":"IERC20","nameLocations":["5225:6:30"],"nodeType":"IdentifierPath","referencedDeclaration":1361,"src":"5225:6:30"},"referencedDeclaration":1361,"src":"5225:6:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1693,"mutability":"mutable","name":"data","nameLocation":"5252:4:30","nodeType":"VariableDeclaration","scope":1724,"src":"5239:17:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1692,"name":"bytes","nodeType":"ElementaryTypeName","src":"5239:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5224:33:30"},"returnParameters":{"id":1695,"nodeType":"ParameterList","parameters":[],"src":"5266:0:30"},"scope":1773,"src":"5196:642:30","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1771,"nodeType":"Block","src":"6428:505:30","statements":[{"assignments":[1736,1738],"declarations":[{"constant":false,"id":1736,"mutability":"mutable","name":"success","nameLocation":"6729:7:30","nodeType":"VariableDeclaration","scope":1771,"src":"6724:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1735,"name":"bool","nodeType":"ElementaryTypeName","src":"6724:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1738,"mutability":"mutable","name":"returndata","nameLocation":"6751:10:30","nodeType":"VariableDeclaration","scope":1771,"src":"6738:23:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1737,"name":"bytes","nodeType":"ElementaryTypeName","src":"6738:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1746,"initialValue":{"arguments":[{"id":1744,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1730,"src":"6785:4:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1741,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1728,"src":"6773:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}],"id":1740,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6765:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1739,"name":"address","nodeType":"ElementaryTypeName","src":"6765:7:30","typeDescriptions":{}}},"id":1742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6765:14:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6780:4:30","memberName":"call","nodeType":"MemberAccess","src":"6765:19:30","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6765:25:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6723:67:30"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1747,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1736,"src":"6819:7:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1748,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"6831:10:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6842:6:30","memberName":"length","nodeType":"MemberAccess","src":"6831:17:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6852:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6831:22:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1754,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"6868:10:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":1756,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6881:4:30","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":1755,"name":"bool","nodeType":"ElementaryTypeName","src":"6881:4:30","typeDescriptions":{}}}],"id":1757,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6880:6:30","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":1752,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6857:3:30","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1753,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6861:6:30","memberName":"decode","nodeType":"MemberAccess","src":"6857:10:30","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1758,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6857:30:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6831:56:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1760,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6830:58:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6819:69:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"arguments":[{"id":1766,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1728,"src":"6919:5:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}],"id":1765,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6911:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1764,"name":"address","nodeType":"ElementaryTypeName","src":"6911:7:30","typeDescriptions":{}}},"id":1767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6911:14:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1762,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2103,"src":"6892:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$2103_$","typeString":"type(library Address)"}},"id":1763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6900:10:30","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1791,"src":"6892:18:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1768,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6892:34:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6819:107:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1734,"id":1770,"nodeType":"Return","src":"6800:126:30"}]},"documentation":{"id":1725,"nodeType":"StructuredDocumentation","src":"5844:490:30","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."},"id":1772,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturnBool","nameLocation":"6348:23:30","nodeType":"FunctionDefinition","parameters":{"id":1731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1728,"mutability":"mutable","name":"token","nameLocation":"6379:5:30","nodeType":"VariableDeclaration","scope":1772,"src":"6372:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"},"typeName":{"id":1727,"nodeType":"UserDefinedTypeName","pathNode":{"id":1726,"name":"IERC20","nameLocations":["6372:6:30"],"nodeType":"IdentifierPath","referencedDeclaration":1361,"src":"6372:6:30"},"referencedDeclaration":1361,"src":"6372:6:30","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1361","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1730,"mutability":"mutable","name":"data","nameLocation":"6399:4:30","nodeType":"VariableDeclaration","scope":1772,"src":"6386:17:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1729,"name":"bytes","nodeType":"ElementaryTypeName","src":"6386:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6371:33:30"},"returnParameters":{"id":1734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1733,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1772,"src":"6422:4:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1732,"name":"bool","nodeType":"ElementaryTypeName","src":"6422:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6421:6:30"},"scope":1773,"src":"6339:594:30","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":1774,"src":"701:6234:30","usedErrors":[],"usedEvents":[]}],"src":"115:6821:30"},"id":30},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[2103]},"id":2104,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1775,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:31"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":1776,"nodeType":"StructuredDocumentation","src":"126:67:31","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":2103,"linearizedBaseContracts":[2103],"name":"Address","nameLocation":"202:7:31","nodeType":"ContractDefinition","nodes":[{"body":{"id":1790,"nodeType":"Block","src":"1478:254:31","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1784,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1779,"src":"1702:7:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1710:4:31","memberName":"code","nodeType":"MemberAccess","src":"1702:12:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1715:6:31","memberName":"length","nodeType":"MemberAccess","src":"1702:19:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1724:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1702:23:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1783,"id":1789,"nodeType":"Return","src":"1695:30:31"}]},"documentation":{"id":1777,"nodeType":"StructuredDocumentation","src":"216:1191:31","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1791,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1421:10:31","nodeType":"FunctionDefinition","parameters":{"id":1780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1779,"mutability":"mutable","name":"account","nameLocation":"1440:7:31","nodeType":"VariableDeclaration","scope":1791,"src":"1432:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1778,"name":"address","nodeType":"ElementaryTypeName","src":"1432:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1431:17:31"},"returnParameters":{"id":1783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1782,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1791,"src":"1472:4:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1781,"name":"bool","nodeType":"ElementaryTypeName","src":"1472:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1471:6:31"},"scope":2103,"src":"1412:320:31","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1824,"nodeType":"Block","src":"2718:241:31","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1802,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2744:4:31","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2103","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2103","typeString":"library Address"}],"id":1801,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2736:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1800,"name":"address","nodeType":"ElementaryTypeName","src":"2736:7:31","typeDescriptions":{}}},"id":1803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:13:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2750:7:31","memberName":"balance","nodeType":"MemberAccess","src":"2736:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1805,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1796,"src":"2761:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2736:31:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2769:31:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1799,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2728:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:73:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1809,"nodeType":"ExpressionStatement","src":"2728:73:31"},{"assignments":[1811,null],"declarations":[{"constant":false,"id":1811,"mutability":"mutable","name":"success","nameLocation":"2818:7:31","nodeType":"VariableDeclaration","scope":1824,"src":"2813:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1810,"name":"bool","nodeType":"ElementaryTypeName","src":"2813:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1818,"initialValue":{"arguments":[{"hexValue":"","id":1816,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2861:2:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1812,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1794,"src":"2831:9:31","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2841:4:31","memberName":"call","nodeType":"MemberAccess","src":"2831:14:31","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1814,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1796,"src":"2853:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2831:29:31","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1817,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2831:33:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2812:52:31"},{"expression":{"arguments":[{"id":1820,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1811,"src":"2882:7:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2891:60:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1819,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2874:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1822,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2874:78:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1823,"nodeType":"ExpressionStatement","src":"2874:78:31"}]},"documentation":{"id":1792,"nodeType":"StructuredDocumentation","src":"1738:904:31","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1825,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2656:9:31","nodeType":"FunctionDefinition","parameters":{"id":1797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1794,"mutability":"mutable","name":"recipient","nameLocation":"2682:9:31","nodeType":"VariableDeclaration","scope":1825,"src":"2666:25:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1793,"name":"address","nodeType":"ElementaryTypeName","src":"2666:15:31","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1796,"mutability":"mutable","name":"amount","nameLocation":"2701:6:31","nodeType":"VariableDeclaration","scope":1825,"src":"2693:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1795,"name":"uint256","nodeType":"ElementaryTypeName","src":"2693:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:43:31"},"returnParameters":{"id":1798,"nodeType":"ParameterList","parameters":[],"src":"2718:0:31"},"scope":2103,"src":"2647:312:31","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1842,"nodeType":"Block","src":"3790:96:31","statements":[{"expression":{"arguments":[{"id":1836,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1828,"src":"3829:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1837,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"3837:4:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3843:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3846:32:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1835,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1883,1927],"referencedDeclaration":1927,"src":"3807:21:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3807:72:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1834,"id":1841,"nodeType":"Return","src":"3800:79:31"}]},"documentation":{"id":1826,"nodeType":"StructuredDocumentation","src":"2965:731:31","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1843,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3710:12:31","nodeType":"FunctionDefinition","parameters":{"id":1831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1828,"mutability":"mutable","name":"target","nameLocation":"3731:6:31","nodeType":"VariableDeclaration","scope":1843,"src":"3723:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1827,"name":"address","nodeType":"ElementaryTypeName","src":"3723:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1830,"mutability":"mutable","name":"data","nameLocation":"3752:4:31","nodeType":"VariableDeclaration","scope":1843,"src":"3739:17:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1829,"name":"bytes","nodeType":"ElementaryTypeName","src":"3739:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3722:35:31"},"returnParameters":{"id":1834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1833,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1843,"src":"3776:12:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1832,"name":"bytes","nodeType":"ElementaryTypeName","src":"3776:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:14:31"},"scope":2103,"src":"3701:185:31","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1862,"nodeType":"Block","src":"4255:76:31","statements":[{"expression":{"arguments":[{"id":1856,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1846,"src":"4294:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1857,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1848,"src":"4302:4:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4308:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1859,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1850,"src":"4311:12:31","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1855,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1883,1927],"referencedDeclaration":1927,"src":"4272:21:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:52:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1854,"id":1861,"nodeType":"Return","src":"4265:59:31"}]},"documentation":{"id":1844,"nodeType":"StructuredDocumentation","src":"3892:211:31","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1863,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4117:12:31","nodeType":"FunctionDefinition","parameters":{"id":1851,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1846,"mutability":"mutable","name":"target","nameLocation":"4147:6:31","nodeType":"VariableDeclaration","scope":1863,"src":"4139:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1845,"name":"address","nodeType":"ElementaryTypeName","src":"4139:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1848,"mutability":"mutable","name":"data","nameLocation":"4176:4:31","nodeType":"VariableDeclaration","scope":1863,"src":"4163:17:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1847,"name":"bytes","nodeType":"ElementaryTypeName","src":"4163:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1850,"mutability":"mutable","name":"errorMessage","nameLocation":"4204:12:31","nodeType":"VariableDeclaration","scope":1863,"src":"4190:26:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1849,"name":"string","nodeType":"ElementaryTypeName","src":"4190:6:31","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4129:93:31"},"returnParameters":{"id":1854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1853,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1863,"src":"4241:12:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1852,"name":"bytes","nodeType":"ElementaryTypeName","src":"4241:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4240:14:31"},"scope":2103,"src":"4108:223:31","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1882,"nodeType":"Block","src":"4806:111:31","statements":[{"expression":{"arguments":[{"id":1876,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1866,"src":"4845:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1877,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1868,"src":"4853:4:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1878,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1870,"src":"4859:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4866:43:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1875,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1883,1927],"referencedDeclaration":1927,"src":"4823:21:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4823:87:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1874,"id":1881,"nodeType":"Return","src":"4816:94:31"}]},"documentation":{"id":1864,"nodeType":"StructuredDocumentation","src":"4337:351:31","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1883,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4702:21:31","nodeType":"FunctionDefinition","parameters":{"id":1871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1866,"mutability":"mutable","name":"target","nameLocation":"4732:6:31","nodeType":"VariableDeclaration","scope":1883,"src":"4724:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1865,"name":"address","nodeType":"ElementaryTypeName","src":"4724:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1868,"mutability":"mutable","name":"data","nameLocation":"4753:4:31","nodeType":"VariableDeclaration","scope":1883,"src":"4740:17:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1867,"name":"bytes","nodeType":"ElementaryTypeName","src":"4740:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1870,"mutability":"mutable","name":"value","nameLocation":"4767:5:31","nodeType":"VariableDeclaration","scope":1883,"src":"4759:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1869,"name":"uint256","nodeType":"ElementaryTypeName","src":"4759:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4723:50:31"},"returnParameters":{"id":1874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1873,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1883,"src":"4792:12:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1872,"name":"bytes","nodeType":"ElementaryTypeName","src":"4792:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4791:14:31"},"scope":2103,"src":"4693:224:31","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1926,"nodeType":"Block","src":"5344:267:31","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1900,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5370:4:31","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2103","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2103","typeString":"library Address"}],"id":1899,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5362:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1898,"name":"address","nodeType":"ElementaryTypeName","src":"5362:7:31","typeDescriptions":{}}},"id":1901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5362:13:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5376:7:31","memberName":"balance","nodeType":"MemberAccess","src":"5362:21:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1903,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1890,"src":"5387:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5362:30:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5394:40:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1897,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5354:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5354:81:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1907,"nodeType":"ExpressionStatement","src":"5354:81:31"},{"assignments":[1909,1911],"declarations":[{"constant":false,"id":1909,"mutability":"mutable","name":"success","nameLocation":"5451:7:31","nodeType":"VariableDeclaration","scope":1926,"src":"5446:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1908,"name":"bool","nodeType":"ElementaryTypeName","src":"5446:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1911,"mutability":"mutable","name":"returndata","nameLocation":"5473:10:31","nodeType":"VariableDeclaration","scope":1926,"src":"5460:23:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1910,"name":"bytes","nodeType":"ElementaryTypeName","src":"5460:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1918,"initialValue":{"arguments":[{"id":1916,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1888,"src":"5513:4:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1912,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"5487:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5494:4:31","memberName":"call","nodeType":"MemberAccess","src":"5487:11:31","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1914,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1890,"src":"5506:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5487:25:31","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5487:31:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5445:73:31"},{"expression":{"arguments":[{"id":1920,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"5562:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1921,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1909,"src":"5570:7:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1922,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1911,"src":"5579:10:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1923,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1892,"src":"5591:12:31","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1919,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"5535:26:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5535:69:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1896,"id":1925,"nodeType":"Return","src":"5528:76:31"}]},"documentation":{"id":1884,"nodeType":"StructuredDocumentation","src":"4923:237:31","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1927,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5174:21:31","nodeType":"FunctionDefinition","parameters":{"id":1893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1886,"mutability":"mutable","name":"target","nameLocation":"5213:6:31","nodeType":"VariableDeclaration","scope":1927,"src":"5205:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1885,"name":"address","nodeType":"ElementaryTypeName","src":"5205:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1888,"mutability":"mutable","name":"data","nameLocation":"5242:4:31","nodeType":"VariableDeclaration","scope":1927,"src":"5229:17:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1887,"name":"bytes","nodeType":"ElementaryTypeName","src":"5229:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1890,"mutability":"mutable","name":"value","nameLocation":"5264:5:31","nodeType":"VariableDeclaration","scope":1927,"src":"5256:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1889,"name":"uint256","nodeType":"ElementaryTypeName","src":"5256:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1892,"mutability":"mutable","name":"errorMessage","nameLocation":"5293:12:31","nodeType":"VariableDeclaration","scope":1927,"src":"5279:26:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1891,"name":"string","nodeType":"ElementaryTypeName","src":"5279:6:31","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5195:116:31"},"returnParameters":{"id":1896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1895,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1927,"src":"5330:12:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1894,"name":"bytes","nodeType":"ElementaryTypeName","src":"5330:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5329:14:31"},"scope":2103,"src":"5165:446:31","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1943,"nodeType":"Block","src":"5888:97:31","statements":[{"expression":{"arguments":[{"id":1938,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"5924:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1939,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1932,"src":"5932:4:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1940,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5938:39:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1937,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1944,1973],"referencedDeclaration":1973,"src":"5905:18:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1941,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5905:73:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1936,"id":1942,"nodeType":"Return","src":"5898:80:31"}]},"documentation":{"id":1928,"nodeType":"StructuredDocumentation","src":"5617:166:31","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1944,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5797:18:31","nodeType":"FunctionDefinition","parameters":{"id":1933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1930,"mutability":"mutable","name":"target","nameLocation":"5824:6:31","nodeType":"VariableDeclaration","scope":1944,"src":"5816:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1929,"name":"address","nodeType":"ElementaryTypeName","src":"5816:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1932,"mutability":"mutable","name":"data","nameLocation":"5845:4:31","nodeType":"VariableDeclaration","scope":1944,"src":"5832:17:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1931,"name":"bytes","nodeType":"ElementaryTypeName","src":"5832:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5815:35:31"},"returnParameters":{"id":1936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1935,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1944,"src":"5874:12:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1934,"name":"bytes","nodeType":"ElementaryTypeName","src":"5874:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5873:14:31"},"scope":2103,"src":"5788:197:31","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1972,"nodeType":"Block","src":"6327:168:31","statements":[{"assignments":[1957,1959],"declarations":[{"constant":false,"id":1957,"mutability":"mutable","name":"success","nameLocation":"6343:7:31","nodeType":"VariableDeclaration","scope":1972,"src":"6338:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1956,"name":"bool","nodeType":"ElementaryTypeName","src":"6338:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1959,"mutability":"mutable","name":"returndata","nameLocation":"6365:10:31","nodeType":"VariableDeclaration","scope":1972,"src":"6352:23:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1958,"name":"bytes","nodeType":"ElementaryTypeName","src":"6352:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1964,"initialValue":{"arguments":[{"id":1962,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"6397:4:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1960,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1947,"src":"6379:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6386:10:31","memberName":"staticcall","nodeType":"MemberAccess","src":"6379:17:31","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1963,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6379:23:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6337:65:31"},{"expression":{"arguments":[{"id":1966,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1947,"src":"6446:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1967,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"6454:7:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1968,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1959,"src":"6463:10:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1969,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1951,"src":"6475:12:31","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1965,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"6419:26:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1970,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6419:69:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1955,"id":1971,"nodeType":"Return","src":"6412:76:31"}]},"documentation":{"id":1945,"nodeType":"StructuredDocumentation","src":"5991:173:31","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1973,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6178:18:31","nodeType":"FunctionDefinition","parameters":{"id":1952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1947,"mutability":"mutable","name":"target","nameLocation":"6214:6:31","nodeType":"VariableDeclaration","scope":1973,"src":"6206:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1946,"name":"address","nodeType":"ElementaryTypeName","src":"6206:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1949,"mutability":"mutable","name":"data","nameLocation":"6243:4:31","nodeType":"VariableDeclaration","scope":1973,"src":"6230:17:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1948,"name":"bytes","nodeType":"ElementaryTypeName","src":"6230:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1951,"mutability":"mutable","name":"errorMessage","nameLocation":"6271:12:31","nodeType":"VariableDeclaration","scope":1973,"src":"6257:26:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1950,"name":"string","nodeType":"ElementaryTypeName","src":"6257:6:31","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6196:93:31"},"returnParameters":{"id":1955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1954,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1973,"src":"6313:12:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1953,"name":"bytes","nodeType":"ElementaryTypeName","src":"6313:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6312:14:31"},"scope":2103,"src":"6169:326:31","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1989,"nodeType":"Block","src":"6771:101:31","statements":[{"expression":{"arguments":[{"id":1984,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1976,"src":"6809:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1985,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1978,"src":"6817:4:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6823:41:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1983,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1990,2019],"referencedDeclaration":2019,"src":"6788:20:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6788:77:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1982,"id":1988,"nodeType":"Return","src":"6781:84:31"}]},"documentation":{"id":1974,"nodeType":"StructuredDocumentation","src":"6501:168:31","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1990,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6683:20:31","nodeType":"FunctionDefinition","parameters":{"id":1979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1976,"mutability":"mutable","name":"target","nameLocation":"6712:6:31","nodeType":"VariableDeclaration","scope":1990,"src":"6704:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1975,"name":"address","nodeType":"ElementaryTypeName","src":"6704:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1978,"mutability":"mutable","name":"data","nameLocation":"6733:4:31","nodeType":"VariableDeclaration","scope":1990,"src":"6720:17:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1977,"name":"bytes","nodeType":"ElementaryTypeName","src":"6720:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6703:35:31"},"returnParameters":{"id":1982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1981,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1990,"src":"6757:12:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1980,"name":"bytes","nodeType":"ElementaryTypeName","src":"6757:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6756:14:31"},"scope":2103,"src":"6674:198:31","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2018,"nodeType":"Block","src":"7213:170:31","statements":[{"assignments":[2003,2005],"declarations":[{"constant":false,"id":2003,"mutability":"mutable","name":"success","nameLocation":"7229:7:31","nodeType":"VariableDeclaration","scope":2018,"src":"7224:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2002,"name":"bool","nodeType":"ElementaryTypeName","src":"7224:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2005,"mutability":"mutable","name":"returndata","nameLocation":"7251:10:31","nodeType":"VariableDeclaration","scope":2018,"src":"7238:23:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2004,"name":"bytes","nodeType":"ElementaryTypeName","src":"7238:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2010,"initialValue":{"arguments":[{"id":2008,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1995,"src":"7285:4:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2006,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"7265:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7272:12:31","memberName":"delegatecall","nodeType":"MemberAccess","src":"7265:19:31","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":2009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7265:25:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7223:67:31"},{"expression":{"arguments":[{"id":2012,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"7334:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2013,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2003,"src":"7342:7:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2014,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7351:10:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2015,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"7363:12:31","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2011,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"7307:26:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7307:69:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2001,"id":2017,"nodeType":"Return","src":"7300:76:31"}]},"documentation":{"id":1991,"nodeType":"StructuredDocumentation","src":"6878:175:31","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":2019,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7067:20:31","nodeType":"FunctionDefinition","parameters":{"id":1998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1993,"mutability":"mutable","name":"target","nameLocation":"7105:6:31","nodeType":"VariableDeclaration","scope":2019,"src":"7097:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1992,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1995,"mutability":"mutable","name":"data","nameLocation":"7134:4:31","nodeType":"VariableDeclaration","scope":2019,"src":"7121:17:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1994,"name":"bytes","nodeType":"ElementaryTypeName","src":"7121:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1997,"mutability":"mutable","name":"errorMessage","nameLocation":"7162:12:31","nodeType":"VariableDeclaration","scope":2019,"src":"7148:26:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1996,"name":"string","nodeType":"ElementaryTypeName","src":"7148:6:31","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7087:93:31"},"returnParameters":{"id":2001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2000,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2019,"src":"7199:12:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1999,"name":"bytes","nodeType":"ElementaryTypeName","src":"7199:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7198:14:31"},"scope":2103,"src":"7058:325:31","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2057,"nodeType":"Block","src":"7865:434:31","statements":[{"condition":{"id":2033,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2024,"src":"7879:7:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2055,"nodeType":"Block","src":"8235:58:31","statements":[{"expression":{"arguments":[{"id":2051,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2026,"src":"8257:10:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2052,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2028,"src":"8269:12:31","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2050,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2102,"src":"8249:7:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":2053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8249:33:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2054,"nodeType":"ExpressionStatement","src":"8249:33:31"}]},"id":2056,"nodeType":"IfStatement","src":"7875:418:31","trueBody":{"id":2049,"nodeType":"Block","src":"7888:341:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2034,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2026,"src":"7906:10:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7917:6:31","memberName":"length","nodeType":"MemberAccess","src":"7906:17:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7927:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7906:22:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2046,"nodeType":"IfStatement","src":"7902:286:31","trueBody":{"id":2045,"nodeType":"Block","src":"7930:258:31","statements":[{"expression":{"arguments":[{"arguments":[{"id":2040,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2022,"src":"8132:6:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2039,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1791,"src":"8121:10:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":2041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8121:18:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":2042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8141:31:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":2038,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8113:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8113:60:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2044,"nodeType":"ExpressionStatement","src":"8113:60:31"}]}},{"expression":{"id":2047,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2026,"src":"8208:10:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2032,"id":2048,"nodeType":"Return","src":"8201:17:31"}]}}]},"documentation":{"id":2020,"nodeType":"StructuredDocumentation","src":"7389:277:31","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":2058,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7680:26:31","nodeType":"FunctionDefinition","parameters":{"id":2029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2022,"mutability":"mutable","name":"target","nameLocation":"7724:6:31","nodeType":"VariableDeclaration","scope":2058,"src":"7716:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2021,"name":"address","nodeType":"ElementaryTypeName","src":"7716:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2024,"mutability":"mutable","name":"success","nameLocation":"7745:7:31","nodeType":"VariableDeclaration","scope":2058,"src":"7740:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2023,"name":"bool","nodeType":"ElementaryTypeName","src":"7740:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2026,"mutability":"mutable","name":"returndata","nameLocation":"7775:10:31","nodeType":"VariableDeclaration","scope":2058,"src":"7762:23:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2025,"name":"bytes","nodeType":"ElementaryTypeName","src":"7762:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2028,"mutability":"mutable","name":"errorMessage","nameLocation":"7809:12:31","nodeType":"VariableDeclaration","scope":2058,"src":"7795:26:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2027,"name":"string","nodeType":"ElementaryTypeName","src":"7795:6:31","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7706:121:31"},"returnParameters":{"id":2032,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2031,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2058,"src":"7851:12:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2030,"name":"bytes","nodeType":"ElementaryTypeName","src":"7851:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7850:14:31"},"scope":2103,"src":"7671:628:31","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2081,"nodeType":"Block","src":"8680:135:31","statements":[{"condition":{"id":2070,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2061,"src":"8694:7:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2079,"nodeType":"Block","src":"8751:58:31","statements":[{"expression":{"arguments":[{"id":2075,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2063,"src":"8773:10:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2076,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2065,"src":"8785:12:31","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2074,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2102,"src":"8765:7:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":2077,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8765:33:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2078,"nodeType":"ExpressionStatement","src":"8765:33:31"}]},"id":2080,"nodeType":"IfStatement","src":"8690:119:31","trueBody":{"id":2073,"nodeType":"Block","src":"8703:42:31","statements":[{"expression":{"id":2071,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2063,"src":"8724:10:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2069,"id":2072,"nodeType":"Return","src":"8717:17:31"}]}}]},"documentation":{"id":2059,"nodeType":"StructuredDocumentation","src":"8305:210:31","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":2082,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8529:16:31","nodeType":"FunctionDefinition","parameters":{"id":2066,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2061,"mutability":"mutable","name":"success","nameLocation":"8560:7:31","nodeType":"VariableDeclaration","scope":2082,"src":"8555:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2060,"name":"bool","nodeType":"ElementaryTypeName","src":"8555:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2063,"mutability":"mutable","name":"returndata","nameLocation":"8590:10:31","nodeType":"VariableDeclaration","scope":2082,"src":"8577:23:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2062,"name":"bytes","nodeType":"ElementaryTypeName","src":"8577:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2065,"mutability":"mutable","name":"errorMessage","nameLocation":"8624:12:31","nodeType":"VariableDeclaration","scope":2082,"src":"8610:26:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2064,"name":"string","nodeType":"ElementaryTypeName","src":"8610:6:31","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8545:97:31"},"returnParameters":{"id":2069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2068,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2082,"src":"8666:12:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2067,"name":"bytes","nodeType":"ElementaryTypeName","src":"8666:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8665:14:31"},"scope":2103,"src":"8520:295:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2101,"nodeType":"Block","src":"8904:457:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2089,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"8980:10:31","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8991:6:31","memberName":"length","nodeType":"MemberAccess","src":"8980:17:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9000:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8980:21:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2099,"nodeType":"Block","src":"9310:45:31","statements":[{"expression":{"arguments":[{"id":2096,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2086,"src":"9331:12:31","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2095,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9324:6:31","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9324:20:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2098,"nodeType":"ExpressionStatement","src":"9324:20:31"}]},"id":2100,"nodeType":"IfStatement","src":"8976:379:31","trueBody":{"id":2094,"nodeType":"Block","src":"9003:301:31","statements":[{"AST":{"nativeSrc":"9161:133:31","nodeType":"YulBlock","src":"9161:133:31","statements":[{"nativeSrc":"9179:40:31","nodeType":"YulVariableDeclaration","src":"9179:40:31","value":{"arguments":[{"name":"returndata","nativeSrc":"9208:10:31","nodeType":"YulIdentifier","src":"9208:10:31"}],"functionName":{"name":"mload","nativeSrc":"9202:5:31","nodeType":"YulIdentifier","src":"9202:5:31"},"nativeSrc":"9202:17:31","nodeType":"YulFunctionCall","src":"9202:17:31"},"variables":[{"name":"returndata_size","nativeSrc":"9183:15:31","nodeType":"YulTypedName","src":"9183:15:31","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"9247:2:31","nodeType":"YulLiteral","src":"9247:2:31","type":"","value":"32"},{"name":"returndata","nativeSrc":"9251:10:31","nodeType":"YulIdentifier","src":"9251:10:31"}],"functionName":{"name":"add","nativeSrc":"9243:3:31","nodeType":"YulIdentifier","src":"9243:3:31"},"nativeSrc":"9243:19:31","nodeType":"YulFunctionCall","src":"9243:19:31"},{"name":"returndata_size","nativeSrc":"9264:15:31","nodeType":"YulIdentifier","src":"9264:15:31"}],"functionName":{"name":"revert","nativeSrc":"9236:6:31","nodeType":"YulIdentifier","src":"9236:6:31"},"nativeSrc":"9236:44:31","nodeType":"YulFunctionCall","src":"9236:44:31"},"nativeSrc":"9236:44:31","nodeType":"YulExpressionStatement","src":"9236:44:31"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2084,"isOffset":false,"isSlot":false,"src":"9208:10:31","valueSize":1},{"declaration":2084,"isOffset":false,"isSlot":false,"src":"9251:10:31","valueSize":1}],"id":2093,"nodeType":"InlineAssembly","src":"9152:142:31"}]}}]},"id":2102,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8830:7:31","nodeType":"FunctionDefinition","parameters":{"id":2087,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2084,"mutability":"mutable","name":"returndata","nameLocation":"8851:10:31","nodeType":"VariableDeclaration","scope":2102,"src":"8838:23:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2083,"name":"bytes","nodeType":"ElementaryTypeName","src":"8838:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2086,"mutability":"mutable","name":"errorMessage","nameLocation":"8877:12:31","nodeType":"VariableDeclaration","scope":2102,"src":"8863:26:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2085,"name":"string","nodeType":"ElementaryTypeName","src":"8863:6:31","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8837:53:31"},"returnParameters":{"id":2088,"nodeType":"ParameterList","parameters":[],"src":"8904:0:31"},"scope":2103,"src":"8821:540:31","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":2104,"src":"194:9169:31","usedErrors":[],"usedEvents":[]}],"src":"101:9263:31"},"id":31},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[2125]},"id":2126,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2105,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:32"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":2106,"nodeType":"StructuredDocumentation","src":"111:496:32","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":2125,"linearizedBaseContracts":[2125],"name":"Context","nameLocation":"626:7:32","nodeType":"ContractDefinition","nodes":[{"body":{"id":2114,"nodeType":"Block","src":"702:34:32","statements":[{"expression":{"expression":{"id":2111,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:32","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:32","memberName":"sender","nodeType":"MemberAccess","src":"719:10:32","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2110,"id":2113,"nodeType":"Return","src":"712:17:32"}]},"id":2115,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:32","nodeType":"FunctionDefinition","parameters":{"id":2107,"nodeType":"ParameterList","parameters":[],"src":"659:2:32"},"returnParameters":{"id":2110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2109,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2115,"src":"693:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2108,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:32"},"scope":2125,"src":"640:96:32","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2123,"nodeType":"Block","src":"809:32:32","statements":[{"expression":{"expression":{"id":2120,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:32","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:32","memberName":"data","nodeType":"MemberAccess","src":"826:8:32","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2119,"id":2122,"nodeType":"Return","src":"819:15:32"}]},"id":2124,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:32","nodeType":"FunctionDefinition","parameters":{"id":2116,"nodeType":"ParameterList","parameters":[],"src":"759:2:32"},"returnParameters":{"id":2119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2118,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2124,"src":"793:14:32","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2117,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:32","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:32"},"scope":2125,"src":"742:99:32","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":2126,"src":"608:235:32","usedErrors":[],"usedEvents":[]}],"src":"86:758:32"},"id":32},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[2235]},"id":2236,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2127,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"193:23:33"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":2128,"nodeType":"StructuredDocumentation","src":"218:1201:33","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n _Available since v4.9 for `string`, `bytes`._"},"fullyImplemented":true,"id":2235,"linearizedBaseContracts":[2235],"name":"StorageSlot","nameLocation":"1428:11:33","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":2131,"members":[{"constant":false,"id":2130,"mutability":"mutable","name":"value","nameLocation":"1483:5:33","nodeType":"VariableDeclaration","scope":2131,"src":"1475:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2129,"name":"address","nodeType":"ElementaryTypeName","src":"1475:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1453:11:33","nodeType":"StructDefinition","scope":2235,"src":"1446:49:33","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":2134,"members":[{"constant":false,"id":2133,"mutability":"mutable","name":"value","nameLocation":"1535:5:33","nodeType":"VariableDeclaration","scope":2134,"src":"1530:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2132,"name":"bool","nodeType":"ElementaryTypeName","src":"1530:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1508:11:33","nodeType":"StructDefinition","scope":2235,"src":"1501:46:33","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":2137,"members":[{"constant":false,"id":2136,"mutability":"mutable","name":"value","nameLocation":"1590:5:33","nodeType":"VariableDeclaration","scope":2137,"src":"1582:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2135,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1582:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1560:11:33","nodeType":"StructDefinition","scope":2235,"src":"1553:49:33","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":2140,"members":[{"constant":false,"id":2139,"mutability":"mutable","name":"value","nameLocation":"1645:5:33","nodeType":"VariableDeclaration","scope":2140,"src":"1637:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2138,"name":"uint256","nodeType":"ElementaryTypeName","src":"1637:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1615:11:33","nodeType":"StructDefinition","scope":2235,"src":"1608:49:33","visibility":"public"},{"canonicalName":"StorageSlot.StringSlot","id":2143,"members":[{"constant":false,"id":2142,"mutability":"mutable","name":"value","nameLocation":"1698:5:33","nodeType":"VariableDeclaration","scope":2143,"src":"1691:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2141,"name":"string","nodeType":"ElementaryTypeName","src":"1691:6:33","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1670:10:33","nodeType":"StructDefinition","scope":2235,"src":"1663:47:33","visibility":"public"},{"canonicalName":"StorageSlot.BytesSlot","id":2146,"members":[{"constant":false,"id":2145,"mutability":"mutable","name":"value","nameLocation":"1749:5:33","nodeType":"VariableDeclaration","scope":2146,"src":"1743:11:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2144,"name":"bytes","nodeType":"ElementaryTypeName","src":"1743:5:33","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1723:9:33","nodeType":"StructDefinition","scope":2235,"src":"1716:45:33","visibility":"public"},{"body":{"id":2156,"nodeType":"Block","src":"1943:106:33","statements":[{"AST":{"nativeSrc":"2005:38:33","nodeType":"YulBlock","src":"2005:38:33","statements":[{"nativeSrc":"2019:14:33","nodeType":"YulAssignment","src":"2019:14:33","value":{"name":"slot","nativeSrc":"2029:4:33","nodeType":"YulIdentifier","src":"2029:4:33"},"variableNames":[{"name":"r.slot","nativeSrc":"2019:6:33","nodeType":"YulIdentifier","src":"2019:6:33"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2153,"isOffset":false,"isSlot":true,"src":"2019:6:33","suffix":"slot","valueSize":1},{"declaration":2149,"isOffset":false,"isSlot":false,"src":"2029:4:33","valueSize":1}],"id":2155,"nodeType":"InlineAssembly","src":"1996:47:33"}]},"documentation":{"id":2147,"nodeType":"StructuredDocumentation","src":"1767:87:33","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":2157,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1868:14:33","nodeType":"FunctionDefinition","parameters":{"id":2150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2149,"mutability":"mutable","name":"slot","nameLocation":"1891:4:33","nodeType":"VariableDeclaration","scope":2157,"src":"1883:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2148,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1883:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1882:14:33"},"returnParameters":{"id":2154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2153,"mutability":"mutable","name":"r","nameLocation":"1940:1:33","nodeType":"VariableDeclaration","scope":2157,"src":"1920:21:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2131_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":2152,"nodeType":"UserDefinedTypeName","pathNode":{"id":2151,"name":"AddressSlot","nameLocations":["1920:11:33"],"nodeType":"IdentifierPath","referencedDeclaration":2131,"src":"1920:11:33"},"referencedDeclaration":2131,"src":"1920:11:33","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2131_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1919:23:33"},"scope":2235,"src":"1859:190:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2167,"nodeType":"Block","src":"2231:106:33","statements":[{"AST":{"nativeSrc":"2293:38:33","nodeType":"YulBlock","src":"2293:38:33","statements":[{"nativeSrc":"2307:14:33","nodeType":"YulAssignment","src":"2307:14:33","value":{"name":"slot","nativeSrc":"2317:4:33","nodeType":"YulIdentifier","src":"2317:4:33"},"variableNames":[{"name":"r.slot","nativeSrc":"2307:6:33","nodeType":"YulIdentifier","src":"2307:6:33"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2164,"isOffset":false,"isSlot":true,"src":"2307:6:33","suffix":"slot","valueSize":1},{"declaration":2160,"isOffset":false,"isSlot":false,"src":"2317:4:33","valueSize":1}],"id":2166,"nodeType":"InlineAssembly","src":"2284:47:33"}]},"documentation":{"id":2158,"nodeType":"StructuredDocumentation","src":"2055:87:33","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":2168,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"2156:14:33","nodeType":"FunctionDefinition","parameters":{"id":2161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2160,"mutability":"mutable","name":"slot","nameLocation":"2179:4:33","nodeType":"VariableDeclaration","scope":2168,"src":"2171:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2159,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2171:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2170:14:33"},"returnParameters":{"id":2165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2164,"mutability":"mutable","name":"r","nameLocation":"2228:1:33","nodeType":"VariableDeclaration","scope":2168,"src":"2208:21:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2134_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":2163,"nodeType":"UserDefinedTypeName","pathNode":{"id":2162,"name":"BooleanSlot","nameLocations":["2208:11:33"],"nodeType":"IdentifierPath","referencedDeclaration":2134,"src":"2208:11:33"},"referencedDeclaration":2134,"src":"2208:11:33","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2134_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"2207:23:33"},"scope":2235,"src":"2147:190:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2178,"nodeType":"Block","src":"2519:106:33","statements":[{"AST":{"nativeSrc":"2581:38:33","nodeType":"YulBlock","src":"2581:38:33","statements":[{"nativeSrc":"2595:14:33","nodeType":"YulAssignment","src":"2595:14:33","value":{"name":"slot","nativeSrc":"2605:4:33","nodeType":"YulIdentifier","src":"2605:4:33"},"variableNames":[{"name":"r.slot","nativeSrc":"2595:6:33","nodeType":"YulIdentifier","src":"2595:6:33"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2175,"isOffset":false,"isSlot":true,"src":"2595:6:33","suffix":"slot","valueSize":1},{"declaration":2171,"isOffset":false,"isSlot":false,"src":"2605:4:33","valueSize":1}],"id":2177,"nodeType":"InlineAssembly","src":"2572:47:33"}]},"documentation":{"id":2169,"nodeType":"StructuredDocumentation","src":"2343:87:33","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":2179,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2444:14:33","nodeType":"FunctionDefinition","parameters":{"id":2172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2171,"mutability":"mutable","name":"slot","nameLocation":"2467:4:33","nodeType":"VariableDeclaration","scope":2179,"src":"2459:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2170,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2459:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2458:14:33"},"returnParameters":{"id":2176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2175,"mutability":"mutable","name":"r","nameLocation":"2516:1:33","nodeType":"VariableDeclaration","scope":2179,"src":"2496:21:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2137_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":2174,"nodeType":"UserDefinedTypeName","pathNode":{"id":2173,"name":"Bytes32Slot","nameLocations":["2496:11:33"],"nodeType":"IdentifierPath","referencedDeclaration":2137,"src":"2496:11:33"},"referencedDeclaration":2137,"src":"2496:11:33","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2137_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2495:23:33"},"scope":2235,"src":"2435:190:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2189,"nodeType":"Block","src":"2807:106:33","statements":[{"AST":{"nativeSrc":"2869:38:33","nodeType":"YulBlock","src":"2869:38:33","statements":[{"nativeSrc":"2883:14:33","nodeType":"YulAssignment","src":"2883:14:33","value":{"name":"slot","nativeSrc":"2893:4:33","nodeType":"YulIdentifier","src":"2893:4:33"},"variableNames":[{"name":"r.slot","nativeSrc":"2883:6:33","nodeType":"YulIdentifier","src":"2883:6:33"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2186,"isOffset":false,"isSlot":true,"src":"2883:6:33","suffix":"slot","valueSize":1},{"declaration":2182,"isOffset":false,"isSlot":false,"src":"2893:4:33","valueSize":1}],"id":2188,"nodeType":"InlineAssembly","src":"2860:47:33"}]},"documentation":{"id":2180,"nodeType":"StructuredDocumentation","src":"2631:87:33","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":2190,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2732:14:33","nodeType":"FunctionDefinition","parameters":{"id":2183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2182,"mutability":"mutable","name":"slot","nameLocation":"2755:4:33","nodeType":"VariableDeclaration","scope":2190,"src":"2747:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2181,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2747:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2746:14:33"},"returnParameters":{"id":2187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2186,"mutability":"mutable","name":"r","nameLocation":"2804:1:33","nodeType":"VariableDeclaration","scope":2190,"src":"2784:21:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2140_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":2185,"nodeType":"UserDefinedTypeName","pathNode":{"id":2184,"name":"Uint256Slot","nameLocations":["2784:11:33"],"nodeType":"IdentifierPath","referencedDeclaration":2140,"src":"2784:11:33"},"referencedDeclaration":2140,"src":"2784:11:33","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2140_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2783:23:33"},"scope":2235,"src":"2723:190:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2200,"nodeType":"Block","src":"3092:106:33","statements":[{"AST":{"nativeSrc":"3154:38:33","nodeType":"YulBlock","src":"3154:38:33","statements":[{"nativeSrc":"3168:14:33","nodeType":"YulAssignment","src":"3168:14:33","value":{"name":"slot","nativeSrc":"3178:4:33","nodeType":"YulIdentifier","src":"3178:4:33"},"variableNames":[{"name":"r.slot","nativeSrc":"3168:6:33","nodeType":"YulIdentifier","src":"3168:6:33"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2197,"isOffset":false,"isSlot":true,"src":"3168:6:33","suffix":"slot","valueSize":1},{"declaration":2193,"isOffset":false,"isSlot":false,"src":"3178:4:33","valueSize":1}],"id":2199,"nodeType":"InlineAssembly","src":"3145:47:33"}]},"documentation":{"id":2191,"nodeType":"StructuredDocumentation","src":"2919:86:33","text":" @dev Returns an `StringSlot` with member `value` located at `slot`."},"id":2201,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3019:13:33","nodeType":"FunctionDefinition","parameters":{"id":2194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2193,"mutability":"mutable","name":"slot","nameLocation":"3041:4:33","nodeType":"VariableDeclaration","scope":2201,"src":"3033:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2192,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3033:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3032:14:33"},"returnParameters":{"id":2198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2197,"mutability":"mutable","name":"r","nameLocation":"3089:1:33","nodeType":"VariableDeclaration","scope":2201,"src":"3070:20:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2143_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":2196,"nodeType":"UserDefinedTypeName","pathNode":{"id":2195,"name":"StringSlot","nameLocations":["3070:10:33"],"nodeType":"IdentifierPath","referencedDeclaration":2143,"src":"3070:10:33"},"referencedDeclaration":2143,"src":"3070:10:33","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2143_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3069:22:33"},"scope":2235,"src":"3010:188:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2211,"nodeType":"Block","src":"3400:112:33","statements":[{"AST":{"nativeSrc":"3462:44:33","nodeType":"YulBlock","src":"3462:44:33","statements":[{"nativeSrc":"3476:20:33","nodeType":"YulAssignment","src":"3476:20:33","value":{"name":"store.slot","nativeSrc":"3486:10:33","nodeType":"YulIdentifier","src":"3486:10:33"},"variableNames":[{"name":"r.slot","nativeSrc":"3476:6:33","nodeType":"YulIdentifier","src":"3476:6:33"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2208,"isOffset":false,"isSlot":true,"src":"3476:6:33","suffix":"slot","valueSize":1},{"declaration":2204,"isOffset":false,"isSlot":true,"src":"3486:10:33","suffix":"slot","valueSize":1}],"id":2210,"nodeType":"InlineAssembly","src":"3453:53:33"}]},"documentation":{"id":2202,"nodeType":"StructuredDocumentation","src":"3204:101:33","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":2212,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3319:13:33","nodeType":"FunctionDefinition","parameters":{"id":2205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2204,"mutability":"mutable","name":"store","nameLocation":"3348:5:33","nodeType":"VariableDeclaration","scope":2212,"src":"3333:20:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2203,"name":"string","nodeType":"ElementaryTypeName","src":"3333:6:33","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3332:22:33"},"returnParameters":{"id":2209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2208,"mutability":"mutable","name":"r","nameLocation":"3397:1:33","nodeType":"VariableDeclaration","scope":2212,"src":"3378:20:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2143_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":2207,"nodeType":"UserDefinedTypeName","pathNode":{"id":2206,"name":"StringSlot","nameLocations":["3378:10:33"],"nodeType":"IdentifierPath","referencedDeclaration":2143,"src":"3378:10:33"},"referencedDeclaration":2143,"src":"3378:10:33","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2143_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3377:22:33"},"scope":2235,"src":"3310:202:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2222,"nodeType":"Block","src":"3688:106:33","statements":[{"AST":{"nativeSrc":"3750:38:33","nodeType":"YulBlock","src":"3750:38:33","statements":[{"nativeSrc":"3764:14:33","nodeType":"YulAssignment","src":"3764:14:33","value":{"name":"slot","nativeSrc":"3774:4:33","nodeType":"YulIdentifier","src":"3774:4:33"},"variableNames":[{"name":"r.slot","nativeSrc":"3764:6:33","nodeType":"YulIdentifier","src":"3764:6:33"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2219,"isOffset":false,"isSlot":true,"src":"3764:6:33","suffix":"slot","valueSize":1},{"declaration":2215,"isOffset":false,"isSlot":false,"src":"3774:4:33","valueSize":1}],"id":2221,"nodeType":"InlineAssembly","src":"3741:47:33"}]},"documentation":{"id":2213,"nodeType":"StructuredDocumentation","src":"3518:85:33","text":" @dev Returns an `BytesSlot` with member `value` located at `slot`."},"id":2223,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3617:12:33","nodeType":"FunctionDefinition","parameters":{"id":2216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2215,"mutability":"mutable","name":"slot","nameLocation":"3638:4:33","nodeType":"VariableDeclaration","scope":2223,"src":"3630:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2214,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3630:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3629:14:33"},"returnParameters":{"id":2220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2219,"mutability":"mutable","name":"r","nameLocation":"3685:1:33","nodeType":"VariableDeclaration","scope":2223,"src":"3667:19:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2146_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":2218,"nodeType":"UserDefinedTypeName","pathNode":{"id":2217,"name":"BytesSlot","nameLocations":["3667:9:33"],"nodeType":"IdentifierPath","referencedDeclaration":2146,"src":"3667:9:33"},"referencedDeclaration":2146,"src":"3667:9:33","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2146_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3666:21:33"},"scope":2235,"src":"3608:186:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2233,"nodeType":"Block","src":"3991:112:33","statements":[{"AST":{"nativeSrc":"4053:44:33","nodeType":"YulBlock","src":"4053:44:33","statements":[{"nativeSrc":"4067:20:33","nodeType":"YulAssignment","src":"4067:20:33","value":{"name":"store.slot","nativeSrc":"4077:10:33","nodeType":"YulIdentifier","src":"4077:10:33"},"variableNames":[{"name":"r.slot","nativeSrc":"4067:6:33","nodeType":"YulIdentifier","src":"4067:6:33"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2230,"isOffset":false,"isSlot":true,"src":"4067:6:33","suffix":"slot","valueSize":1},{"declaration":2226,"isOffset":false,"isSlot":true,"src":"4077:10:33","suffix":"slot","valueSize":1}],"id":2232,"nodeType":"InlineAssembly","src":"4044:53:33"}]},"documentation":{"id":2224,"nodeType":"StructuredDocumentation","src":"3800:99:33","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":2234,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3913:12:33","nodeType":"FunctionDefinition","parameters":{"id":2227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2226,"mutability":"mutable","name":"store","nameLocation":"3940:5:33","nodeType":"VariableDeclaration","scope":2234,"src":"3926:19:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2225,"name":"bytes","nodeType":"ElementaryTypeName","src":"3926:5:33","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3925:21:33"},"returnParameters":{"id":2231,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2230,"mutability":"mutable","name":"r","nameLocation":"3988:1:33","nodeType":"VariableDeclaration","scope":2234,"src":"3970:19:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2146_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":2229,"nodeType":"UserDefinedTypeName","pathNode":{"id":2228,"name":"BytesSlot","nameLocations":["3970:9:33"],"nodeType":"IdentifierPath","referencedDeclaration":2146,"src":"3970:9:33"},"referencedDeclaration":2146,"src":"3970:9:33","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2146_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3969:21:33"},"scope":2235,"src":"3904:199:33","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2236,"src":"1420:2685:33","usedErrors":[],"usedEvents":[]}],"src":"193:3913:33"},"id":33},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","exportedSymbols":{"MerkleProof":[2763]},"id":2764,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2237,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"118:23:34"},{"abstract":false,"baseContracts":[],"canonicalName":"MerkleProof","contractDependencies":[],"contractKind":"library","documentation":{"id":2238,"nodeType":"StructuredDocumentation","src":"143:658:34","text":" @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates merkle trees that are safe\n against this attack out of the box."},"fullyImplemented":true,"id":2763,"linearizedBaseContracts":[2763],"name":"MerkleProof","nameLocation":"810:11:34","nodeType":"ContractDefinition","nodes":[{"body":{"id":2258,"nodeType":"Block","src":"1253:57:34","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2252,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2242,"src":"1283:5:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":2253,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2246,"src":"1290:4:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2251,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2320,"src":"1270:12:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32) pure returns (bytes32)"}},"id":2254,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1270:25:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2255,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2244,"src":"1299:4:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1270:33:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2250,"id":2257,"nodeType":"Return","src":"1263:40:34"}]},"documentation":{"id":2239,"nodeType":"StructuredDocumentation","src":"828:323:34","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted."},"id":2259,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"1165:6:34","nodeType":"FunctionDefinition","parameters":{"id":2247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2242,"mutability":"mutable","name":"proof","nameLocation":"1189:5:34","nodeType":"VariableDeclaration","scope":2259,"src":"1172:22:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2240,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1172:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2241,"nodeType":"ArrayTypeName","src":"1172:9:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2244,"mutability":"mutable","name":"root","nameLocation":"1204:4:34","nodeType":"VariableDeclaration","scope":2259,"src":"1196:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2243,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1196:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2246,"mutability":"mutable","name":"leaf","nameLocation":"1218:4:34","nodeType":"VariableDeclaration","scope":2259,"src":"1210:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2245,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1210:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1171:52:34"},"returnParameters":{"id":2250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2249,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2259,"src":"1247:4:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2248,"name":"bool","nodeType":"ElementaryTypeName","src":"1247:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1246:6:34"},"scope":2763,"src":"1156:154:34","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2279,"nodeType":"Block","src":"1518:65:34","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2273,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"1556:5:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":2274,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"1563:4:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2272,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2360,"src":"1535:20:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32) pure returns (bytes32)"}},"id":2275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1535:33:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2276,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2265,"src":"1572:4:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1535:41:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2271,"id":2278,"nodeType":"Return","src":"1528:48:34"}]},"documentation":{"id":2260,"nodeType":"StructuredDocumentation","src":"1316:90:34","text":" @dev Calldata version of {verify}\n _Available since v4.7._"},"id":2280,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"1420:14:34","nodeType":"FunctionDefinition","parameters":{"id":2268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2263,"mutability":"mutable","name":"proof","nameLocation":"1454:5:34","nodeType":"VariableDeclaration","scope":2280,"src":"1435:24:34","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2261,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1435:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2262,"nodeType":"ArrayTypeName","src":"1435:9:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2265,"mutability":"mutable","name":"root","nameLocation":"1469:4:34","nodeType":"VariableDeclaration","scope":2280,"src":"1461:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2264,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1461:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2267,"mutability":"mutable","name":"leaf","nameLocation":"1483:4:34","nodeType":"VariableDeclaration","scope":2280,"src":"1475:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2266,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1475:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1434:54:34"},"returnParameters":{"id":2271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2270,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2280,"src":"1512:4:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2269,"name":"bool","nodeType":"ElementaryTypeName","src":"1512:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1511:6:34"},"scope":2763,"src":"1411:172:34","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2319,"nodeType":"Block","src":"2026:198:34","statements":[{"assignments":[2292],"declarations":[{"constant":false,"id":2292,"mutability":"mutable","name":"computedHash","nameLocation":"2044:12:34","nodeType":"VariableDeclaration","scope":2319,"src":"2036:20:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2291,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2036:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2294,"initialValue":{"id":2293,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2286,"src":"2059:4:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2036:27:34"},{"body":{"id":2315,"nodeType":"Block","src":"2116:73:34","statements":[{"expression":{"id":2313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2306,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2292,"src":"2130:12:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2308,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2292,"src":"2155:12:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":2309,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2284,"src":"2169:5:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2311,"indexExpression":{"id":2310,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2296,"src":"2175:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2169:8:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2307,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2751,"src":"2145:9:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2145:33:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2130:48:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2314,"nodeType":"ExpressionStatement","src":"2130:48:34"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2299,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2296,"src":"2093:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2300,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2284,"src":"2097:5:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2103:6:34","memberName":"length","nodeType":"MemberAccess","src":"2097:12:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2093:16:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2316,"initializationExpression":{"assignments":[2296],"declarations":[{"constant":false,"id":2296,"mutability":"mutable","name":"i","nameLocation":"2086:1:34","nodeType":"VariableDeclaration","scope":2316,"src":"2078:9:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2295,"name":"uint256","nodeType":"ElementaryTypeName","src":"2078:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2298,"initialValue":{"hexValue":"30","id":2297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2090:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2078:13:34"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2111:3:34","subExpression":{"id":2303,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2296,"src":"2111:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2305,"nodeType":"ExpressionStatement","src":"2111:3:34"},"nodeType":"ForStatement","src":"2073:116:34"},{"expression":{"id":2317,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2292,"src":"2205:12:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2290,"id":2318,"nodeType":"Return","src":"2198:19:34"}]},"documentation":{"id":2281,"nodeType":"StructuredDocumentation","src":"1589:340:34","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leafs & pre-images are assumed to be sorted.\n _Available since v4.4._"},"id":2320,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"1943:12:34","nodeType":"FunctionDefinition","parameters":{"id":2287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2284,"mutability":"mutable","name":"proof","nameLocation":"1973:5:34","nodeType":"VariableDeclaration","scope":2320,"src":"1956:22:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2282,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1956:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2283,"nodeType":"ArrayTypeName","src":"1956:9:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2286,"mutability":"mutable","name":"leaf","nameLocation":"1988:4:34","nodeType":"VariableDeclaration","scope":2320,"src":"1980:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2285,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1980:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1955:38:34"},"returnParameters":{"id":2290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2289,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2320,"src":"2017:7:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2288,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2017:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2016:9:34"},"scope":2763,"src":"1934:290:34","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2359,"nodeType":"Block","src":"2433:198:34","statements":[{"assignments":[2332],"declarations":[{"constant":false,"id":2332,"mutability":"mutable","name":"computedHash","nameLocation":"2451:12:34","nodeType":"VariableDeclaration","scope":2359,"src":"2443:20:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2331,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2443:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2334,"initialValue":{"id":2333,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2326,"src":"2466:4:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2443:27:34"},{"body":{"id":2355,"nodeType":"Block","src":"2523:73:34","statements":[{"expression":{"id":2353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2346,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"2537:12:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2348,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"2562:12:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":2349,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"2576:5:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2351,"indexExpression":{"id":2350,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2336,"src":"2582:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2576:8:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2347,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2751,"src":"2552:9:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2552:33:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2537:48:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2354,"nodeType":"ExpressionStatement","src":"2537:48:34"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2339,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2336,"src":"2500:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2340,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"2504:5:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2510:6:34","memberName":"length","nodeType":"MemberAccess","src":"2504:12:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2500:16:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2356,"initializationExpression":{"assignments":[2336],"declarations":[{"constant":false,"id":2336,"mutability":"mutable","name":"i","nameLocation":"2493:1:34","nodeType":"VariableDeclaration","scope":2356,"src":"2485:9:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2335,"name":"uint256","nodeType":"ElementaryTypeName","src":"2485:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2338,"initialValue":{"hexValue":"30","id":2337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2497:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2485:13:34"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2518:3:34","subExpression":{"id":2343,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2336,"src":"2518:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2345,"nodeType":"ExpressionStatement","src":"2518:3:34"},"nodeType":"ForStatement","src":"2480:116:34"},{"expression":{"id":2357,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"2612:12:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2330,"id":2358,"nodeType":"Return","src":"2605:19:34"}]},"documentation":{"id":2321,"nodeType":"StructuredDocumentation","src":"2230:96:34","text":" @dev Calldata version of {processProof}\n _Available since v4.7._"},"id":2360,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"2340:20:34","nodeType":"FunctionDefinition","parameters":{"id":2327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2324,"mutability":"mutable","name":"proof","nameLocation":"2380:5:34","nodeType":"VariableDeclaration","scope":2360,"src":"2361:24:34","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2322,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2361:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2323,"nodeType":"ArrayTypeName","src":"2361:9:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2326,"mutability":"mutable","name":"leaf","nameLocation":"2395:4:34","nodeType":"VariableDeclaration","scope":2360,"src":"2387:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2325,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2387:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2360:40:34"},"returnParameters":{"id":2330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2329,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2360,"src":"2424:7:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2328,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2424:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2423:9:34"},"scope":2763,"src":"2331:300:34","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2385,"nodeType":"Block","src":"3174:76:34","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2378,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2364,"src":"3209:5:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":2379,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2367,"src":"3216:10:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":2380,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2372,"src":"3228:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":2377,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2570,"src":"3191:17:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"}},"id":2381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3191:44:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2382,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2369,"src":"3239:4:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3191:52:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2376,"id":2384,"nodeType":"Return","src":"3184:59:34"}]},"documentation":{"id":2361,"nodeType":"StructuredDocumentation","src":"2637:350:34","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":2386,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"3001:16:34","nodeType":"FunctionDefinition","parameters":{"id":2373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2364,"mutability":"mutable","name":"proof","nameLocation":"3044:5:34","nodeType":"VariableDeclaration","scope":2386,"src":"3027:22:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2362,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3027:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2363,"nodeType":"ArrayTypeName","src":"3027:9:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2367,"mutability":"mutable","name":"proofFlags","nameLocation":"3073:10:34","nodeType":"VariableDeclaration","scope":2386,"src":"3059:24:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":2365,"name":"bool","nodeType":"ElementaryTypeName","src":"3059:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2366,"nodeType":"ArrayTypeName","src":"3059:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":2369,"mutability":"mutable","name":"root","nameLocation":"3101:4:34","nodeType":"VariableDeclaration","scope":2386,"src":"3093:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2368,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3093:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2372,"mutability":"mutable","name":"leaves","nameLocation":"3132:6:34","nodeType":"VariableDeclaration","scope":2386,"src":"3115:23:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2370,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3115:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2371,"nodeType":"ArrayTypeName","src":"3115:9:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3017:127:34"},"returnParameters":{"id":2376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2375,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2386,"src":"3168:4:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2374,"name":"bool","nodeType":"ElementaryTypeName","src":"3168:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3167:6:34"},"scope":2763,"src":"2992:258:34","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2411,"nodeType":"Block","src":"3655:84:34","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2404,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2390,"src":"3698:5:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":2405,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2393,"src":"3705:10:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":2406,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2398,"src":"3717:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":2403,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"3672:25:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"}},"id":2407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3672:52:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2408,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"3728:4:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3672:60:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2402,"id":2410,"nodeType":"Return","src":"3665:67:34"}]},"documentation":{"id":2387,"nodeType":"StructuredDocumentation","src":"3256:200:34","text":" @dev Calldata version of {multiProofVerify}\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":2412,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"3470:24:34","nodeType":"FunctionDefinition","parameters":{"id":2399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2390,"mutability":"mutable","name":"proof","nameLocation":"3523:5:34","nodeType":"VariableDeclaration","scope":2412,"src":"3504:24:34","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2388,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3504:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2389,"nodeType":"ArrayTypeName","src":"3504:9:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2393,"mutability":"mutable","name":"proofFlags","nameLocation":"3554:10:34","nodeType":"VariableDeclaration","scope":2412,"src":"3538:26:34","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":2391,"name":"bool","nodeType":"ElementaryTypeName","src":"3538:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2392,"nodeType":"ArrayTypeName","src":"3538:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":2395,"mutability":"mutable","name":"root","nameLocation":"3582:4:34","nodeType":"VariableDeclaration","scope":2412,"src":"3574:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2394,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3574:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2398,"mutability":"mutable","name":"leaves","nameLocation":"3613:6:34","nodeType":"VariableDeclaration","scope":2412,"src":"3596:23:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2396,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3596:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2397,"nodeType":"ArrayTypeName","src":"3596:9:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3494:131:34"},"returnParameters":{"id":2402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2401,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2412,"src":"3649:4:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2400,"name":"bool","nodeType":"ElementaryTypeName","src":"3649:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3648:6:34"},"scope":2763,"src":"3461:278:34","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2569,"nodeType":"Block","src":"4693:2053:34","statements":[{"assignments":[2428],"declarations":[{"constant":false,"id":2428,"mutability":"mutable","name":"leavesLen","nameLocation":"5085:9:34","nodeType":"VariableDeclaration","scope":2569,"src":"5077:17:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2427,"name":"uint256","nodeType":"ElementaryTypeName","src":"5077:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2431,"initialValue":{"expression":{"id":2429,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2422,"src":"5097:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5104:6:34","memberName":"length","nodeType":"MemberAccess","src":"5097:13:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5077:33:34"},{"assignments":[2433],"declarations":[{"constant":false,"id":2433,"mutability":"mutable","name":"proofLen","nameLocation":"5128:8:34","nodeType":"VariableDeclaration","scope":2569,"src":"5120:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2432,"name":"uint256","nodeType":"ElementaryTypeName","src":"5120:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2436,"initialValue":{"expression":{"id":2434,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2416,"src":"5139:5:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5145:6:34","memberName":"length","nodeType":"MemberAccess","src":"5139:12:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5120:31:34"},{"assignments":[2438],"declarations":[{"constant":false,"id":2438,"mutability":"mutable","name":"totalHashes","nameLocation":"5169:11:34","nodeType":"VariableDeclaration","scope":2569,"src":"5161:19:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2437,"name":"uint256","nodeType":"ElementaryTypeName","src":"5161:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2441,"initialValue":{"expression":{"id":2439,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"5183:10:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":2440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5194:6:34","memberName":"length","nodeType":"MemberAccess","src":"5183:17:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5161:39:34"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2443,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"5252:9:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2444,"name":"proofLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2433,"src":"5264:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5252:20:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5275:1:34","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5252:24:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2448,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2438,"src":"5280:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5252:39:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":2450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5293:33:34","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":2442,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5244:7:34","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5244:83:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2452,"nodeType":"ExpressionStatement","src":"5244:83:34"},{"assignments":[2457],"declarations":[{"constant":false,"id":2457,"mutability":"mutable","name":"hashes","nameLocation":"5589:6:34","nodeType":"VariableDeclaration","scope":2569,"src":"5572:23:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2455,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5572:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2456,"nodeType":"ArrayTypeName","src":"5572:9:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":2463,"initialValue":{"arguments":[{"id":2461,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2438,"src":"5612:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2460,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5598:13:34","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":2458,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5602:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2459,"nodeType":"ArrayTypeName","src":"5602:9:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":2462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5598:26:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5572:52:34"},{"assignments":[2465],"declarations":[{"constant":false,"id":2465,"mutability":"mutable","name":"leafPos","nameLocation":"5642:7:34","nodeType":"VariableDeclaration","scope":2569,"src":"5634:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2464,"name":"uint256","nodeType":"ElementaryTypeName","src":"5634:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2467,"initialValue":{"hexValue":"30","id":2466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5652:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5634:19:34"},{"assignments":[2469],"declarations":[{"constant":false,"id":2469,"mutability":"mutable","name":"hashPos","nameLocation":"5671:7:34","nodeType":"VariableDeclaration","scope":2569,"src":"5663:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2468,"name":"uint256","nodeType":"ElementaryTypeName","src":"5663:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2471,"initialValue":{"hexValue":"30","id":2470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5681:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5663:19:34"},{"assignments":[2473],"declarations":[{"constant":false,"id":2473,"mutability":"mutable","name":"proofPos","nameLocation":"5700:8:34","nodeType":"VariableDeclaration","scope":2569,"src":"5692:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2472,"name":"uint256","nodeType":"ElementaryTypeName","src":"5692:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2475,"initialValue":{"hexValue":"30","id":2474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5711:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5692:20:34"},{"body":{"id":2534,"nodeType":"Block","src":"6130:292:34","statements":[{"assignments":[2487],"declarations":[{"constant":false,"id":2487,"mutability":"mutable","name":"a","nameLocation":"6152:1:34","nodeType":"VariableDeclaration","scope":2534,"src":"6144:9:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2486,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6144:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2500,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2488,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2465,"src":"6156:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2489,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"6166:9:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6156:19:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2495,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"6198:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2498,"indexExpression":{"id":2497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6205:9:34","subExpression":{"id":2496,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2469,"src":"6205:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6198:17:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6156:59:34","trueExpression":{"baseExpression":{"id":2491,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2422,"src":"6178:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2494,"indexExpression":{"id":2493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6185:9:34","subExpression":{"id":2492,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2465,"src":"6185:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6178:17:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6144:71:34"},{"assignments":[2502],"declarations":[{"constant":false,"id":2502,"mutability":"mutable","name":"b","nameLocation":"6237:1:34","nodeType":"VariableDeclaration","scope":2534,"src":"6229:9:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2501,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6229:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2524,"initialValue":{"condition":{"baseExpression":{"id":2503,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"6241:10:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":2505,"indexExpression":{"id":2504,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2477,"src":"6252:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6241:13:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2519,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2416,"src":"6353:5:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2522,"indexExpression":{"id":2521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6359:10:34","subExpression":{"id":2520,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"6359:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6353:17:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6241:129:34","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2506,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2465,"src":"6274:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2507,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"6284:9:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6274:19:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2513,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"6316:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2516,"indexExpression":{"id":2515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6323:9:34","subExpression":{"id":2514,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2469,"src":"6323:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6316:17:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6274:59:34","trueExpression":{"baseExpression":{"id":2509,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2422,"src":"6296:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2512,"indexExpression":{"id":2511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6303:9:34","subExpression":{"id":2510,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2465,"src":"6303:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6296:17:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":2518,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6273:61:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6229:141:34"},{"expression":{"id":2532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2525,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"6384:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2527,"indexExpression":{"id":2526,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2477,"src":"6391:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6384:9:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2529,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2487,"src":"6406:1:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2530,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2502,"src":"6409:1:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2528,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2751,"src":"6396:9:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6396:15:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6384:27:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2533,"nodeType":"ExpressionStatement","src":"6384:27:34"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2480,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2477,"src":"6108:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2481,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2438,"src":"6112:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6108:15:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2535,"initializationExpression":{"assignments":[2477],"declarations":[{"constant":false,"id":2477,"mutability":"mutable","name":"i","nameLocation":"6101:1:34","nodeType":"VariableDeclaration","scope":2535,"src":"6093:9:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2476,"name":"uint256","nodeType":"ElementaryTypeName","src":"6093:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2479,"initialValue":{"hexValue":"30","id":2478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6105:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6093:13:34"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6125:3:34","subExpression":{"id":2483,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2477,"src":"6125:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2485,"nodeType":"ExpressionStatement","src":"6125:3:34"},"nodeType":"ForStatement","src":"6088:334:34"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2536,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2438,"src":"6436:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6450:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6436:15:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2554,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"6638:9:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6650:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6638:13:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2566,"nodeType":"Block","src":"6700:40:34","statements":[{"expression":{"baseExpression":{"id":2562,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2416,"src":"6721:5:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2564,"indexExpression":{"hexValue":"30","id":2563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6727:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6721:8:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2426,"id":2565,"nodeType":"Return","src":"6714:15:34"}]},"id":2567,"nodeType":"IfStatement","src":"6634:106:34","trueBody":{"id":2561,"nodeType":"Block","src":"6653:41:34","statements":[{"expression":{"baseExpression":{"id":2557,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2422,"src":"6674:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2559,"indexExpression":{"hexValue":"30","id":2558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6681:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6674:9:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2426,"id":2560,"nodeType":"Return","src":"6667:16:34"}]}},"id":2568,"nodeType":"IfStatement","src":"6432:308:34","trueBody":{"id":2553,"nodeType":"Block","src":"6453:175:34","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2540,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2473,"src":"6475:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2541,"name":"proofLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2433,"src":"6487:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6475:20:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":2543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6497:33:34","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":2539,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6467:7:34","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6467:64:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2545,"nodeType":"ExpressionStatement","src":"6467:64:34"},{"id":2552,"nodeType":"UncheckedBlock","src":"6545:73:34","statements":[{"expression":{"baseExpression":{"id":2546,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"6580:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2550,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2547,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2438,"src":"6587:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6601:1:34","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6587:15:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6580:23:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2426,"id":2551,"nodeType":"Return","src":"6573:30:34"}]}]}}]},"documentation":{"id":2413,"nodeType":"StructuredDocumentation","src":"3745:768:34","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n _Available since v4.7._"},"id":2570,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"4527:17:34","nodeType":"FunctionDefinition","parameters":{"id":2423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2416,"mutability":"mutable","name":"proof","nameLocation":"4571:5:34","nodeType":"VariableDeclaration","scope":2570,"src":"4554:22:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2414,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4554:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2415,"nodeType":"ArrayTypeName","src":"4554:9:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2419,"mutability":"mutable","name":"proofFlags","nameLocation":"4600:10:34","nodeType":"VariableDeclaration","scope":2570,"src":"4586:24:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":2417,"name":"bool","nodeType":"ElementaryTypeName","src":"4586:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2418,"nodeType":"ArrayTypeName","src":"4586:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":2422,"mutability":"mutable","name":"leaves","nameLocation":"4637:6:34","nodeType":"VariableDeclaration","scope":2570,"src":"4620:23:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2420,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4620:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2421,"nodeType":"ArrayTypeName","src":"4620:9:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"4544:105:34"},"returnParameters":{"id":2426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2425,"mutability":"mutable","name":"merkleRoot","nameLocation":"4681:10:34","nodeType":"VariableDeclaration","scope":2570,"src":"4673:18:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2424,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4673:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4672:20:34"},"scope":2763,"src":"4518:2228:34","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2727,"nodeType":"Block","src":"7146:2053:34","statements":[{"assignments":[2586],"declarations":[{"constant":false,"id":2586,"mutability":"mutable","name":"leavesLen","nameLocation":"7538:9:34","nodeType":"VariableDeclaration","scope":2727,"src":"7530:17:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2585,"name":"uint256","nodeType":"ElementaryTypeName","src":"7530:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2589,"initialValue":{"expression":{"id":2587,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2580,"src":"7550:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7557:6:34","memberName":"length","nodeType":"MemberAccess","src":"7550:13:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7530:33:34"},{"assignments":[2591],"declarations":[{"constant":false,"id":2591,"mutability":"mutable","name":"proofLen","nameLocation":"7581:8:34","nodeType":"VariableDeclaration","scope":2727,"src":"7573:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2590,"name":"uint256","nodeType":"ElementaryTypeName","src":"7573:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2594,"initialValue":{"expression":{"id":2592,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2574,"src":"7592:5:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7598:6:34","memberName":"length","nodeType":"MemberAccess","src":"7592:12:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7573:31:34"},{"assignments":[2596],"declarations":[{"constant":false,"id":2596,"mutability":"mutable","name":"totalHashes","nameLocation":"7622:11:34","nodeType":"VariableDeclaration","scope":2727,"src":"7614:19:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2595,"name":"uint256","nodeType":"ElementaryTypeName","src":"7614:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2599,"initialValue":{"expression":{"id":2597,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2577,"src":"7636:10:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":2598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7647:6:34","memberName":"length","nodeType":"MemberAccess","src":"7636:17:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7614:39:34"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2601,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2586,"src":"7705:9:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2602,"name":"proofLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2591,"src":"7717:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7705:20:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7728:1:34","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7705:24:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2606,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2596,"src":"7733:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7705:39:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":2608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7746:33:34","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":2600,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7697:7:34","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2609,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7697:83:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2610,"nodeType":"ExpressionStatement","src":"7697:83:34"},{"assignments":[2615],"declarations":[{"constant":false,"id":2615,"mutability":"mutable","name":"hashes","nameLocation":"8042:6:34","nodeType":"VariableDeclaration","scope":2727,"src":"8025:23:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2613,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8025:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2614,"nodeType":"ArrayTypeName","src":"8025:9:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":2621,"initialValue":{"arguments":[{"id":2619,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2596,"src":"8065:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2618,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"8051:13:34","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":2616,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8055:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2617,"nodeType":"ArrayTypeName","src":"8055:9:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":2620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8051:26:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"8025:52:34"},{"assignments":[2623],"declarations":[{"constant":false,"id":2623,"mutability":"mutable","name":"leafPos","nameLocation":"8095:7:34","nodeType":"VariableDeclaration","scope":2727,"src":"8087:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2622,"name":"uint256","nodeType":"ElementaryTypeName","src":"8087:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2625,"initialValue":{"hexValue":"30","id":2624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8105:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8087:19:34"},{"assignments":[2627],"declarations":[{"constant":false,"id":2627,"mutability":"mutable","name":"hashPos","nameLocation":"8124:7:34","nodeType":"VariableDeclaration","scope":2727,"src":"8116:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2626,"name":"uint256","nodeType":"ElementaryTypeName","src":"8116:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2629,"initialValue":{"hexValue":"30","id":2628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8134:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8116:19:34"},{"assignments":[2631],"declarations":[{"constant":false,"id":2631,"mutability":"mutable","name":"proofPos","nameLocation":"8153:8:34","nodeType":"VariableDeclaration","scope":2727,"src":"8145:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2630,"name":"uint256","nodeType":"ElementaryTypeName","src":"8145:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2633,"initialValue":{"hexValue":"30","id":2632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8164:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8145:20:34"},{"body":{"id":2692,"nodeType":"Block","src":"8583:292:34","statements":[{"assignments":[2645],"declarations":[{"constant":false,"id":2645,"mutability":"mutable","name":"a","nameLocation":"8605:1:34","nodeType":"VariableDeclaration","scope":2692,"src":"8597:9:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2644,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8597:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2658,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2646,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2623,"src":"8609:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2647,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2586,"src":"8619:9:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8609:19:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2653,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2615,"src":"8651:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2656,"indexExpression":{"id":2655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8658:9:34","subExpression":{"id":2654,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2627,"src":"8658:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8651:17:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8609:59:34","trueExpression":{"baseExpression":{"id":2649,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2580,"src":"8631:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2652,"indexExpression":{"id":2651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8638:9:34","subExpression":{"id":2650,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2623,"src":"8638:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8631:17:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8597:71:34"},{"assignments":[2660],"declarations":[{"constant":false,"id":2660,"mutability":"mutable","name":"b","nameLocation":"8690:1:34","nodeType":"VariableDeclaration","scope":2692,"src":"8682:9:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2659,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8682:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2682,"initialValue":{"condition":{"baseExpression":{"id":2661,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2577,"src":"8694:10:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":2663,"indexExpression":{"id":2662,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2635,"src":"8705:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8694:13:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2677,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2574,"src":"8806:5:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2680,"indexExpression":{"id":2679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8812:10:34","subExpression":{"id":2678,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2631,"src":"8812:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8806:17:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8694:129:34","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2664,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2623,"src":"8727:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2665,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2586,"src":"8737:9:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8727:19:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2671,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2615,"src":"8769:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2674,"indexExpression":{"id":2673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8776:9:34","subExpression":{"id":2672,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2627,"src":"8776:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8769:17:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8727:59:34","trueExpression":{"baseExpression":{"id":2667,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2580,"src":"8749:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2670,"indexExpression":{"id":2669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8756:9:34","subExpression":{"id":2668,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2623,"src":"8756:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8749:17:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":2676,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8726:61:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8682:141:34"},{"expression":{"id":2690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2683,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2615,"src":"8837:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2685,"indexExpression":{"id":2684,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2635,"src":"8844:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8837:9:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2687,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2645,"src":"8859:1:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2688,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2660,"src":"8862:1:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2686,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2751,"src":"8849:9:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8849:15:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8837:27:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2691,"nodeType":"ExpressionStatement","src":"8837:27:34"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2638,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2635,"src":"8561:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2639,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2596,"src":"8565:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8561:15:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2693,"initializationExpression":{"assignments":[2635],"declarations":[{"constant":false,"id":2635,"mutability":"mutable","name":"i","nameLocation":"8554:1:34","nodeType":"VariableDeclaration","scope":2693,"src":"8546:9:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2634,"name":"uint256","nodeType":"ElementaryTypeName","src":"8546:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2637,"initialValue":{"hexValue":"30","id":2636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8558:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8546:13:34"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8578:3:34","subExpression":{"id":2641,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2635,"src":"8578:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2643,"nodeType":"ExpressionStatement","src":"8578:3:34"},"nodeType":"ForStatement","src":"8541:334:34"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2694,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2596,"src":"8889:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8903:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8889:15:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2712,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2586,"src":"9091:9:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9103:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9091:13:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2724,"nodeType":"Block","src":"9153:40:34","statements":[{"expression":{"baseExpression":{"id":2720,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2574,"src":"9174:5:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2722,"indexExpression":{"hexValue":"30","id":2721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9180:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9174:8:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2584,"id":2723,"nodeType":"Return","src":"9167:15:34"}]},"id":2725,"nodeType":"IfStatement","src":"9087:106:34","trueBody":{"id":2719,"nodeType":"Block","src":"9106:41:34","statements":[{"expression":{"baseExpression":{"id":2715,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2580,"src":"9127:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2717,"indexExpression":{"hexValue":"30","id":2716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9134:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9127:9:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2584,"id":2718,"nodeType":"Return","src":"9120:16:34"}]}},"id":2726,"nodeType":"IfStatement","src":"8885:308:34","trueBody":{"id":2711,"nodeType":"Block","src":"8906:175:34","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2698,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2631,"src":"8928:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2699,"name":"proofLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2591,"src":"8940:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8928:20:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":2701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8950:33:34","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":2697,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8920:7:34","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8920:64:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2703,"nodeType":"ExpressionStatement","src":"8920:64:34"},{"id":2710,"nodeType":"UncheckedBlock","src":"8998:73:34","statements":[{"expression":{"baseExpression":{"id":2704,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2615,"src":"9033:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2708,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2705,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2596,"src":"9040:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9054:1:34","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9040:15:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9033:23:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2584,"id":2709,"nodeType":"Return","src":"9026:30:34"}]}]}}]},"documentation":{"id":2571,"nodeType":"StructuredDocumentation","src":"6752:202:34","text":" @dev Calldata version of {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":2728,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"6968:25:34","nodeType":"FunctionDefinition","parameters":{"id":2581,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2574,"mutability":"mutable","name":"proof","nameLocation":"7022:5:34","nodeType":"VariableDeclaration","scope":2728,"src":"7003:24:34","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2572,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7003:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2573,"nodeType":"ArrayTypeName","src":"7003:9:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2577,"mutability":"mutable","name":"proofFlags","nameLocation":"7053:10:34","nodeType":"VariableDeclaration","scope":2728,"src":"7037:26:34","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":2575,"name":"bool","nodeType":"ElementaryTypeName","src":"7037:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2576,"nodeType":"ArrayTypeName","src":"7037:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":2580,"mutability":"mutable","name":"leaves","nameLocation":"7090:6:34","nodeType":"VariableDeclaration","scope":2728,"src":"7073:23:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2578,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7073:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2579,"nodeType":"ArrayTypeName","src":"7073:9:34","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"6993:109:34"},"returnParameters":{"id":2584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2583,"mutability":"mutable","name":"merkleRoot","nameLocation":"7134:10:34","nodeType":"VariableDeclaration","scope":2728,"src":"7126:18:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2582,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7126:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7125:20:34"},"scope":2763,"src":"6959:2240:34","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2750,"nodeType":"Block","src":"9277:75:34","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2737,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2730,"src":"9294:1:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2738,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"9298:1:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"9294:5:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":2745,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"9340:1:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2746,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2730,"src":"9343:1:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2744,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2762,"src":"9325:14:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9325:20:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9294:51:34","trueExpression":{"arguments":[{"id":2741,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2730,"src":"9317:1:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2742,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"9320:1:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2740,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2762,"src":"9302:14:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2743,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9302:20:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2736,"id":2749,"nodeType":"Return","src":"9287:58:34"}]},"id":2751,"implemented":true,"kind":"function","modifiers":[],"name":"_hashPair","nameLocation":"9214:9:34","nodeType":"FunctionDefinition","parameters":{"id":2733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2730,"mutability":"mutable","name":"a","nameLocation":"9232:1:34","nodeType":"VariableDeclaration","scope":2751,"src":"9224:9:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2729,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9224:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2732,"mutability":"mutable","name":"b","nameLocation":"9243:1:34","nodeType":"VariableDeclaration","scope":2751,"src":"9235:9:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2731,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9235:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9223:22:34"},"returnParameters":{"id":2736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2735,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2751,"src":"9268:7:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2734,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9268:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9267:9:34"},"scope":2763,"src":"9205:147:34","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":2761,"nodeType":"Block","src":"9441:178:34","statements":[{"AST":{"nativeSrc":"9503:110:34","nodeType":"YulBlock","src":"9503:110:34","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9524:4:34","nodeType":"YulLiteral","src":"9524:4:34","type":"","value":"0x00"},{"name":"a","nativeSrc":"9530:1:34","nodeType":"YulIdentifier","src":"9530:1:34"}],"functionName":{"name":"mstore","nativeSrc":"9517:6:34","nodeType":"YulIdentifier","src":"9517:6:34"},"nativeSrc":"9517:15:34","nodeType":"YulFunctionCall","src":"9517:15:34"},"nativeSrc":"9517:15:34","nodeType":"YulExpressionStatement","src":"9517:15:34"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9552:4:34","nodeType":"YulLiteral","src":"9552:4:34","type":"","value":"0x20"},{"name":"b","nativeSrc":"9558:1:34","nodeType":"YulIdentifier","src":"9558:1:34"}],"functionName":{"name":"mstore","nativeSrc":"9545:6:34","nodeType":"YulIdentifier","src":"9545:6:34"},"nativeSrc":"9545:15:34","nodeType":"YulFunctionCall","src":"9545:15:34"},"nativeSrc":"9545:15:34","nodeType":"YulExpressionStatement","src":"9545:15:34"},{"nativeSrc":"9573:30:34","nodeType":"YulAssignment","src":"9573:30:34","value":{"arguments":[{"kind":"number","nativeSrc":"9592:4:34","nodeType":"YulLiteral","src":"9592:4:34","type":"","value":"0x00"},{"kind":"number","nativeSrc":"9598:4:34","nodeType":"YulLiteral","src":"9598:4:34","type":"","value":"0x40"}],"functionName":{"name":"keccak256","nativeSrc":"9582:9:34","nodeType":"YulIdentifier","src":"9582:9:34"},"nativeSrc":"9582:21:34","nodeType":"YulFunctionCall","src":"9582:21:34"},"variableNames":[{"name":"value","nativeSrc":"9573:5:34","nodeType":"YulIdentifier","src":"9573:5:34"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2753,"isOffset":false,"isSlot":false,"src":"9530:1:34","valueSize":1},{"declaration":2755,"isOffset":false,"isSlot":false,"src":"9558:1:34","valueSize":1},{"declaration":2758,"isOffset":false,"isSlot":false,"src":"9573:5:34","valueSize":1}],"id":2760,"nodeType":"InlineAssembly","src":"9494:119:34"}]},"id":2762,"implemented":true,"kind":"function","modifiers":[],"name":"_efficientHash","nameLocation":"9367:14:34","nodeType":"FunctionDefinition","parameters":{"id":2756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2753,"mutability":"mutable","name":"a","nameLocation":"9390:1:34","nodeType":"VariableDeclaration","scope":2762,"src":"9382:9:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2752,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9382:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2755,"mutability":"mutable","name":"b","nameLocation":"9401:1:34","nodeType":"VariableDeclaration","scope":2762,"src":"9393:9:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2754,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9393:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9381:22:34"},"returnParameters":{"id":2759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2758,"mutability":"mutable","name":"value","nameLocation":"9434:5:34","nodeType":"VariableDeclaration","scope":2762,"src":"9426:13:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2757,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9426:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9425:15:34"},"scope":2763,"src":"9358:261:34","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":2764,"src":"802:8819:34","usedErrors":[],"usedEvents":[]}],"src":"118:9504:34"},"id":34},"contracts/payment/ChaosKingdomResourcesClaim.sol":{"ast":{"absolutePath":"contracts/payment/ChaosKingdomResourcesClaim.sol","exportedSymbols":{"ChaosKingdomResourcesClaim":[3143],"Context":[2125],"ContractOwnership":[43],"ContractOwnershipStorage":[395],"ERC20Receiver":[1146],"IERC1155Mintable":[1111],"IERC20Receiver":[1164],"IERC20SafeTransfers":[1194],"MerkleProof":[2763],"PayoutWallet":[576],"PayoutWalletStorage":[795],"TokenRecovery":[863]},"id":3144,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2765,"literals":["solidity","0.8",".22"],"nodeType":"PragmaDirective","src":"32:23:35"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","file":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","id":2767,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3144,"sourceUnit":2764,"src":"57:87:35","symbolAliases":[{"foreign":{"id":2766,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2763,"src":"65:11:35","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","id":2769,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3144,"sourceUnit":396,"src":"145:125:35","symbolAliases":[{"foreign":{"id":2768,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":395,"src":"153:24:35","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","id":2771,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3144,"sourceUnit":44,"src":"271:101:35","symbolAliases":[{"foreign":{"id":2770,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43,"src":"279:17:35","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol","id":2773,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3144,"sourceUnit":1195,"src":"373:121:35","symbolAliases":[{"foreign":{"id":2772,"name":"IERC20SafeTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"381:19:35","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol","id":2775,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3144,"sourceUnit":1165,"src":"495:111:35","symbolAliases":[{"foreign":{"id":2774,"name":"IERC20Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"503:14:35","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol","id":2777,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3144,"sourceUnit":1147,"src":"607:98:35","symbolAliases":[{"foreign":{"id":2776,"name":"ERC20Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1146,"src":"615:13:35","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","id":2779,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3144,"sourceUnit":1112,"src":"706:117:35","symbolAliases":[{"foreign":{"id":2778,"name":"IERC1155Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"714:16:35","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":2781,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3144,"sourceUnit":2126,"src":"824:66:35","symbolAliases":[{"foreign":{"id":2780,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2125,"src":"832:7:35","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol","file":"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol","id":2783,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3144,"sourceUnit":864,"src":"891:95:35","symbolAliases":[{"foreign":{"id":2782,"name":"TokenRecovery","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":863,"src":"899:13:35","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol","file":"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol","id":2785,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3144,"sourceUnit":796,"src":"987:116:35","symbolAliases":[{"foreign":{"id":2784,"name":"PayoutWalletStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"995:19:35","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/PayoutWallet.sol","file":"@animoca/ethereum-contracts/contracts/payment/PayoutWallet.sol","id":2787,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3144,"sourceUnit":577,"src":"1104:92:35","symbolAliases":[{"foreign":{"id":2786,"name":"PayoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":576,"src":"1112:12:35","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2788,"name":"ContractOwnership","nameLocations":["1237:17:35"],"nodeType":"IdentifierPath","referencedDeclaration":43,"src":"1237:17:35"},"id":2789,"nodeType":"InheritanceSpecifier","src":"1237:17:35"},{"baseName":{"id":2790,"name":"ERC20Receiver","nameLocations":["1256:13:35"],"nodeType":"IdentifierPath","referencedDeclaration":1146,"src":"1256:13:35"},"id":2791,"nodeType":"InheritanceSpecifier","src":"1256:13:35"},{"baseName":{"id":2792,"name":"TokenRecovery","nameLocations":["1271:13:35"],"nodeType":"IdentifierPath","referencedDeclaration":863,"src":"1271:13:35"},"id":2793,"nodeType":"InheritanceSpecifier","src":"1271:13:35"},{"baseName":{"id":2794,"name":"PayoutWallet","nameLocations":["1286:12:35"],"nodeType":"IdentifierPath","referencedDeclaration":576,"src":"1286:12:35"},"id":2795,"nodeType":"InheritanceSpecifier","src":"1286:12:35"}],"canonicalName":"ChaosKingdomResourcesClaim","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3143,"linearizedBaseContracts":[3143,576,863,1146,43,425,442,91,637,1081,2125,137,659,1164],"name":"ChaosKingdomResourcesClaim","nameLocation":"1207:26:35","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2799,"libraryName":{"id":2796,"name":"MerkleProof","nameLocations":["1311:11:35"],"nodeType":"IdentifierPath","referencedDeclaration":2763,"src":"1311:11:35"},"nodeType":"UsingForDirective","src":"1305:32:35","typeName":{"baseType":{"id":2797,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1327:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2798,"nodeType":"ArrayTypeName","src":"1327:9:35","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},{"global":false,"id":2803,"libraryName":{"id":2800,"name":"ContractOwnershipStorage","nameLocations":["1348:24:35"],"nodeType":"IdentifierPath","referencedDeclaration":395,"src":"1348:24:35"},"nodeType":"UsingForDirective","src":"1342:67:35","typeName":{"id":2802,"nodeType":"UserDefinedTypeName","pathNode":{"id":2801,"name":"ContractOwnershipStorage.Layout","nameLocations":["1377:24:35","1402:6:35"],"nodeType":"IdentifierPath","referencedDeclaration":168,"src":"1377:31:35"},"referencedDeclaration":168,"src":"1377:31:35","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":2807,"libraryName":{"id":2804,"name":"PayoutWalletStorage","nameLocations":["1420:19:35"],"nodeType":"IdentifierPath","referencedDeclaration":795,"src":"1420:19:35"},"nodeType":"UsingForDirective","src":"1414:57:35","typeName":{"id":2806,"nodeType":"UserDefinedTypeName","pathNode":{"id":2805,"name":"PayoutWalletStorage.Layout","nameLocations":["1444:19:35","1464:6:35"],"nodeType":"IdentifierPath","referencedDeclaration":674,"src":"1444:26:35"},"referencedDeclaration":674,"src":"1444:26:35","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$674_storage_ptr","typeString":"struct PayoutWalletStorage.Layout"}}},{"constant":false,"functionSelector":"ae6dead7","id":2811,"mutability":"mutable","name":"roots","nameLocation":"1509:5:35","nodeType":"VariableDeclaration","scope":3143,"src":"1477:37:35","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"typeName":{"id":2810,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2808,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1485:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1477:24:35","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2809,"name":"bool","nodeType":"ElementaryTypeName","src":"1496:4:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"functionSelector":"cc3c0f06","id":2815,"mutability":"mutable","name":"claimed","nameLocation":"1552:7:35","nodeType":"VariableDeclaration","scope":3143,"src":"1520:39:35","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"typeName":{"id":2814,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2812,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1528:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1520:24:35","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2813,"name":"bool","nodeType":"ElementaryTypeName","src":"1539:4:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"functionSelector":"3a5af339","id":2818,"mutability":"immutable","name":"REWARD_CONTRACT","nameLocation":"1600:15:35","nodeType":"VariableDeclaration","scope":3143,"src":"1566:49:35","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$1111","typeString":"contract IERC1155Mintable"},"typeName":{"id":2817,"nodeType":"UserDefinedTypeName","pathNode":{"id":2816,"name":"IERC1155Mintable","nameLocations":["1566:16:35"],"nodeType":"IdentifierPath","referencedDeclaration":1111,"src":"1566:16:35"},"referencedDeclaration":1111,"src":"1566:16:35","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$1111","typeString":"contract IERC1155Mintable"}},"visibility":"public"},{"constant":false,"functionSelector":"1352acac","id":2821,"mutability":"immutable","name":"FEE_CONTRACT","nameLocation":"1658:12:35","nodeType":"VariableDeclaration","scope":3143,"src":"1621:49:35","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20SafeTransfers_$1194","typeString":"contract IERC20SafeTransfers"},"typeName":{"id":2820,"nodeType":"UserDefinedTypeName","pathNode":{"id":2819,"name":"IERC20SafeTransfers","nameLocations":["1621:19:35"],"nodeType":"IdentifierPath","referencedDeclaration":1194,"src":"1621:19:35"},"referencedDeclaration":1194,"src":"1621:19:35","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20SafeTransfers_$1194","typeString":"contract IERC20SafeTransfers"}},"visibility":"public"},{"anonymous":false,"eventSelector":"bdd203dd78bf49cf79e4db0ecdf7d27adc380fb1f33beef2667a50db9d2a0e04","id":2825,"name":"MerkleRootAdded","nameLocation":"1683:15:35","nodeType":"EventDefinition","parameters":{"id":2824,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2823,"indexed":true,"mutability":"mutable","name":"root","nameLocation":"1715:4:35","nodeType":"VariableDeclaration","scope":2825,"src":"1699:20:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2822,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1699:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1698:22:35"},"src":"1677:44:35"},{"anonymous":false,"eventSelector":"578eab65d47cffa57066b105301289ff86bfdc0adc2a701c3356d2a6eb6a6123","id":2829,"name":"MerkleRootDeprecated","nameLocation":"1733:20:35","nodeType":"EventDefinition","parameters":{"id":2828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2827,"indexed":true,"mutability":"mutable","name":"root","nameLocation":"1770:4:35","nodeType":"VariableDeclaration","scope":2829,"src":"1754:20:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2826,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1754:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1753:22:35"},"src":"1727:49:35"},{"anonymous":false,"eventSelector":"bf561a0ae8123352abf33f8f113e6b265c2e7fe7ba9b4d450750454bcbb7233a","id":2845,"name":"PayoutClaimed","nameLocation":"1788:13:35","nodeType":"EventDefinition","parameters":{"id":2844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2831,"indexed":true,"mutability":"mutable","name":"root","nameLocation":"1818:4:35","nodeType":"VariableDeclaration","scope":2845,"src":"1802:20:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2830,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1802:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2833,"indexed":true,"mutability":"mutable","name":"epochId","nameLocation":"1840:7:35","nodeType":"VariableDeclaration","scope":2845,"src":"1824:23:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2832,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1824:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2835,"indexed":false,"mutability":"mutable","name":"fee","nameLocation":"1857:3:35","nodeType":"VariableDeclaration","scope":2845,"src":"1849:11:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2834,"name":"uint256","nodeType":"ElementaryTypeName","src":"1849:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2837,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"1878:9:35","nodeType":"VariableDeclaration","scope":2845,"src":"1862:25:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2836,"name":"address","nodeType":"ElementaryTypeName","src":"1862:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2840,"indexed":false,"mutability":"mutable","name":"ids","nameLocation":"1899:3:35","nodeType":"VariableDeclaration","scope":2845,"src":"1889:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2838,"name":"uint256","nodeType":"ElementaryTypeName","src":"1889:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2839,"nodeType":"ArrayTypeName","src":"1889:9:35","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2843,"indexed":false,"mutability":"mutable","name":"values","nameLocation":"1914:6:35","nodeType":"VariableDeclaration","scope":2845,"src":"1904:16:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2841,"name":"uint256","nodeType":"ElementaryTypeName","src":"1904:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2842,"nodeType":"ArrayTypeName","src":"1904:9:35","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1801:120:35"},"src":"1782:140:35"},{"errorSelector":"5d35de37","id":2849,"name":"MerkleRootAlreadyExists","nameLocation":"1934:23:35","nodeType":"ErrorDefinition","parameters":{"id":2848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2847,"mutability":"mutable","name":"merkleRoot","nameLocation":"1966:10:35","nodeType":"VariableDeclaration","scope":2849,"src":"1958:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2846,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1958:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1957:20:35"},"src":"1928:50:35"},{"errorSelector":"6d825743","id":2853,"name":"InvalidMerkleRoot","nameLocation":"1990:17:35","nodeType":"ErrorDefinition","parameters":{"id":2852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2851,"mutability":"mutable","name":"merkleRoot","nameLocation":"2016:10:35","nodeType":"VariableDeclaration","scope":2853,"src":"2008:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2850,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2008:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2007:20:35"},"src":"1984:44:35"},{"errorSelector":"f048f37a","id":2867,"name":"AlreadyClaimed","nameLocation":"2040:14:35","nodeType":"ErrorDefinition","parameters":{"id":2866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2855,"mutability":"mutable","name":"recipient","nameLocation":"2063:9:35","nodeType":"VariableDeclaration","scope":2867,"src":"2055:17:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2854,"name":"address","nodeType":"ElementaryTypeName","src":"2055:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2858,"mutability":"mutable","name":"ids","nameLocation":"2084:3:35","nodeType":"VariableDeclaration","scope":2867,"src":"2074:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2856,"name":"uint256","nodeType":"ElementaryTypeName","src":"2074:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2857,"nodeType":"ArrayTypeName","src":"2074:9:35","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2861,"mutability":"mutable","name":"values","nameLocation":"2099:6:35","nodeType":"VariableDeclaration","scope":2867,"src":"2089:16:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2859,"name":"uint256","nodeType":"ElementaryTypeName","src":"2089:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2860,"nodeType":"ArrayTypeName","src":"2089:9:35","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2863,"mutability":"mutable","name":"fee","nameLocation":"2115:3:35","nodeType":"VariableDeclaration","scope":2867,"src":"2107:11:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2862,"name":"uint256","nodeType":"ElementaryTypeName","src":"2107:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2865,"mutability":"mutable","name":"epochId","nameLocation":"2128:7:35","nodeType":"VariableDeclaration","scope":2867,"src":"2120:15:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2864,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2120:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2054:82:35"},"src":"2034:103:35"},{"errorSelector":"dbf2ac7c","id":2881,"name":"InvalidProof","nameLocation":"2149:12:35","nodeType":"ErrorDefinition","parameters":{"id":2880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2869,"mutability":"mutable","name":"recipient","nameLocation":"2170:9:35","nodeType":"VariableDeclaration","scope":2881,"src":"2162:17:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2868,"name":"address","nodeType":"ElementaryTypeName","src":"2162:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2872,"mutability":"mutable","name":"ids","nameLocation":"2191:3:35","nodeType":"VariableDeclaration","scope":2881,"src":"2181:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2870,"name":"uint256","nodeType":"ElementaryTypeName","src":"2181:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2871,"nodeType":"ArrayTypeName","src":"2181:9:35","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2875,"mutability":"mutable","name":"values","nameLocation":"2206:6:35","nodeType":"VariableDeclaration","scope":2881,"src":"2196:16:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2873,"name":"uint256","nodeType":"ElementaryTypeName","src":"2196:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2874,"nodeType":"ArrayTypeName","src":"2196:9:35","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2877,"mutability":"mutable","name":"fee","nameLocation":"2222:3:35","nodeType":"VariableDeclaration","scope":2881,"src":"2214:11:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2876,"name":"uint256","nodeType":"ElementaryTypeName","src":"2214:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2879,"mutability":"mutable","name":"epochId","nameLocation":"2235:7:35","nodeType":"VariableDeclaration","scope":2881,"src":"2227:15:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2878,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2227:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2161:82:35"},"src":"2143:101:35"},{"errorSelector":"01db0909","id":2887,"name":"InvalidFeeContract","nameLocation":"2256:18:35","nodeType":"ErrorDefinition","parameters":{"id":2886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2883,"mutability":"mutable","name":"receivedContract","nameLocation":"2283:16:35","nodeType":"VariableDeclaration","scope":2887,"src":"2275:24:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2882,"name":"address","nodeType":"ElementaryTypeName","src":"2275:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2885,"mutability":"mutable","name":"expectedContract","nameLocation":"2309:16:35","nodeType":"VariableDeclaration","scope":2887,"src":"2301:24:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2884,"name":"address","nodeType":"ElementaryTypeName","src":"2301:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2274:52:35"},"src":"2250:77:35"},{"body":{"id":2913,"nodeType":"Block","src":"2528:85:35","statements":[{"expression":{"id":2907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2905,"name":"FEE_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2821,"src":"2538:12:35","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20SafeTransfers_$1194","typeString":"contract IERC20SafeTransfers"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2906,"name":"feeContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2890,"src":"2553:11:35","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20SafeTransfers_$1194","typeString":"contract IERC20SafeTransfers"}},"src":"2538:26:35","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20SafeTransfers_$1194","typeString":"contract IERC20SafeTransfers"}},"id":2908,"nodeType":"ExpressionStatement","src":"2538:26:35"},{"expression":{"id":2911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2909,"name":"REWARD_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2818,"src":"2574:15:35","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$1111","typeString":"contract IERC1155Mintable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2910,"name":"rewardContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"2592:14:35","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$1111","typeString":"contract IERC1155Mintable"}},"src":"2574:32:35","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$1111","typeString":"contract IERC1155Mintable"}},"id":2912,"nodeType":"ExpressionStatement","src":"2574:32:35"}]},"id":2914,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"expression":{"id":2898,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2489:3:35","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2493:6:35","memberName":"sender","nodeType":"MemberAccess","src":"2489:10:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":2900,"kind":"baseConstructorSpecifier","modifierName":{"id":2897,"name":"ContractOwnership","nameLocations":["2471:17:35"],"nodeType":"IdentifierPath","referencedDeclaration":43,"src":"2471:17:35"},"nodeType":"ModifierInvocation","src":"2471:29:35"},{"arguments":[{"id":2902,"name":"payoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2895,"src":"2514:12:35","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"id":2903,"kind":"baseConstructorSpecifier","modifierName":{"id":2901,"name":"PayoutWallet","nameLocations":["2501:12:35"],"nodeType":"IdentifierPath","referencedDeclaration":576,"src":"2501:12:35"},"nodeType":"ModifierInvocation","src":"2501:26:35"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2890,"mutability":"mutable","name":"feeContract","nameLocation":"2374:11:35","nodeType":"VariableDeclaration","scope":2914,"src":"2354:31:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20SafeTransfers_$1194","typeString":"contract IERC20SafeTransfers"},"typeName":{"id":2889,"nodeType":"UserDefinedTypeName","pathNode":{"id":2888,"name":"IERC20SafeTransfers","nameLocations":["2354:19:35"],"nodeType":"IdentifierPath","referencedDeclaration":1194,"src":"2354:19:35"},"referencedDeclaration":1194,"src":"2354:19:35","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20SafeTransfers_$1194","typeString":"contract IERC20SafeTransfers"}},"visibility":"internal"},{"constant":false,"id":2893,"mutability":"mutable","name":"rewardContract","nameLocation":"2412:14:35","nodeType":"VariableDeclaration","scope":2914,"src":"2395:31:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$1111","typeString":"contract IERC1155Mintable"},"typeName":{"id":2892,"nodeType":"UserDefinedTypeName","pathNode":{"id":2891,"name":"IERC1155Mintable","nameLocations":["2395:16:35"],"nodeType":"IdentifierPath","referencedDeclaration":1111,"src":"2395:16:35"},"referencedDeclaration":1111,"src":"2395:16:35","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$1111","typeString":"contract IERC1155Mintable"}},"visibility":"internal"},{"constant":false,"id":2895,"mutability":"mutable","name":"payoutWallet","nameLocation":"2452:12:35","nodeType":"VariableDeclaration","scope":2914,"src":"2436:28:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2894,"name":"address","nodeType":"ElementaryTypeName","src":"2436:15:35","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"2344:126:35"},"returnParameters":{"id":2904,"nodeType":"ParameterList","parameters":[],"src":"2528:0:35"},"scope":3143,"src":"2333:280:35","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1163],"body":{"id":3074,"nodeType":"Block","src":"2744:1102:35","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2930,"name":"FEE_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2821,"src":"2766:12:35","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20SafeTransfers_$1194","typeString":"contract IERC20SafeTransfers"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20SafeTransfers_$1194","typeString":"contract IERC20SafeTransfers"}],"id":2929,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2758:7:35","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2928,"name":"address","nodeType":"ElementaryTypeName","src":"2758:7:35","typeDescriptions":{}}},"id":2931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2758:21:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2932,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2783:3:35","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2787:6:35","memberName":"sender","nodeType":"MemberAccess","src":"2783:10:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2758:35:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2944,"nodeType":"IfStatement","src":"2754:101:35","trueBody":{"errorCall":{"arguments":[{"expression":{"id":2936,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2821:3:35","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2825:6:35","memberName":"sender","nodeType":"MemberAccess","src":"2821:10:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2940,"name":"FEE_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2821,"src":"2841:12:35","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20SafeTransfers_$1194","typeString":"contract IERC20SafeTransfers"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20SafeTransfers_$1194","typeString":"contract IERC20SafeTransfers"}],"id":2939,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2833:7:35","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2938,"name":"address","nodeType":"ElementaryTypeName","src":"2833:7:35","typeDescriptions":{}}},"id":2941,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2833:21:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2935,"name":"InvalidFeeContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2887,"src":"2802:18:35","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":2942,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2802:53:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2943,"nodeType":"RevertStatement","src":"2795:60:35"}},{"assignments":[2946,2948,2951,2953,2956,2959],"declarations":[{"constant":false,"id":2946,"mutability":"mutable","name":"merkleRoot","nameLocation":"2875:10:35","nodeType":"VariableDeclaration","scope":3074,"src":"2867:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2945,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2867:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2948,"mutability":"mutable","name":"epochId","nameLocation":"2895:7:35","nodeType":"VariableDeclaration","scope":3074,"src":"2887:15:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2947,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2887:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2951,"mutability":"mutable","name":"proof","nameLocation":"2921:5:35","nodeType":"VariableDeclaration","scope":3074,"src":"2904:22:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2949,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2904:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2950,"nodeType":"ArrayTypeName","src":"2904:9:35","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2953,"mutability":"mutable","name":"recipient","nameLocation":"2936:9:35","nodeType":"VariableDeclaration","scope":3074,"src":"2928:17:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2952,"name":"address","nodeType":"ElementaryTypeName","src":"2928:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2956,"mutability":"mutable","name":"_ids","nameLocation":"2964:4:35","nodeType":"VariableDeclaration","scope":3074,"src":"2947:21:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2954,"name":"uint256","nodeType":"ElementaryTypeName","src":"2947:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2955,"nodeType":"ArrayTypeName","src":"2947:9:35","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2959,"mutability":"mutable","name":"_values","nameLocation":"2987:7:35","nodeType":"VariableDeclaration","scope":3074,"src":"2970:24:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2957,"name":"uint256","nodeType":"ElementaryTypeName","src":"2970:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2958,"nodeType":"ArrayTypeName","src":"2970:9:35","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":2980,"initialValue":{"arguments":[{"id":2962,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"3022:4:35","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"components":[{"id":2964,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3029:7:35","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2963,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3029:7:35","typeDescriptions":{}}},{"id":2966,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3038:7:35","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2965,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3038:7:35","typeDescriptions":{}}},{"baseExpression":{"id":2968,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3047:7:35","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2967,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3047:7:35","typeDescriptions":{}}},"id":2969,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"3047:9:35","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"type(bytes32[] memory)"}},{"id":2971,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3058:7:35","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2970,"name":"address","nodeType":"ElementaryTypeName","src":"3058:7:35","typeDescriptions":{}}},{"baseExpression":{"id":2973,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3067:7:35","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2972,"name":"uint256","nodeType":"ElementaryTypeName","src":"3067:7:35","typeDescriptions":{}}},"id":2974,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"3067:9:35","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"type(uint256[] memory)"}},{"baseExpression":{"id":2976,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3078:7:35","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2975,"name":"uint256","nodeType":"ElementaryTypeName","src":"3078:7:35","typeDescriptions":{}}},"id":2977,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"3078:9:35","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"type(uint256[] memory)"}}],"id":2978,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3028:60:35","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_bytes32_$_$_t_type$_t_bytes32_$_$_t_type$_t_array$_t_bytes32_$dyn_memory_ptr_$_$_t_type$_t_address_$_$_t_type$_t_array$_t_uint256_$dyn_memory_ptr_$_$_t_type$_t_array$_t_uint256_$dyn_memory_ptr_$_$","typeString":"tuple(type(bytes32),type(bytes32),type(bytes32[] memory),type(address),type(uint256[] memory),type(uint256[] memory))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_tuple$_t_type$_t_bytes32_$_$_t_type$_t_bytes32_$_$_t_type$_t_array$_t_bytes32_$dyn_memory_ptr_$_$_t_type$_t_address_$_$_t_type$_t_array$_t_uint256_$dyn_memory_ptr_$_$_t_type$_t_array$_t_uint256_$dyn_memory_ptr_$_$","typeString":"tuple(type(bytes32),type(bytes32),type(bytes32[] memory),type(address),type(uint256[] memory),type(uint256[] memory))"}],"expression":{"id":2960,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2998:3:35","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2961,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3015:6:35","memberName":"decode","nodeType":"MemberAccess","src":"2998:23:35","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2998:91:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_bytes32_$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_address_payable_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"tuple(bytes32,bytes32,bytes32[] memory,address payable,uint256[] memory,uint256[] memory)"}},"nodeType":"VariableDeclarationStatement","src":"2866:223:35"},{"condition":{"id":2984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3104:18:35","subExpression":{"baseExpression":{"id":2981,"name":"roots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"3105:5:35","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":2983,"indexExpression":{"id":2982,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2946,"src":"3111:10:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3105:17:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2989,"nodeType":"IfStatement","src":"3100:60:35","trueBody":{"errorCall":{"arguments":[{"id":2986,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2946,"src":"3149:10:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2985,"name":"InvalidMerkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2853,"src":"3131:17:35","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":2987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3131:29:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2988,"nodeType":"RevertStatement","src":"3124:36:35"}},{"assignments":[2991],"declarations":[{"constant":false,"id":2991,"mutability":"mutable","name":"leaf","nameLocation":"3179:4:35","nodeType":"VariableDeclaration","scope":3074,"src":"3171:12:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2990,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3171:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3002,"initialValue":{"arguments":[{"arguments":[{"id":2995,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"3213:9:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2996,"name":"_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2956,"src":"3224:4:35","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":2997,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2959,"src":"3230:7:35","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":2998,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"3239:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2999,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2948,"src":"3246:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2993,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3196:3:35","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2994,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3200:12:35","memberName":"encodePacked","nodeType":"MemberAccess","src":"3196:16:35","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3000,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3196:58:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2992,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3186:9:35","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3001,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3186:69:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3171:84:35"},{"condition":{"id":3008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3270:31:35","subExpression":{"arguments":[{"id":3005,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2946,"src":"3284:10:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3006,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2991,"src":"3296:4:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3003,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2951,"src":"3271:5:35","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":3004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3277:6:35","memberName":"verify","nodeType":"MemberAccess","referencedDeclaration":2259,"src":"3271:12:35","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$attached_to$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"}},"id":3007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3271:30:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3017,"nodeType":"IfStatement","src":"3266:98:35","trueBody":{"errorCall":{"arguments":[{"id":3010,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"3323:9:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3011,"name":"_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2956,"src":"3334:4:35","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":3012,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2959,"src":"3340:7:35","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":3013,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"3349:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3014,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2948,"src":"3356:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3009,"name":"InvalidProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2881,"src":"3310:12:35","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_uint256_$_t_bytes32_$returns$__$","typeString":"function (address,uint256[] memory,uint256[] memory,uint256,bytes32) pure"}},"id":3015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3310:54:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3016,"nodeType":"RevertStatement","src":"3303:61:35"}},{"condition":{"baseExpression":{"id":3018,"name":"claimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2815,"src":"3378:7:35","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":3020,"indexExpression":{"id":3019,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2991,"src":"3386:4:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3378:13:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3029,"nodeType":"IfStatement","src":"3374:82:35","trueBody":{"errorCall":{"arguments":[{"id":3022,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"3415:9:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3023,"name":"_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2956,"src":"3426:4:35","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":3024,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2959,"src":"3432:7:35","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":3025,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"3441:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3026,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2948,"src":"3448:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3021,"name":"AlreadyClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2867,"src":"3400:14:35","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_uint256_$_t_bytes32_$returns$__$","typeString":"function (address,uint256[] memory,uint256[] memory,uint256,bytes32) pure"}},"id":3027,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3400:56:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3028,"nodeType":"RevertStatement","src":"3393:63:35"}},{"assignments":[3031],"declarations":[{"constant":false,"id":3031,"mutability":"mutable","name":"payoutWallet","nameLocation":"3483:12:35","nodeType":"VariableDeclaration","scope":3074,"src":"3467:28:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3030,"name":"address","nodeType":"ElementaryTypeName","src":"3467:15:35","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"id":3037,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3032,"name":"PayoutWalletStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"3498:19:35","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PayoutWalletStorage_$795_$","typeString":"type(library PayoutWalletStorage)"}},"id":3033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3518:6:35","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":794,"src":"3498:26:35","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$674_storage_ptr_$","typeString":"function () pure returns (struct PayoutWalletStorage.Layout storage pointer)"}},"id":3034,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3498:28:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$674_storage_ptr","typeString":"struct PayoutWalletStorage.Layout storage pointer"}},"id":3035,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3527:12:35","memberName":"payoutWallet","nodeType":"MemberAccess","referencedDeclaration":782,"src":"3498:41:35","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$674_storage_ptr_$returns$_t_address_payable_$attached_to$_t_struct$_Layout_$674_storage_ptr_$","typeString":"function (struct PayoutWalletStorage.Layout storage pointer) view returns (address payable)"}},"id":3036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3498:43:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"3467:74:35"},{"expression":{"arguments":[{"id":3041,"name":"payoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"3577:12:35","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":3042,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"3591:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":3043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3598:2:35","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":3038,"name":"FEE_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2821,"src":"3551:12:35","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20SafeTransfers_$1194","typeString":"contract IERC20SafeTransfers"}},"id":3040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3564:12:35","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":1179,"src":"3551:25:35","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,uint256,bytes memory) external returns (bool)"}},"id":3044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3551:50:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3045,"nodeType":"ExpressionStatement","src":"3551:50:35"},{"expression":{"id":3050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3046,"name":"claimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2815,"src":"3611:7:35","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":3048,"indexExpression":{"id":3047,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2991,"src":"3619:4:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3611:13:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3627:4:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3611:20:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3051,"nodeType":"ExpressionStatement","src":"3611:20:35"},{"expression":{"arguments":[{"id":3055,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"3671:9:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3056,"name":"_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2956,"src":"3682:4:35","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":3057,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2959,"src":"3688:7:35","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":3058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3697:2:35","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":3052,"name":"REWARD_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2818,"src":"3641:15:35","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$1111","typeString":"contract IERC1155Mintable"}},"id":3054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3657:13:35","memberName":"safeBatchMint","nodeType":"MemberAccess","referencedDeclaration":1110,"src":"3641:29:35","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256[] memory,uint256[] memory,bytes memory) external"}},"id":3059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3641:59:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3060,"nodeType":"ExpressionStatement","src":"3641:59:35"},{"eventCall":{"arguments":[{"id":3062,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2946,"src":"3729:10:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3063,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2948,"src":"3741:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3064,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"3750:5:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3065,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"3757:9:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3066,"name":"_ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2956,"src":"3768:4:35","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":3067,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2959,"src":"3774:7:35","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":3061,"name":"PayoutClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2845,"src":"3715:13:35","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_uint256_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes32,uint256,address,uint256[] memory,uint256[] memory)"}},"id":3068,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3715:67:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3069,"nodeType":"EmitStatement","src":"3710:72:35"},{"expression":{"expression":{"expression":{"id":3070,"name":"IERC20Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"3800:14:35","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Receiver_$1164_$","typeString":"type(contract IERC20Receiver)"}},"id":3071,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3815:15:35","memberName":"onERC20Received","nodeType":"MemberAccess","referencedDeclaration":1163,"src":"3800:30:35","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC20Receiver.onERC20Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":3072,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3831:8:35","memberName":"selector","nodeType":"MemberAccess","src":"3800:39:35","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":2927,"id":3073,"nodeType":"Return","src":"3793:46:35"}]},"functionSelector":"4fc35859","id":3075,"implemented":true,"kind":"function","modifiers":[],"name":"onERC20Received","nameLocation":"2628:15:35","nodeType":"FunctionDefinition","overrides":{"id":2924,"nodeType":"OverrideSpecifier","overrides":[],"src":"2707:8:35"},"parameters":{"id":2923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2916,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3075,"src":"2644:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2915,"name":"address","nodeType":"ElementaryTypeName","src":"2644:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2918,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3075,"src":"2653:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2917,"name":"address","nodeType":"ElementaryTypeName","src":"2653:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2920,"mutability":"mutable","name":"value","nameLocation":"2670:5:35","nodeType":"VariableDeclaration","scope":3075,"src":"2662:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2919,"name":"uint256","nodeType":"ElementaryTypeName","src":"2662:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2922,"mutability":"mutable","name":"data","nameLocation":"2692:4:35","nodeType":"VariableDeclaration","scope":3075,"src":"2677:19:35","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2921,"name":"bytes","nodeType":"ElementaryTypeName","src":"2677:5:35","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2643:54:35"},"returnParameters":{"id":2927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2926,"mutability":"mutable","name":"magicValue","nameLocation":"2732:10:35","nodeType":"VariableDeclaration","scope":3075,"src":"2725:17:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2925,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2725:6:35","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2724:19:35"},"scope":3143,"src":"2619:1227:35","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3107,"nodeType":"Block","src":"3902:239:35","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3085,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"3969:10:35","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3969:12:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3080,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":395,"src":"3912:24:35","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$395_$","typeString":"type(library ContractOwnershipStorage)"}},"id":3082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3937:6:35","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":394,"src":"3912:31:35","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$168_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":3083,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3912:33:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":3084,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3946:22:35","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":362,"src":"3912:56:35","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$168_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$168_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":3087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3912:70:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3088,"nodeType":"ExpressionStatement","src":"3912:70:35"},{"condition":{"baseExpression":{"id":3089,"name":"roots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"3996:5:35","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":3091,"indexExpression":{"id":3090,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3077,"src":"4002:10:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3996:17:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3096,"nodeType":"IfStatement","src":"3992:65:35","trueBody":{"errorCall":{"arguments":[{"id":3093,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3077,"src":"4046:10:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3092,"name":"MerkleRootAlreadyExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2849,"src":"4022:23:35","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":3094,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4022:35:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3095,"nodeType":"RevertStatement","src":"4015:42:35"}},{"expression":{"id":3101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3097,"name":"roots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"4068:5:35","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":3099,"indexExpression":{"id":3098,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3077,"src":"4074:10:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4068:17:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4088:4:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4068:24:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3102,"nodeType":"ExpressionStatement","src":"4068:24:35"},{"eventCall":{"arguments":[{"id":3104,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3077,"src":"4123:10:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3103,"name":"MerkleRootAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2825,"src":"4107:15:35","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":3105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4107:27:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3106,"nodeType":"EmitStatement","src":"4102:32:35"}]},"functionSelector":"3323c807","id":3108,"implemented":true,"kind":"function","modifiers":[],"name":"addMerkleRoot","nameLocation":"3861:13:35","nodeType":"FunctionDefinition","parameters":{"id":3078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3077,"mutability":"mutable","name":"merkleRoot","nameLocation":"3883:10:35","nodeType":"VariableDeclaration","scope":3108,"src":"3875:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3076,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3875:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3874:20:35"},"returnParameters":{"id":3079,"nodeType":"ParameterList","parameters":[],"src":"3902:0:35"},"scope":3143,"src":"3852:289:35","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3141,"nodeType":"Block","src":"4203:240:35","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3118,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"4270:10:35","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4270:12:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3113,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":395,"src":"4213:24:35","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$395_$","typeString":"type(library ContractOwnershipStorage)"}},"id":3115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4238:6:35","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":394,"src":"4213:31:35","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$168_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":3116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4213:33:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$168_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":3117,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4247:22:35","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":362,"src":"4213:56:35","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$168_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$168_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":3120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4213:70:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3121,"nodeType":"ExpressionStatement","src":"4213:70:35"},{"condition":{"id":3125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4297:18:35","subExpression":{"baseExpression":{"id":3122,"name":"roots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"4298:5:35","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":3124,"indexExpression":{"id":3123,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3110,"src":"4304:10:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4298:17:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3130,"nodeType":"IfStatement","src":"4293:60:35","trueBody":{"errorCall":{"arguments":[{"id":3127,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3110,"src":"4342:10:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3126,"name":"InvalidMerkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2853,"src":"4324:17:35","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":3128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4324:29:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3129,"nodeType":"RevertStatement","src":"4317:36:35"}},{"expression":{"id":3135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3131,"name":"roots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"4364:5:35","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":3133,"indexExpression":{"id":3132,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3110,"src":"4370:10:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4364:17:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":3134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4384:5:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"4364:25:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3136,"nodeType":"ExpressionStatement","src":"4364:25:35"},{"eventCall":{"arguments":[{"id":3138,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3110,"src":"4425:10:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3137,"name":"MerkleRootDeprecated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2829,"src":"4404:20:35","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":3139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4404:32:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3140,"nodeType":"EmitStatement","src":"4399:37:35"}]},"functionSelector":"3572aa8d","id":3142,"implemented":true,"kind":"function","modifiers":[],"name":"deprecateMerkleRoot","nameLocation":"4156:19:35","nodeType":"FunctionDefinition","parameters":{"id":3111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3110,"mutability":"mutable","name":"merkleRoot","nameLocation":"4184:10:35","nodeType":"VariableDeclaration","scope":3142,"src":"4176:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3109,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4176:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4175:20:35"},"returnParameters":{"id":3112,"nodeType":"ParameterList","parameters":[],"src":"4203:0:35"},"scope":3143,"src":"4147:296:35","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":3144,"src":"1198:3247:35","usedErrors":[7,105,430,642,2849,2853,2867,2881,2887],"usedEvents":[121,649,2825,2829,2845]}],"src":"32:4414:35"},"id":35}},"contracts":{"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ContractOwnership":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"constructor":{"details":"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.","params":{"initialOwner":"the initial contract owner."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\",\"params\":{\"initialOwner\":\"the initial contract owner.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":\"ContractOwnership\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"constructor":{"notice":"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173."},"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ContractOwnershipBase":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":\"ContractOwnershipBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"IERC173":{"abi":[{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"contractOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0","kind":"dev","methods":{"owner()":{"returns":{"contractOwner":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC-173 Contract Ownership Standard (functions)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"contractOwner\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC-173 Contract Ownership Standard (functions)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":\"IERC173\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ContractOwnershipStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205d913d2906a5e99a607a556d5d202187ac2a3d7c278d3b3320c651c7cb75b8bb64736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D SWAP2 RETURNDATASIZE 0x29 MOD 0xA5 0xE9 SWAP11 PUSH1 0x7A SSTORE PUSH14 0x5D202187AC2A3D7C278D3B3320C6 MLOAD 0xC7 0xCB PUSH22 0xB8BB64736F6C63430008160033000000000000000000 ","sourceMap":"595:4646:7:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;595:4646:7;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205d913d2906a5e99a607a556d5d202187ac2a3d7c278d3b3320c651c7cb75b8bb64736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D SWAP2 RETURNDATASIZE 0x29 MOD 0xA5 0xE9 SWAP11 PUSH1 0x7A SSTORE PUSH14 0x5D202187AC2A3D7C278D3B3320C6 MLOAD 0xC7 0xCB PUSH22 0xB8BB64736F6C63430008160033000000000000000000 ","sourceMap":"595:4646:7:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"constructorInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsContractOwner(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsTargetContractOwner(address,address)":"infinite","isTargetContractOwner(address,address)":"infinite","layout()":"infinite","owner(struct ContractOwnershipStorage.Layout storage pointer)":"infinite","proxyInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","transferOwnership(struct ContractOwnershipStorage.Layout storage pointer,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":\"ContractOwnershipStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"InterfaceDetection":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard (immutable or proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard (immutable or proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":\"InterfaceDetection\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"supported","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"supported":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"supported\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"InterfaceDetectionStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220650411bd7e21cdd933b879336f9c786205ef70bd56990c8c2d79f38c17abe48964736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0x411BD7E21CD 0xD9 CALLER 0xB8 PUSH26 0x336F9C786205EF70BD56990C8C2D79F38C17ABE48964736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"189:1692:11:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;189:1692:11;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220650411bd7e21cdd933b879336f9c786205ef70bd56990c8c2d79f38c17abe48964736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0x411BD7E21CD 0xD9 CALLER 0xB8 PUSH26 0x336F9C786205EF70BD56990C8C2D79F38C17ABE48964736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"189:1692:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"layout()":"infinite","setSupportedInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)":"infinite","supportsInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":\"InterfaceDetectionStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/payment/PayoutWallet.sol":{"PayoutWallet":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[],"name":"ZeroAddressPayoutWallet","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"payoutWallet","type":"address"}],"name":"PayoutWalletSet","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"payoutWallet","outputs":[{"internalType":"address payable","name":"wallet","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address payable","name":"newPayoutWallet","type":"address"}],"name":"setPayoutWallet","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"PayoutWalletSet(address)":{"params":{"payoutWallet":"the new payout wallet address."}}},"kind":"dev","methods":{"constructor":{"details":"Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.Emits a {PayoutWalletSet} event.","params":{"initialPayoutWallet":"The initial payout wallet."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"payoutWallet()":{"returns":{"wallet":"The payout wallet."}},"setPayoutWallet(address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.Emits a {PayoutWalletSet} event.","params":{"newPayoutWallet":"The payout wallet."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"Payout wallet (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","payoutWallet()":"8488bb4e","setPayoutWallet(address)":"6b8f9c43","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressPayoutWallet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payoutWallet\",\"type\":\"address\"}],\"name\":\"PayoutWalletSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPayoutWallet\",\"type\":\"address\"}],\"name\":\"setPayoutWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"PayoutWalletSet(address)\":{\"params\":{\"payoutWallet\":\"the new payout wallet address.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.Emits a {PayoutWalletSet} event.\",\"params\":{\"initialPayoutWallet\":\"The initial payout wallet.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"payoutWallet()\":{\"returns\":{\"wallet\":\"The payout wallet.\"}},\"setPayoutWallet(address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.Emits a {PayoutWalletSet} event.\",\"params\":{\"newPayoutWallet\":\"The payout wallet.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"Payout wallet (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"ZeroAddressPayoutWallet()\":[{\"notice\":\"Thrown when setting the zero address as the payout wallet.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"PayoutWalletSet(address)\":{\"notice\":\"Emitted when the payout wallet address changes.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the storage with an initial payout wallet.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"payoutWallet()\":{\"notice\":\"Gets the payout wallet.\"},\"setPayoutWallet(address)\":{\"notice\":\"Sets the payout wallet.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/payment/PayoutWallet.sol\":\"PayoutWallet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/PayoutWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {PayoutWalletStorage} from \\\"./libraries/PayoutWalletStorage.sol\\\";\\nimport {PayoutWalletBase} from \\\"./base/PayoutWalletBase.sol\\\";\\nimport {ContractOwnership} from \\\"../access/ContractOwnership.sol\\\";\\n\\n/// @title Payout wallet (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract PayoutWallet is PayoutWalletBase, ContractOwnership {\\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial payout wallet.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param initialPayoutWallet The initial payout wallet.\\n    constructor(address payable initialPayoutWallet) {\\n        PayoutWalletStorage.layout().constructorInit(initialPayoutWallet);\\n    }\\n}\\n\",\"keccak256\":\"0xe797f1f4f3c20e6fe6cae385d6b9a03063dfde54eb0d0575dda40e17a1297440\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/base/PayoutWalletBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IPayoutWallet} from \\\"./../interfaces/IPayoutWallet.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {PayoutWalletStorage} from \\\"./../libraries/PayoutWalletStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Payout wallet (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract PayoutWalletBase is IPayoutWallet, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\\n\\n    /// @notice Sets the payout wallet.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param newPayoutWallet The payout wallet.\\n    function setPayoutWallet(address payable newPayoutWallet) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        PayoutWalletStorage.layout().setPayoutWallet(newPayoutWallet);\\n    }\\n\\n    /// @notice Gets the payout wallet.\\n    /// @return wallet The payout wallet.\\n    function payoutWallet() external view returns (address payable wallet) {\\n        return PayoutWalletStorage.layout().payoutWallet();\\n    }\\n}\\n\",\"keccak256\":\"0xea9da06443741180f98144af17add47f0be7928db0188bd3a93200f70d4485c1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/errors/PayoutWalletErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the zero address as the payout wallet.\\nerror ZeroAddressPayoutWallet();\\n\",\"keccak256\":\"0x7780c2ef6cbd256df977985f4ed68a81d2b3f225379cab902fe76c5c892091b9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/events/PayoutWalletEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the payout wallet address changes.\\n/// @param payoutWallet the new payout wallet address.\\nevent PayoutWalletSet(address payoutWallet);\\n\",\"keccak256\":\"0x615f558fdc9544e5d2f0cd360ba35d8219b9ccc5f7545200c6fc3856be286ea4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/interfaces/IPayoutWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Payout wallet (functions)\\ninterface IPayoutWallet {\\n    /// @notice Gets the payout wallet.\\n    /// @return wallet The payout wallet.\\n    function payoutWallet() external view returns (address payable wallet);\\n}\\n\",\"keccak256\":\"0x3c2a1c03b8245bbb7bf6e215a4b8d2171cc942494a08b38d3992e234b2e3a1c8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ZeroAddressPayoutWallet} from \\\"./../errors/PayoutWalletErrors.sol\\\";\\nimport {PayoutWalletSet} from \\\"./../events/PayoutWalletEvents.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary PayoutWalletStorage {\\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\\n\\n    struct Layout {\\n        address payable wallet;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.payment.PayoutWallet.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.payment.PayoutWallet.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial payout wallet (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param initialPayoutWallet The initial payout wallet.\\n    function constructorInit(Layout storage s, address payable initialPayoutWallet) internal {\\n        s.setPayoutWallet(initialPayoutWallet);\\n    }\\n\\n    /// @notice Initializes the storage with an initial payout wallet (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param initialPayoutWallet The initial payout wallet.\\n    function proxyInit(Layout storage s, address payable initialPayoutWallet) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.setPayoutWallet(initialPayoutWallet);\\n    }\\n\\n    /// @notice Sets the payout wallet.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param newPayoutWallet The payout wallet.\\n    function setPayoutWallet(Layout storage s, address payable newPayoutWallet) internal {\\n        if (newPayoutWallet == address(0)) revert ZeroAddressPayoutWallet();\\n        s.wallet = newPayoutWallet;\\n        emit PayoutWalletSet(newPayoutWallet);\\n    }\\n\\n    /// @notice Gets the payout wallet.\\n    /// @return wallet The payout wallet.\\n    function payoutWallet(Layout storage s) internal view returns (address payable) {\\n        return s.wallet;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98c2fc2788c86d400490bb74c74be6cb4901a97dc885c15844fdc7867dd0eff8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"ZeroAddressPayoutWallet()":[{"notice":"Thrown when setting the zero address as the payout wallet."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"PayoutWalletSet(address)":{"notice":"Emitted when the payout wallet address changes."}},"kind":"user","methods":{"constructor":{"notice":"Initializes the storage with an initial payout wallet."},"owner()":{"notice":"Gets the address of the contract owner."},"payoutWallet()":{"notice":"Gets the payout wallet."},"setPayoutWallet(address)":{"notice":"Sets the payout wallet."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/payment/base/PayoutWalletBase.sol":{"PayoutWalletBase":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[],"name":"ZeroAddressPayoutWallet","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"payoutWallet","type":"address"}],"name":"PayoutWalletSet","type":"event"},{"inputs":[],"name":"payoutWallet","outputs":[{"internalType":"address payable","name":"wallet","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address payable","name":"newPayoutWallet","type":"address"}],"name":"setPayoutWallet","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"PayoutWalletSet(address)":{"params":{"payoutWallet":"the new payout wallet address."}}},"kind":"dev","methods":{"payoutWallet()":{"returns":{"wallet":"The payout wallet."}},"setPayoutWallet(address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.Emits a {PayoutWalletSet} event.","params":{"newPayoutWallet":"The payout wallet."}}},"title":"Payout wallet (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"payoutWallet()":"8488bb4e","setPayoutWallet(address)":"6b8f9c43"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressPayoutWallet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payoutWallet\",\"type\":\"address\"}],\"name\":\"PayoutWalletSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"payoutWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPayoutWallet\",\"type\":\"address\"}],\"name\":\"setPayoutWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"PayoutWalletSet(address)\":{\"params\":{\"payoutWallet\":\"the new payout wallet address.\"}}},\"kind\":\"dev\",\"methods\":{\"payoutWallet()\":{\"returns\":{\"wallet\":\"The payout wallet.\"}},\"setPayoutWallet(address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.Emits a {PayoutWalletSet} event.\",\"params\":{\"newPayoutWallet\":\"The payout wallet.\"}}},\"title\":\"Payout wallet (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"ZeroAddressPayoutWallet()\":[{\"notice\":\"Thrown when setting the zero address as the payout wallet.\"}]},\"events\":{\"PayoutWalletSet(address)\":{\"notice\":\"Emitted when the payout wallet address changes.\"}},\"kind\":\"user\",\"methods\":{\"payoutWallet()\":{\"notice\":\"Gets the payout wallet.\"},\"setPayoutWallet(address)\":{\"notice\":\"Sets the payout wallet.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/payment/base/PayoutWalletBase.sol\":\"PayoutWalletBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/base/PayoutWalletBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IPayoutWallet} from \\\"./../interfaces/IPayoutWallet.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {PayoutWalletStorage} from \\\"./../libraries/PayoutWalletStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Payout wallet (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract PayoutWalletBase is IPayoutWallet, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\\n\\n    /// @notice Sets the payout wallet.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param newPayoutWallet The payout wallet.\\n    function setPayoutWallet(address payable newPayoutWallet) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        PayoutWalletStorage.layout().setPayoutWallet(newPayoutWallet);\\n    }\\n\\n    /// @notice Gets the payout wallet.\\n    /// @return wallet The payout wallet.\\n    function payoutWallet() external view returns (address payable wallet) {\\n        return PayoutWalletStorage.layout().payoutWallet();\\n    }\\n}\\n\",\"keccak256\":\"0xea9da06443741180f98144af17add47f0be7928db0188bd3a93200f70d4485c1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/errors/PayoutWalletErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the zero address as the payout wallet.\\nerror ZeroAddressPayoutWallet();\\n\",\"keccak256\":\"0x7780c2ef6cbd256df977985f4ed68a81d2b3f225379cab902fe76c5c892091b9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/events/PayoutWalletEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the payout wallet address changes.\\n/// @param payoutWallet the new payout wallet address.\\nevent PayoutWalletSet(address payoutWallet);\\n\",\"keccak256\":\"0x615f558fdc9544e5d2f0cd360ba35d8219b9ccc5f7545200c6fc3856be286ea4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/interfaces/IPayoutWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Payout wallet (functions)\\ninterface IPayoutWallet {\\n    /// @notice Gets the payout wallet.\\n    /// @return wallet The payout wallet.\\n    function payoutWallet() external view returns (address payable wallet);\\n}\\n\",\"keccak256\":\"0x3c2a1c03b8245bbb7bf6e215a4b8d2171cc942494a08b38d3992e234b2e3a1c8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ZeroAddressPayoutWallet} from \\\"./../errors/PayoutWalletErrors.sol\\\";\\nimport {PayoutWalletSet} from \\\"./../events/PayoutWalletEvents.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary PayoutWalletStorage {\\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\\n\\n    struct Layout {\\n        address payable wallet;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.payment.PayoutWallet.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.payment.PayoutWallet.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial payout wallet (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param initialPayoutWallet The initial payout wallet.\\n    function constructorInit(Layout storage s, address payable initialPayoutWallet) internal {\\n        s.setPayoutWallet(initialPayoutWallet);\\n    }\\n\\n    /// @notice Initializes the storage with an initial payout wallet (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param initialPayoutWallet The initial payout wallet.\\n    function proxyInit(Layout storage s, address payable initialPayoutWallet) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.setPayoutWallet(initialPayoutWallet);\\n    }\\n\\n    /// @notice Sets the payout wallet.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param newPayoutWallet The payout wallet.\\n    function setPayoutWallet(Layout storage s, address payable newPayoutWallet) internal {\\n        if (newPayoutWallet == address(0)) revert ZeroAddressPayoutWallet();\\n        s.wallet = newPayoutWallet;\\n        emit PayoutWalletSet(newPayoutWallet);\\n    }\\n\\n    /// @notice Gets the payout wallet.\\n    /// @return wallet The payout wallet.\\n    function payoutWallet(Layout storage s) internal view returns (address payable) {\\n        return s.wallet;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98c2fc2788c86d400490bb74c74be6cb4901a97dc885c15844fdc7867dd0eff8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"ZeroAddressPayoutWallet()":[{"notice":"Thrown when setting the zero address as the payout wallet."}]},"events":{"PayoutWalletSet(address)":{"notice":"Emitted when the payout wallet address changes."}},"kind":"user","methods":{"payoutWallet()":{"notice":"Gets the payout wallet."},"setPayoutWallet(address)":{"notice":"Sets the payout wallet."}},"version":1}}},"@animoca/ethereum-contracts/contracts/payment/interfaces/IPayoutWallet.sol":{"IPayoutWallet":{"abi":[{"inputs":[],"name":"payoutWallet","outputs":[{"internalType":"address payable","name":"wallet","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"payoutWallet()":{"returns":{"wallet":"The payout wallet."}}},"title":"Payout wallet (functions)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"payoutWallet()":"8488bb4e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"payoutWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"payoutWallet()\":{\"returns\":{\"wallet\":\"The payout wallet.\"}}},\"title\":\"Payout wallet (functions)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"payoutWallet()\":{\"notice\":\"Gets the payout wallet.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/payment/interfaces/IPayoutWallet.sol\":\"IPayoutWallet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/payment/interfaces/IPayoutWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Payout wallet (functions)\\ninterface IPayoutWallet {\\n    /// @notice Gets the payout wallet.\\n    /// @return wallet The payout wallet.\\n    function payoutWallet() external view returns (address payable wallet);\\n}\\n\",\"keccak256\":\"0x3c2a1c03b8245bbb7bf6e215a4b8d2171cc942494a08b38d3992e234b2e3a1c8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"payoutWallet()":{"notice":"Gets the payout wallet."}},"version":1}}},"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol":{"PayoutWalletStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c9c1851196ea6344af82105f1897c4a28723ca0bd32787b37cef2052aa21fc4664736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC9 0xC1 DUP6 GT SWAP7 0xEA PUSH4 0x44AF8210 PUSH0 XOR SWAP8 0xC4 LOG2 DUP8 0x23 0xCA SIGNEXTEND 0xD3 0x27 DUP8 0xB3 PUSH29 0xEF2052AA21FC4664736F6C634300081600330000000000000000000000 ","sourceMap":"288:2624:17:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;288:2624:17;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c9c1851196ea6344af82105f1897c4a28723ca0bd32787b37cef2052aa21fc4664736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC9 0xC1 DUP6 GT SWAP7 0xEA PUSH4 0x44AF8210 PUSH0 XOR SWAP8 0xC4 LOG2 DUP8 0x23 0xCA SIGNEXTEND 0xD3 0x27 DUP8 0xB3 PUSH29 0xEF2052AA21FC4664736F6C634300081600330000000000000000000000 ","sourceMap":"288:2624:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"constructorInit(struct PayoutWalletStorage.Layout storage pointer,address payable)":"infinite","layout()":"infinite","payoutWallet(struct PayoutWalletStorage.Layout storage pointer)":"infinite","proxyInit(struct PayoutWalletStorage.Layout storage pointer,address payable)":"infinite","setPayoutWallet(struct PayoutWalletStorage.Layout storage pointer,address payable)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol\":\"PayoutWalletStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/payment/errors/PayoutWalletErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the zero address as the payout wallet.\\nerror ZeroAddressPayoutWallet();\\n\",\"keccak256\":\"0x7780c2ef6cbd256df977985f4ed68a81d2b3f225379cab902fe76c5c892091b9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/events/PayoutWalletEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the payout wallet address changes.\\n/// @param payoutWallet the new payout wallet address.\\nevent PayoutWalletSet(address payoutWallet);\\n\",\"keccak256\":\"0x615f558fdc9544e5d2f0cd360ba35d8219b9ccc5f7545200c6fc3856be286ea4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ZeroAddressPayoutWallet} from \\\"./../errors/PayoutWalletErrors.sol\\\";\\nimport {PayoutWalletSet} from \\\"./../events/PayoutWalletEvents.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary PayoutWalletStorage {\\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\\n\\n    struct Layout {\\n        address payable wallet;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.payment.PayoutWallet.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.payment.PayoutWallet.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial payout wallet (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param initialPayoutWallet The initial payout wallet.\\n    function constructorInit(Layout storage s, address payable initialPayoutWallet) internal {\\n        s.setPayoutWallet(initialPayoutWallet);\\n    }\\n\\n    /// @notice Initializes the storage with an initial payout wallet (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param initialPayoutWallet The initial payout wallet.\\n    function proxyInit(Layout storage s, address payable initialPayoutWallet) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.setPayoutWallet(initialPayoutWallet);\\n    }\\n\\n    /// @notice Sets the payout wallet.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param newPayoutWallet The payout wallet.\\n    function setPayoutWallet(Layout storage s, address payable newPayoutWallet) internal {\\n        if (newPayoutWallet == address(0)) revert ZeroAddressPayoutWallet();\\n        s.wallet = newPayoutWallet;\\n        emit PayoutWalletSet(newPayoutWallet);\\n    }\\n\\n    /// @notice Gets the payout wallet.\\n    /// @return wallet The payout wallet.\\n    function payoutWallet(Layout storage s) internal view returns (address payable) {\\n        return s.wallet;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98c2fc2788c86d400490bb74c74be6cb4901a97dc885c15844fdc7867dd0eff8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ProxyInitialization":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220780e74f7f894b43c4b6ae55acf3b8c8f904e4ec48795de67c5b34d0d3bd1256364736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH25 0xE74F7F894B43C4B6AE55ACF3B8C8F904E4EC48795DE67C5B3 0x4D 0xD EXTCODESIZE 0xD1 0x25 PUSH4 0x64736F6C PUSH4 0x43000816 STOP CALLER ","sourceMap":"319:712:19:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;319:712:19;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220780e74f7f894b43c4b6ae55acf3b8c8f904e4ec48795de67c5b34d0d3bd1256364736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH25 0xE74F7F894B43C4B6AE55ACF3B8C8F904E4EC48795DE67C5B3 0x4D 0xD EXTCODESIZE 0xD1 0x25 PUSH4 0x64736F6C PUSH4 0x43000816 STOP CALLER ","sourceMap":"319:712:19:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"setPhase(bytes32,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Multiple calls protection for storage-modifying proxy initialization functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":\"ProxyInitialization\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Multiple calls protection for storage-modifying proxy initialization functions.","version":1}}},"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol":{"TokenRecovery":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InconsistentArrayLengths","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"recoverERC20s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrayLengths\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InconsistentArrayLengths()\":[{\"notice\":\"Thrown when the multiple related arrays have different lengths.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":\"TokenRecovery\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0xe1641af73913734b212608859490f9ed908e05b496b93f91394ef68b05149da7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {TokenRecoveryBase} from \\\"./base/TokenRecoveryBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../access/ContractOwnership.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0x1bc6bfe11425d5f150d4c1f3c333ecea34e6ce0f262fb74c1754d80f4ac2339f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InconsistentArrayLengths} from \\\"./../../CommonErrors.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract TokenRecoveryBase is Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            accounts[i].sendValue(amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            tokens[i].safeTransfer(accounts[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x93fcfd049c5a3c644cf65da5397ff4ec99e2f4dce32490513fa6439ee669ee34\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xb3e4a62f3cd743d7bc3b1483cbcf73d3f97b711ed707fcc833dcfb46a3bd883c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InconsistentArrayLengths()":[{"notice":"Thrown when the multiple related arrays have different lengths."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol":{"TokenRecoveryBase":{"abi":[{"inputs":[],"name":"InconsistentArrayLengths","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"kind":"dev","methods":{"recoverERC20s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}}},"title":"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InconsistentArrayLengths\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"kind\":\"dev\",\"methods\":{\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}}},\"title\":\"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"InconsistentArrayLengths()\":[{\"notice\":\"Thrown when the multiple related arrays have different lengths.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"kind\":\"user\",\"methods\":{\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":\"TokenRecoveryBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0xe1641af73913734b212608859490f9ed908e05b496b93f91394ef68b05149da7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InconsistentArrayLengths} from \\\"./../../CommonErrors.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract TokenRecoveryBase is Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            accounts[i].sendValue(amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            tokens[i].safeTransfer(accounts[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x93fcfd049c5a3c644cf65da5397ff4ec99e2f4dce32490513fa6439ee669ee34\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xb3e4a62f3cd743d7bc3b1483cbcf73d3f97b711ed707fcc833dcfb46a3bd883c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"InconsistentArrayLengths()":[{"notice":"Thrown when the multiple related arrays have different lengths."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"kind":"user","methods":{"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol":{"IERC1155Mintable":{"abi":[{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeMint","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x5190c92c.","kind":"dev","methods":{"safeBatchMint(address,uint256[],uint256[],bytes)":{"details":"Reverts if `ids` and `values` have different lengths.Reverts if `to` is the zero address.Reverts if `to`'s balance overflows for one of `ids`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.Emits an {IERC1155-TransferBatch} event.","params":{"data":"Optional data to send along to a receiver contract.","ids":"Identifiers of the tokens to mint.","to":"Address of the new tokens owner.","values":"Amounts of tokens to mint."}},"safeMint(address,uint256,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if `to`'s balance of `id` overflows.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.Emits an {IERC1155-TransferSingle} event.","params":{"data":"Optional data to send along to a receiver contract.","id":"Identifier of the token to mint.","to":"Address of the new token owner.","value":"Amount of token to mint."}}},"title":"ERC1155 Multi Token Standard, optional extension: Mintable.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"safeBatchMint(address,uint256[],uint256[],bytes)":"0d6a5bbb","safeMint(address,uint256,uint256,bytes)":"5cfa9297"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x5190c92c.\",\"kind\":\"dev\",\"methods\":{\"safeBatchMint(address,uint256[],uint256[],bytes)\":{\"details\":\"Reverts if `ids` and `values` have different lengths.Reverts if `to` is the zero address.Reverts if `to`'s balance overflows for one of `ids`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.Emits an {IERC1155-TransferBatch} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"ids\":\"Identifiers of the tokens to mint.\",\"to\":\"Address of the new tokens owner.\",\"values\":\"Amounts of tokens to mint.\"}},\"safeMint(address,uint256,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `to`'s balance of `id` overflows.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.Emits an {IERC1155-TransferSingle} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"id\":\"Identifier of the token to mint.\",\"to\":\"Address of the new token owner.\",\"value\":\"Amount of token to mint.\"}}},\"title\":\"ERC1155 Multi Token Standard, optional extension: Mintable.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"safeBatchMint(address,uint256[],uint256[],bytes)\":{\"notice\":\"Safely mints a batch of tokens.\"},\"safeMint(address,uint256,uint256,bytes)\":{\"notice\":\"Safely mints some token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":\"IERC1155Mintable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\\ninterface IERC1155Mintable {\\n    /// @notice Safely mints some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely mints a batch of tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xe7b1645bd7a2745c96cece104c3ef4ef07552b5ad35b2cbbf6926f85885a409f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"safeBatchMint(address,uint256[],uint256[],bytes)":{"notice":"Safely mints a batch of tokens."},"safeMint(address,uint256,uint256,bytes)":{"notice":"Safely mints some token."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol":{"ERC20Receiver":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC20Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","kind":"dev","methods":{"onERC20Received(address,address,uint256,bytes)":{"details":"Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.","params":{"data":"Optional additional data with no specified format.","from":"The previous tokens owner.","operator":"The initiator of the safe transfer.","value":"The amount of tokens transferred."},"returns":{"magicValue":"`bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC20 Fungible Token Standard, Receiver (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC20Received(address,address,uint256,bytes)":"4fc35859","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC20Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"kind\":\"dev\",\"methods\":{\"onERC20Received(address,address,uint256,bytes)\":{\"details\":\"Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\",\"params\":{\"data\":\"Optional additional data with no specified format.\",\"from\":\"The previous tokens owner.\",\"operator\":\"The initiator of the safe transfer.\",\"value\":\"The amount of tokens transferred.\"},\"returns\":{\"magicValue\":\"`bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC20 Fungible Token Standard, Receiver (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}]},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Marks the following ERC165 interface(s) as supported: ERC20Receiver.\"},\"onERC20Received(address,address,uint256,bytes)\":{\"notice\":\"Handles the receipt of ERC20 tokens.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\":\"ERC20Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC20Receiver} from \\\"./interfaces/IERC20Receiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20Receiver is IERC20Receiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Receiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Receiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0xa251f9496fb7e6034f007615a9882f1bbb1c3b8fa79f8eacde92549a92fe9ac4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xde544cd110ba40b2e9dad7ae46d2764be54ae09028f32bb45893f64f25f9282d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}]},"kind":"user","methods":{"constructor":{"notice":"Marks the following ERC165 interface(s) as supported: ERC20Receiver."},"onERC20Received(address,address,uint256,bytes)":{"notice":"Handles the receipt of ERC20 tokens."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol":{"IERC20Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC20Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x4fc35859.","kind":"dev","methods":{"onERC20Received(address,address,uint256,bytes)":{"details":"Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.","params":{"data":"Optional additional data with no specified format.","from":"The previous tokens owner.","operator":"The initiator of the safe transfer.","value":"The amount of tokens transferred."},"returns":{"magicValue":"`bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse."}}},"title":"ERC20 Token Standard, Tokens Receiver.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC20Received(address,address,uint256,bytes)":"4fc35859"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC20Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x4fc35859.\",\"kind\":\"dev\",\"methods\":{\"onERC20Received(address,address,uint256,bytes)\":{\"details\":\"Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\",\"params\":{\"data\":\"Optional additional data with no specified format.\",\"from\":\"The previous tokens owner.\",\"operator\":\"The initiator of the safe transfer.\",\"value\":\"The amount of tokens transferred.\"},\"returns\":{\"magicValue\":\"`bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\"}}},\"title\":\"ERC20 Token Standard, Tokens Receiver.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onERC20Received(address,address,uint256,bytes)\":{\"notice\":\"Handles the receipt of ERC20 tokens.\"}},\"notice\":\"Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":\"IERC20Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xde544cd110ba40b2e9dad7ae46d2764be54ae09028f32bb45893f64f25f9282d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"onERC20Received(address,address,uint256,bytes)":{"notice":"Handles the receipt of ERC20 tokens."}},"notice":"Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol":{"IERC20SafeTransfers":{"abi":[{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransfer","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x53f41a97.","kind":"dev","methods":{"safeTransfer(address,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.","params":{"data":"Optional additional data with no specified format, to be passed to the receiver contract.","to":"The account to transfer the tokens to.","value":"The amount of tokens to transfer."},"returns":{"result":"Whether the operation succeeded."}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).","params":{"data":"Optional additional data with no specified format, to be passed to the receiver contract.","from":"The account which owns the tokens to transfer.","to":"The account to transfer the tokens to.","value":"The amount of tokens to transfer."},"returns":{"result":"Whether the operation succeeded."}}},"title":"ERC20 Token Standard, optional extension: Safe Transfers.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"safeTransfer(address,uint256,bytes)":"eb795549","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x53f41a97.\",\"kind\":\"dev\",\"methods\":{\"safeTransfer(address,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.\",\"params\":{\"data\":\"Optional additional data with no specified format, to be passed to the receiver contract.\",\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\",\"params\":{\"data\":\"Optional additional data with no specified format, to be passed to the receiver contract.\",\"from\":\"The account which owns the tokens to transfer.\",\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}}},\"title\":\"ERC20 Token Standard, optional extension: Safe Transfers.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"safeTransfer(address,uint256,bytes)\":{\"notice\":\"Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":\"IERC20SafeTransfers\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(address to, uint256 value, bytes calldata data) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(address from, address to, uint256 value, bytes calldata data) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xc9399f37c845bce36c42eb3fbbdf7e6d10e25389d9ba5262302f8e6ab7bafeda\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"safeTransfer(address,uint256,bytes)":{"notice":"Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it."},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"IERC721":{"abi":[{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"approved","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"approvedForAll","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721This interface only contains the standard functions. See IERC721Events for the events.Note: The ERC-165 identifier for this interface is 0x80ac58cd.","kind":"dev","methods":{"approve(address,uint256)":{"details":"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.","params":{"to":"The address to approve, or the zero address to remove any existing approval.","tokenId":"The token identifier to give approval for."}},"balanceOf(address)":{"details":"Reverts if `owner` is the zero address.","params":{"owner":"The address to query the balance of."},"returns":{"balance":"The amount owned by the owner."}},"getApproved(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the approval of."},"returns":{"approved":"The approved address for the token identifier, or the zero address if no approval is set."}},"isApprovedForAll(address,address)":{"params":{"operator":"The address which receives the approval for all tokens.","owner":"The address which gives the approval for all tokens."},"returns":{"approvedForAll":"Whether the operator is approved for all tokens by the owner."}},"ownerOf(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the owner of."},"returns":{"tokenOwner":"The owner of the token identifier."}},"safeTransferFrom(address,address,uint256)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"setApprovalForAll(address,bool)":{"details":"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.","params":{"approved":"True to set an approval for all tokens, false to unset it.","operator":"The address to approve for all tokens."}},"transferFrom(address,address,uint256)":{"details":"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer. Self-transfers are possible.","tokenId":"The identifier of the token to transfer."}}},"title":"ERC721 Non-Fungible Token Standard, basic interface (functions).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721This interface only contains the standard functions. See IERC721Events for the events.Note: The ERC-165 identifier for this interface is 0x80ac58cd.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.\",\"params\":{\"to\":\"The address to approve, or the zero address to remove any existing approval.\",\"tokenId\":\"The token identifier to give approval for.\"}},\"balanceOf(address)\":{\"details\":\"Reverts if `owner` is the zero address.\",\"params\":{\"owner\":\"The address to query the balance of.\"},\"returns\":{\"balance\":\"The amount owned by the owner.\"}},\"getApproved(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the approval of.\"},\"returns\":{\"approved\":\"The approved address for the token identifier, or the zero address if no approval is set.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address which receives the approval for all tokens.\",\"owner\":\"The address which gives the approval for all tokens.\"},\"returns\":{\"approvedForAll\":\"Whether the operator is approved for all tokens by the owner.\"}},\"ownerOf(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the owner of.\"},\"returns\":{\"tokenOwner\":\"The owner of the token identifier.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.\",\"params\":{\"approved\":\"True to set an approval for all tokens, false to unset it.\",\"operator\":\"The address to approve for all tokens.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer. Self-transfers are possible.\",\"tokenId\":\"The identifier of the token to transfer.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, basic interface (functions).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Sets or unsets an approval to transfer a single token on behalf of its owner.\"},\"balanceOf(address)\":{\"notice\":\"Gets the balance of an address.\"},\"getApproved(uint256)\":{\"notice\":\"Gets the approved address for a token.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Gets whether an operator is approved for all tokens by an owner.\"},\"ownerOf(uint256)\":{\"notice\":\"Gets the owner of a token.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Safely transfers the ownership of a token to a recipient.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Safely transfers the ownership of a token to a recipient.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Sets or unsets an approval to transfer all tokens on behalf of their owner.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Unsafely transfers the ownership of a token to a recipient.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xb3e4a62f3cd743d7bc3b1483cbcf73d3f97b711ed707fcc833dcfb46a3bd883c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"approve(address,uint256)":{"notice":"Sets or unsets an approval to transfer a single token on behalf of its owner."},"balanceOf(address)":{"notice":"Gets the balance of an address."},"getApproved(uint256)":{"notice":"Gets the approved address for a token."},"isApprovedForAll(address,address)":{"notice":"Gets whether an operator is approved for all tokens by an owner."},"ownerOf(uint256)":{"notice":"Gets the owner of a token."},"safeTransferFrom(address,address,uint256)":{"notice":"Safely transfers the ownership of a token to a recipient."},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Safely transfers the ownership of a token to a recipient."},"setApprovalForAll(address,bool)":{"notice":"Sets or unsets an approval to transfer all tokens on behalf of their owner."},"transferFrom(address,address,uint256)":{"notice":"Unsafely transfers the ownership of a token to a recipient."}},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"IERC20Permit":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"SafeERC20":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ff782c7e06a8771d2a20118dcf96bb822271ca3ae1e661bf3f2220f0d087e41964736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT PUSH25 0x2C7E06A8771D2A20118DCF96BB822271CA3AE1E661BF3F2220 CREATE 0xD0 DUP8 0xE4 NOT PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"701:6234:30:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;701:6234:30;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ff782c7e06a8771d2a20118dcf96bb822271ca3ae1e661bf3f2220f0d087e41964736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT PUSH25 0x2C7E06A8771D2A20118DCF96BB822271CA3AE1E661BF3F2220 CREATE 0xD0 DUP8 0xE4 NOT PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"701:6234:30:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_callOptionalReturn(contract IERC20,bytes memory)":"infinite","_callOptionalReturnBool(contract IERC20,bytes memory)":"infinite","forceApprove(contract IERC20,address,uint256)":"infinite","safeApprove(contract IERC20,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20,address,uint256)":"infinite","safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fd70d9dd573116182710f91bf78de265eddaf6985d94037c8a84064c8c34d2e764736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 REVERT PUSH17 0xD9DD573116182710F91BF78DE265EDDAF6 SWAP9 0x5D SWAP5 SUB PUSH29 0x8A84064C8C34D2E764736F6C6343000816003300000000000000000000 ","sourceMap":"194:9169:31:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9169:31;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fd70d9dd573116182710f91bf78de265eddaf6985d94037c8a84064c8c34d2e764736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 REVERT PUSH17 0xD9DD573116182710F91BF78DE265EDDAF6 SWAP9 0x5D SWAP5 SUB PUSH29 0x8A84064C8C34D2E764736F6C6343000816003300000000000000000000 ","sourceMap":"194:9169:31:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bbedbf053f3eab57d3c7ced2fc991486bae3d6c019082a2358a71e052ccdf16364736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB 0xED 0xBF SDIV EXTCODEHASH RETURNDATACOPY 0xAB JUMPI 0xD3 0xC7 0xCE 0xD2 0xFC SWAP10 EQ DUP7 0xBA 0xE3 0xD6 0xC0 NOT ADDMOD 0x2A 0x23 PC 0xA7 0x1E SDIV 0x2C 0xCD CALL PUSH4 0x64736F6C PUSH4 0x43000816 STOP CALLER ","sourceMap":"1420:2685:33:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1420:2685:33;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bbedbf053f3eab57d3c7ced2fc991486bae3d6c019082a2358a71e052ccdf16364736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB 0xED 0xBF SDIV EXTCODEHASH RETURNDATACOPY 0xAB JUMPI 0xD3 0xC7 0xCE 0xD2 0xFC SWAP10 EQ DUP7 0xBA 0xE3 0xD6 0xC0 NOT ADDMOD 0x2A 0x23 PC 0xA7 0x1E SDIV 0x2C 0xCD CALL PUSH4 0x64736F6C PUSH4 0x43000816 STOP CALLER ","sourceMap":"1420:2685:33:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getBytesSlot(bytes storage pointer)":"infinite","getBytesSlot(bytes32)":"infinite","getStringSlot(bytes32)":"infinite","getStringSlot(string storage pointer)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"MerkleProof":{"abi":[],"devdoc":{"details":"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ebc5818d3186497a28bd33c9156a5406154bf0f880ffb4a0401354b76f07d1a164736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEB 0xC5 DUP2 DUP14 BALANCE DUP7 0x49 PUSH27 0x28BD33C9156A5406154BF0F880FFB4A0401354B76F07D1A164736F PUSH13 0x63430008160033000000000000 ","sourceMap":"802:8819:34:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;802:8819:34;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ebc5818d3186497a28bd33c9156a5406154bf0f880ffb4a0401354b76f07d1a164736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEB 0xC5 DUP2 DUP14 BALANCE DUP7 0x49 PUSH27 0x28BD33C9156A5406154BF0F880FFB4A0401354B76F07D1A164736F PUSH13 0x63430008160033000000000000 ","sourceMap":"802:8819:34:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_efficientHash(bytes32,bytes32)":"infinite","_hashPair(bytes32,bytes32)":"infinite","multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory)":"infinite","multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory)":"infinite","processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory)":"infinite","processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory)":"infinite","processProof(bytes32[] memory,bytes32)":"infinite","processProofCalldata(bytes32[] calldata,bytes32)":"infinite","verify(bytes32[] memory,bytes32,bytes32)":"infinite","verifyCalldata(bytes32[] calldata,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf688741f79f4838d5301dcf72d0af9eff11bbab6ab0bb112ad144c7fb672dac\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/payment/ChaosKingdomResourcesClaim.sol":{"ChaosKingdomResourcesClaim":{"abi":[{"inputs":[{"internalType":"contract IERC20SafeTransfers","name":"feeContract","type":"address"},{"internalType":"contract IERC1155Mintable","name":"rewardContract","type":"address"},{"internalType":"address payable","name":"payoutWallet","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"uint256","name":"fee","type":"uint256"},{"internalType":"bytes32","name":"epochId","type":"bytes32"}],"name":"AlreadyClaimed","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InconsistentArrayLengths","type":"error"},{"inputs":[{"internalType":"address","name":"receivedContract","type":"address"},{"internalType":"address","name":"expectedContract","type":"address"}],"name":"InvalidFeeContract","type":"error"},{"inputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"name":"InvalidMerkleRoot","type":"error"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"uint256","name":"fee","type":"uint256"},{"internalType":"bytes32","name":"epochId","type":"bytes32"}],"name":"InvalidProof","type":"error"},{"inputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"name":"MerkleRootAlreadyExists","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[],"name":"ZeroAddressPayoutWallet","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"root","type":"bytes32"}],"name":"MerkleRootAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"root","type":"bytes32"}],"name":"MerkleRootDeprecated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"root","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"epochId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"fee","type":"uint256"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"PayoutClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"payoutWallet","type":"address"}],"name":"PayoutWalletSet","type":"event"},{"inputs":[],"name":"FEE_CONTRACT","outputs":[{"internalType":"contract IERC20SafeTransfers","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_CONTRACT","outputs":[{"internalType":"contract IERC1155Mintable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"name":"addMerkleRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"claimed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"name":"deprecateMerkleRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC20Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"payoutWallet","outputs":[{"internalType":"address payable","name":"wallet","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"roots","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address payable","name":"newPayoutWallet","type":"address"}],"name":"setPayoutWallet","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"PayoutWalletSet(address)":{"params":{"payoutWallet":"the new payout wallet address."}}},"kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"payoutWallet()":{"returns":{"wallet":"The payout wallet."}},"recoverERC20s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}},"setPayoutWallet(address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.Emits a {PayoutWalletSet} event.","params":{"newPayoutWallet":"The payout wallet."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1145":{"entryPoint":null,"id":1145,"parameterSlots":0,"returnSlots":0},"@_2914":{"entryPoint":null,"id":2914,"parameterSlots":3,"returnSlots":0},"@_42":{"entryPoint":null,"id":42,"parameterSlots":1,"returnSlots":0},"@_575":{"entryPoint":null,"id":575,"parameterSlots":1,"returnSlots":0},"@constructorInit_238":{"entryPoint":211,"id":238,"parameterSlots":2,"returnSlots":0},"@constructorInit_716":{"entryPoint":515,"id":716,"parameterSlots":2,"returnSlots":0},"@layout_394":{"entryPoint":157,"id":394,"parameterSlots":0,"returnSlots":1},"@layout_542":{"entryPoint":326,"id":542,"parameterSlots":0,"returnSlots":1},"@layout_794":{"entryPoint":467,"id":794,"parameterSlots":0,"returnSlots":1},"@setPayoutWallet_769":{"entryPoint":null,"id":769,"parameterSlots":2,"returnSlots":0},"@setSupportedInterface_496":{"entryPoint":374,"id":496,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_contract$_IERC20SafeTransfers_$1194t_contract$_IERC1155Mintable_$1111t_address_payable_fromMemory":{"entryPoint":668,"id":null,"parameterSlots":2,"returnSlots":3},"abi_encode_tuple_t_address_payable__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":752,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_contract_IERC20SafeTransfers":{"entryPoint":643,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1262:36","nodeType":"YulBlock","src":"0:1262:36","statements":[{"nativeSrc":"6:3:36","nodeType":"YulBlock","src":"6:3:36","statements":[]},{"body":{"nativeSrc":"80:86:36","nodeType":"YulBlock","src":"80:86:36","statements":[{"body":{"nativeSrc":"144:16:36","nodeType":"YulBlock","src":"144:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"153:1:36","nodeType":"YulLiteral","src":"153:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"156:1:36","nodeType":"YulLiteral","src":"156:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"146:6:36","nodeType":"YulIdentifier","src":"146:6:36"},"nativeSrc":"146:12:36","nodeType":"YulFunctionCall","src":"146:12:36"},"nativeSrc":"146:12:36","nodeType":"YulExpressionStatement","src":"146:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"103:5:36","nodeType":"YulIdentifier","src":"103:5:36"},{"arguments":[{"name":"value","nativeSrc":"114:5:36","nodeType":"YulIdentifier","src":"114:5:36"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"129:3:36","nodeType":"YulLiteral","src":"129:3:36","type":"","value":"160"},{"kind":"number","nativeSrc":"134:1:36","nodeType":"YulLiteral","src":"134:1:36","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"125:3:36","nodeType":"YulIdentifier","src":"125:3:36"},"nativeSrc":"125:11:36","nodeType":"YulFunctionCall","src":"125:11:36"},{"kind":"number","nativeSrc":"138:1:36","nodeType":"YulLiteral","src":"138:1:36","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"121:3:36","nodeType":"YulIdentifier","src":"121:3:36"},"nativeSrc":"121:19:36","nodeType":"YulFunctionCall","src":"121:19:36"}],"functionName":{"name":"and","nativeSrc":"110:3:36","nodeType":"YulIdentifier","src":"110:3:36"},"nativeSrc":"110:31:36","nodeType":"YulFunctionCall","src":"110:31:36"}],"functionName":{"name":"eq","nativeSrc":"100:2:36","nodeType":"YulIdentifier","src":"100:2:36"},"nativeSrc":"100:42:36","nodeType":"YulFunctionCall","src":"100:42:36"}],"functionName":{"name":"iszero","nativeSrc":"93:6:36","nodeType":"YulIdentifier","src":"93:6:36"},"nativeSrc":"93:50:36","nodeType":"YulFunctionCall","src":"93:50:36"},"nativeSrc":"90:70:36","nodeType":"YulIf","src":"90:70:36"}]},"name":"validator_revert_contract_IERC20SafeTransfers","nativeSrc":"14:152:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"69:5:36","nodeType":"YulTypedName","src":"69:5:36","type":""}],"src":"14:152:36"},{"body":{"nativeSrc":"347:467:36","nodeType":"YulBlock","src":"347:467:36","statements":[{"body":{"nativeSrc":"393:16:36","nodeType":"YulBlock","src":"393:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"402:1:36","nodeType":"YulLiteral","src":"402:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"405:1:36","nodeType":"YulLiteral","src":"405:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"395:6:36","nodeType":"YulIdentifier","src":"395:6:36"},"nativeSrc":"395:12:36","nodeType":"YulFunctionCall","src":"395:12:36"},"nativeSrc":"395:12:36","nodeType":"YulExpressionStatement","src":"395:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"368:7:36","nodeType":"YulIdentifier","src":"368:7:36"},{"name":"headStart","nativeSrc":"377:9:36","nodeType":"YulIdentifier","src":"377:9:36"}],"functionName":{"name":"sub","nativeSrc":"364:3:36","nodeType":"YulIdentifier","src":"364:3:36"},"nativeSrc":"364:23:36","nodeType":"YulFunctionCall","src":"364:23:36"},{"kind":"number","nativeSrc":"389:2:36","nodeType":"YulLiteral","src":"389:2:36","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"360:3:36","nodeType":"YulIdentifier","src":"360:3:36"},"nativeSrc":"360:32:36","nodeType":"YulFunctionCall","src":"360:32:36"},"nativeSrc":"357:52:36","nodeType":"YulIf","src":"357:52:36"},{"nativeSrc":"418:29:36","nodeType":"YulVariableDeclaration","src":"418:29:36","value":{"arguments":[{"name":"headStart","nativeSrc":"437:9:36","nodeType":"YulIdentifier","src":"437:9:36"}],"functionName":{"name":"mload","nativeSrc":"431:5:36","nodeType":"YulIdentifier","src":"431:5:36"},"nativeSrc":"431:16:36","nodeType":"YulFunctionCall","src":"431:16:36"},"variables":[{"name":"value","nativeSrc":"422:5:36","nodeType":"YulTypedName","src":"422:5:36","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"502:5:36","nodeType":"YulIdentifier","src":"502:5:36"}],"functionName":{"name":"validator_revert_contract_IERC20SafeTransfers","nativeSrc":"456:45:36","nodeType":"YulIdentifier","src":"456:45:36"},"nativeSrc":"456:52:36","nodeType":"YulFunctionCall","src":"456:52:36"},"nativeSrc":"456:52:36","nodeType":"YulExpressionStatement","src":"456:52:36"},{"nativeSrc":"517:15:36","nodeType":"YulAssignment","src":"517:15:36","value":{"name":"value","nativeSrc":"527:5:36","nodeType":"YulIdentifier","src":"527:5:36"},"variableNames":[{"name":"value0","nativeSrc":"517:6:36","nodeType":"YulIdentifier","src":"517:6:36"}]},{"nativeSrc":"541:40:36","nodeType":"YulVariableDeclaration","src":"541:40:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"566:9:36","nodeType":"YulIdentifier","src":"566:9:36"},{"kind":"number","nativeSrc":"577:2:36","nodeType":"YulLiteral","src":"577:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"562:3:36","nodeType":"YulIdentifier","src":"562:3:36"},"nativeSrc":"562:18:36","nodeType":"YulFunctionCall","src":"562:18:36"}],"functionName":{"name":"mload","nativeSrc":"556:5:36","nodeType":"YulIdentifier","src":"556:5:36"},"nativeSrc":"556:25:36","nodeType":"YulFunctionCall","src":"556:25:36"},"variables":[{"name":"value_1","nativeSrc":"545:7:36","nodeType":"YulTypedName","src":"545:7:36","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"636:7:36","nodeType":"YulIdentifier","src":"636:7:36"}],"functionName":{"name":"validator_revert_contract_IERC20SafeTransfers","nativeSrc":"590:45:36","nodeType":"YulIdentifier","src":"590:45:36"},"nativeSrc":"590:54:36","nodeType":"YulFunctionCall","src":"590:54:36"},"nativeSrc":"590:54:36","nodeType":"YulExpressionStatement","src":"590:54:36"},{"nativeSrc":"653:17:36","nodeType":"YulAssignment","src":"653:17:36","value":{"name":"value_1","nativeSrc":"663:7:36","nodeType":"YulIdentifier","src":"663:7:36"},"variableNames":[{"name":"value1","nativeSrc":"653:6:36","nodeType":"YulIdentifier","src":"653:6:36"}]},{"nativeSrc":"679:40:36","nodeType":"YulVariableDeclaration","src":"679:40:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"704:9:36","nodeType":"YulIdentifier","src":"704:9:36"},{"kind":"number","nativeSrc":"715:2:36","nodeType":"YulLiteral","src":"715:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"700:3:36","nodeType":"YulIdentifier","src":"700:3:36"},"nativeSrc":"700:18:36","nodeType":"YulFunctionCall","src":"700:18:36"}],"functionName":{"name":"mload","nativeSrc":"694:5:36","nodeType":"YulIdentifier","src":"694:5:36"},"nativeSrc":"694:25:36","nodeType":"YulFunctionCall","src":"694:25:36"},"variables":[{"name":"value_2","nativeSrc":"683:7:36","nodeType":"YulTypedName","src":"683:7:36","type":""}]},{"expression":{"arguments":[{"name":"value_2","nativeSrc":"774:7:36","nodeType":"YulIdentifier","src":"774:7:36"}],"functionName":{"name":"validator_revert_contract_IERC20SafeTransfers","nativeSrc":"728:45:36","nodeType":"YulIdentifier","src":"728:45:36"},"nativeSrc":"728:54:36","nodeType":"YulFunctionCall","src":"728:54:36"},"nativeSrc":"728:54:36","nodeType":"YulExpressionStatement","src":"728:54:36"},{"nativeSrc":"791:17:36","nodeType":"YulAssignment","src":"791:17:36","value":{"name":"value_2","nativeSrc":"801:7:36","nodeType":"YulIdentifier","src":"801:7:36"},"variableNames":[{"name":"value2","nativeSrc":"791:6:36","nodeType":"YulIdentifier","src":"791:6:36"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20SafeTransfers_$1194t_contract$_IERC1155Mintable_$1111t_address_payable_fromMemory","nativeSrc":"171:643:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"297:9:36","nodeType":"YulTypedName","src":"297:9:36","type":""},{"name":"dataEnd","nativeSrc":"308:7:36","nodeType":"YulTypedName","src":"308:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"320:6:36","nodeType":"YulTypedName","src":"320:6:36","type":""},{"name":"value1","nativeSrc":"328:6:36","nodeType":"YulTypedName","src":"328:6:36","type":""},{"name":"value2","nativeSrc":"336:6:36","nodeType":"YulTypedName","src":"336:6:36","type":""}],"src":"171:643:36"},{"body":{"nativeSrc":"868:176:36","nodeType":"YulBlock","src":"868:176:36","statements":[{"nativeSrc":"878:17:36","nodeType":"YulAssignment","src":"878:17:36","value":{"arguments":[{"name":"x","nativeSrc":"890:1:36","nodeType":"YulIdentifier","src":"890:1:36"},{"name":"y","nativeSrc":"893:1:36","nodeType":"YulIdentifier","src":"893:1:36"}],"functionName":{"name":"sub","nativeSrc":"886:3:36","nodeType":"YulIdentifier","src":"886:3:36"},"nativeSrc":"886:9:36","nodeType":"YulFunctionCall","src":"886:9:36"},"variableNames":[{"name":"diff","nativeSrc":"878:4:36","nodeType":"YulIdentifier","src":"878:4:36"}]},{"body":{"nativeSrc":"927:111:36","nodeType":"YulBlock","src":"927:111:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"948:1:36","nodeType":"YulLiteral","src":"948:1:36","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"955:3:36","nodeType":"YulLiteral","src":"955:3:36","type":"","value":"224"},{"kind":"number","nativeSrc":"960:10:36","nodeType":"YulLiteral","src":"960:10:36","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"951:3:36","nodeType":"YulIdentifier","src":"951:3:36"},"nativeSrc":"951:20:36","nodeType":"YulFunctionCall","src":"951:20:36"}],"functionName":{"name":"mstore","nativeSrc":"941:6:36","nodeType":"YulIdentifier","src":"941:6:36"},"nativeSrc":"941:31:36","nodeType":"YulFunctionCall","src":"941:31:36"},"nativeSrc":"941:31:36","nodeType":"YulExpressionStatement","src":"941:31:36"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"992:1:36","nodeType":"YulLiteral","src":"992:1:36","type":"","value":"4"},{"kind":"number","nativeSrc":"995:4:36","nodeType":"YulLiteral","src":"995:4:36","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"985:6:36","nodeType":"YulIdentifier","src":"985:6:36"},"nativeSrc":"985:15:36","nodeType":"YulFunctionCall","src":"985:15:36"},"nativeSrc":"985:15:36","nodeType":"YulExpressionStatement","src":"985:15:36"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1020:1:36","nodeType":"YulLiteral","src":"1020:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"1023:4:36","nodeType":"YulLiteral","src":"1023:4:36","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1013:6:36","nodeType":"YulIdentifier","src":"1013:6:36"},"nativeSrc":"1013:15:36","nodeType":"YulFunctionCall","src":"1013:15:36"},"nativeSrc":"1013:15:36","nodeType":"YulExpressionStatement","src":"1013:15:36"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"910:4:36","nodeType":"YulIdentifier","src":"910:4:36"},{"name":"x","nativeSrc":"916:1:36","nodeType":"YulIdentifier","src":"916:1:36"}],"functionName":{"name":"gt","nativeSrc":"907:2:36","nodeType":"YulIdentifier","src":"907:2:36"},"nativeSrc":"907:11:36","nodeType":"YulFunctionCall","src":"907:11:36"},"nativeSrc":"904:134:36","nodeType":"YulIf","src":"904:134:36"}]},"name":"checked_sub_t_uint256","nativeSrc":"819:225:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"850:1:36","nodeType":"YulTypedName","src":"850:1:36","type":""},{"name":"y","nativeSrc":"853:1:36","nodeType":"YulTypedName","src":"853:1:36","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"859:4:36","nodeType":"YulTypedName","src":"859:4:36","type":""}],"src":"819:225:36"},{"body":{"nativeSrc":"1158:102:36","nodeType":"YulBlock","src":"1158:102:36","statements":[{"nativeSrc":"1168:26:36","nodeType":"YulAssignment","src":"1168:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"1180:9:36","nodeType":"YulIdentifier","src":"1180:9:36"},{"kind":"number","nativeSrc":"1191:2:36","nodeType":"YulLiteral","src":"1191:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1176:3:36","nodeType":"YulIdentifier","src":"1176:3:36"},"nativeSrc":"1176:18:36","nodeType":"YulFunctionCall","src":"1176:18:36"},"variableNames":[{"name":"tail","nativeSrc":"1168:4:36","nodeType":"YulIdentifier","src":"1168:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1210:9:36","nodeType":"YulIdentifier","src":"1210:9:36"},{"arguments":[{"name":"value0","nativeSrc":"1225:6:36","nodeType":"YulIdentifier","src":"1225:6:36"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"1241:3:36","nodeType":"YulLiteral","src":"1241:3:36","type":"","value":"160"},{"kind":"number","nativeSrc":"1246:1:36","nodeType":"YulLiteral","src":"1246:1:36","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"1237:3:36","nodeType":"YulIdentifier","src":"1237:3:36"},"nativeSrc":"1237:11:36","nodeType":"YulFunctionCall","src":"1237:11:36"},{"kind":"number","nativeSrc":"1250:1:36","nodeType":"YulLiteral","src":"1250:1:36","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"1233:3:36","nodeType":"YulIdentifier","src":"1233:3:36"},"nativeSrc":"1233:19:36","nodeType":"YulFunctionCall","src":"1233:19:36"}],"functionName":{"name":"and","nativeSrc":"1221:3:36","nodeType":"YulIdentifier","src":"1221:3:36"},"nativeSrc":"1221:32:36","nodeType":"YulFunctionCall","src":"1221:32:36"}],"functionName":{"name":"mstore","nativeSrc":"1203:6:36","nodeType":"YulIdentifier","src":"1203:6:36"},"nativeSrc":"1203:51:36","nodeType":"YulFunctionCall","src":"1203:51:36"},"nativeSrc":"1203:51:36","nodeType":"YulExpressionStatement","src":"1203:51:36"}]},"name":"abi_encode_tuple_t_address_payable__to_t_address__fromStack_reversed","nativeSrc":"1049:211:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1127:9:36","nodeType":"YulTypedName","src":"1127:9:36","type":""},{"name":"value0","nativeSrc":"1138:6:36","nodeType":"YulTypedName","src":"1138:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1149:4:36","nodeType":"YulTypedName","src":"1149:4:36","type":""}],"src":"1049:211:36"}]},"contents":"{\n    { }\n    function validator_revert_contract_IERC20SafeTransfers(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_IERC20SafeTransfers_$1194t_contract$_IERC1155Mintable_$1111t_address_payable_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_IERC20SafeTransfers(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_contract_IERC20SafeTransfers(value_1)\n        value1 := value_1\n        let value_2 := mload(add(headStart, 64))\n        validator_revert_contract_IERC20SafeTransfers(value_2)\n        value2 := value_2\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_address_payable__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n}","id":36,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x205A CODESIZE SUB DUP1 PUSH3 0x205A DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x29C JUMP JUMPDEST DUP1 CALLER PUSH3 0x4C DUP2 PUSH3 0x45 PUSH3 0x9D JUMP JUMPDEST SWAP1 PUSH3 0xD3 JUMP JUMPDEST POP PUSH3 0x6D PUSH4 0x4FC35859 PUSH1 0xE0 SHL PUSH1 0x1 PUSH3 0x65 PUSH3 0x146 JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x176 JUMP JUMPDEST PUSH3 0x83 DUP2 PUSH3 0x7C PUSH3 0x1D3 JUMP JUMPDEST SWAP1 PUSH3 0x203 JUMP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0xA0 MSTORE AND PUSH1 0x80 MSTORE PUSH3 0x312 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xCD PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x2F0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x12A JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x142 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x65 PUSH3 0x146 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xCD PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x2F0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x1A5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xCD PUSH1 0x1 PUSH32 0x4FB5F8CDFBCE77F22B0931A39E9F476A60A0F66524B2F379E96485471EB700AE PUSH3 0x2F0 JUMP JUMPDEST PUSH3 0x142 DUP3 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x231 JUMPI PUSH1 0x40 MLOAD PUSH4 0x40B539CF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xDD880D24A789958A6398C99C2E54CE31BC10A638CBC42F7DD34285479AE0F855 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x299 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x2B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD PUSH3 0x2BF DUP2 PUSH3 0x283 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH3 0x2D2 DUP2 PUSH3 0x283 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x2E5 DUP2 PUSH3 0x283 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0xCD JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0x1D06 PUSH3 0x354 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x127 ADD MSTORE DUP2 DUP2 PUSH2 0x44B ADD MSTORE DUP2 DUP2 PUSH2 0x4C9 ADD MSTORE PUSH2 0x6D8 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x19B ADD MSTORE PUSH2 0x7BE ADD MSTORE PUSH2 0x1D06 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x73C8A958 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xC3666C36 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x25A JUMPI DUP1 PUSH4 0xCC3C0F06 EQ PUSH2 0x26D JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x290 JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x2A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x214 JUMPI DUP1 PUSH4 0x8488BB4E EQ PUSH2 0x227 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x22F JUMPI DUP1 PUSH4 0xAE6DEAD7 EQ PUSH2 0x237 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3572AA8D GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x3572AA8D EQ PUSH2 0x183 JUMPI DUP1 PUSH4 0x3A5AF339 EQ PUSH2 0x196 JUMPI DUP1 PUSH4 0x4FC35859 EQ PUSH2 0x1BD JUMPI DUP1 PUSH4 0x6B8F9C43 EQ PUSH2 0x201 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x1352ACAC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x3323C807 EQ PUSH2 0x16E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10D PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0x1569 JUMP JUMPDEST PUSH2 0x2B6 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x149 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x119 JUMP JUMPDEST PUSH2 0x181 PUSH2 0x17C CALLDATASIZE PUSH1 0x4 PUSH2 0x15AB JUMP JUMPDEST PUSH2 0x2D0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x181 PUSH2 0x191 CALLDATASIZE PUSH1 0x4 PUSH2 0x15AB JUMP JUMPDEST PUSH2 0x395 JUMP JUMPDEST PUSH2 0x149 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1D0 PUSH2 0x1CB CALLDATASIZE PUSH1 0x4 PUSH2 0x15E6 JUMP JUMPDEST PUSH2 0x447 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x119 JUMP JUMPDEST PUSH2 0x181 PUSH2 0x20F CALLDATASIZE PUSH1 0x4 PUSH2 0x1695 JUMP JUMPDEST PUSH2 0x8B0 JUMP JUMPDEST PUSH2 0x181 PUSH2 0x222 CALLDATASIZE PUSH1 0x4 PUSH2 0x16FE JUMP JUMPDEST PUSH2 0x8CE JUMP JUMPDEST PUSH2 0x149 PUSH2 0x9C2 JUMP JUMPDEST PUSH2 0x149 PUSH2 0x9D4 JUMP JUMPDEST PUSH2 0x10D PUSH2 0x245 CALLDATASIZE PUSH1 0x4 PUSH2 0x15AB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x181 PUSH2 0x268 CALLDATASIZE PUSH1 0x4 PUSH2 0x16FE JUMP JUMPDEST PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0x10D PUSH2 0x27B CALLDATASIZE PUSH1 0x4 PUSH2 0x15AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x181 PUSH2 0x29E CALLDATASIZE PUSH1 0x4 PUSH2 0x1695 JUMP JUMPDEST PUSH2 0xB57 JUMP JUMPDEST PUSH2 0x181 PUSH2 0x2B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1798 JUMP JUMPDEST PUSH2 0xB6B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CA DUP3 PUSH2 0x2C4 PUSH2 0xC28 JUMP JUMPDEST SWAP1 PUSH2 0xC56 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2E3 CALLER JUMPDEST PUSH2 0x2DD PUSH2 0xD30 JUMP JUMPDEST SWAP1 PUSH2 0xD5E JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x334 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5D35DE3700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD DUP3 SWAP2 PUSH32 0xBDD203DD78BF49CF79E4DB0ECDF7D27ADC380FB1F33BEEF2667A50DB9D2A0E04 SWAP2 LOG2 POP JUMP JUMPDEST PUSH2 0x39E CALLER PUSH2 0x2D5 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x3E9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6D82574300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x32B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE MLOAD DUP3 SWAP2 PUSH32 0x578EAB65D47CFFA57066B105301289FF86BFDC0ADC2A701C3356D2A6EB6A6123 SWAP2 LOG2 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x4F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1DB090900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x32B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x509 DUP9 DUP11 ADD DUP11 PUSH2 0x1915 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP6 SWAP12 POP SWAP4 SWAP10 POP SWAP2 SWAP8 POP SWAP6 POP SWAP4 POP SWAP2 POP PUSH1 0xFF AND PUSH2 0x563 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6D82574300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x32B JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP4 DUP14 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x57E SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A4B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH2 0x5C1 DUP6 DUP9 DUP4 PUSH2 0xDCD JUMP JUMPDEST PUSH2 0x601 JUMPI DUP4 DUP4 DUP4 DUP14 DUP10 PUSH1 0x40 MLOAD PUSH32 0xDBF2AC7C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32B SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1ACC JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x654 JUMPI DUP4 DUP4 DUP4 DUP14 DUP10 PUSH1 0x40 MLOAD PUSH32 0xF048F37A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32B SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1ACC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x67B PUSH2 0x661 PUSH2 0xDE3 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xEB79554900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP16 SWAP1 MSTORE PUSH1 0x60 PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x64 DUP4 ADD MSTORE SWAP2 SWAP3 POP PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0xEB795549 SWAP1 PUSH1 0x84 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x723 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x747 SWAP2 SWAP1 PUSH2 0x1B22 JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SWAP2 OR SWAP1 SSTORE MLOAD PUSH32 0xD6A5BBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xD6A5BBB SWAP1 PUSH2 0x7F7 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1B44 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x811 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x825 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 DUP10 PUSH32 0xBF561A0AE8123352ABF33F8F113E6B265C2E7FE7BA9B4D450750454BCBB7233A DUP16 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH2 0x875 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1BA1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH32 0x4FC3585900000000000000000000000000000000000000000000000000000000 SWAP14 SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x8B9 CALLER PUSH2 0x2D5 JUMP JUMPDEST PUSH2 0x8CB DUP2 PUSH2 0x8C5 PUSH2 0xDE3 JUMP JUMPDEST SWAP1 PUSH2 0xE11 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x8D7 CALLER PUSH2 0x2D5 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x8E7 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x91E JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9B8 JUMPI PUSH2 0x9B0 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x93E JUMPI PUSH2 0x93E PUSH2 0x1BD6 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x953 SWAP2 SWAP1 PUSH2 0x1695 JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x965 JUMPI PUSH2 0x965 PUSH2 0x1BD6 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x97E JUMPI PUSH2 0x97E PUSH2 0x1BD6 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x993 SWAP2 SWAP1 PUSH2 0x1695 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0xED5 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x921 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9CF PUSH2 0x661 PUSH2 0xDE3 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9CF PUSH2 0x661 PUSH2 0xD30 JUMP JUMPDEST PUSH2 0x9EA CALLER PUSH2 0x2D5 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x9FA JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0xA31 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9B8 JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0xA4E JUMPI PUSH2 0xA4E PUSH2 0x1BD6 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xA63 SWAP2 SWAP1 PUSH2 0x1695 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD ADDRESS DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0xA91 JUMPI PUSH2 0xA91 PUSH2 0x1BD6 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xAA6 SWAP2 SWAP1 PUSH2 0x1695 JUMP JUMPDEST DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0xAB8 JUMPI PUSH2 0xAB8 PUSH2 0x1BD6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB48 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0xA34 JUMP JUMPDEST PUSH2 0x8CB CALLER DUP3 PUSH2 0xB64 PUSH2 0xD30 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xF67 JUMP JUMPDEST PUSH2 0xB74 CALLER PUSH2 0x2D5 JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0xBAE JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xC20 JUMPI PUSH2 0xC18 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0xBCE JUMPI PUSH2 0xBCE PUSH2 0x1BD6 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0xBE7 JUMPI PUSH2 0xBE7 PUSH2 0x1BD6 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xBFC SWAP2 SWAP1 PUSH2 0x1695 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x107C JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xBB1 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2CA PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1C05 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xCA6 JUMPI POP PUSH1 0x0 PUSH2 0x2CA JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xCF7 JUMPI POP PUSH1 0x1 PUSH2 0x2CA JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2CA PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x1C05 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xDC9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x32B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xDDA DUP6 DUP5 PUSH2 0x11D6 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2CA PUSH1 0x1 PUSH32 0x4FB5F8CDFBCE77F22B0931A39E9F476A60A0F66524B2F379E96485471EB700AE PUSH2 0x1C05 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xE5E JUMPI PUSH1 0x40 MLOAD PUSH32 0x40B539CF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xDD880D24A789958A6398C99C2E54CE31BC10A638CBC42F7DD34285479AE0F855 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0xF62 SWAP1 DUP5 SWAP1 PUSH2 0x1219 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xFD4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x32B JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1076 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x10E6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x32B JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1140 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1145 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xF62 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x32B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x1211 JUMPI PUSH2 0x1207 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x11FA JUMPI PUSH2 0x11FA PUSH2 0x1BD6 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1328 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x11DB JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x127B DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x135A SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x129C JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x129C SWAP2 SWAP1 PUSH2 0x1B22 JUMP JUMPDEST PUSH2 0xF62 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x32B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x1344 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x1353 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1369 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1371 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1403 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x32B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x142C SWAP2 SWAP1 PUSH2 0x1C63 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1469 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x146E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x147F DUP8 DUP4 DUP4 DUP8 PUSH2 0x148A JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1520 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x1519 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x1519 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x32B JUMP JUMPDEST POP DUP2 PUSH2 0x1369 JUMP JUMPDEST PUSH2 0x1369 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x1535 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32B SWAP2 SWAP1 PUSH2 0x1C7F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x157B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x1353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x8CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x15FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1609 DUP2 PUSH2 0x15C4 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x1619 DUP2 PUSH2 0x15C4 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x163D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1660 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1672 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH1 0x20 ADD SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1690 DUP2 PUSH2 0x15C4 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1353 DUP2 PUSH2 0x15C4 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x16C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x16DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x16F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1717 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x172F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x173B DUP11 DUP4 DUP12 ADD PUSH2 0x16B2 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1754 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1760 DUP11 DUP4 DUP12 ADD PUSH2 0x16B2 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1779 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1786 DUP10 DUP3 DUP11 ADD PUSH2 0x16B2 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x17AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x17C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17D2 DUP9 DUP4 DUP10 ADD PUSH2 0x16B2 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x17EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17F8 DUP8 DUP3 DUP9 ADD PUSH2 0x16B2 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x187A JUMPI PUSH2 0x187A PUSH2 0x1804 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x189C JUMPI PUSH2 0x189C PUSH2 0x1804 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x18B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x18CC PUSH2 0x18C7 DUP4 PUSH2 0x1882 JUMP JUMPDEST PUSH2 0x1833 JUMP JUMPDEST DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP5 PUSH1 0x5 SHL DUP8 ADD ADD SWAP4 POP DUP7 DUP5 GT ISZERO PUSH2 0x18EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x190A JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x18F3 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x192E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP1 DUP9 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1955 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP11 ADD SWAP2 POP DUP11 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1969 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1977 PUSH2 0x18C7 DUP3 PUSH2 0x1882 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP4 ADD DUP5 ADD SWAP1 DUP5 DUP2 ADD SWAP1 DUP14 DUP4 GT ISZERO PUSH2 0x1996 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x19B4 JUMPI DUP5 CALLDATALOAD DUP3 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP1 DUP6 ADD SWAP1 PUSH2 0x199B JUMP JUMPDEST SWAP9 POP PUSH2 0x19C5 SWAP2 POP POP PUSH1 0x60 DUP12 ADD PUSH2 0x1685 JUMP JUMPDEST SWAP6 POP PUSH1 0x80 DUP11 ADD CALLDATALOAD SWAP3 POP DUP1 DUP4 GT ISZERO PUSH2 0x19DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19E7 DUP12 DUP5 DUP13 ADD PUSH2 0x18A6 JUMP JUMPDEST SWAP5 POP PUSH1 0xA0 DUP11 ADD CALLDATALOAD SWAP3 POP DUP1 DUP4 GT ISZERO PUSH2 0x19FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH2 0x1A0B DUP10 DUP3 DUP11 ADD PUSH2 0x18A6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x20 DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1A40 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1A24 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP7 PUSH1 0x60 SHL AND DUP2 MSTORE PUSH1 0x0 PUSH2 0x1A8B PUSH2 0x1A85 PUSH1 0x14 DUP5 ADD DUP9 PUSH2 0x1A18 JUMP JUMPDEST DUP7 PUSH2 0x1A18 JUMP JUMPDEST SWAP4 DUP5 MSTORE POP POP PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD DUP1 DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 PUSH1 0x0 SWAP2 SWAP1 DUP1 DUP5 ADD DUP4 DUP4 ISZERO PUSH2 0x1A40 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1A24 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0xA0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1AFB PUSH1 0xA0 DUP4 ADD DUP8 PUSH2 0x1A9F JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1B0D DUP2 DUP8 PUSH2 0x1A9F JUMP JUMPDEST PUSH1 0x60 DUP5 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP PUSH1 0x80 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1B73 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x1A9F JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1B85 DUP2 DUP6 PUSH2 0x1A9F JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x60 SWAP1 SWAP5 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1BBA PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x1A9F JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1BCC DUP2 DUP6 PUSH2 0x1A9F JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x2CA JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1C5A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1C42 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1C75 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1C3F JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1C9E DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1C3F JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD4 0xA6 DIV 0xBA 0x2F EXP 0xE8 0xEE LT SWAP13 0xAE 0xAF PUSH31 0xDBE78B377CD20857F27E00A5D78FF712B35C1E64736F6C6343000816003300 ","sourceMap":"1198:3247:35:-:0;;;2333:280;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2514:12;2489:10;1008:63:1;2489:10:35;1008:33:1;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;736:96:23;-1:-1:-1;;;827:4:23;736:34;:32;:34::i;:::-;:56;:96;:56;:96::i;:::-;881:65:12;926:19;881:28;:26;:28::i;:::-;:44;;:65::i;:::-;-1:-1:-1;;;;;;;2538:26:35;;::::2;;::::0;2574:32:::2;;::::0;1198:3247;;5065:174:7;5106:16;;926:71;996:1;934:58;926:71;:::i;:::-;918:80;5065:174;-1:-1:-1;;5065:174:7:o;1567:341::-;-1:-1:-1;;;;;1655:26:7;;;1651:152;;1697:30;;-1:-1:-1;;;;;;1697:30:7;-1:-1:-1;;;;;1697:30:7;;;;;;;1746:46;;-1:-1:-1;;1746:46:7;;-1:-1:-1;;1746:46:7;1651:152;1812:89;-1:-1:-1;;;1896:4:7;1812:34;:32;:34::i;:89::-;1567:341;;:::o;1705:174:11:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:11;;;877:68;;925:20;;-1:-1:-1;;;925:20:11;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:11;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:11;;;;;;;;;;773:235::o;2736:174:17:-;2777:16;;500:67;566:1;508:54;500:67;:::i;1116:144::-;1215:38;:1;1233:19;-1:-1:-1;;;;;2377:29:17;;2373:67;;2415:25;;-1:-1:-1;;;2415:25:17;;;;;;;;;;;2373:67;2450:26;;-1:-1:-1;;;;;;2450:26:17;-1:-1:-1;;;;;2450:26:17;;;;;;;2491:32;;1203:51:36;;;2491:32:17;;1191:2:36;1176:18;2491:32:17;;;;;;;2278:252;;:::o;14:152:36:-;-1:-1:-1;;;;;110:31:36;;100:42;;90:70;;156:1;153;146:12;90:70;14:152;:::o;171:643::-;320:6;328;336;389:2;377:9;368:7;364:23;360:32;357:52;;;405:1;402;395:12;357:52;437:9;431:16;456:52;502:5;456:52;:::i;:::-;577:2;562:18;;556:25;527:5;;-1:-1:-1;590:54:36;556:25;590:54;:::i;:::-;715:2;700:18;;694:25;663:7;;-1:-1:-1;728:54:36;694:25;728:54;:::i;:::-;801:7;791:17;;;171:643;;;;;:::o;819:225::-;886:9;;;907:11;;;904:134;;;960:10;955:3;951:20;948:1;941:31;995:4;992:1;985:15;1023:4;1020:1;1013:15;1049:211;1198:3247:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@FEE_CONTRACT_2821":{"entryPoint":null,"id":2821,"parameterSlots":0,"returnSlots":0},"@REWARD_CONTRACT_2818":{"entryPoint":null,"id":2818,"parameterSlots":0,"returnSlots":0},"@_callOptionalReturn_1724":{"entryPoint":4633,"id":1724,"parameterSlots":2,"returnSlots":0},"@_efficientHash_2762":{"entryPoint":null,"id":2762,"parameterSlots":2,"returnSlots":1},"@_hashPair_2751":{"entryPoint":4904,"id":2751,"parameterSlots":2,"returnSlots":1},"@_msgSender_2115":{"entryPoint":null,"id":2115,"parameterSlots":0,"returnSlots":1},"@_revert_2102":{"entryPoint":null,"id":2102,"parameterSlots":2,"returnSlots":0},"@addMerkleRoot_3108":{"entryPoint":720,"id":3108,"parameterSlots":1,"returnSlots":0},"@claimed_2815":{"entryPoint":null,"id":2815,"parameterSlots":0,"returnSlots":0},"@deprecateMerkleRoot_3142":{"entryPoint":917,"id":3142,"parameterSlots":1,"returnSlots":0},"@enforceIsContractOwner_362":{"entryPoint":3422,"id":362,"parameterSlots":2,"returnSlots":0},"@functionCallWithValue_1927":{"entryPoint":4977,"id":1927,"parameterSlots":4,"returnSlots":1},"@functionCall_1863":{"entryPoint":4954,"id":1863,"parameterSlots":3,"returnSlots":1},"@isContract_1791":{"entryPoint":null,"id":1791,"parameterSlots":1,"returnSlots":1},"@layout_394":{"entryPoint":3376,"id":394,"parameterSlots":0,"returnSlots":1},"@layout_542":{"entryPoint":3112,"id":542,"parameterSlots":0,"returnSlots":1},"@layout_794":{"entryPoint":3555,"id":794,"parameterSlots":0,"returnSlots":1},"@onERC20Received_3075":{"entryPoint":1095,"id":3075,"parameterSlots":5,"returnSlots":1},"@owner_315":{"entryPoint":null,"id":315,"parameterSlots":1,"returnSlots":1},"@owner_73":{"entryPoint":2516,"id":73,"parameterSlots":0,"returnSlots":1},"@payoutWallet_636":{"entryPoint":2498,"id":636,"parameterSlots":0,"returnSlots":1},"@payoutWallet_782":{"entryPoint":null,"id":782,"parameterSlots":1,"returnSlots":1},"@processProof_2320":{"entryPoint":4566,"id":2320,"parameterSlots":2,"returnSlots":1},"@recoverERC20s_1011":{"entryPoint":2254,"id":1011,"parameterSlots":6,"returnSlots":0},"@recoverERC721s_1080":{"entryPoint":2529,"id":1080,"parameterSlots":6,"returnSlots":0},"@recoverETH_946":{"entryPoint":2923,"id":946,"parameterSlots":4,"returnSlots":0},"@roots_2811":{"entryPoint":null,"id":2811,"parameterSlots":0,"returnSlots":0},"@safeTransfer_1430":{"entryPoint":3797,"id":1430,"parameterSlots":3,"returnSlots":0},"@sendValue_1825":{"entryPoint":4220,"id":1825,"parameterSlots":2,"returnSlots":0},"@setPayoutWallet_623":{"entryPoint":2224,"id":623,"parameterSlots":1,"returnSlots":0},"@setPayoutWallet_769":{"entryPoint":3601,"id":769,"parameterSlots":2,"returnSlots":0},"@supportsInterface_424":{"entryPoint":694,"id":424,"parameterSlots":1,"returnSlots":1},"@supportsInterface_530":{"entryPoint":3158,"id":530,"parameterSlots":2,"returnSlots":1},"@transferOwnership_302":{"entryPoint":3943,"id":302,"parameterSlots":3,"returnSlots":0},"@transferOwnership_90":{"entryPoint":2903,"id":90,"parameterSlots":1,"returnSlots":0},"@verifyCallResultFromTarget_2058":{"entryPoint":5258,"id":2058,"parameterSlots":4,"returnSlots":1},"@verify_2259":{"entryPoint":3533,"id":2259,"parameterSlots":3,"returnSlots":1},"abi_decode_address_payable":{"entryPoint":5765,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_address_dyn_calldata":{"entryPoint":5810,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_array_uint256_dyn":{"entryPoint":6310,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payable":{"entryPoint":5781,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr":{"entryPoint":5606,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$1361_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":5886,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$1280_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":6040,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":6946,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":5547,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_bytes32t_array$_t_bytes32_$dyn_memory_ptrt_address_payablet_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":6421,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_bytes4":{"entryPoint":5481,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC20_$1361":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC721_$1280":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_uint256_dyn":{"entryPoint":6680,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_uint256_dyn_memory_ptr":{"entryPoint":6815,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":6731,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":7267,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_payable__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_payable_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":6980,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__fromStack_reversed":{"entryPoint":6860,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC1155Mintable_$1111__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC20SafeTransfers_$1194__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7295,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_uint256_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":7073,"id":null,"parameterSlots":4,"returnSlots":1},"allocate_memory":{"entryPoint":6195,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_array_bytes32_dyn":{"entryPoint":6274,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":7173,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":7231,"id":null,"parameterSlots":3,"returnSlots":0},"panic_error_0x32":{"entryPoint":7126,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":6148,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":5572,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:20188:36","nodeType":"YulBlock","src":"0:20188:36","statements":[{"nativeSrc":"6:3:36","nodeType":"YulBlock","src":"6:3:36","statements":[]},{"body":{"nativeSrc":"83:263:36","nodeType":"YulBlock","src":"83:263:36","statements":[{"body":{"nativeSrc":"129:16:36","nodeType":"YulBlock","src":"129:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:36","nodeType":"YulLiteral","src":"138:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:36","nodeType":"YulLiteral","src":"141:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:36","nodeType":"YulIdentifier","src":"131:6:36"},"nativeSrc":"131:12:36","nodeType":"YulFunctionCall","src":"131:12:36"},"nativeSrc":"131:12:36","nodeType":"YulExpressionStatement","src":"131:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:36","nodeType":"YulIdentifier","src":"104:7:36"},{"name":"headStart","nativeSrc":"113:9:36","nodeType":"YulIdentifier","src":"113:9:36"}],"functionName":{"name":"sub","nativeSrc":"100:3:36","nodeType":"YulIdentifier","src":"100:3:36"},"nativeSrc":"100:23:36","nodeType":"YulFunctionCall","src":"100:23:36"},{"kind":"number","nativeSrc":"125:2:36","nodeType":"YulLiteral","src":"125:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:36","nodeType":"YulIdentifier","src":"96:3:36"},"nativeSrc":"96:32:36","nodeType":"YulFunctionCall","src":"96:32:36"},"nativeSrc":"93:52:36","nodeType":"YulIf","src":"93:52:36"},{"nativeSrc":"154:36:36","nodeType":"YulVariableDeclaration","src":"154:36:36","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:36","nodeType":"YulIdentifier","src":"180:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:36","nodeType":"YulIdentifier","src":"167:12:36"},"nativeSrc":"167:23:36","nodeType":"YulFunctionCall","src":"167:23:36"},"variables":[{"name":"value","nativeSrc":"158:5:36","nodeType":"YulTypedName","src":"158:5:36","type":""}]},{"body":{"nativeSrc":"300:16:36","nodeType":"YulBlock","src":"300:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:36","nodeType":"YulLiteral","src":"309:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:36","nodeType":"YulLiteral","src":"312:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:36","nodeType":"YulIdentifier","src":"302:6:36"},"nativeSrc":"302:12:36","nodeType":"YulFunctionCall","src":"302:12:36"},"nativeSrc":"302:12:36","nodeType":"YulExpressionStatement","src":"302:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:36","nodeType":"YulIdentifier","src":"212:5:36"},{"arguments":[{"name":"value","nativeSrc":"223:5:36","nodeType":"YulIdentifier","src":"223:5:36"},{"kind":"number","nativeSrc":"230:66:36","nodeType":"YulLiteral","src":"230:66:36","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:36","nodeType":"YulIdentifier","src":"219:3:36"},"nativeSrc":"219:78:36","nodeType":"YulFunctionCall","src":"219:78:36"}],"functionName":{"name":"eq","nativeSrc":"209:2:36","nodeType":"YulIdentifier","src":"209:2:36"},"nativeSrc":"209:89:36","nodeType":"YulFunctionCall","src":"209:89:36"}],"functionName":{"name":"iszero","nativeSrc":"202:6:36","nodeType":"YulIdentifier","src":"202:6:36"},"nativeSrc":"202:97:36","nodeType":"YulFunctionCall","src":"202:97:36"},"nativeSrc":"199:117:36","nodeType":"YulIf","src":"199:117:36"},{"nativeSrc":"325:15:36","nodeType":"YulAssignment","src":"325:15:36","value":{"name":"value","nativeSrc":"335:5:36","nodeType":"YulIdentifier","src":"335:5:36"},"variableNames":[{"name":"value0","nativeSrc":"325:6:36","nodeType":"YulIdentifier","src":"325:6:36"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:36","nodeType":"YulTypedName","src":"49:9:36","type":""},{"name":"dataEnd","nativeSrc":"60:7:36","nodeType":"YulTypedName","src":"60:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:36","nodeType":"YulTypedName","src":"72:6:36","type":""}],"src":"14:332:36"},{"body":{"nativeSrc":"446:92:36","nodeType":"YulBlock","src":"446:92:36","statements":[{"nativeSrc":"456:26:36","nodeType":"YulAssignment","src":"456:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:36","nodeType":"YulIdentifier","src":"468:9:36"},{"kind":"number","nativeSrc":"479:2:36","nodeType":"YulLiteral","src":"479:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:36","nodeType":"YulIdentifier","src":"464:3:36"},"nativeSrc":"464:18:36","nodeType":"YulFunctionCall","src":"464:18:36"},"variableNames":[{"name":"tail","nativeSrc":"456:4:36","nodeType":"YulIdentifier","src":"456:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:36","nodeType":"YulIdentifier","src":"498:9:36"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:36","nodeType":"YulIdentifier","src":"523:6:36"}],"functionName":{"name":"iszero","nativeSrc":"516:6:36","nodeType":"YulIdentifier","src":"516:6:36"},"nativeSrc":"516:14:36","nodeType":"YulFunctionCall","src":"516:14:36"}],"functionName":{"name":"iszero","nativeSrc":"509:6:36","nodeType":"YulIdentifier","src":"509:6:36"},"nativeSrc":"509:22:36","nodeType":"YulFunctionCall","src":"509:22:36"}],"functionName":{"name":"mstore","nativeSrc":"491:6:36","nodeType":"YulIdentifier","src":"491:6:36"},"nativeSrc":"491:41:36","nodeType":"YulFunctionCall","src":"491:41:36"},"nativeSrc":"491:41:36","nodeType":"YulExpressionStatement","src":"491:41:36"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:36","nodeType":"YulTypedName","src":"415:9:36","type":""},{"name":"value0","nativeSrc":"426:6:36","nodeType":"YulTypedName","src":"426:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:36","nodeType":"YulTypedName","src":"437:4:36","type":""}],"src":"351:187:36"},{"body":{"nativeSrc":"672:125:36","nodeType":"YulBlock","src":"672:125:36","statements":[{"nativeSrc":"682:26:36","nodeType":"YulAssignment","src":"682:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"694:9:36","nodeType":"YulIdentifier","src":"694:9:36"},{"kind":"number","nativeSrc":"705:2:36","nodeType":"YulLiteral","src":"705:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"690:3:36","nodeType":"YulIdentifier","src":"690:3:36"},"nativeSrc":"690:18:36","nodeType":"YulFunctionCall","src":"690:18:36"},"variableNames":[{"name":"tail","nativeSrc":"682:4:36","nodeType":"YulIdentifier","src":"682:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"724:9:36","nodeType":"YulIdentifier","src":"724:9:36"},{"arguments":[{"name":"value0","nativeSrc":"739:6:36","nodeType":"YulIdentifier","src":"739:6:36"},{"kind":"number","nativeSrc":"747:42:36","nodeType":"YulLiteral","src":"747:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"735:3:36","nodeType":"YulIdentifier","src":"735:3:36"},"nativeSrc":"735:55:36","nodeType":"YulFunctionCall","src":"735:55:36"}],"functionName":{"name":"mstore","nativeSrc":"717:6:36","nodeType":"YulIdentifier","src":"717:6:36"},"nativeSrc":"717:74:36","nodeType":"YulFunctionCall","src":"717:74:36"},"nativeSrc":"717:74:36","nodeType":"YulExpressionStatement","src":"717:74:36"}]},"name":"abi_encode_tuple_t_contract$_IERC20SafeTransfers_$1194__to_t_address__fromStack_reversed","nativeSrc":"543:254:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"641:9:36","nodeType":"YulTypedName","src":"641:9:36","type":""},{"name":"value0","nativeSrc":"652:6:36","nodeType":"YulTypedName","src":"652:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"663:4:36","nodeType":"YulTypedName","src":"663:4:36","type":""}],"src":"543:254:36"},{"body":{"nativeSrc":"872:110:36","nodeType":"YulBlock","src":"872:110:36","statements":[{"body":{"nativeSrc":"918:16:36","nodeType":"YulBlock","src":"918:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"927:1:36","nodeType":"YulLiteral","src":"927:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"930:1:36","nodeType":"YulLiteral","src":"930:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"920:6:36","nodeType":"YulIdentifier","src":"920:6:36"},"nativeSrc":"920:12:36","nodeType":"YulFunctionCall","src":"920:12:36"},"nativeSrc":"920:12:36","nodeType":"YulExpressionStatement","src":"920:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"893:7:36","nodeType":"YulIdentifier","src":"893:7:36"},{"name":"headStart","nativeSrc":"902:9:36","nodeType":"YulIdentifier","src":"902:9:36"}],"functionName":{"name":"sub","nativeSrc":"889:3:36","nodeType":"YulIdentifier","src":"889:3:36"},"nativeSrc":"889:23:36","nodeType":"YulFunctionCall","src":"889:23:36"},{"kind":"number","nativeSrc":"914:2:36","nodeType":"YulLiteral","src":"914:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"885:3:36","nodeType":"YulIdentifier","src":"885:3:36"},"nativeSrc":"885:32:36","nodeType":"YulFunctionCall","src":"885:32:36"},"nativeSrc":"882:52:36","nodeType":"YulIf","src":"882:52:36"},{"nativeSrc":"943:33:36","nodeType":"YulAssignment","src":"943:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"966:9:36","nodeType":"YulIdentifier","src":"966:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"953:12:36","nodeType":"YulIdentifier","src":"953:12:36"},"nativeSrc":"953:23:36","nodeType":"YulFunctionCall","src":"953:23:36"},"variableNames":[{"name":"value0","nativeSrc":"943:6:36","nodeType":"YulIdentifier","src":"943:6:36"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"802:180:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"838:9:36","nodeType":"YulTypedName","src":"838:9:36","type":""},{"name":"dataEnd","nativeSrc":"849:7:36","nodeType":"YulTypedName","src":"849:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"861:6:36","nodeType":"YulTypedName","src":"861:6:36","type":""}],"src":"802:180:36"},{"body":{"nativeSrc":"1113:125:36","nodeType":"YulBlock","src":"1113:125:36","statements":[{"nativeSrc":"1123:26:36","nodeType":"YulAssignment","src":"1123:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"1135:9:36","nodeType":"YulIdentifier","src":"1135:9:36"},{"kind":"number","nativeSrc":"1146:2:36","nodeType":"YulLiteral","src":"1146:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1131:3:36","nodeType":"YulIdentifier","src":"1131:3:36"},"nativeSrc":"1131:18:36","nodeType":"YulFunctionCall","src":"1131:18:36"},"variableNames":[{"name":"tail","nativeSrc":"1123:4:36","nodeType":"YulIdentifier","src":"1123:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1165:9:36","nodeType":"YulIdentifier","src":"1165:9:36"},{"arguments":[{"name":"value0","nativeSrc":"1180:6:36","nodeType":"YulIdentifier","src":"1180:6:36"},{"kind":"number","nativeSrc":"1188:42:36","nodeType":"YulLiteral","src":"1188:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1176:3:36","nodeType":"YulIdentifier","src":"1176:3:36"},"nativeSrc":"1176:55:36","nodeType":"YulFunctionCall","src":"1176:55:36"}],"functionName":{"name":"mstore","nativeSrc":"1158:6:36","nodeType":"YulIdentifier","src":"1158:6:36"},"nativeSrc":"1158:74:36","nodeType":"YulFunctionCall","src":"1158:74:36"},"nativeSrc":"1158:74:36","nodeType":"YulExpressionStatement","src":"1158:74:36"}]},"name":"abi_encode_tuple_t_contract$_IERC1155Mintable_$1111__to_t_address__fromStack_reversed","nativeSrc":"987:251:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1082:9:36","nodeType":"YulTypedName","src":"1082:9:36","type":""},{"name":"value0","nativeSrc":"1093:6:36","nodeType":"YulTypedName","src":"1093:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1104:4:36","nodeType":"YulTypedName","src":"1104:4:36","type":""}],"src":"987:251:36"},{"body":{"nativeSrc":"1288:109:36","nodeType":"YulBlock","src":"1288:109:36","statements":[{"body":{"nativeSrc":"1375:16:36","nodeType":"YulBlock","src":"1375:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1384:1:36","nodeType":"YulLiteral","src":"1384:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"1387:1:36","nodeType":"YulLiteral","src":"1387:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1377:6:36","nodeType":"YulIdentifier","src":"1377:6:36"},"nativeSrc":"1377:12:36","nodeType":"YulFunctionCall","src":"1377:12:36"},"nativeSrc":"1377:12:36","nodeType":"YulExpressionStatement","src":"1377:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1311:5:36","nodeType":"YulIdentifier","src":"1311:5:36"},{"arguments":[{"name":"value","nativeSrc":"1322:5:36","nodeType":"YulIdentifier","src":"1322:5:36"},{"kind":"number","nativeSrc":"1329:42:36","nodeType":"YulLiteral","src":"1329:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1318:3:36","nodeType":"YulIdentifier","src":"1318:3:36"},"nativeSrc":"1318:54:36","nodeType":"YulFunctionCall","src":"1318:54:36"}],"functionName":{"name":"eq","nativeSrc":"1308:2:36","nodeType":"YulIdentifier","src":"1308:2:36"},"nativeSrc":"1308:65:36","nodeType":"YulFunctionCall","src":"1308:65:36"}],"functionName":{"name":"iszero","nativeSrc":"1301:6:36","nodeType":"YulIdentifier","src":"1301:6:36"},"nativeSrc":"1301:73:36","nodeType":"YulFunctionCall","src":"1301:73:36"},"nativeSrc":"1298:93:36","nodeType":"YulIf","src":"1298:93:36"}]},"name":"validator_revert_address","nativeSrc":"1243:154:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1277:5:36","nodeType":"YulTypedName","src":"1277:5:36","type":""}],"src":"1243:154:36"},{"body":{"nativeSrc":"1542:796:36","nodeType":"YulBlock","src":"1542:796:36","statements":[{"body":{"nativeSrc":"1589:16:36","nodeType":"YulBlock","src":"1589:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1598:1:36","nodeType":"YulLiteral","src":"1598:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"1601:1:36","nodeType":"YulLiteral","src":"1601:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1591:6:36","nodeType":"YulIdentifier","src":"1591:6:36"},"nativeSrc":"1591:12:36","nodeType":"YulFunctionCall","src":"1591:12:36"},"nativeSrc":"1591:12:36","nodeType":"YulExpressionStatement","src":"1591:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1563:7:36","nodeType":"YulIdentifier","src":"1563:7:36"},{"name":"headStart","nativeSrc":"1572:9:36","nodeType":"YulIdentifier","src":"1572:9:36"}],"functionName":{"name":"sub","nativeSrc":"1559:3:36","nodeType":"YulIdentifier","src":"1559:3:36"},"nativeSrc":"1559:23:36","nodeType":"YulFunctionCall","src":"1559:23:36"},{"kind":"number","nativeSrc":"1584:3:36","nodeType":"YulLiteral","src":"1584:3:36","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"1555:3:36","nodeType":"YulIdentifier","src":"1555:3:36"},"nativeSrc":"1555:33:36","nodeType":"YulFunctionCall","src":"1555:33:36"},"nativeSrc":"1552:53:36","nodeType":"YulIf","src":"1552:53:36"},{"nativeSrc":"1614:36:36","nodeType":"YulVariableDeclaration","src":"1614:36:36","value":{"arguments":[{"name":"headStart","nativeSrc":"1640:9:36","nodeType":"YulIdentifier","src":"1640:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"1627:12:36","nodeType":"YulIdentifier","src":"1627:12:36"},"nativeSrc":"1627:23:36","nodeType":"YulFunctionCall","src":"1627:23:36"},"variables":[{"name":"value","nativeSrc":"1618:5:36","nodeType":"YulTypedName","src":"1618:5:36","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"1684:5:36","nodeType":"YulIdentifier","src":"1684:5:36"}],"functionName":{"name":"validator_revert_address","nativeSrc":"1659:24:36","nodeType":"YulIdentifier","src":"1659:24:36"},"nativeSrc":"1659:31:36","nodeType":"YulFunctionCall","src":"1659:31:36"},"nativeSrc":"1659:31:36","nodeType":"YulExpressionStatement","src":"1659:31:36"},{"nativeSrc":"1699:15:36","nodeType":"YulAssignment","src":"1699:15:36","value":{"name":"value","nativeSrc":"1709:5:36","nodeType":"YulIdentifier","src":"1709:5:36"},"variableNames":[{"name":"value0","nativeSrc":"1699:6:36","nodeType":"YulIdentifier","src":"1699:6:36"}]},{"nativeSrc":"1723:47:36","nodeType":"YulVariableDeclaration","src":"1723:47:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1755:9:36","nodeType":"YulIdentifier","src":"1755:9:36"},{"kind":"number","nativeSrc":"1766:2:36","nodeType":"YulLiteral","src":"1766:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1751:3:36","nodeType":"YulIdentifier","src":"1751:3:36"},"nativeSrc":"1751:18:36","nodeType":"YulFunctionCall","src":"1751:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"1738:12:36","nodeType":"YulIdentifier","src":"1738:12:36"},"nativeSrc":"1738:32:36","nodeType":"YulFunctionCall","src":"1738:32:36"},"variables":[{"name":"value_1","nativeSrc":"1727:7:36","nodeType":"YulTypedName","src":"1727:7:36","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"1804:7:36","nodeType":"YulIdentifier","src":"1804:7:36"}],"functionName":{"name":"validator_revert_address","nativeSrc":"1779:24:36","nodeType":"YulIdentifier","src":"1779:24:36"},"nativeSrc":"1779:33:36","nodeType":"YulFunctionCall","src":"1779:33:36"},"nativeSrc":"1779:33:36","nodeType":"YulExpressionStatement","src":"1779:33:36"},{"nativeSrc":"1821:17:36","nodeType":"YulAssignment","src":"1821:17:36","value":{"name":"value_1","nativeSrc":"1831:7:36","nodeType":"YulIdentifier","src":"1831:7:36"},"variableNames":[{"name":"value1","nativeSrc":"1821:6:36","nodeType":"YulIdentifier","src":"1821:6:36"}]},{"nativeSrc":"1847:42:36","nodeType":"YulAssignment","src":"1847:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1874:9:36","nodeType":"YulIdentifier","src":"1874:9:36"},{"kind":"number","nativeSrc":"1885:2:36","nodeType":"YulLiteral","src":"1885:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1870:3:36","nodeType":"YulIdentifier","src":"1870:3:36"},"nativeSrc":"1870:18:36","nodeType":"YulFunctionCall","src":"1870:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"1857:12:36","nodeType":"YulIdentifier","src":"1857:12:36"},"nativeSrc":"1857:32:36","nodeType":"YulFunctionCall","src":"1857:32:36"},"variableNames":[{"name":"value2","nativeSrc":"1847:6:36","nodeType":"YulIdentifier","src":"1847:6:36"}]},{"nativeSrc":"1898:46:36","nodeType":"YulVariableDeclaration","src":"1898:46:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1929:9:36","nodeType":"YulIdentifier","src":"1929:9:36"},{"kind":"number","nativeSrc":"1940:2:36","nodeType":"YulLiteral","src":"1940:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"1925:3:36","nodeType":"YulIdentifier","src":"1925:3:36"},"nativeSrc":"1925:18:36","nodeType":"YulFunctionCall","src":"1925:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"1912:12:36","nodeType":"YulIdentifier","src":"1912:12:36"},"nativeSrc":"1912:32:36","nodeType":"YulFunctionCall","src":"1912:32:36"},"variables":[{"name":"offset","nativeSrc":"1902:6:36","nodeType":"YulTypedName","src":"1902:6:36","type":""}]},{"nativeSrc":"1953:28:36","nodeType":"YulVariableDeclaration","src":"1953:28:36","value":{"kind":"number","nativeSrc":"1963:18:36","nodeType":"YulLiteral","src":"1963:18:36","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"1957:2:36","nodeType":"YulTypedName","src":"1957:2:36","type":""}]},{"body":{"nativeSrc":"2008:16:36","nodeType":"YulBlock","src":"2008:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2017:1:36","nodeType":"YulLiteral","src":"2017:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"2020:1:36","nodeType":"YulLiteral","src":"2020:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2010:6:36","nodeType":"YulIdentifier","src":"2010:6:36"},"nativeSrc":"2010:12:36","nodeType":"YulFunctionCall","src":"2010:12:36"},"nativeSrc":"2010:12:36","nodeType":"YulExpressionStatement","src":"2010:12:36"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"1996:6:36","nodeType":"YulIdentifier","src":"1996:6:36"},{"name":"_1","nativeSrc":"2004:2:36","nodeType":"YulIdentifier","src":"2004:2:36"}],"functionName":{"name":"gt","nativeSrc":"1993:2:36","nodeType":"YulIdentifier","src":"1993:2:36"},"nativeSrc":"1993:14:36","nodeType":"YulFunctionCall","src":"1993:14:36"},"nativeSrc":"1990:34:36","nodeType":"YulIf","src":"1990:34:36"},{"nativeSrc":"2033:32:36","nodeType":"YulVariableDeclaration","src":"2033:32:36","value":{"arguments":[{"name":"headStart","nativeSrc":"2047:9:36","nodeType":"YulIdentifier","src":"2047:9:36"},{"name":"offset","nativeSrc":"2058:6:36","nodeType":"YulIdentifier","src":"2058:6:36"}],"functionName":{"name":"add","nativeSrc":"2043:3:36","nodeType":"YulIdentifier","src":"2043:3:36"},"nativeSrc":"2043:22:36","nodeType":"YulFunctionCall","src":"2043:22:36"},"variables":[{"name":"_2","nativeSrc":"2037:2:36","nodeType":"YulTypedName","src":"2037:2:36","type":""}]},{"body":{"nativeSrc":"2113:16:36","nodeType":"YulBlock","src":"2113:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2122:1:36","nodeType":"YulLiteral","src":"2122:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"2125:1:36","nodeType":"YulLiteral","src":"2125:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2115:6:36","nodeType":"YulIdentifier","src":"2115:6:36"},"nativeSrc":"2115:12:36","nodeType":"YulFunctionCall","src":"2115:12:36"},"nativeSrc":"2115:12:36","nodeType":"YulExpressionStatement","src":"2115:12:36"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"2092:2:36","nodeType":"YulIdentifier","src":"2092:2:36"},{"kind":"number","nativeSrc":"2096:4:36","nodeType":"YulLiteral","src":"2096:4:36","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2088:3:36","nodeType":"YulIdentifier","src":"2088:3:36"},"nativeSrc":"2088:13:36","nodeType":"YulFunctionCall","src":"2088:13:36"},{"name":"dataEnd","nativeSrc":"2103:7:36","nodeType":"YulIdentifier","src":"2103:7:36"}],"functionName":{"name":"slt","nativeSrc":"2084:3:36","nodeType":"YulIdentifier","src":"2084:3:36"},"nativeSrc":"2084:27:36","nodeType":"YulFunctionCall","src":"2084:27:36"}],"functionName":{"name":"iszero","nativeSrc":"2077:6:36","nodeType":"YulIdentifier","src":"2077:6:36"},"nativeSrc":"2077:35:36","nodeType":"YulFunctionCall","src":"2077:35:36"},"nativeSrc":"2074:55:36","nodeType":"YulIf","src":"2074:55:36"},{"nativeSrc":"2138:30:36","nodeType":"YulVariableDeclaration","src":"2138:30:36","value":{"arguments":[{"name":"_2","nativeSrc":"2165:2:36","nodeType":"YulIdentifier","src":"2165:2:36"}],"functionName":{"name":"calldataload","nativeSrc":"2152:12:36","nodeType":"YulIdentifier","src":"2152:12:36"},"nativeSrc":"2152:16:36","nodeType":"YulFunctionCall","src":"2152:16:36"},"variables":[{"name":"length","nativeSrc":"2142:6:36","nodeType":"YulTypedName","src":"2142:6:36","type":""}]},{"body":{"nativeSrc":"2195:16:36","nodeType":"YulBlock","src":"2195:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2204:1:36","nodeType":"YulLiteral","src":"2204:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"2207:1:36","nodeType":"YulLiteral","src":"2207:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2197:6:36","nodeType":"YulIdentifier","src":"2197:6:36"},"nativeSrc":"2197:12:36","nodeType":"YulFunctionCall","src":"2197:12:36"},"nativeSrc":"2197:12:36","nodeType":"YulExpressionStatement","src":"2197:12:36"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"2183:6:36","nodeType":"YulIdentifier","src":"2183:6:36"},{"name":"_1","nativeSrc":"2191:2:36","nodeType":"YulIdentifier","src":"2191:2:36"}],"functionName":{"name":"gt","nativeSrc":"2180:2:36","nodeType":"YulIdentifier","src":"2180:2:36"},"nativeSrc":"2180:14:36","nodeType":"YulFunctionCall","src":"2180:14:36"},"nativeSrc":"2177:34:36","nodeType":"YulIf","src":"2177:34:36"},{"body":{"nativeSrc":"2261:16:36","nodeType":"YulBlock","src":"2261:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2270:1:36","nodeType":"YulLiteral","src":"2270:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"2273:1:36","nodeType":"YulLiteral","src":"2273:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2263:6:36","nodeType":"YulIdentifier","src":"2263:6:36"},"nativeSrc":"2263:12:36","nodeType":"YulFunctionCall","src":"2263:12:36"},"nativeSrc":"2263:12:36","nodeType":"YulExpressionStatement","src":"2263:12:36"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"2234:2:36","nodeType":"YulIdentifier","src":"2234:2:36"},{"name":"length","nativeSrc":"2238:6:36","nodeType":"YulIdentifier","src":"2238:6:36"}],"functionName":{"name":"add","nativeSrc":"2230:3:36","nodeType":"YulIdentifier","src":"2230:3:36"},"nativeSrc":"2230:15:36","nodeType":"YulFunctionCall","src":"2230:15:36"},{"kind":"number","nativeSrc":"2247:2:36","nodeType":"YulLiteral","src":"2247:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2226:3:36","nodeType":"YulIdentifier","src":"2226:3:36"},"nativeSrc":"2226:24:36","nodeType":"YulFunctionCall","src":"2226:24:36"},{"name":"dataEnd","nativeSrc":"2252:7:36","nodeType":"YulIdentifier","src":"2252:7:36"}],"functionName":{"name":"gt","nativeSrc":"2223:2:36","nodeType":"YulIdentifier","src":"2223:2:36"},"nativeSrc":"2223:37:36","nodeType":"YulFunctionCall","src":"2223:37:36"},"nativeSrc":"2220:57:36","nodeType":"YulIf","src":"2220:57:36"},{"nativeSrc":"2286:21:36","nodeType":"YulAssignment","src":"2286:21:36","value":{"arguments":[{"name":"_2","nativeSrc":"2300:2:36","nodeType":"YulIdentifier","src":"2300:2:36"},{"kind":"number","nativeSrc":"2304:2:36","nodeType":"YulLiteral","src":"2304:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2296:3:36","nodeType":"YulIdentifier","src":"2296:3:36"},"nativeSrc":"2296:11:36","nodeType":"YulFunctionCall","src":"2296:11:36"},"variableNames":[{"name":"value3","nativeSrc":"2286:6:36","nodeType":"YulIdentifier","src":"2286:6:36"}]},{"nativeSrc":"2316:16:36","nodeType":"YulAssignment","src":"2316:16:36","value":{"name":"length","nativeSrc":"2326:6:36","nodeType":"YulIdentifier","src":"2326:6:36"},"variableNames":[{"name":"value4","nativeSrc":"2316:6:36","nodeType":"YulIdentifier","src":"2316:6:36"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr","nativeSrc":"1402:936:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1476:9:36","nodeType":"YulTypedName","src":"1476:9:36","type":""},{"name":"dataEnd","nativeSrc":"1487:7:36","nodeType":"YulTypedName","src":"1487:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1499:6:36","nodeType":"YulTypedName","src":"1499:6:36","type":""},{"name":"value1","nativeSrc":"1507:6:36","nodeType":"YulTypedName","src":"1507:6:36","type":""},{"name":"value2","nativeSrc":"1515:6:36","nodeType":"YulTypedName","src":"1515:6:36","type":""},{"name":"value3","nativeSrc":"1523:6:36","nodeType":"YulTypedName","src":"1523:6:36","type":""},{"name":"value4","nativeSrc":"1531:6:36","nodeType":"YulTypedName","src":"1531:6:36","type":""}],"src":"1402:936:36"},{"body":{"nativeSrc":"2442:149:36","nodeType":"YulBlock","src":"2442:149:36","statements":[{"nativeSrc":"2452:26:36","nodeType":"YulAssignment","src":"2452:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"2464:9:36","nodeType":"YulIdentifier","src":"2464:9:36"},{"kind":"number","nativeSrc":"2475:2:36","nodeType":"YulLiteral","src":"2475:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2460:3:36","nodeType":"YulIdentifier","src":"2460:3:36"},"nativeSrc":"2460:18:36","nodeType":"YulFunctionCall","src":"2460:18:36"},"variableNames":[{"name":"tail","nativeSrc":"2452:4:36","nodeType":"YulIdentifier","src":"2452:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2494:9:36","nodeType":"YulIdentifier","src":"2494:9:36"},{"arguments":[{"name":"value0","nativeSrc":"2509:6:36","nodeType":"YulIdentifier","src":"2509:6:36"},{"kind":"number","nativeSrc":"2517:66:36","nodeType":"YulLiteral","src":"2517:66:36","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"2505:3:36","nodeType":"YulIdentifier","src":"2505:3:36"},"nativeSrc":"2505:79:36","nodeType":"YulFunctionCall","src":"2505:79:36"}],"functionName":{"name":"mstore","nativeSrc":"2487:6:36","nodeType":"YulIdentifier","src":"2487:6:36"},"nativeSrc":"2487:98:36","nodeType":"YulFunctionCall","src":"2487:98:36"},"nativeSrc":"2487:98:36","nodeType":"YulExpressionStatement","src":"2487:98:36"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nativeSrc":"2343:248:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2411:9:36","nodeType":"YulTypedName","src":"2411:9:36","type":""},{"name":"value0","nativeSrc":"2422:6:36","nodeType":"YulTypedName","src":"2422:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2433:4:36","nodeType":"YulTypedName","src":"2433:4:36","type":""}],"src":"2343:248:36"},{"body":{"nativeSrc":"2653:85:36","nodeType":"YulBlock","src":"2653:85:36","statements":[{"nativeSrc":"2663:29:36","nodeType":"YulAssignment","src":"2663:29:36","value":{"arguments":[{"name":"offset","nativeSrc":"2685:6:36","nodeType":"YulIdentifier","src":"2685:6:36"}],"functionName":{"name":"calldataload","nativeSrc":"2672:12:36","nodeType":"YulIdentifier","src":"2672:12:36"},"nativeSrc":"2672:20:36","nodeType":"YulFunctionCall","src":"2672:20:36"},"variableNames":[{"name":"value","nativeSrc":"2663:5:36","nodeType":"YulIdentifier","src":"2663:5:36"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"2726:5:36","nodeType":"YulIdentifier","src":"2726:5:36"}],"functionName":{"name":"validator_revert_address","nativeSrc":"2701:24:36","nodeType":"YulIdentifier","src":"2701:24:36"},"nativeSrc":"2701:31:36","nodeType":"YulFunctionCall","src":"2701:31:36"},"nativeSrc":"2701:31:36","nodeType":"YulExpressionStatement","src":"2701:31:36"}]},"name":"abi_decode_address_payable","nativeSrc":"2596:142:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2632:6:36","nodeType":"YulTypedName","src":"2632:6:36","type":""}],"returnVariables":[{"name":"value","nativeSrc":"2643:5:36","nodeType":"YulTypedName","src":"2643:5:36","type":""}],"src":"2596:142:36"},{"body":{"nativeSrc":"2821:177:36","nodeType":"YulBlock","src":"2821:177:36","statements":[{"body":{"nativeSrc":"2867:16:36","nodeType":"YulBlock","src":"2867:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2876:1:36","nodeType":"YulLiteral","src":"2876:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"2879:1:36","nodeType":"YulLiteral","src":"2879:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2869:6:36","nodeType":"YulIdentifier","src":"2869:6:36"},"nativeSrc":"2869:12:36","nodeType":"YulFunctionCall","src":"2869:12:36"},"nativeSrc":"2869:12:36","nodeType":"YulExpressionStatement","src":"2869:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2842:7:36","nodeType":"YulIdentifier","src":"2842:7:36"},{"name":"headStart","nativeSrc":"2851:9:36","nodeType":"YulIdentifier","src":"2851:9:36"}],"functionName":{"name":"sub","nativeSrc":"2838:3:36","nodeType":"YulIdentifier","src":"2838:3:36"},"nativeSrc":"2838:23:36","nodeType":"YulFunctionCall","src":"2838:23:36"},{"kind":"number","nativeSrc":"2863:2:36","nodeType":"YulLiteral","src":"2863:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2834:3:36","nodeType":"YulIdentifier","src":"2834:3:36"},"nativeSrc":"2834:32:36","nodeType":"YulFunctionCall","src":"2834:32:36"},"nativeSrc":"2831:52:36","nodeType":"YulIf","src":"2831:52:36"},{"nativeSrc":"2892:36:36","nodeType":"YulVariableDeclaration","src":"2892:36:36","value":{"arguments":[{"name":"headStart","nativeSrc":"2918:9:36","nodeType":"YulIdentifier","src":"2918:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"2905:12:36","nodeType":"YulIdentifier","src":"2905:12:36"},"nativeSrc":"2905:23:36","nodeType":"YulFunctionCall","src":"2905:23:36"},"variables":[{"name":"value","nativeSrc":"2896:5:36","nodeType":"YulTypedName","src":"2896:5:36","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"2962:5:36","nodeType":"YulIdentifier","src":"2962:5:36"}],"functionName":{"name":"validator_revert_address","nativeSrc":"2937:24:36","nodeType":"YulIdentifier","src":"2937:24:36"},"nativeSrc":"2937:31:36","nodeType":"YulFunctionCall","src":"2937:31:36"},"nativeSrc":"2937:31:36","nodeType":"YulExpressionStatement","src":"2937:31:36"},{"nativeSrc":"2977:15:36","nodeType":"YulAssignment","src":"2977:15:36","value":{"name":"value","nativeSrc":"2987:5:36","nodeType":"YulIdentifier","src":"2987:5:36"},"variableNames":[{"name":"value0","nativeSrc":"2977:6:36","nodeType":"YulIdentifier","src":"2977:6:36"}]}]},"name":"abi_decode_tuple_t_address_payable","nativeSrc":"2743:255:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2787:9:36","nodeType":"YulTypedName","src":"2787:9:36","type":""},{"name":"dataEnd","nativeSrc":"2798:7:36","nodeType":"YulTypedName","src":"2798:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2810:6:36","nodeType":"YulTypedName","src":"2810:6:36","type":""}],"src":"2743:255:36"},{"body":{"nativeSrc":"3087:283:36","nodeType":"YulBlock","src":"3087:283:36","statements":[{"body":{"nativeSrc":"3136:16:36","nodeType":"YulBlock","src":"3136:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3145:1:36","nodeType":"YulLiteral","src":"3145:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"3148:1:36","nodeType":"YulLiteral","src":"3148:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3138:6:36","nodeType":"YulIdentifier","src":"3138:6:36"},"nativeSrc":"3138:12:36","nodeType":"YulFunctionCall","src":"3138:12:36"},"nativeSrc":"3138:12:36","nodeType":"YulExpressionStatement","src":"3138:12:36"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"3115:6:36","nodeType":"YulIdentifier","src":"3115:6:36"},{"kind":"number","nativeSrc":"3123:4:36","nodeType":"YulLiteral","src":"3123:4:36","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"3111:3:36","nodeType":"YulIdentifier","src":"3111:3:36"},"nativeSrc":"3111:17:36","nodeType":"YulFunctionCall","src":"3111:17:36"},{"name":"end","nativeSrc":"3130:3:36","nodeType":"YulIdentifier","src":"3130:3:36"}],"functionName":{"name":"slt","nativeSrc":"3107:3:36","nodeType":"YulIdentifier","src":"3107:3:36"},"nativeSrc":"3107:27:36","nodeType":"YulFunctionCall","src":"3107:27:36"}],"functionName":{"name":"iszero","nativeSrc":"3100:6:36","nodeType":"YulIdentifier","src":"3100:6:36"},"nativeSrc":"3100:35:36","nodeType":"YulFunctionCall","src":"3100:35:36"},"nativeSrc":"3097:55:36","nodeType":"YulIf","src":"3097:55:36"},{"nativeSrc":"3161:30:36","nodeType":"YulAssignment","src":"3161:30:36","value":{"arguments":[{"name":"offset","nativeSrc":"3184:6:36","nodeType":"YulIdentifier","src":"3184:6:36"}],"functionName":{"name":"calldataload","nativeSrc":"3171:12:36","nodeType":"YulIdentifier","src":"3171:12:36"},"nativeSrc":"3171:20:36","nodeType":"YulFunctionCall","src":"3171:20:36"},"variableNames":[{"name":"length","nativeSrc":"3161:6:36","nodeType":"YulIdentifier","src":"3161:6:36"}]},{"body":{"nativeSrc":"3234:16:36","nodeType":"YulBlock","src":"3234:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3243:1:36","nodeType":"YulLiteral","src":"3243:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"3246:1:36","nodeType":"YulLiteral","src":"3246:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3236:6:36","nodeType":"YulIdentifier","src":"3236:6:36"},"nativeSrc":"3236:12:36","nodeType":"YulFunctionCall","src":"3236:12:36"},"nativeSrc":"3236:12:36","nodeType":"YulExpressionStatement","src":"3236:12:36"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"3206:6:36","nodeType":"YulIdentifier","src":"3206:6:36"},{"kind":"number","nativeSrc":"3214:18:36","nodeType":"YulLiteral","src":"3214:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3203:2:36","nodeType":"YulIdentifier","src":"3203:2:36"},"nativeSrc":"3203:30:36","nodeType":"YulFunctionCall","src":"3203:30:36"},"nativeSrc":"3200:50:36","nodeType":"YulIf","src":"3200:50:36"},{"nativeSrc":"3259:29:36","nodeType":"YulAssignment","src":"3259:29:36","value":{"arguments":[{"name":"offset","nativeSrc":"3275:6:36","nodeType":"YulIdentifier","src":"3275:6:36"},{"kind":"number","nativeSrc":"3283:4:36","nodeType":"YulLiteral","src":"3283:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3271:3:36","nodeType":"YulIdentifier","src":"3271:3:36"},"nativeSrc":"3271:17:36","nodeType":"YulFunctionCall","src":"3271:17:36"},"variableNames":[{"name":"arrayPos","nativeSrc":"3259:8:36","nodeType":"YulIdentifier","src":"3259:8:36"}]},{"body":{"nativeSrc":"3348:16:36","nodeType":"YulBlock","src":"3348:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3357:1:36","nodeType":"YulLiteral","src":"3357:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"3360:1:36","nodeType":"YulLiteral","src":"3360:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3350:6:36","nodeType":"YulIdentifier","src":"3350:6:36"},"nativeSrc":"3350:12:36","nodeType":"YulFunctionCall","src":"3350:12:36"},"nativeSrc":"3350:12:36","nodeType":"YulExpressionStatement","src":"3350:12:36"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"3311:6:36","nodeType":"YulIdentifier","src":"3311:6:36"},{"arguments":[{"kind":"number","nativeSrc":"3323:1:36","nodeType":"YulLiteral","src":"3323:1:36","type":"","value":"5"},{"name":"length","nativeSrc":"3326:6:36","nodeType":"YulIdentifier","src":"3326:6:36"}],"functionName":{"name":"shl","nativeSrc":"3319:3:36","nodeType":"YulIdentifier","src":"3319:3:36"},"nativeSrc":"3319:14:36","nodeType":"YulFunctionCall","src":"3319:14:36"}],"functionName":{"name":"add","nativeSrc":"3307:3:36","nodeType":"YulIdentifier","src":"3307:3:36"},"nativeSrc":"3307:27:36","nodeType":"YulFunctionCall","src":"3307:27:36"},{"kind":"number","nativeSrc":"3336:4:36","nodeType":"YulLiteral","src":"3336:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3303:3:36","nodeType":"YulIdentifier","src":"3303:3:36"},"nativeSrc":"3303:38:36","nodeType":"YulFunctionCall","src":"3303:38:36"},{"name":"end","nativeSrc":"3343:3:36","nodeType":"YulIdentifier","src":"3343:3:36"}],"functionName":{"name":"gt","nativeSrc":"3300:2:36","nodeType":"YulIdentifier","src":"3300:2:36"},"nativeSrc":"3300:47:36","nodeType":"YulFunctionCall","src":"3300:47:36"},"nativeSrc":"3297:67:36","nodeType":"YulIf","src":"3297:67:36"}]},"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"3003:367:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"3050:6:36","nodeType":"YulTypedName","src":"3050:6:36","type":""},{"name":"end","nativeSrc":"3058:3:36","nodeType":"YulTypedName","src":"3058:3:36","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"3066:8:36","nodeType":"YulTypedName","src":"3066:8:36","type":""},{"name":"length","nativeSrc":"3076:6:36","nodeType":"YulTypedName","src":"3076:6:36","type":""}],"src":"3003:367:36"},{"body":{"nativeSrc":"3599:879:36","nodeType":"YulBlock","src":"3599:879:36","statements":[{"body":{"nativeSrc":"3645:16:36","nodeType":"YulBlock","src":"3645:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3654:1:36","nodeType":"YulLiteral","src":"3654:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"3657:1:36","nodeType":"YulLiteral","src":"3657:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3647:6:36","nodeType":"YulIdentifier","src":"3647:6:36"},"nativeSrc":"3647:12:36","nodeType":"YulFunctionCall","src":"3647:12:36"},"nativeSrc":"3647:12:36","nodeType":"YulExpressionStatement","src":"3647:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3620:7:36","nodeType":"YulIdentifier","src":"3620:7:36"},{"name":"headStart","nativeSrc":"3629:9:36","nodeType":"YulIdentifier","src":"3629:9:36"}],"functionName":{"name":"sub","nativeSrc":"3616:3:36","nodeType":"YulIdentifier","src":"3616:3:36"},"nativeSrc":"3616:23:36","nodeType":"YulFunctionCall","src":"3616:23:36"},{"kind":"number","nativeSrc":"3641:2:36","nodeType":"YulLiteral","src":"3641:2:36","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"3612:3:36","nodeType":"YulIdentifier","src":"3612:3:36"},"nativeSrc":"3612:32:36","nodeType":"YulFunctionCall","src":"3612:32:36"},"nativeSrc":"3609:52:36","nodeType":"YulIf","src":"3609:52:36"},{"nativeSrc":"3670:37:36","nodeType":"YulVariableDeclaration","src":"3670:37:36","value":{"arguments":[{"name":"headStart","nativeSrc":"3697:9:36","nodeType":"YulIdentifier","src":"3697:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"3684:12:36","nodeType":"YulIdentifier","src":"3684:12:36"},"nativeSrc":"3684:23:36","nodeType":"YulFunctionCall","src":"3684:23:36"},"variables":[{"name":"offset","nativeSrc":"3674:6:36","nodeType":"YulTypedName","src":"3674:6:36","type":""}]},{"nativeSrc":"3716:28:36","nodeType":"YulVariableDeclaration","src":"3716:28:36","value":{"kind":"number","nativeSrc":"3726:18:36","nodeType":"YulLiteral","src":"3726:18:36","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"3720:2:36","nodeType":"YulTypedName","src":"3720:2:36","type":""}]},{"body":{"nativeSrc":"3771:16:36","nodeType":"YulBlock","src":"3771:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3780:1:36","nodeType":"YulLiteral","src":"3780:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"3783:1:36","nodeType":"YulLiteral","src":"3783:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3773:6:36","nodeType":"YulIdentifier","src":"3773:6:36"},"nativeSrc":"3773:12:36","nodeType":"YulFunctionCall","src":"3773:12:36"},"nativeSrc":"3773:12:36","nodeType":"YulExpressionStatement","src":"3773:12:36"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3759:6:36","nodeType":"YulIdentifier","src":"3759:6:36"},{"name":"_1","nativeSrc":"3767:2:36","nodeType":"YulIdentifier","src":"3767:2:36"}],"functionName":{"name":"gt","nativeSrc":"3756:2:36","nodeType":"YulIdentifier","src":"3756:2:36"},"nativeSrc":"3756:14:36","nodeType":"YulFunctionCall","src":"3756:14:36"},"nativeSrc":"3753:34:36","nodeType":"YulIf","src":"3753:34:36"},{"nativeSrc":"3796:96:36","nodeType":"YulVariableDeclaration","src":"3796:96:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3864:9:36","nodeType":"YulIdentifier","src":"3864:9:36"},{"name":"offset","nativeSrc":"3875:6:36","nodeType":"YulIdentifier","src":"3875:6:36"}],"functionName":{"name":"add","nativeSrc":"3860:3:36","nodeType":"YulIdentifier","src":"3860:3:36"},"nativeSrc":"3860:22:36","nodeType":"YulFunctionCall","src":"3860:22:36"},{"name":"dataEnd","nativeSrc":"3884:7:36","nodeType":"YulIdentifier","src":"3884:7:36"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"3822:37:36","nodeType":"YulIdentifier","src":"3822:37:36"},"nativeSrc":"3822:70:36","nodeType":"YulFunctionCall","src":"3822:70:36"},"variables":[{"name":"value0_1","nativeSrc":"3800:8:36","nodeType":"YulTypedName","src":"3800:8:36","type":""},{"name":"value1_1","nativeSrc":"3810:8:36","nodeType":"YulTypedName","src":"3810:8:36","type":""}]},{"nativeSrc":"3901:18:36","nodeType":"YulAssignment","src":"3901:18:36","value":{"name":"value0_1","nativeSrc":"3911:8:36","nodeType":"YulIdentifier","src":"3911:8:36"},"variableNames":[{"name":"value0","nativeSrc":"3901:6:36","nodeType":"YulIdentifier","src":"3901:6:36"}]},{"nativeSrc":"3928:18:36","nodeType":"YulAssignment","src":"3928:18:36","value":{"name":"value1_1","nativeSrc":"3938:8:36","nodeType":"YulIdentifier","src":"3938:8:36"},"variableNames":[{"name":"value1","nativeSrc":"3928:6:36","nodeType":"YulIdentifier","src":"3928:6:36"}]},{"nativeSrc":"3955:48:36","nodeType":"YulVariableDeclaration","src":"3955:48:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3988:9:36","nodeType":"YulIdentifier","src":"3988:9:36"},{"kind":"number","nativeSrc":"3999:2:36","nodeType":"YulLiteral","src":"3999:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3984:3:36","nodeType":"YulIdentifier","src":"3984:3:36"},"nativeSrc":"3984:18:36","nodeType":"YulFunctionCall","src":"3984:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"3971:12:36","nodeType":"YulIdentifier","src":"3971:12:36"},"nativeSrc":"3971:32:36","nodeType":"YulFunctionCall","src":"3971:32:36"},"variables":[{"name":"offset_1","nativeSrc":"3959:8:36","nodeType":"YulTypedName","src":"3959:8:36","type":""}]},{"body":{"nativeSrc":"4032:16:36","nodeType":"YulBlock","src":"4032:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4041:1:36","nodeType":"YulLiteral","src":"4041:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"4044:1:36","nodeType":"YulLiteral","src":"4044:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4034:6:36","nodeType":"YulIdentifier","src":"4034:6:36"},"nativeSrc":"4034:12:36","nodeType":"YulFunctionCall","src":"4034:12:36"},"nativeSrc":"4034:12:36","nodeType":"YulExpressionStatement","src":"4034:12:36"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"4018:8:36","nodeType":"YulIdentifier","src":"4018:8:36"},{"name":"_1","nativeSrc":"4028:2:36","nodeType":"YulIdentifier","src":"4028:2:36"}],"functionName":{"name":"gt","nativeSrc":"4015:2:36","nodeType":"YulIdentifier","src":"4015:2:36"},"nativeSrc":"4015:16:36","nodeType":"YulFunctionCall","src":"4015:16:36"},"nativeSrc":"4012:36:36","nodeType":"YulIf","src":"4012:36:36"},{"nativeSrc":"4057:98:36","nodeType":"YulVariableDeclaration","src":"4057:98:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4125:9:36","nodeType":"YulIdentifier","src":"4125:9:36"},{"name":"offset_1","nativeSrc":"4136:8:36","nodeType":"YulIdentifier","src":"4136:8:36"}],"functionName":{"name":"add","nativeSrc":"4121:3:36","nodeType":"YulIdentifier","src":"4121:3:36"},"nativeSrc":"4121:24:36","nodeType":"YulFunctionCall","src":"4121:24:36"},{"name":"dataEnd","nativeSrc":"4147:7:36","nodeType":"YulIdentifier","src":"4147:7:36"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"4083:37:36","nodeType":"YulIdentifier","src":"4083:37:36"},"nativeSrc":"4083:72:36","nodeType":"YulFunctionCall","src":"4083:72:36"},"variables":[{"name":"value2_1","nativeSrc":"4061:8:36","nodeType":"YulTypedName","src":"4061:8:36","type":""},{"name":"value3_1","nativeSrc":"4071:8:36","nodeType":"YulTypedName","src":"4071:8:36","type":""}]},{"nativeSrc":"4164:18:36","nodeType":"YulAssignment","src":"4164:18:36","value":{"name":"value2_1","nativeSrc":"4174:8:36","nodeType":"YulIdentifier","src":"4174:8:36"},"variableNames":[{"name":"value2","nativeSrc":"4164:6:36","nodeType":"YulIdentifier","src":"4164:6:36"}]},{"nativeSrc":"4191:18:36","nodeType":"YulAssignment","src":"4191:18:36","value":{"name":"value3_1","nativeSrc":"4201:8:36","nodeType":"YulIdentifier","src":"4201:8:36"},"variableNames":[{"name":"value3","nativeSrc":"4191:6:36","nodeType":"YulIdentifier","src":"4191:6:36"}]},{"nativeSrc":"4218:48:36","nodeType":"YulVariableDeclaration","src":"4218:48:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4251:9:36","nodeType":"YulIdentifier","src":"4251:9:36"},{"kind":"number","nativeSrc":"4262:2:36","nodeType":"YulLiteral","src":"4262:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4247:3:36","nodeType":"YulIdentifier","src":"4247:3:36"},"nativeSrc":"4247:18:36","nodeType":"YulFunctionCall","src":"4247:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"4234:12:36","nodeType":"YulIdentifier","src":"4234:12:36"},"nativeSrc":"4234:32:36","nodeType":"YulFunctionCall","src":"4234:32:36"},"variables":[{"name":"offset_2","nativeSrc":"4222:8:36","nodeType":"YulTypedName","src":"4222:8:36","type":""}]},{"body":{"nativeSrc":"4295:16:36","nodeType":"YulBlock","src":"4295:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4304:1:36","nodeType":"YulLiteral","src":"4304:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"4307:1:36","nodeType":"YulLiteral","src":"4307:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4297:6:36","nodeType":"YulIdentifier","src":"4297:6:36"},"nativeSrc":"4297:12:36","nodeType":"YulFunctionCall","src":"4297:12:36"},"nativeSrc":"4297:12:36","nodeType":"YulExpressionStatement","src":"4297:12:36"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"4281:8:36","nodeType":"YulIdentifier","src":"4281:8:36"},{"name":"_1","nativeSrc":"4291:2:36","nodeType":"YulIdentifier","src":"4291:2:36"}],"functionName":{"name":"gt","nativeSrc":"4278:2:36","nodeType":"YulIdentifier","src":"4278:2:36"},"nativeSrc":"4278:16:36","nodeType":"YulFunctionCall","src":"4278:16:36"},"nativeSrc":"4275:36:36","nodeType":"YulIf","src":"4275:36:36"},{"nativeSrc":"4320:98:36","nodeType":"YulVariableDeclaration","src":"4320:98:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4388:9:36","nodeType":"YulIdentifier","src":"4388:9:36"},{"name":"offset_2","nativeSrc":"4399:8:36","nodeType":"YulIdentifier","src":"4399:8:36"}],"functionName":{"name":"add","nativeSrc":"4384:3:36","nodeType":"YulIdentifier","src":"4384:3:36"},"nativeSrc":"4384:24:36","nodeType":"YulFunctionCall","src":"4384:24:36"},{"name":"dataEnd","nativeSrc":"4410:7:36","nodeType":"YulIdentifier","src":"4410:7:36"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"4346:37:36","nodeType":"YulIdentifier","src":"4346:37:36"},"nativeSrc":"4346:72:36","nodeType":"YulFunctionCall","src":"4346:72:36"},"variables":[{"name":"value4_1","nativeSrc":"4324:8:36","nodeType":"YulTypedName","src":"4324:8:36","type":""},{"name":"value5_1","nativeSrc":"4334:8:36","nodeType":"YulTypedName","src":"4334:8:36","type":""}]},{"nativeSrc":"4427:18:36","nodeType":"YulAssignment","src":"4427:18:36","value":{"name":"value4_1","nativeSrc":"4437:8:36","nodeType":"YulIdentifier","src":"4437:8:36"},"variableNames":[{"name":"value4","nativeSrc":"4427:6:36","nodeType":"YulIdentifier","src":"4427:6:36"}]},{"nativeSrc":"4454:18:36","nodeType":"YulAssignment","src":"4454:18:36","value":{"name":"value5_1","nativeSrc":"4464:8:36","nodeType":"YulIdentifier","src":"4464:8:36"},"variableNames":[{"name":"value5","nativeSrc":"4454:6:36","nodeType":"YulIdentifier","src":"4454:6:36"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$1361_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"3375:1103:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3525:9:36","nodeType":"YulTypedName","src":"3525:9:36","type":""},{"name":"dataEnd","nativeSrc":"3536:7:36","nodeType":"YulTypedName","src":"3536:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3548:6:36","nodeType":"YulTypedName","src":"3548:6:36","type":""},{"name":"value1","nativeSrc":"3556:6:36","nodeType":"YulTypedName","src":"3556:6:36","type":""},{"name":"value2","nativeSrc":"3564:6:36","nodeType":"YulTypedName","src":"3564:6:36","type":""},{"name":"value3","nativeSrc":"3572:6:36","nodeType":"YulTypedName","src":"3572:6:36","type":""},{"name":"value4","nativeSrc":"3580:6:36","nodeType":"YulTypedName","src":"3580:6:36","type":""},{"name":"value5","nativeSrc":"3588:6:36","nodeType":"YulTypedName","src":"3588:6:36","type":""}],"src":"3375:1103:36"},{"body":{"nativeSrc":"4600:125:36","nodeType":"YulBlock","src":"4600:125:36","statements":[{"nativeSrc":"4610:26:36","nodeType":"YulAssignment","src":"4610:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"4622:9:36","nodeType":"YulIdentifier","src":"4622:9:36"},{"kind":"number","nativeSrc":"4633:2:36","nodeType":"YulLiteral","src":"4633:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4618:3:36","nodeType":"YulIdentifier","src":"4618:3:36"},"nativeSrc":"4618:18:36","nodeType":"YulFunctionCall","src":"4618:18:36"},"variableNames":[{"name":"tail","nativeSrc":"4610:4:36","nodeType":"YulIdentifier","src":"4610:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4652:9:36","nodeType":"YulIdentifier","src":"4652:9:36"},{"arguments":[{"name":"value0","nativeSrc":"4667:6:36","nodeType":"YulIdentifier","src":"4667:6:36"},{"kind":"number","nativeSrc":"4675:42:36","nodeType":"YulLiteral","src":"4675:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"4663:3:36","nodeType":"YulIdentifier","src":"4663:3:36"},"nativeSrc":"4663:55:36","nodeType":"YulFunctionCall","src":"4663:55:36"}],"functionName":{"name":"mstore","nativeSrc":"4645:6:36","nodeType":"YulIdentifier","src":"4645:6:36"},"nativeSrc":"4645:74:36","nodeType":"YulFunctionCall","src":"4645:74:36"},"nativeSrc":"4645:74:36","nodeType":"YulExpressionStatement","src":"4645:74:36"}]},"name":"abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed","nativeSrc":"4483:242:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4569:9:36","nodeType":"YulTypedName","src":"4569:9:36","type":""},{"name":"value0","nativeSrc":"4580:6:36","nodeType":"YulTypedName","src":"4580:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4591:4:36","nodeType":"YulTypedName","src":"4591:4:36","type":""}],"src":"4483:242:36"},{"body":{"nativeSrc":"4831:125:36","nodeType":"YulBlock","src":"4831:125:36","statements":[{"nativeSrc":"4841:26:36","nodeType":"YulAssignment","src":"4841:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"4853:9:36","nodeType":"YulIdentifier","src":"4853:9:36"},{"kind":"number","nativeSrc":"4864:2:36","nodeType":"YulLiteral","src":"4864:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4849:3:36","nodeType":"YulIdentifier","src":"4849:3:36"},"nativeSrc":"4849:18:36","nodeType":"YulFunctionCall","src":"4849:18:36"},"variableNames":[{"name":"tail","nativeSrc":"4841:4:36","nodeType":"YulIdentifier","src":"4841:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4883:9:36","nodeType":"YulIdentifier","src":"4883:9:36"},{"arguments":[{"name":"value0","nativeSrc":"4898:6:36","nodeType":"YulIdentifier","src":"4898:6:36"},{"kind":"number","nativeSrc":"4906:42:36","nodeType":"YulLiteral","src":"4906:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"4894:3:36","nodeType":"YulIdentifier","src":"4894:3:36"},"nativeSrc":"4894:55:36","nodeType":"YulFunctionCall","src":"4894:55:36"}],"functionName":{"name":"mstore","nativeSrc":"4876:6:36","nodeType":"YulIdentifier","src":"4876:6:36"},"nativeSrc":"4876:74:36","nodeType":"YulFunctionCall","src":"4876:74:36"},"nativeSrc":"4876:74:36","nodeType":"YulExpressionStatement","src":"4876:74:36"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"4730:226:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4800:9:36","nodeType":"YulTypedName","src":"4800:9:36","type":""},{"name":"value0","nativeSrc":"4811:6:36","nodeType":"YulTypedName","src":"4811:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4822:4:36","nodeType":"YulTypedName","src":"4822:4:36","type":""}],"src":"4730:226:36"},{"body":{"nativeSrc":"5186:879:36","nodeType":"YulBlock","src":"5186:879:36","statements":[{"body":{"nativeSrc":"5232:16:36","nodeType":"YulBlock","src":"5232:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5241:1:36","nodeType":"YulLiteral","src":"5241:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"5244:1:36","nodeType":"YulLiteral","src":"5244:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5234:6:36","nodeType":"YulIdentifier","src":"5234:6:36"},"nativeSrc":"5234:12:36","nodeType":"YulFunctionCall","src":"5234:12:36"},"nativeSrc":"5234:12:36","nodeType":"YulExpressionStatement","src":"5234:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5207:7:36","nodeType":"YulIdentifier","src":"5207:7:36"},{"name":"headStart","nativeSrc":"5216:9:36","nodeType":"YulIdentifier","src":"5216:9:36"}],"functionName":{"name":"sub","nativeSrc":"5203:3:36","nodeType":"YulIdentifier","src":"5203:3:36"},"nativeSrc":"5203:23:36","nodeType":"YulFunctionCall","src":"5203:23:36"},{"kind":"number","nativeSrc":"5228:2:36","nodeType":"YulLiteral","src":"5228:2:36","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"5199:3:36","nodeType":"YulIdentifier","src":"5199:3:36"},"nativeSrc":"5199:32:36","nodeType":"YulFunctionCall","src":"5199:32:36"},"nativeSrc":"5196:52:36","nodeType":"YulIf","src":"5196:52:36"},{"nativeSrc":"5257:37:36","nodeType":"YulVariableDeclaration","src":"5257:37:36","value":{"arguments":[{"name":"headStart","nativeSrc":"5284:9:36","nodeType":"YulIdentifier","src":"5284:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"5271:12:36","nodeType":"YulIdentifier","src":"5271:12:36"},"nativeSrc":"5271:23:36","nodeType":"YulFunctionCall","src":"5271:23:36"},"variables":[{"name":"offset","nativeSrc":"5261:6:36","nodeType":"YulTypedName","src":"5261:6:36","type":""}]},{"nativeSrc":"5303:28:36","nodeType":"YulVariableDeclaration","src":"5303:28:36","value":{"kind":"number","nativeSrc":"5313:18:36","nodeType":"YulLiteral","src":"5313:18:36","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"5307:2:36","nodeType":"YulTypedName","src":"5307:2:36","type":""}]},{"body":{"nativeSrc":"5358:16:36","nodeType":"YulBlock","src":"5358:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5367:1:36","nodeType":"YulLiteral","src":"5367:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"5370:1:36","nodeType":"YulLiteral","src":"5370:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5360:6:36","nodeType":"YulIdentifier","src":"5360:6:36"},"nativeSrc":"5360:12:36","nodeType":"YulFunctionCall","src":"5360:12:36"},"nativeSrc":"5360:12:36","nodeType":"YulExpressionStatement","src":"5360:12:36"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"5346:6:36","nodeType":"YulIdentifier","src":"5346:6:36"},{"name":"_1","nativeSrc":"5354:2:36","nodeType":"YulIdentifier","src":"5354:2:36"}],"functionName":{"name":"gt","nativeSrc":"5343:2:36","nodeType":"YulIdentifier","src":"5343:2:36"},"nativeSrc":"5343:14:36","nodeType":"YulFunctionCall","src":"5343:14:36"},"nativeSrc":"5340:34:36","nodeType":"YulIf","src":"5340:34:36"},{"nativeSrc":"5383:96:36","nodeType":"YulVariableDeclaration","src":"5383:96:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5451:9:36","nodeType":"YulIdentifier","src":"5451:9:36"},{"name":"offset","nativeSrc":"5462:6:36","nodeType":"YulIdentifier","src":"5462:6:36"}],"functionName":{"name":"add","nativeSrc":"5447:3:36","nodeType":"YulIdentifier","src":"5447:3:36"},"nativeSrc":"5447:22:36","nodeType":"YulFunctionCall","src":"5447:22:36"},{"name":"dataEnd","nativeSrc":"5471:7:36","nodeType":"YulIdentifier","src":"5471:7:36"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"5409:37:36","nodeType":"YulIdentifier","src":"5409:37:36"},"nativeSrc":"5409:70:36","nodeType":"YulFunctionCall","src":"5409:70:36"},"variables":[{"name":"value0_1","nativeSrc":"5387:8:36","nodeType":"YulTypedName","src":"5387:8:36","type":""},{"name":"value1_1","nativeSrc":"5397:8:36","nodeType":"YulTypedName","src":"5397:8:36","type":""}]},{"nativeSrc":"5488:18:36","nodeType":"YulAssignment","src":"5488:18:36","value":{"name":"value0_1","nativeSrc":"5498:8:36","nodeType":"YulIdentifier","src":"5498:8:36"},"variableNames":[{"name":"value0","nativeSrc":"5488:6:36","nodeType":"YulIdentifier","src":"5488:6:36"}]},{"nativeSrc":"5515:18:36","nodeType":"YulAssignment","src":"5515:18:36","value":{"name":"value1_1","nativeSrc":"5525:8:36","nodeType":"YulIdentifier","src":"5525:8:36"},"variableNames":[{"name":"value1","nativeSrc":"5515:6:36","nodeType":"YulIdentifier","src":"5515:6:36"}]},{"nativeSrc":"5542:48:36","nodeType":"YulVariableDeclaration","src":"5542:48:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5575:9:36","nodeType":"YulIdentifier","src":"5575:9:36"},{"kind":"number","nativeSrc":"5586:2:36","nodeType":"YulLiteral","src":"5586:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5571:3:36","nodeType":"YulIdentifier","src":"5571:3:36"},"nativeSrc":"5571:18:36","nodeType":"YulFunctionCall","src":"5571:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"5558:12:36","nodeType":"YulIdentifier","src":"5558:12:36"},"nativeSrc":"5558:32:36","nodeType":"YulFunctionCall","src":"5558:32:36"},"variables":[{"name":"offset_1","nativeSrc":"5546:8:36","nodeType":"YulTypedName","src":"5546:8:36","type":""}]},{"body":{"nativeSrc":"5619:16:36","nodeType":"YulBlock","src":"5619:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5628:1:36","nodeType":"YulLiteral","src":"5628:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"5631:1:36","nodeType":"YulLiteral","src":"5631:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5621:6:36","nodeType":"YulIdentifier","src":"5621:6:36"},"nativeSrc":"5621:12:36","nodeType":"YulFunctionCall","src":"5621:12:36"},"nativeSrc":"5621:12:36","nodeType":"YulExpressionStatement","src":"5621:12:36"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"5605:8:36","nodeType":"YulIdentifier","src":"5605:8:36"},{"name":"_1","nativeSrc":"5615:2:36","nodeType":"YulIdentifier","src":"5615:2:36"}],"functionName":{"name":"gt","nativeSrc":"5602:2:36","nodeType":"YulIdentifier","src":"5602:2:36"},"nativeSrc":"5602:16:36","nodeType":"YulFunctionCall","src":"5602:16:36"},"nativeSrc":"5599:36:36","nodeType":"YulIf","src":"5599:36:36"},{"nativeSrc":"5644:98:36","nodeType":"YulVariableDeclaration","src":"5644:98:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5712:9:36","nodeType":"YulIdentifier","src":"5712:9:36"},{"name":"offset_1","nativeSrc":"5723:8:36","nodeType":"YulIdentifier","src":"5723:8:36"}],"functionName":{"name":"add","nativeSrc":"5708:3:36","nodeType":"YulIdentifier","src":"5708:3:36"},"nativeSrc":"5708:24:36","nodeType":"YulFunctionCall","src":"5708:24:36"},{"name":"dataEnd","nativeSrc":"5734:7:36","nodeType":"YulIdentifier","src":"5734:7:36"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"5670:37:36","nodeType":"YulIdentifier","src":"5670:37:36"},"nativeSrc":"5670:72:36","nodeType":"YulFunctionCall","src":"5670:72:36"},"variables":[{"name":"value2_1","nativeSrc":"5648:8:36","nodeType":"YulTypedName","src":"5648:8:36","type":""},{"name":"value3_1","nativeSrc":"5658:8:36","nodeType":"YulTypedName","src":"5658:8:36","type":""}]},{"nativeSrc":"5751:18:36","nodeType":"YulAssignment","src":"5751:18:36","value":{"name":"value2_1","nativeSrc":"5761:8:36","nodeType":"YulIdentifier","src":"5761:8:36"},"variableNames":[{"name":"value2","nativeSrc":"5751:6:36","nodeType":"YulIdentifier","src":"5751:6:36"}]},{"nativeSrc":"5778:18:36","nodeType":"YulAssignment","src":"5778:18:36","value":{"name":"value3_1","nativeSrc":"5788:8:36","nodeType":"YulIdentifier","src":"5788:8:36"},"variableNames":[{"name":"value3","nativeSrc":"5778:6:36","nodeType":"YulIdentifier","src":"5778:6:36"}]},{"nativeSrc":"5805:48:36","nodeType":"YulVariableDeclaration","src":"5805:48:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5838:9:36","nodeType":"YulIdentifier","src":"5838:9:36"},{"kind":"number","nativeSrc":"5849:2:36","nodeType":"YulLiteral","src":"5849:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5834:3:36","nodeType":"YulIdentifier","src":"5834:3:36"},"nativeSrc":"5834:18:36","nodeType":"YulFunctionCall","src":"5834:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"5821:12:36","nodeType":"YulIdentifier","src":"5821:12:36"},"nativeSrc":"5821:32:36","nodeType":"YulFunctionCall","src":"5821:32:36"},"variables":[{"name":"offset_2","nativeSrc":"5809:8:36","nodeType":"YulTypedName","src":"5809:8:36","type":""}]},{"body":{"nativeSrc":"5882:16:36","nodeType":"YulBlock","src":"5882:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5891:1:36","nodeType":"YulLiteral","src":"5891:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"5894:1:36","nodeType":"YulLiteral","src":"5894:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5884:6:36","nodeType":"YulIdentifier","src":"5884:6:36"},"nativeSrc":"5884:12:36","nodeType":"YulFunctionCall","src":"5884:12:36"},"nativeSrc":"5884:12:36","nodeType":"YulExpressionStatement","src":"5884:12:36"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"5868:8:36","nodeType":"YulIdentifier","src":"5868:8:36"},{"name":"_1","nativeSrc":"5878:2:36","nodeType":"YulIdentifier","src":"5878:2:36"}],"functionName":{"name":"gt","nativeSrc":"5865:2:36","nodeType":"YulIdentifier","src":"5865:2:36"},"nativeSrc":"5865:16:36","nodeType":"YulFunctionCall","src":"5865:16:36"},"nativeSrc":"5862:36:36","nodeType":"YulIf","src":"5862:36:36"},{"nativeSrc":"5907:98:36","nodeType":"YulVariableDeclaration","src":"5907:98:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5975:9:36","nodeType":"YulIdentifier","src":"5975:9:36"},{"name":"offset_2","nativeSrc":"5986:8:36","nodeType":"YulIdentifier","src":"5986:8:36"}],"functionName":{"name":"add","nativeSrc":"5971:3:36","nodeType":"YulIdentifier","src":"5971:3:36"},"nativeSrc":"5971:24:36","nodeType":"YulFunctionCall","src":"5971:24:36"},{"name":"dataEnd","nativeSrc":"5997:7:36","nodeType":"YulIdentifier","src":"5997:7:36"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"5933:37:36","nodeType":"YulIdentifier","src":"5933:37:36"},"nativeSrc":"5933:72:36","nodeType":"YulFunctionCall","src":"5933:72:36"},"variables":[{"name":"value4_1","nativeSrc":"5911:8:36","nodeType":"YulTypedName","src":"5911:8:36","type":""},{"name":"value5_1","nativeSrc":"5921:8:36","nodeType":"YulTypedName","src":"5921:8:36","type":""}]},{"nativeSrc":"6014:18:36","nodeType":"YulAssignment","src":"6014:18:36","value":{"name":"value4_1","nativeSrc":"6024:8:36","nodeType":"YulIdentifier","src":"6024:8:36"},"variableNames":[{"name":"value4","nativeSrc":"6014:6:36","nodeType":"YulIdentifier","src":"6014:6:36"}]},{"nativeSrc":"6041:18:36","nodeType":"YulAssignment","src":"6041:18:36","value":{"name":"value5_1","nativeSrc":"6051:8:36","nodeType":"YulIdentifier","src":"6051:8:36"},"variableNames":[{"name":"value5","nativeSrc":"6041:6:36","nodeType":"YulIdentifier","src":"6041:6:36"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$1280_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"4961:1104:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5112:9:36","nodeType":"YulTypedName","src":"5112:9:36","type":""},{"name":"dataEnd","nativeSrc":"5123:7:36","nodeType":"YulTypedName","src":"5123:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5135:6:36","nodeType":"YulTypedName","src":"5135:6:36","type":""},{"name":"value1","nativeSrc":"5143:6:36","nodeType":"YulTypedName","src":"5143:6:36","type":""},{"name":"value2","nativeSrc":"5151:6:36","nodeType":"YulTypedName","src":"5151:6:36","type":""},{"name":"value3","nativeSrc":"5159:6:36","nodeType":"YulTypedName","src":"5159:6:36","type":""},{"name":"value4","nativeSrc":"5167:6:36","nodeType":"YulTypedName","src":"5167:6:36","type":""},{"name":"value5","nativeSrc":"5175:6:36","nodeType":"YulTypedName","src":"5175:6:36","type":""}],"src":"4961:1104:36"},{"body":{"nativeSrc":"6140:177:36","nodeType":"YulBlock","src":"6140:177:36","statements":[{"body":{"nativeSrc":"6186:16:36","nodeType":"YulBlock","src":"6186:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6195:1:36","nodeType":"YulLiteral","src":"6195:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"6198:1:36","nodeType":"YulLiteral","src":"6198:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6188:6:36","nodeType":"YulIdentifier","src":"6188:6:36"},"nativeSrc":"6188:12:36","nodeType":"YulFunctionCall","src":"6188:12:36"},"nativeSrc":"6188:12:36","nodeType":"YulExpressionStatement","src":"6188:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6161:7:36","nodeType":"YulIdentifier","src":"6161:7:36"},{"name":"headStart","nativeSrc":"6170:9:36","nodeType":"YulIdentifier","src":"6170:9:36"}],"functionName":{"name":"sub","nativeSrc":"6157:3:36","nodeType":"YulIdentifier","src":"6157:3:36"},"nativeSrc":"6157:23:36","nodeType":"YulFunctionCall","src":"6157:23:36"},{"kind":"number","nativeSrc":"6182:2:36","nodeType":"YulLiteral","src":"6182:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"6153:3:36","nodeType":"YulIdentifier","src":"6153:3:36"},"nativeSrc":"6153:32:36","nodeType":"YulFunctionCall","src":"6153:32:36"},"nativeSrc":"6150:52:36","nodeType":"YulIf","src":"6150:52:36"},{"nativeSrc":"6211:36:36","nodeType":"YulVariableDeclaration","src":"6211:36:36","value":{"arguments":[{"name":"headStart","nativeSrc":"6237:9:36","nodeType":"YulIdentifier","src":"6237:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"6224:12:36","nodeType":"YulIdentifier","src":"6224:12:36"},"nativeSrc":"6224:23:36","nodeType":"YulFunctionCall","src":"6224:23:36"},"variables":[{"name":"value","nativeSrc":"6215:5:36","nodeType":"YulTypedName","src":"6215:5:36","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"6281:5:36","nodeType":"YulIdentifier","src":"6281:5:36"}],"functionName":{"name":"validator_revert_address","nativeSrc":"6256:24:36","nodeType":"YulIdentifier","src":"6256:24:36"},"nativeSrc":"6256:31:36","nodeType":"YulFunctionCall","src":"6256:31:36"},"nativeSrc":"6256:31:36","nodeType":"YulExpressionStatement","src":"6256:31:36"},{"nativeSrc":"6296:15:36","nodeType":"YulAssignment","src":"6296:15:36","value":{"name":"value","nativeSrc":"6306:5:36","nodeType":"YulIdentifier","src":"6306:5:36"},"variableNames":[{"name":"value0","nativeSrc":"6296:6:36","nodeType":"YulIdentifier","src":"6296:6:36"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"6070:247:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6106:9:36","nodeType":"YulTypedName","src":"6106:9:36","type":""},{"name":"dataEnd","nativeSrc":"6117:7:36","nodeType":"YulTypedName","src":"6117:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6129:6:36","nodeType":"YulTypedName","src":"6129:6:36","type":""}],"src":"6070:247:36"},{"body":{"nativeSrc":"6487:616:36","nodeType":"YulBlock","src":"6487:616:36","statements":[{"body":{"nativeSrc":"6533:16:36","nodeType":"YulBlock","src":"6533:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6542:1:36","nodeType":"YulLiteral","src":"6542:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"6545:1:36","nodeType":"YulLiteral","src":"6545:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6535:6:36","nodeType":"YulIdentifier","src":"6535:6:36"},"nativeSrc":"6535:12:36","nodeType":"YulFunctionCall","src":"6535:12:36"},"nativeSrc":"6535:12:36","nodeType":"YulExpressionStatement","src":"6535:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6508:7:36","nodeType":"YulIdentifier","src":"6508:7:36"},{"name":"headStart","nativeSrc":"6517:9:36","nodeType":"YulIdentifier","src":"6517:9:36"}],"functionName":{"name":"sub","nativeSrc":"6504:3:36","nodeType":"YulIdentifier","src":"6504:3:36"},"nativeSrc":"6504:23:36","nodeType":"YulFunctionCall","src":"6504:23:36"},{"kind":"number","nativeSrc":"6529:2:36","nodeType":"YulLiteral","src":"6529:2:36","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"6500:3:36","nodeType":"YulIdentifier","src":"6500:3:36"},"nativeSrc":"6500:32:36","nodeType":"YulFunctionCall","src":"6500:32:36"},"nativeSrc":"6497:52:36","nodeType":"YulIf","src":"6497:52:36"},{"nativeSrc":"6558:37:36","nodeType":"YulVariableDeclaration","src":"6558:37:36","value":{"arguments":[{"name":"headStart","nativeSrc":"6585:9:36","nodeType":"YulIdentifier","src":"6585:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"6572:12:36","nodeType":"YulIdentifier","src":"6572:12:36"},"nativeSrc":"6572:23:36","nodeType":"YulFunctionCall","src":"6572:23:36"},"variables":[{"name":"offset","nativeSrc":"6562:6:36","nodeType":"YulTypedName","src":"6562:6:36","type":""}]},{"nativeSrc":"6604:28:36","nodeType":"YulVariableDeclaration","src":"6604:28:36","value":{"kind":"number","nativeSrc":"6614:18:36","nodeType":"YulLiteral","src":"6614:18:36","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"6608:2:36","nodeType":"YulTypedName","src":"6608:2:36","type":""}]},{"body":{"nativeSrc":"6659:16:36","nodeType":"YulBlock","src":"6659:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6668:1:36","nodeType":"YulLiteral","src":"6668:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"6671:1:36","nodeType":"YulLiteral","src":"6671:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6661:6:36","nodeType":"YulIdentifier","src":"6661:6:36"},"nativeSrc":"6661:12:36","nodeType":"YulFunctionCall","src":"6661:12:36"},"nativeSrc":"6661:12:36","nodeType":"YulExpressionStatement","src":"6661:12:36"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"6647:6:36","nodeType":"YulIdentifier","src":"6647:6:36"},{"name":"_1","nativeSrc":"6655:2:36","nodeType":"YulIdentifier","src":"6655:2:36"}],"functionName":{"name":"gt","nativeSrc":"6644:2:36","nodeType":"YulIdentifier","src":"6644:2:36"},"nativeSrc":"6644:14:36","nodeType":"YulFunctionCall","src":"6644:14:36"},"nativeSrc":"6641:34:36","nodeType":"YulIf","src":"6641:34:36"},{"nativeSrc":"6684:96:36","nodeType":"YulVariableDeclaration","src":"6684:96:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6752:9:36","nodeType":"YulIdentifier","src":"6752:9:36"},{"name":"offset","nativeSrc":"6763:6:36","nodeType":"YulIdentifier","src":"6763:6:36"}],"functionName":{"name":"add","nativeSrc":"6748:3:36","nodeType":"YulIdentifier","src":"6748:3:36"},"nativeSrc":"6748:22:36","nodeType":"YulFunctionCall","src":"6748:22:36"},{"name":"dataEnd","nativeSrc":"6772:7:36","nodeType":"YulIdentifier","src":"6772:7:36"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"6710:37:36","nodeType":"YulIdentifier","src":"6710:37:36"},"nativeSrc":"6710:70:36","nodeType":"YulFunctionCall","src":"6710:70:36"},"variables":[{"name":"value0_1","nativeSrc":"6688:8:36","nodeType":"YulTypedName","src":"6688:8:36","type":""},{"name":"value1_1","nativeSrc":"6698:8:36","nodeType":"YulTypedName","src":"6698:8:36","type":""}]},{"nativeSrc":"6789:18:36","nodeType":"YulAssignment","src":"6789:18:36","value":{"name":"value0_1","nativeSrc":"6799:8:36","nodeType":"YulIdentifier","src":"6799:8:36"},"variableNames":[{"name":"value0","nativeSrc":"6789:6:36","nodeType":"YulIdentifier","src":"6789:6:36"}]},{"nativeSrc":"6816:18:36","nodeType":"YulAssignment","src":"6816:18:36","value":{"name":"value1_1","nativeSrc":"6826:8:36","nodeType":"YulIdentifier","src":"6826:8:36"},"variableNames":[{"name":"value1","nativeSrc":"6816:6:36","nodeType":"YulIdentifier","src":"6816:6:36"}]},{"nativeSrc":"6843:48:36","nodeType":"YulVariableDeclaration","src":"6843:48:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6876:9:36","nodeType":"YulIdentifier","src":"6876:9:36"},{"kind":"number","nativeSrc":"6887:2:36","nodeType":"YulLiteral","src":"6887:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6872:3:36","nodeType":"YulIdentifier","src":"6872:3:36"},"nativeSrc":"6872:18:36","nodeType":"YulFunctionCall","src":"6872:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"6859:12:36","nodeType":"YulIdentifier","src":"6859:12:36"},"nativeSrc":"6859:32:36","nodeType":"YulFunctionCall","src":"6859:32:36"},"variables":[{"name":"offset_1","nativeSrc":"6847:8:36","nodeType":"YulTypedName","src":"6847:8:36","type":""}]},{"body":{"nativeSrc":"6920:16:36","nodeType":"YulBlock","src":"6920:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6929:1:36","nodeType":"YulLiteral","src":"6929:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"6932:1:36","nodeType":"YulLiteral","src":"6932:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6922:6:36","nodeType":"YulIdentifier","src":"6922:6:36"},"nativeSrc":"6922:12:36","nodeType":"YulFunctionCall","src":"6922:12:36"},"nativeSrc":"6922:12:36","nodeType":"YulExpressionStatement","src":"6922:12:36"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"6906:8:36","nodeType":"YulIdentifier","src":"6906:8:36"},{"name":"_1","nativeSrc":"6916:2:36","nodeType":"YulIdentifier","src":"6916:2:36"}],"functionName":{"name":"gt","nativeSrc":"6903:2:36","nodeType":"YulIdentifier","src":"6903:2:36"},"nativeSrc":"6903:16:36","nodeType":"YulFunctionCall","src":"6903:16:36"},"nativeSrc":"6900:36:36","nodeType":"YulIf","src":"6900:36:36"},{"nativeSrc":"6945:98:36","nodeType":"YulVariableDeclaration","src":"6945:98:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7013:9:36","nodeType":"YulIdentifier","src":"7013:9:36"},{"name":"offset_1","nativeSrc":"7024:8:36","nodeType":"YulIdentifier","src":"7024:8:36"}],"functionName":{"name":"add","nativeSrc":"7009:3:36","nodeType":"YulIdentifier","src":"7009:3:36"},"nativeSrc":"7009:24:36","nodeType":"YulFunctionCall","src":"7009:24:36"},{"name":"dataEnd","nativeSrc":"7035:7:36","nodeType":"YulIdentifier","src":"7035:7:36"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"6971:37:36","nodeType":"YulIdentifier","src":"6971:37:36"},"nativeSrc":"6971:72:36","nodeType":"YulFunctionCall","src":"6971:72:36"},"variables":[{"name":"value2_1","nativeSrc":"6949:8:36","nodeType":"YulTypedName","src":"6949:8:36","type":""},{"name":"value3_1","nativeSrc":"6959:8:36","nodeType":"YulTypedName","src":"6959:8:36","type":""}]},{"nativeSrc":"7052:18:36","nodeType":"YulAssignment","src":"7052:18:36","value":{"name":"value2_1","nativeSrc":"7062:8:36","nodeType":"YulIdentifier","src":"7062:8:36"},"variableNames":[{"name":"value2","nativeSrc":"7052:6:36","nodeType":"YulIdentifier","src":"7052:6:36"}]},{"nativeSrc":"7079:18:36","nodeType":"YulAssignment","src":"7079:18:36","value":{"name":"value3_1","nativeSrc":"7089:8:36","nodeType":"YulIdentifier","src":"7089:8:36"},"variableNames":[{"name":"value3","nativeSrc":"7079:6:36","nodeType":"YulIdentifier","src":"7079:6:36"}]}]},"name":"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"6322:781:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6429:9:36","nodeType":"YulTypedName","src":"6429:9:36","type":""},{"name":"dataEnd","nativeSrc":"6440:7:36","nodeType":"YulTypedName","src":"6440:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6452:6:36","nodeType":"YulTypedName","src":"6452:6:36","type":""},{"name":"value1","nativeSrc":"6460:6:36","nodeType":"YulTypedName","src":"6460:6:36","type":""},{"name":"value2","nativeSrc":"6468:6:36","nodeType":"YulTypedName","src":"6468:6:36","type":""},{"name":"value3","nativeSrc":"6476:6:36","nodeType":"YulTypedName","src":"6476:6:36","type":""}],"src":"6322:781:36"},{"body":{"nativeSrc":"7209:76:36","nodeType":"YulBlock","src":"7209:76:36","statements":[{"nativeSrc":"7219:26:36","nodeType":"YulAssignment","src":"7219:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"7231:9:36","nodeType":"YulIdentifier","src":"7231:9:36"},{"kind":"number","nativeSrc":"7242:2:36","nodeType":"YulLiteral","src":"7242:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7227:3:36","nodeType":"YulIdentifier","src":"7227:3:36"},"nativeSrc":"7227:18:36","nodeType":"YulFunctionCall","src":"7227:18:36"},"variableNames":[{"name":"tail","nativeSrc":"7219:4:36","nodeType":"YulIdentifier","src":"7219:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7261:9:36","nodeType":"YulIdentifier","src":"7261:9:36"},{"name":"value0","nativeSrc":"7272:6:36","nodeType":"YulIdentifier","src":"7272:6:36"}],"functionName":{"name":"mstore","nativeSrc":"7254:6:36","nodeType":"YulIdentifier","src":"7254:6:36"},"nativeSrc":"7254:25:36","nodeType":"YulFunctionCall","src":"7254:25:36"},"nativeSrc":"7254:25:36","nodeType":"YulExpressionStatement","src":"7254:25:36"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"7108:177:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7178:9:36","nodeType":"YulTypedName","src":"7178:9:36","type":""},{"name":"value0","nativeSrc":"7189:6:36","nodeType":"YulTypedName","src":"7189:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7200:4:36","nodeType":"YulTypedName","src":"7200:4:36","type":""}],"src":"7108:177:36"},{"body":{"nativeSrc":"7419:198:36","nodeType":"YulBlock","src":"7419:198:36","statements":[{"nativeSrc":"7429:26:36","nodeType":"YulAssignment","src":"7429:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"7441:9:36","nodeType":"YulIdentifier","src":"7441:9:36"},{"kind":"number","nativeSrc":"7452:2:36","nodeType":"YulLiteral","src":"7452:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7437:3:36","nodeType":"YulIdentifier","src":"7437:3:36"},"nativeSrc":"7437:18:36","nodeType":"YulFunctionCall","src":"7437:18:36"},"variableNames":[{"name":"tail","nativeSrc":"7429:4:36","nodeType":"YulIdentifier","src":"7429:4:36"}]},{"nativeSrc":"7464:52:36","nodeType":"YulVariableDeclaration","src":"7464:52:36","value":{"kind":"number","nativeSrc":"7474:42:36","nodeType":"YulLiteral","src":"7474:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"7468:2:36","nodeType":"YulTypedName","src":"7468:2:36","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7532:9:36","nodeType":"YulIdentifier","src":"7532:9:36"},{"arguments":[{"name":"value0","nativeSrc":"7547:6:36","nodeType":"YulIdentifier","src":"7547:6:36"},{"name":"_1","nativeSrc":"7555:2:36","nodeType":"YulIdentifier","src":"7555:2:36"}],"functionName":{"name":"and","nativeSrc":"7543:3:36","nodeType":"YulIdentifier","src":"7543:3:36"},"nativeSrc":"7543:15:36","nodeType":"YulFunctionCall","src":"7543:15:36"}],"functionName":{"name":"mstore","nativeSrc":"7525:6:36","nodeType":"YulIdentifier","src":"7525:6:36"},"nativeSrc":"7525:34:36","nodeType":"YulFunctionCall","src":"7525:34:36"},"nativeSrc":"7525:34:36","nodeType":"YulExpressionStatement","src":"7525:34:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7579:9:36","nodeType":"YulIdentifier","src":"7579:9:36"},{"kind":"number","nativeSrc":"7590:2:36","nodeType":"YulLiteral","src":"7590:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7575:3:36","nodeType":"YulIdentifier","src":"7575:3:36"},"nativeSrc":"7575:18:36","nodeType":"YulFunctionCall","src":"7575:18:36"},{"arguments":[{"name":"value1","nativeSrc":"7599:6:36","nodeType":"YulIdentifier","src":"7599:6:36"},{"name":"_1","nativeSrc":"7607:2:36","nodeType":"YulIdentifier","src":"7607:2:36"}],"functionName":{"name":"and","nativeSrc":"7595:3:36","nodeType":"YulIdentifier","src":"7595:3:36"},"nativeSrc":"7595:15:36","nodeType":"YulFunctionCall","src":"7595:15:36"}],"functionName":{"name":"mstore","nativeSrc":"7568:6:36","nodeType":"YulIdentifier","src":"7568:6:36"},"nativeSrc":"7568:43:36","nodeType":"YulFunctionCall","src":"7568:43:36"},"nativeSrc":"7568:43:36","nodeType":"YulExpressionStatement","src":"7568:43:36"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nativeSrc":"7290:327:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7380:9:36","nodeType":"YulTypedName","src":"7380:9:36","type":""},{"name":"value1","nativeSrc":"7391:6:36","nodeType":"YulTypedName","src":"7391:6:36","type":""},{"name":"value0","nativeSrc":"7399:6:36","nodeType":"YulTypedName","src":"7399:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7410:4:36","nodeType":"YulTypedName","src":"7410:4:36","type":""}],"src":"7290:327:36"},{"body":{"nativeSrc":"7654:152:36","nodeType":"YulBlock","src":"7654:152:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7671:1:36","nodeType":"YulLiteral","src":"7671:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"7674:77:36","nodeType":"YulLiteral","src":"7674:77:36","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"7664:6:36","nodeType":"YulIdentifier","src":"7664:6:36"},"nativeSrc":"7664:88:36","nodeType":"YulFunctionCall","src":"7664:88:36"},"nativeSrc":"7664:88:36","nodeType":"YulExpressionStatement","src":"7664:88:36"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7768:1:36","nodeType":"YulLiteral","src":"7768:1:36","type":"","value":"4"},{"kind":"number","nativeSrc":"7771:4:36","nodeType":"YulLiteral","src":"7771:4:36","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"7761:6:36","nodeType":"YulIdentifier","src":"7761:6:36"},"nativeSrc":"7761:15:36","nodeType":"YulFunctionCall","src":"7761:15:36"},"nativeSrc":"7761:15:36","nodeType":"YulExpressionStatement","src":"7761:15:36"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7792:1:36","nodeType":"YulLiteral","src":"7792:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"7795:4:36","nodeType":"YulLiteral","src":"7795:4:36","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"7785:6:36","nodeType":"YulIdentifier","src":"7785:6:36"},"nativeSrc":"7785:15:36","nodeType":"YulFunctionCall","src":"7785:15:36"},"nativeSrc":"7785:15:36","nodeType":"YulExpressionStatement","src":"7785:15:36"}]},"name":"panic_error_0x41","nativeSrc":"7622:184:36","nodeType":"YulFunctionDefinition","src":"7622:184:36"},{"body":{"nativeSrc":"7856:289:36","nodeType":"YulBlock","src":"7856:289:36","statements":[{"nativeSrc":"7866:19:36","nodeType":"YulAssignment","src":"7866:19:36","value":{"arguments":[{"kind":"number","nativeSrc":"7882:2:36","nodeType":"YulLiteral","src":"7882:2:36","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"7876:5:36","nodeType":"YulIdentifier","src":"7876:5:36"},"nativeSrc":"7876:9:36","nodeType":"YulFunctionCall","src":"7876:9:36"},"variableNames":[{"name":"memPtr","nativeSrc":"7866:6:36","nodeType":"YulIdentifier","src":"7866:6:36"}]},{"nativeSrc":"7894:117:36","nodeType":"YulVariableDeclaration","src":"7894:117:36","value":{"arguments":[{"name":"memPtr","nativeSrc":"7916:6:36","nodeType":"YulIdentifier","src":"7916:6:36"},{"arguments":[{"arguments":[{"name":"size","nativeSrc":"7932:4:36","nodeType":"YulIdentifier","src":"7932:4:36"},{"kind":"number","nativeSrc":"7938:2:36","nodeType":"YulLiteral","src":"7938:2:36","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"7928:3:36","nodeType":"YulIdentifier","src":"7928:3:36"},"nativeSrc":"7928:13:36","nodeType":"YulFunctionCall","src":"7928:13:36"},{"kind":"number","nativeSrc":"7943:66:36","nodeType":"YulLiteral","src":"7943:66:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"7924:3:36","nodeType":"YulIdentifier","src":"7924:3:36"},"nativeSrc":"7924:86:36","nodeType":"YulFunctionCall","src":"7924:86:36"}],"functionName":{"name":"add","nativeSrc":"7912:3:36","nodeType":"YulIdentifier","src":"7912:3:36"},"nativeSrc":"7912:99:36","nodeType":"YulFunctionCall","src":"7912:99:36"},"variables":[{"name":"newFreePtr","nativeSrc":"7898:10:36","nodeType":"YulTypedName","src":"7898:10:36","type":""}]},{"body":{"nativeSrc":"8086:22:36","nodeType":"YulBlock","src":"8086:22:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"8088:16:36","nodeType":"YulIdentifier","src":"8088:16:36"},"nativeSrc":"8088:18:36","nodeType":"YulFunctionCall","src":"8088:18:36"},"nativeSrc":"8088:18:36","nodeType":"YulExpressionStatement","src":"8088:18:36"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"8029:10:36","nodeType":"YulIdentifier","src":"8029:10:36"},{"kind":"number","nativeSrc":"8041:18:36","nodeType":"YulLiteral","src":"8041:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"8026:2:36","nodeType":"YulIdentifier","src":"8026:2:36"},"nativeSrc":"8026:34:36","nodeType":"YulFunctionCall","src":"8026:34:36"},{"arguments":[{"name":"newFreePtr","nativeSrc":"8065:10:36","nodeType":"YulIdentifier","src":"8065:10:36"},{"name":"memPtr","nativeSrc":"8077:6:36","nodeType":"YulIdentifier","src":"8077:6:36"}],"functionName":{"name":"lt","nativeSrc":"8062:2:36","nodeType":"YulIdentifier","src":"8062:2:36"},"nativeSrc":"8062:22:36","nodeType":"YulFunctionCall","src":"8062:22:36"}],"functionName":{"name":"or","nativeSrc":"8023:2:36","nodeType":"YulIdentifier","src":"8023:2:36"},"nativeSrc":"8023:62:36","nodeType":"YulFunctionCall","src":"8023:62:36"},"nativeSrc":"8020:88:36","nodeType":"YulIf","src":"8020:88:36"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8124:2:36","nodeType":"YulLiteral","src":"8124:2:36","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"8128:10:36","nodeType":"YulIdentifier","src":"8128:10:36"}],"functionName":{"name":"mstore","nativeSrc":"8117:6:36","nodeType":"YulIdentifier","src":"8117:6:36"},"nativeSrc":"8117:22:36","nodeType":"YulFunctionCall","src":"8117:22:36"},"nativeSrc":"8117:22:36","nodeType":"YulExpressionStatement","src":"8117:22:36"}]},"name":"allocate_memory","nativeSrc":"7811:334:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nativeSrc":"7836:4:36","nodeType":"YulTypedName","src":"7836:4:36","type":""}],"returnVariables":[{"name":"memPtr","nativeSrc":"7845:6:36","nodeType":"YulTypedName","src":"7845:6:36","type":""}],"src":"7811:334:36"},{"body":{"nativeSrc":"8219:114:36","nodeType":"YulBlock","src":"8219:114:36","statements":[{"body":{"nativeSrc":"8263:22:36","nodeType":"YulBlock","src":"8263:22:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"8265:16:36","nodeType":"YulIdentifier","src":"8265:16:36"},"nativeSrc":"8265:18:36","nodeType":"YulFunctionCall","src":"8265:18:36"},"nativeSrc":"8265:18:36","nodeType":"YulExpressionStatement","src":"8265:18:36"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"8235:6:36","nodeType":"YulIdentifier","src":"8235:6:36"},{"kind":"number","nativeSrc":"8243:18:36","nodeType":"YulLiteral","src":"8243:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"8232:2:36","nodeType":"YulIdentifier","src":"8232:2:36"},"nativeSrc":"8232:30:36","nodeType":"YulFunctionCall","src":"8232:30:36"},"nativeSrc":"8229:56:36","nodeType":"YulIf","src":"8229:56:36"},{"nativeSrc":"8294:33:36","nodeType":"YulAssignment","src":"8294:33:36","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"8310:1:36","nodeType":"YulLiteral","src":"8310:1:36","type":"","value":"5"},{"name":"length","nativeSrc":"8313:6:36","nodeType":"YulIdentifier","src":"8313:6:36"}],"functionName":{"name":"shl","nativeSrc":"8306:3:36","nodeType":"YulIdentifier","src":"8306:3:36"},"nativeSrc":"8306:14:36","nodeType":"YulFunctionCall","src":"8306:14:36"},{"kind":"number","nativeSrc":"8322:4:36","nodeType":"YulLiteral","src":"8322:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"8302:3:36","nodeType":"YulIdentifier","src":"8302:3:36"},"nativeSrc":"8302:25:36","nodeType":"YulFunctionCall","src":"8302:25:36"},"variableNames":[{"name":"size","nativeSrc":"8294:4:36","nodeType":"YulIdentifier","src":"8294:4:36"}]}]},"name":"array_allocation_size_array_bytes32_dyn","nativeSrc":"8150:183:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nativeSrc":"8199:6:36","nodeType":"YulTypedName","src":"8199:6:36","type":""}],"returnVariables":[{"name":"size","nativeSrc":"8210:4:36","nodeType":"YulTypedName","src":"8210:4:36","type":""}],"src":"8150:183:36"},{"body":{"nativeSrc":"8402:604:36","nodeType":"YulBlock","src":"8402:604:36","statements":[{"body":{"nativeSrc":"8451:16:36","nodeType":"YulBlock","src":"8451:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8460:1:36","nodeType":"YulLiteral","src":"8460:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"8463:1:36","nodeType":"YulLiteral","src":"8463:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8453:6:36","nodeType":"YulIdentifier","src":"8453:6:36"},"nativeSrc":"8453:12:36","nodeType":"YulFunctionCall","src":"8453:12:36"},"nativeSrc":"8453:12:36","nodeType":"YulExpressionStatement","src":"8453:12:36"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"8430:6:36","nodeType":"YulIdentifier","src":"8430:6:36"},{"kind":"number","nativeSrc":"8438:4:36","nodeType":"YulLiteral","src":"8438:4:36","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"8426:3:36","nodeType":"YulIdentifier","src":"8426:3:36"},"nativeSrc":"8426:17:36","nodeType":"YulFunctionCall","src":"8426:17:36"},{"name":"end","nativeSrc":"8445:3:36","nodeType":"YulIdentifier","src":"8445:3:36"}],"functionName":{"name":"slt","nativeSrc":"8422:3:36","nodeType":"YulIdentifier","src":"8422:3:36"},"nativeSrc":"8422:27:36","nodeType":"YulFunctionCall","src":"8422:27:36"}],"functionName":{"name":"iszero","nativeSrc":"8415:6:36","nodeType":"YulIdentifier","src":"8415:6:36"},"nativeSrc":"8415:35:36","nodeType":"YulFunctionCall","src":"8415:35:36"},"nativeSrc":"8412:55:36","nodeType":"YulIf","src":"8412:55:36"},{"nativeSrc":"8476:30:36","nodeType":"YulVariableDeclaration","src":"8476:30:36","value":{"arguments":[{"name":"offset","nativeSrc":"8499:6:36","nodeType":"YulIdentifier","src":"8499:6:36"}],"functionName":{"name":"calldataload","nativeSrc":"8486:12:36","nodeType":"YulIdentifier","src":"8486:12:36"},"nativeSrc":"8486:20:36","nodeType":"YulFunctionCall","src":"8486:20:36"},"variables":[{"name":"_1","nativeSrc":"8480:2:36","nodeType":"YulTypedName","src":"8480:2:36","type":""}]},{"nativeSrc":"8515:14:36","nodeType":"YulVariableDeclaration","src":"8515:14:36","value":{"kind":"number","nativeSrc":"8525:4:36","nodeType":"YulLiteral","src":"8525:4:36","type":"","value":"0x20"},"variables":[{"name":"_2","nativeSrc":"8519:2:36","nodeType":"YulTypedName","src":"8519:2:36","type":""}]},{"nativeSrc":"8538:71:36","nodeType":"YulVariableDeclaration","src":"8538:71:36","value":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"8605:2:36","nodeType":"YulIdentifier","src":"8605:2:36"}],"functionName":{"name":"array_allocation_size_array_bytes32_dyn","nativeSrc":"8565:39:36","nodeType":"YulIdentifier","src":"8565:39:36"},"nativeSrc":"8565:43:36","nodeType":"YulFunctionCall","src":"8565:43:36"}],"functionName":{"name":"allocate_memory","nativeSrc":"8549:15:36","nodeType":"YulIdentifier","src":"8549:15:36"},"nativeSrc":"8549:60:36","nodeType":"YulFunctionCall","src":"8549:60:36"},"variables":[{"name":"dst","nativeSrc":"8542:3:36","nodeType":"YulTypedName","src":"8542:3:36","type":""}]},{"nativeSrc":"8618:16:36","nodeType":"YulVariableDeclaration","src":"8618:16:36","value":{"name":"dst","nativeSrc":"8631:3:36","nodeType":"YulIdentifier","src":"8631:3:36"},"variables":[{"name":"dst_1","nativeSrc":"8622:5:36","nodeType":"YulTypedName","src":"8622:5:36","type":""}]},{"expression":{"arguments":[{"name":"dst","nativeSrc":"8650:3:36","nodeType":"YulIdentifier","src":"8650:3:36"},{"name":"_1","nativeSrc":"8655:2:36","nodeType":"YulIdentifier","src":"8655:2:36"}],"functionName":{"name":"mstore","nativeSrc":"8643:6:36","nodeType":"YulIdentifier","src":"8643:6:36"},"nativeSrc":"8643:15:36","nodeType":"YulFunctionCall","src":"8643:15:36"},"nativeSrc":"8643:15:36","nodeType":"YulExpressionStatement","src":"8643:15:36"},{"nativeSrc":"8667:21:36","nodeType":"YulAssignment","src":"8667:21:36","value":{"arguments":[{"name":"dst","nativeSrc":"8678:3:36","nodeType":"YulIdentifier","src":"8678:3:36"},{"kind":"number","nativeSrc":"8683:4:36","nodeType":"YulLiteral","src":"8683:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"8674:3:36","nodeType":"YulIdentifier","src":"8674:3:36"},"nativeSrc":"8674:14:36","nodeType":"YulFunctionCall","src":"8674:14:36"},"variableNames":[{"name":"dst","nativeSrc":"8667:3:36","nodeType":"YulIdentifier","src":"8667:3:36"}]},{"nativeSrc":"8697:48:36","nodeType":"YulVariableDeclaration","src":"8697:48:36","value":{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"8719:6:36","nodeType":"YulIdentifier","src":"8719:6:36"},{"arguments":[{"kind":"number","nativeSrc":"8731:1:36","nodeType":"YulLiteral","src":"8731:1:36","type":"","value":"5"},{"name":"_1","nativeSrc":"8734:2:36","nodeType":"YulIdentifier","src":"8734:2:36"}],"functionName":{"name":"shl","nativeSrc":"8727:3:36","nodeType":"YulIdentifier","src":"8727:3:36"},"nativeSrc":"8727:10:36","nodeType":"YulFunctionCall","src":"8727:10:36"}],"functionName":{"name":"add","nativeSrc":"8715:3:36","nodeType":"YulIdentifier","src":"8715:3:36"},"nativeSrc":"8715:23:36","nodeType":"YulFunctionCall","src":"8715:23:36"},{"kind":"number","nativeSrc":"8740:4:36","nodeType":"YulLiteral","src":"8740:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"8711:3:36","nodeType":"YulIdentifier","src":"8711:3:36"},"nativeSrc":"8711:34:36","nodeType":"YulFunctionCall","src":"8711:34:36"},"variables":[{"name":"srcEnd","nativeSrc":"8701:6:36","nodeType":"YulTypedName","src":"8701:6:36","type":""}]},{"body":{"nativeSrc":"8773:16:36","nodeType":"YulBlock","src":"8773:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8782:1:36","nodeType":"YulLiteral","src":"8782:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"8785:1:36","nodeType":"YulLiteral","src":"8785:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8775:6:36","nodeType":"YulIdentifier","src":"8775:6:36"},"nativeSrc":"8775:12:36","nodeType":"YulFunctionCall","src":"8775:12:36"},"nativeSrc":"8775:12:36","nodeType":"YulExpressionStatement","src":"8775:12:36"}]},"condition":{"arguments":[{"name":"srcEnd","nativeSrc":"8760:6:36","nodeType":"YulIdentifier","src":"8760:6:36"},{"name":"end","nativeSrc":"8768:3:36","nodeType":"YulIdentifier","src":"8768:3:36"}],"functionName":{"name":"gt","nativeSrc":"8757:2:36","nodeType":"YulIdentifier","src":"8757:2:36"},"nativeSrc":"8757:15:36","nodeType":"YulFunctionCall","src":"8757:15:36"},"nativeSrc":"8754:35:36","nodeType":"YulIf","src":"8754:35:36"},{"nativeSrc":"8798:28:36","nodeType":"YulVariableDeclaration","src":"8798:28:36","value":{"arguments":[{"name":"offset","nativeSrc":"8813:6:36","nodeType":"YulIdentifier","src":"8813:6:36"},{"kind":"number","nativeSrc":"8821:4:36","nodeType":"YulLiteral","src":"8821:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"8809:3:36","nodeType":"YulIdentifier","src":"8809:3:36"},"nativeSrc":"8809:17:36","nodeType":"YulFunctionCall","src":"8809:17:36"},"variables":[{"name":"src","nativeSrc":"8802:3:36","nodeType":"YulTypedName","src":"8802:3:36","type":""}]},{"body":{"nativeSrc":"8891:86:36","nodeType":"YulBlock","src":"8891:86:36","statements":[{"expression":{"arguments":[{"name":"dst","nativeSrc":"8912:3:36","nodeType":"YulIdentifier","src":"8912:3:36"},{"arguments":[{"name":"src","nativeSrc":"8930:3:36","nodeType":"YulIdentifier","src":"8930:3:36"}],"functionName":{"name":"calldataload","nativeSrc":"8917:12:36","nodeType":"YulIdentifier","src":"8917:12:36"},"nativeSrc":"8917:17:36","nodeType":"YulFunctionCall","src":"8917:17:36"}],"functionName":{"name":"mstore","nativeSrc":"8905:6:36","nodeType":"YulIdentifier","src":"8905:6:36"},"nativeSrc":"8905:30:36","nodeType":"YulFunctionCall","src":"8905:30:36"},"nativeSrc":"8905:30:36","nodeType":"YulExpressionStatement","src":"8905:30:36"},{"nativeSrc":"8948:19:36","nodeType":"YulAssignment","src":"8948:19:36","value":{"arguments":[{"name":"dst","nativeSrc":"8959:3:36","nodeType":"YulIdentifier","src":"8959:3:36"},{"name":"_2","nativeSrc":"8964:2:36","nodeType":"YulIdentifier","src":"8964:2:36"}],"functionName":{"name":"add","nativeSrc":"8955:3:36","nodeType":"YulIdentifier","src":"8955:3:36"},"nativeSrc":"8955:12:36","nodeType":"YulFunctionCall","src":"8955:12:36"},"variableNames":[{"name":"dst","nativeSrc":"8948:3:36","nodeType":"YulIdentifier","src":"8948:3:36"}]}]},"condition":{"arguments":[{"name":"src","nativeSrc":"8846:3:36","nodeType":"YulIdentifier","src":"8846:3:36"},{"name":"srcEnd","nativeSrc":"8851:6:36","nodeType":"YulIdentifier","src":"8851:6:36"}],"functionName":{"name":"lt","nativeSrc":"8843:2:36","nodeType":"YulIdentifier","src":"8843:2:36"},"nativeSrc":"8843:15:36","nodeType":"YulFunctionCall","src":"8843:15:36"},"nativeSrc":"8835:142:36","nodeType":"YulForLoop","post":{"nativeSrc":"8859:23:36","nodeType":"YulBlock","src":"8859:23:36","statements":[{"nativeSrc":"8861:19:36","nodeType":"YulAssignment","src":"8861:19:36","value":{"arguments":[{"name":"src","nativeSrc":"8872:3:36","nodeType":"YulIdentifier","src":"8872:3:36"},{"name":"_2","nativeSrc":"8877:2:36","nodeType":"YulIdentifier","src":"8877:2:36"}],"functionName":{"name":"add","nativeSrc":"8868:3:36","nodeType":"YulIdentifier","src":"8868:3:36"},"nativeSrc":"8868:12:36","nodeType":"YulFunctionCall","src":"8868:12:36"},"variableNames":[{"name":"src","nativeSrc":"8861:3:36","nodeType":"YulIdentifier","src":"8861:3:36"}]}]},"pre":{"nativeSrc":"8839:3:36","nodeType":"YulBlock","src":"8839:3:36","statements":[]},"src":"8835:142:36"},{"nativeSrc":"8986:14:36","nodeType":"YulAssignment","src":"8986:14:36","value":{"name":"dst_1","nativeSrc":"8995:5:36","nodeType":"YulIdentifier","src":"8995:5:36"},"variableNames":[{"name":"array","nativeSrc":"8986:5:36","nodeType":"YulIdentifier","src":"8986:5:36"}]}]},"name":"abi_decode_array_uint256_dyn","nativeSrc":"8338:668:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"8376:6:36","nodeType":"YulTypedName","src":"8376:6:36","type":""},{"name":"end","nativeSrc":"8384:3:36","nodeType":"YulTypedName","src":"8384:3:36","type":""}],"returnVariables":[{"name":"array","nativeSrc":"8392:5:36","nodeType":"YulTypedName","src":"8392:5:36","type":""}],"src":"8338:668:36"},{"body":{"nativeSrc":"9249:1355:36","nodeType":"YulBlock","src":"9249:1355:36","statements":[{"body":{"nativeSrc":"9296:16:36","nodeType":"YulBlock","src":"9296:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9305:1:36","nodeType":"YulLiteral","src":"9305:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"9308:1:36","nodeType":"YulLiteral","src":"9308:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9298:6:36","nodeType":"YulIdentifier","src":"9298:6:36"},"nativeSrc":"9298:12:36","nodeType":"YulFunctionCall","src":"9298:12:36"},"nativeSrc":"9298:12:36","nodeType":"YulExpressionStatement","src":"9298:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"9270:7:36","nodeType":"YulIdentifier","src":"9270:7:36"},{"name":"headStart","nativeSrc":"9279:9:36","nodeType":"YulIdentifier","src":"9279:9:36"}],"functionName":{"name":"sub","nativeSrc":"9266:3:36","nodeType":"YulIdentifier","src":"9266:3:36"},"nativeSrc":"9266:23:36","nodeType":"YulFunctionCall","src":"9266:23:36"},{"kind":"number","nativeSrc":"9291:3:36","nodeType":"YulLiteral","src":"9291:3:36","type":"","value":"192"}],"functionName":{"name":"slt","nativeSrc":"9262:3:36","nodeType":"YulIdentifier","src":"9262:3:36"},"nativeSrc":"9262:33:36","nodeType":"YulFunctionCall","src":"9262:33:36"},"nativeSrc":"9259:53:36","nodeType":"YulIf","src":"9259:53:36"},{"nativeSrc":"9321:33:36","nodeType":"YulAssignment","src":"9321:33:36","value":{"arguments":[{"name":"headStart","nativeSrc":"9344:9:36","nodeType":"YulIdentifier","src":"9344:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"9331:12:36","nodeType":"YulIdentifier","src":"9331:12:36"},"nativeSrc":"9331:23:36","nodeType":"YulFunctionCall","src":"9331:23:36"},"variableNames":[{"name":"value0","nativeSrc":"9321:6:36","nodeType":"YulIdentifier","src":"9321:6:36"}]},{"nativeSrc":"9363:12:36","nodeType":"YulVariableDeclaration","src":"9363:12:36","value":{"kind":"number","nativeSrc":"9373:2:36","nodeType":"YulLiteral","src":"9373:2:36","type":"","value":"32"},"variables":[{"name":"_1","nativeSrc":"9367:2:36","nodeType":"YulTypedName","src":"9367:2:36","type":""}]},{"nativeSrc":"9384:42:36","nodeType":"YulAssignment","src":"9384:42:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9411:9:36","nodeType":"YulIdentifier","src":"9411:9:36"},{"name":"_1","nativeSrc":"9422:2:36","nodeType":"YulIdentifier","src":"9422:2:36"}],"functionName":{"name":"add","nativeSrc":"9407:3:36","nodeType":"YulIdentifier","src":"9407:3:36"},"nativeSrc":"9407:18:36","nodeType":"YulFunctionCall","src":"9407:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"9394:12:36","nodeType":"YulIdentifier","src":"9394:12:36"},"nativeSrc":"9394:32:36","nodeType":"YulFunctionCall","src":"9394:32:36"},"variableNames":[{"name":"value1","nativeSrc":"9384:6:36","nodeType":"YulIdentifier","src":"9384:6:36"}]},{"nativeSrc":"9435:46:36","nodeType":"YulVariableDeclaration","src":"9435:46:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9466:9:36","nodeType":"YulIdentifier","src":"9466:9:36"},{"kind":"number","nativeSrc":"9477:2:36","nodeType":"YulLiteral","src":"9477:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9462:3:36","nodeType":"YulIdentifier","src":"9462:3:36"},"nativeSrc":"9462:18:36","nodeType":"YulFunctionCall","src":"9462:18:36"}],"functionName":{"name":"calldataload","nativeSrc":"9449:12:36","nodeType":"YulIdentifier","src":"9449:12:36"},"nativeSrc":"9449:32:36","nodeType":"YulFunctionCall","src":"9449:32:36"},"variables":[{"name":"offset","nativeSrc":"9439:6:36","nodeType":"YulTypedName","src":"9439:6:36","type":""}]},{"nativeSrc":"9490:28:36","nodeType":"YulVariableDeclaration","src":"9490:28:36","value":{"kind":"number","nativeSrc":"9500:18:36","nodeType":"YulLiteral","src":"9500:18:36","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nativeSrc":"9494:2:36","nodeType":"YulTypedName","src":"9494:2:36","type":""}]},{"body":{"nativeSrc":"9545:16:36","nodeType":"YulBlock","src":"9545:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9554:1:36","nodeType":"YulLiteral","src":"9554:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"9557:1:36","nodeType":"YulLiteral","src":"9557:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9547:6:36","nodeType":"YulIdentifier","src":"9547:6:36"},"nativeSrc":"9547:12:36","nodeType":"YulFunctionCall","src":"9547:12:36"},"nativeSrc":"9547:12:36","nodeType":"YulExpressionStatement","src":"9547:12:36"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"9533:6:36","nodeType":"YulIdentifier","src":"9533:6:36"},{"name":"_2","nativeSrc":"9541:2:36","nodeType":"YulIdentifier","src":"9541:2:36"}],"functionName":{"name":"gt","nativeSrc":"9530:2:36","nodeType":"YulIdentifier","src":"9530:2:36"},"nativeSrc":"9530:14:36","nodeType":"YulFunctionCall","src":"9530:14:36"},"nativeSrc":"9527:34:36","nodeType":"YulIf","src":"9527:34:36"},{"nativeSrc":"9570:32:36","nodeType":"YulVariableDeclaration","src":"9570:32:36","value":{"arguments":[{"name":"headStart","nativeSrc":"9584:9:36","nodeType":"YulIdentifier","src":"9584:9:36"},{"name":"offset","nativeSrc":"9595:6:36","nodeType":"YulIdentifier","src":"9595:6:36"}],"functionName":{"name":"add","nativeSrc":"9580:3:36","nodeType":"YulIdentifier","src":"9580:3:36"},"nativeSrc":"9580:22:36","nodeType":"YulFunctionCall","src":"9580:22:36"},"variables":[{"name":"_3","nativeSrc":"9574:2:36","nodeType":"YulTypedName","src":"9574:2:36","type":""}]},{"body":{"nativeSrc":"9650:16:36","nodeType":"YulBlock","src":"9650:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9659:1:36","nodeType":"YulLiteral","src":"9659:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"9662:1:36","nodeType":"YulLiteral","src":"9662:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9652:6:36","nodeType":"YulIdentifier","src":"9652:6:36"},"nativeSrc":"9652:12:36","nodeType":"YulFunctionCall","src":"9652:12:36"},"nativeSrc":"9652:12:36","nodeType":"YulExpressionStatement","src":"9652:12:36"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nativeSrc":"9629:2:36","nodeType":"YulIdentifier","src":"9629:2:36"},{"kind":"number","nativeSrc":"9633:4:36","nodeType":"YulLiteral","src":"9633:4:36","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"9625:3:36","nodeType":"YulIdentifier","src":"9625:3:36"},"nativeSrc":"9625:13:36","nodeType":"YulFunctionCall","src":"9625:13:36"},{"name":"dataEnd","nativeSrc":"9640:7:36","nodeType":"YulIdentifier","src":"9640:7:36"}],"functionName":{"name":"slt","nativeSrc":"9621:3:36","nodeType":"YulIdentifier","src":"9621:3:36"},"nativeSrc":"9621:27:36","nodeType":"YulFunctionCall","src":"9621:27:36"}],"functionName":{"name":"iszero","nativeSrc":"9614:6:36","nodeType":"YulIdentifier","src":"9614:6:36"},"nativeSrc":"9614:35:36","nodeType":"YulFunctionCall","src":"9614:35:36"},"nativeSrc":"9611:55:36","nodeType":"YulIf","src":"9611:55:36"},{"nativeSrc":"9675:26:36","nodeType":"YulVariableDeclaration","src":"9675:26:36","value":{"arguments":[{"name":"_3","nativeSrc":"9698:2:36","nodeType":"YulIdentifier","src":"9698:2:36"}],"functionName":{"name":"calldataload","nativeSrc":"9685:12:36","nodeType":"YulIdentifier","src":"9685:12:36"},"nativeSrc":"9685:16:36","nodeType":"YulFunctionCall","src":"9685:16:36"},"variables":[{"name":"_4","nativeSrc":"9679:2:36","nodeType":"YulTypedName","src":"9679:2:36","type":""}]},{"nativeSrc":"9710:71:36","nodeType":"YulVariableDeclaration","src":"9710:71:36","value":{"arguments":[{"arguments":[{"name":"_4","nativeSrc":"9777:2:36","nodeType":"YulIdentifier","src":"9777:2:36"}],"functionName":{"name":"array_allocation_size_array_bytes32_dyn","nativeSrc":"9737:39:36","nodeType":"YulIdentifier","src":"9737:39:36"},"nativeSrc":"9737:43:36","nodeType":"YulFunctionCall","src":"9737:43:36"}],"functionName":{"name":"allocate_memory","nativeSrc":"9721:15:36","nodeType":"YulIdentifier","src":"9721:15:36"},"nativeSrc":"9721:60:36","nodeType":"YulFunctionCall","src":"9721:60:36"},"variables":[{"name":"dst","nativeSrc":"9714:3:36","nodeType":"YulTypedName","src":"9714:3:36","type":""}]},{"nativeSrc":"9790:16:36","nodeType":"YulVariableDeclaration","src":"9790:16:36","value":{"name":"dst","nativeSrc":"9803:3:36","nodeType":"YulIdentifier","src":"9803:3:36"},"variables":[{"name":"dst_1","nativeSrc":"9794:5:36","nodeType":"YulTypedName","src":"9794:5:36","type":""}]},{"expression":{"arguments":[{"name":"dst","nativeSrc":"9822:3:36","nodeType":"YulIdentifier","src":"9822:3:36"},{"name":"_4","nativeSrc":"9827:2:36","nodeType":"YulIdentifier","src":"9827:2:36"}],"functionName":{"name":"mstore","nativeSrc":"9815:6:36","nodeType":"YulIdentifier","src":"9815:6:36"},"nativeSrc":"9815:15:36","nodeType":"YulFunctionCall","src":"9815:15:36"},"nativeSrc":"9815:15:36","nodeType":"YulExpressionStatement","src":"9815:15:36"},{"nativeSrc":"9839:19:36","nodeType":"YulAssignment","src":"9839:19:36","value":{"arguments":[{"name":"dst","nativeSrc":"9850:3:36","nodeType":"YulIdentifier","src":"9850:3:36"},{"name":"_1","nativeSrc":"9855:2:36","nodeType":"YulIdentifier","src":"9855:2:36"}],"functionName":{"name":"add","nativeSrc":"9846:3:36","nodeType":"YulIdentifier","src":"9846:3:36"},"nativeSrc":"9846:12:36","nodeType":"YulFunctionCall","src":"9846:12:36"},"variableNames":[{"name":"dst","nativeSrc":"9839:3:36","nodeType":"YulIdentifier","src":"9839:3:36"}]},{"nativeSrc":"9867:42:36","nodeType":"YulVariableDeclaration","src":"9867:42:36","value":{"arguments":[{"arguments":[{"name":"_3","nativeSrc":"9889:2:36","nodeType":"YulIdentifier","src":"9889:2:36"},{"arguments":[{"kind":"number","nativeSrc":"9897:1:36","nodeType":"YulLiteral","src":"9897:1:36","type":"","value":"5"},{"name":"_4","nativeSrc":"9900:2:36","nodeType":"YulIdentifier","src":"9900:2:36"}],"functionName":{"name":"shl","nativeSrc":"9893:3:36","nodeType":"YulIdentifier","src":"9893:3:36"},"nativeSrc":"9893:10:36","nodeType":"YulFunctionCall","src":"9893:10:36"}],"functionName":{"name":"add","nativeSrc":"9885:3:36","nodeType":"YulIdentifier","src":"9885:3:36"},"nativeSrc":"9885:19:36","nodeType":"YulFunctionCall","src":"9885:19:36"},{"name":"_1","nativeSrc":"9906:2:36","nodeType":"YulIdentifier","src":"9906:2:36"}],"functionName":{"name":"add","nativeSrc":"9881:3:36","nodeType":"YulIdentifier","src":"9881:3:36"},"nativeSrc":"9881:28:36","nodeType":"YulFunctionCall","src":"9881:28:36"},"variables":[{"name":"srcEnd","nativeSrc":"9871:6:36","nodeType":"YulTypedName","src":"9871:6:36","type":""}]},{"body":{"nativeSrc":"9941:16:36","nodeType":"YulBlock","src":"9941:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9950:1:36","nodeType":"YulLiteral","src":"9950:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"9953:1:36","nodeType":"YulLiteral","src":"9953:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9943:6:36","nodeType":"YulIdentifier","src":"9943:6:36"},"nativeSrc":"9943:12:36","nodeType":"YulFunctionCall","src":"9943:12:36"},"nativeSrc":"9943:12:36","nodeType":"YulExpressionStatement","src":"9943:12:36"}]},"condition":{"arguments":[{"name":"srcEnd","nativeSrc":"9924:6:36","nodeType":"YulIdentifier","src":"9924:6:36"},{"name":"dataEnd","nativeSrc":"9932:7:36","nodeType":"YulIdentifier","src":"9932:7:36"}],"functionName":{"name":"gt","nativeSrc":"9921:2:36","nodeType":"YulIdentifier","src":"9921:2:36"},"nativeSrc":"9921:19:36","nodeType":"YulFunctionCall","src":"9921:19:36"},"nativeSrc":"9918:39:36","nodeType":"YulIf","src":"9918:39:36"},{"nativeSrc":"9966:22:36","nodeType":"YulVariableDeclaration","src":"9966:22:36","value":{"arguments":[{"name":"_3","nativeSrc":"9981:2:36","nodeType":"YulIdentifier","src":"9981:2:36"},{"name":"_1","nativeSrc":"9985:2:36","nodeType":"YulIdentifier","src":"9985:2:36"}],"functionName":{"name":"add","nativeSrc":"9977:3:36","nodeType":"YulIdentifier","src":"9977:3:36"},"nativeSrc":"9977:11:36","nodeType":"YulFunctionCall","src":"9977:11:36"},"variables":[{"name":"src","nativeSrc":"9970:3:36","nodeType":"YulTypedName","src":"9970:3:36","type":""}]},{"body":{"nativeSrc":"10053:86:36","nodeType":"YulBlock","src":"10053:86:36","statements":[{"expression":{"arguments":[{"name":"dst","nativeSrc":"10074:3:36","nodeType":"YulIdentifier","src":"10074:3:36"},{"arguments":[{"name":"src","nativeSrc":"10092:3:36","nodeType":"YulIdentifier","src":"10092:3:36"}],"functionName":{"name":"calldataload","nativeSrc":"10079:12:36","nodeType":"YulIdentifier","src":"10079:12:36"},"nativeSrc":"10079:17:36","nodeType":"YulFunctionCall","src":"10079:17:36"}],"functionName":{"name":"mstore","nativeSrc":"10067:6:36","nodeType":"YulIdentifier","src":"10067:6:36"},"nativeSrc":"10067:30:36","nodeType":"YulFunctionCall","src":"10067:30:36"},"nativeSrc":"10067:30:36","nodeType":"YulExpressionStatement","src":"10067:30:36"},{"nativeSrc":"10110:19:36","nodeType":"YulAssignment","src":"10110:19:36","value":{"arguments":[{"name":"dst","nativeSrc":"10121:3:36","nodeType":"YulIdentifier","src":"10121:3:36"},{"name":"_1","nativeSrc":"10126:2:36","nodeType":"YulIdentifier","src":"10126:2:36"}],"functionName":{"name":"add","nativeSrc":"10117:3:36","nodeType":"YulIdentifier","src":"10117:3:36"},"nativeSrc":"10117:12:36","nodeType":"YulFunctionCall","src":"10117:12:36"},"variableNames":[{"name":"dst","nativeSrc":"10110:3:36","nodeType":"YulIdentifier","src":"10110:3:36"}]}]},"condition":{"arguments":[{"name":"src","nativeSrc":"10008:3:36","nodeType":"YulIdentifier","src":"10008:3:36"},{"name":"srcEnd","nativeSrc":"10013:6:36","nodeType":"YulIdentifier","src":"10013:6:36"}],"functionName":{"name":"lt","nativeSrc":"10005:2:36","nodeType":"YulIdentifier","src":"10005:2:36"},"nativeSrc":"10005:15:36","nodeType":"YulFunctionCall","src":"10005:15:36"},"nativeSrc":"9997:142:36","nodeType":"YulForLoop","post":{"nativeSrc":"10021:23:36","nodeType":"YulBlock","src":"10021:23:36","statements":[{"nativeSrc":"10023:19:36","nodeType":"YulAssignment","src":"10023:19:36","value":{"arguments":[{"name":"src","nativeSrc":"10034:3:36","nodeType":"YulIdentifier","src":"10034:3:36"},{"name":"_1","nativeSrc":"10039:2:36","nodeType":"YulIdentifier","src":"10039:2:36"}],"functionName":{"name":"add","nativeSrc":"10030:3:36","nodeType":"YulIdentifier","src":"10030:3:36"},"nativeSrc":"10030:12:36","nodeType":"YulFunctionCall","src":"10030:12:36"},"variableNames":[{"name":"src","nativeSrc":"10023:3:36","nodeType":"YulIdentifier","src":"10023:3:36"}]}]},"pre":{"nativeSrc":"10001:3:36","nodeType":"YulBlock","src":"10001:3:36","statements":[]},"src":"9997:142:36"},{"nativeSrc":"10148:15:36","nodeType":"YulAssignment","src":"10148:15:36","value":{"name":"dst_1","nativeSrc":"10158:5:36","nodeType":"YulIdentifier","src":"10158:5:36"},"variableNames":[{"name":"value2","nativeSrc":"10148:6:36","nodeType":"YulIdentifier","src":"10148:6:36"}]},{"nativeSrc":"10172:56:36","nodeType":"YulAssignment","src":"10172:56:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10213:9:36","nodeType":"YulIdentifier","src":"10213:9:36"},{"kind":"number","nativeSrc":"10224:2:36","nodeType":"YulLiteral","src":"10224:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"10209:3:36","nodeType":"YulIdentifier","src":"10209:3:36"},"nativeSrc":"10209:18:36","nodeType":"YulFunctionCall","src":"10209:18:36"}],"functionName":{"name":"abi_decode_address_payable","nativeSrc":"10182:26:36","nodeType":"YulIdentifier","src":"10182:26:36"},"nativeSrc":"10182:46:36","nodeType":"YulFunctionCall","src":"10182:46:36"},"variableNames":[{"name":"value3","nativeSrc":"10172:6:36","nodeType":"YulIdentifier","src":"10172:6:36"}]},{"nativeSrc":"10237:49:36","nodeType":"YulVariableDeclaration","src":"10237:49:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10270:9:36","nodeType":"YulIdentifier","src":"10270:9:36"},{"kind":"number","nativeSrc":"10281:3:36","nodeType":"YulLiteral","src":"10281:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"10266:3:36","nodeType":"YulIdentifier","src":"10266:3:36"},"nativeSrc":"10266:19:36","nodeType":"YulFunctionCall","src":"10266:19:36"}],"functionName":{"name":"calldataload","nativeSrc":"10253:12:36","nodeType":"YulIdentifier","src":"10253:12:36"},"nativeSrc":"10253:33:36","nodeType":"YulFunctionCall","src":"10253:33:36"},"variables":[{"name":"offset_1","nativeSrc":"10241:8:36","nodeType":"YulTypedName","src":"10241:8:36","type":""}]},{"body":{"nativeSrc":"10315:16:36","nodeType":"YulBlock","src":"10315:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10324:1:36","nodeType":"YulLiteral","src":"10324:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"10327:1:36","nodeType":"YulLiteral","src":"10327:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10317:6:36","nodeType":"YulIdentifier","src":"10317:6:36"},"nativeSrc":"10317:12:36","nodeType":"YulFunctionCall","src":"10317:12:36"},"nativeSrc":"10317:12:36","nodeType":"YulExpressionStatement","src":"10317:12:36"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"10301:8:36","nodeType":"YulIdentifier","src":"10301:8:36"},{"name":"_2","nativeSrc":"10311:2:36","nodeType":"YulIdentifier","src":"10311:2:36"}],"functionName":{"name":"gt","nativeSrc":"10298:2:36","nodeType":"YulIdentifier","src":"10298:2:36"},"nativeSrc":"10298:16:36","nodeType":"YulFunctionCall","src":"10298:16:36"},"nativeSrc":"10295:36:36","nodeType":"YulIf","src":"10295:36:36"},{"nativeSrc":"10340:73:36","nodeType":"YulAssignment","src":"10340:73:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10383:9:36","nodeType":"YulIdentifier","src":"10383:9:36"},{"name":"offset_1","nativeSrc":"10394:8:36","nodeType":"YulIdentifier","src":"10394:8:36"}],"functionName":{"name":"add","nativeSrc":"10379:3:36","nodeType":"YulIdentifier","src":"10379:3:36"},"nativeSrc":"10379:24:36","nodeType":"YulFunctionCall","src":"10379:24:36"},{"name":"dataEnd","nativeSrc":"10405:7:36","nodeType":"YulIdentifier","src":"10405:7:36"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nativeSrc":"10350:28:36","nodeType":"YulIdentifier","src":"10350:28:36"},"nativeSrc":"10350:63:36","nodeType":"YulFunctionCall","src":"10350:63:36"},"variableNames":[{"name":"value4","nativeSrc":"10340:6:36","nodeType":"YulIdentifier","src":"10340:6:36"}]},{"nativeSrc":"10422:49:36","nodeType":"YulVariableDeclaration","src":"10422:49:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10455:9:36","nodeType":"YulIdentifier","src":"10455:9:36"},{"kind":"number","nativeSrc":"10466:3:36","nodeType":"YulLiteral","src":"10466:3:36","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"10451:3:36","nodeType":"YulIdentifier","src":"10451:3:36"},"nativeSrc":"10451:19:36","nodeType":"YulFunctionCall","src":"10451:19:36"}],"functionName":{"name":"calldataload","nativeSrc":"10438:12:36","nodeType":"YulIdentifier","src":"10438:12:36"},"nativeSrc":"10438:33:36","nodeType":"YulFunctionCall","src":"10438:33:36"},"variables":[{"name":"offset_2","nativeSrc":"10426:8:36","nodeType":"YulTypedName","src":"10426:8:36","type":""}]},{"body":{"nativeSrc":"10500:16:36","nodeType":"YulBlock","src":"10500:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10509:1:36","nodeType":"YulLiteral","src":"10509:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"10512:1:36","nodeType":"YulLiteral","src":"10512:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10502:6:36","nodeType":"YulIdentifier","src":"10502:6:36"},"nativeSrc":"10502:12:36","nodeType":"YulFunctionCall","src":"10502:12:36"},"nativeSrc":"10502:12:36","nodeType":"YulExpressionStatement","src":"10502:12:36"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"10486:8:36","nodeType":"YulIdentifier","src":"10486:8:36"},{"name":"_2","nativeSrc":"10496:2:36","nodeType":"YulIdentifier","src":"10496:2:36"}],"functionName":{"name":"gt","nativeSrc":"10483:2:36","nodeType":"YulIdentifier","src":"10483:2:36"},"nativeSrc":"10483:16:36","nodeType":"YulFunctionCall","src":"10483:16:36"},"nativeSrc":"10480:36:36","nodeType":"YulIf","src":"10480:36:36"},{"nativeSrc":"10525:73:36","nodeType":"YulAssignment","src":"10525:73:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10568:9:36","nodeType":"YulIdentifier","src":"10568:9:36"},{"name":"offset_2","nativeSrc":"10579:8:36","nodeType":"YulIdentifier","src":"10579:8:36"}],"functionName":{"name":"add","nativeSrc":"10564:3:36","nodeType":"YulIdentifier","src":"10564:3:36"},"nativeSrc":"10564:24:36","nodeType":"YulFunctionCall","src":"10564:24:36"},{"name":"dataEnd","nativeSrc":"10590:7:36","nodeType":"YulIdentifier","src":"10590:7:36"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nativeSrc":"10535:28:36","nodeType":"YulIdentifier","src":"10535:28:36"},"nativeSrc":"10535:63:36","nodeType":"YulFunctionCall","src":"10535:63:36"},"variableNames":[{"name":"value5","nativeSrc":"10525:6:36","nodeType":"YulIdentifier","src":"10525:6:36"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32t_array$_t_bytes32_$dyn_memory_ptrt_address_payablet_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr","nativeSrc":"9011:1593:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9175:9:36","nodeType":"YulTypedName","src":"9175:9:36","type":""},{"name":"dataEnd","nativeSrc":"9186:7:36","nodeType":"YulTypedName","src":"9186:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"9198:6:36","nodeType":"YulTypedName","src":"9198:6:36","type":""},{"name":"value1","nativeSrc":"9206:6:36","nodeType":"YulTypedName","src":"9206:6:36","type":""},{"name":"value2","nativeSrc":"9214:6:36","nodeType":"YulTypedName","src":"9214:6:36","type":""},{"name":"value3","nativeSrc":"9222:6:36","nodeType":"YulTypedName","src":"9222:6:36","type":""},{"name":"value4","nativeSrc":"9230:6:36","nodeType":"YulTypedName","src":"9230:6:36","type":""},{"name":"value5","nativeSrc":"9238:6:36","nodeType":"YulTypedName","src":"9238:6:36","type":""}],"src":"9011:1593:36"},{"body":{"nativeSrc":"10670:339:36","nodeType":"YulBlock","src":"10670:339:36","statements":[{"nativeSrc":"10680:26:36","nodeType":"YulVariableDeclaration","src":"10680:26:36","value":{"arguments":[{"name":"value","nativeSrc":"10700:5:36","nodeType":"YulIdentifier","src":"10700:5:36"}],"functionName":{"name":"mload","nativeSrc":"10694:5:36","nodeType":"YulIdentifier","src":"10694:5:36"},"nativeSrc":"10694:12:36","nodeType":"YulFunctionCall","src":"10694:12:36"},"variables":[{"name":"length","nativeSrc":"10684:6:36","nodeType":"YulTypedName","src":"10684:6:36","type":""}]},{"nativeSrc":"10715:10:36","nodeType":"YulAssignment","src":"10715:10:36","value":{"name":"pos","nativeSrc":"10722:3:36","nodeType":"YulIdentifier","src":"10722:3:36"},"variableNames":[{"name":"pos","nativeSrc":"10715:3:36","nodeType":"YulIdentifier","src":"10715:3:36"}]},{"nativeSrc":"10734:14:36","nodeType":"YulVariableDeclaration","src":"10734:14:36","value":{"kind":"number","nativeSrc":"10744:4:36","nodeType":"YulLiteral","src":"10744:4:36","type":"","value":"0x20"},"variables":[{"name":"_1","nativeSrc":"10738:2:36","nodeType":"YulTypedName","src":"10738:2:36","type":""}]},{"nativeSrc":"10757:30:36","nodeType":"YulVariableDeclaration","src":"10757:30:36","value":{"arguments":[{"name":"value","nativeSrc":"10775:5:36","nodeType":"YulIdentifier","src":"10775:5:36"},{"kind":"number","nativeSrc":"10782:4:36","nodeType":"YulLiteral","src":"10782:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"10771:3:36","nodeType":"YulIdentifier","src":"10771:3:36"},"nativeSrc":"10771:16:36","nodeType":"YulFunctionCall","src":"10771:16:36"},"variables":[{"name":"srcPtr","nativeSrc":"10761:6:36","nodeType":"YulTypedName","src":"10761:6:36","type":""}]},{"nativeSrc":"10796:10:36","nodeType":"YulVariableDeclaration","src":"10796:10:36","value":{"kind":"number","nativeSrc":"10805:1:36","nodeType":"YulLiteral","src":"10805:1:36","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"10800:1:36","nodeType":"YulTypedName","src":"10800:1:36","type":""}]},{"body":{"nativeSrc":"10864:120:36","nodeType":"YulBlock","src":"10864:120:36","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"10885:3:36","nodeType":"YulIdentifier","src":"10885:3:36"},{"arguments":[{"name":"srcPtr","nativeSrc":"10896:6:36","nodeType":"YulIdentifier","src":"10896:6:36"}],"functionName":{"name":"mload","nativeSrc":"10890:5:36","nodeType":"YulIdentifier","src":"10890:5:36"},"nativeSrc":"10890:13:36","nodeType":"YulFunctionCall","src":"10890:13:36"}],"functionName":{"name":"mstore","nativeSrc":"10878:6:36","nodeType":"YulIdentifier","src":"10878:6:36"},"nativeSrc":"10878:26:36","nodeType":"YulFunctionCall","src":"10878:26:36"},"nativeSrc":"10878:26:36","nodeType":"YulExpressionStatement","src":"10878:26:36"},{"nativeSrc":"10917:19:36","nodeType":"YulAssignment","src":"10917:19:36","value":{"arguments":[{"name":"pos","nativeSrc":"10928:3:36","nodeType":"YulIdentifier","src":"10928:3:36"},{"name":"_1","nativeSrc":"10933:2:36","nodeType":"YulIdentifier","src":"10933:2:36"}],"functionName":{"name":"add","nativeSrc":"10924:3:36","nodeType":"YulIdentifier","src":"10924:3:36"},"nativeSrc":"10924:12:36","nodeType":"YulFunctionCall","src":"10924:12:36"},"variableNames":[{"name":"pos","nativeSrc":"10917:3:36","nodeType":"YulIdentifier","src":"10917:3:36"}]},{"nativeSrc":"10949:25:36","nodeType":"YulAssignment","src":"10949:25:36","value":{"arguments":[{"name":"srcPtr","nativeSrc":"10963:6:36","nodeType":"YulIdentifier","src":"10963:6:36"},{"name":"_1","nativeSrc":"10971:2:36","nodeType":"YulIdentifier","src":"10971:2:36"}],"functionName":{"name":"add","nativeSrc":"10959:3:36","nodeType":"YulIdentifier","src":"10959:3:36"},"nativeSrc":"10959:15:36","nodeType":"YulFunctionCall","src":"10959:15:36"},"variableNames":[{"name":"srcPtr","nativeSrc":"10949:6:36","nodeType":"YulIdentifier","src":"10949:6:36"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"10826:1:36","nodeType":"YulIdentifier","src":"10826:1:36"},{"name":"length","nativeSrc":"10829:6:36","nodeType":"YulIdentifier","src":"10829:6:36"}],"functionName":{"name":"lt","nativeSrc":"10823:2:36","nodeType":"YulIdentifier","src":"10823:2:36"},"nativeSrc":"10823:13:36","nodeType":"YulFunctionCall","src":"10823:13:36"},"nativeSrc":"10815:169:36","nodeType":"YulForLoop","post":{"nativeSrc":"10837:18:36","nodeType":"YulBlock","src":"10837:18:36","statements":[{"nativeSrc":"10839:14:36","nodeType":"YulAssignment","src":"10839:14:36","value":{"arguments":[{"name":"i","nativeSrc":"10848:1:36","nodeType":"YulIdentifier","src":"10848:1:36"},{"kind":"number","nativeSrc":"10851:1:36","nodeType":"YulLiteral","src":"10851:1:36","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"10844:3:36","nodeType":"YulIdentifier","src":"10844:3:36"},"nativeSrc":"10844:9:36","nodeType":"YulFunctionCall","src":"10844:9:36"},"variableNames":[{"name":"i","nativeSrc":"10839:1:36","nodeType":"YulIdentifier","src":"10839:1:36"}]}]},"pre":{"nativeSrc":"10819:3:36","nodeType":"YulBlock","src":"10819:3:36","statements":[]},"src":"10815:169:36"},{"nativeSrc":"10993:10:36","nodeType":"YulAssignment","src":"10993:10:36","value":{"name":"pos","nativeSrc":"11000:3:36","nodeType":"YulIdentifier","src":"11000:3:36"},"variableNames":[{"name":"end","nativeSrc":"10993:3:36","nodeType":"YulIdentifier","src":"10993:3:36"}]}]},"name":"abi_encode_array_uint256_dyn","nativeSrc":"10609:400:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"10647:5:36","nodeType":"YulTypedName","src":"10647:5:36","type":""},{"name":"pos","nativeSrc":"10654:3:36","nodeType":"YulTypedName","src":"10654:3:36","type":""}],"returnVariables":[{"name":"end","nativeSrc":"10662:3:36","nodeType":"YulTypedName","src":"10662:3:36","type":""}],"src":"10609:400:36"},{"body":{"nativeSrc":"11345:326:36","nodeType":"YulBlock","src":"11345:326:36","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"11362:3:36","nodeType":"YulIdentifier","src":"11362:3:36"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"11375:2:36","nodeType":"YulLiteral","src":"11375:2:36","type":"","value":"96"},{"name":"value0","nativeSrc":"11379:6:36","nodeType":"YulIdentifier","src":"11379:6:36"}],"functionName":{"name":"shl","nativeSrc":"11371:3:36","nodeType":"YulIdentifier","src":"11371:3:36"},"nativeSrc":"11371:15:36","nodeType":"YulFunctionCall","src":"11371:15:36"},{"kind":"number","nativeSrc":"11388:66:36","nodeType":"YulLiteral","src":"11388:66:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"11367:3:36","nodeType":"YulIdentifier","src":"11367:3:36"},"nativeSrc":"11367:88:36","nodeType":"YulFunctionCall","src":"11367:88:36"}],"functionName":{"name":"mstore","nativeSrc":"11355:6:36","nodeType":"YulIdentifier","src":"11355:6:36"},"nativeSrc":"11355:101:36","nodeType":"YulFunctionCall","src":"11355:101:36"},"nativeSrc":"11355:101:36","nodeType":"YulExpressionStatement","src":"11355:101:36"},{"nativeSrc":"11465:101:36","nodeType":"YulVariableDeclaration","src":"11465:101:36","value":{"arguments":[{"name":"value2","nativeSrc":"11507:6:36","nodeType":"YulIdentifier","src":"11507:6:36"},{"arguments":[{"name":"value1","nativeSrc":"11544:6:36","nodeType":"YulIdentifier","src":"11544:6:36"},{"arguments":[{"name":"pos","nativeSrc":"11556:3:36","nodeType":"YulIdentifier","src":"11556:3:36"},{"kind":"number","nativeSrc":"11561:2:36","nodeType":"YulLiteral","src":"11561:2:36","type":"","value":"20"}],"functionName":{"name":"add","nativeSrc":"11552:3:36","nodeType":"YulIdentifier","src":"11552:3:36"},"nativeSrc":"11552:12:36","nodeType":"YulFunctionCall","src":"11552:12:36"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nativeSrc":"11515:28:36","nodeType":"YulIdentifier","src":"11515:28:36"},"nativeSrc":"11515:50:36","nodeType":"YulFunctionCall","src":"11515:50:36"}],"functionName":{"name":"abi_encode_array_uint256_dyn","nativeSrc":"11478:28:36","nodeType":"YulIdentifier","src":"11478:28:36"},"nativeSrc":"11478:88:36","nodeType":"YulFunctionCall","src":"11478:88:36"},"variables":[{"name":"pos_1","nativeSrc":"11469:5:36","nodeType":"YulTypedName","src":"11469:5:36","type":""}]},{"expression":{"arguments":[{"name":"pos_1","nativeSrc":"11582:5:36","nodeType":"YulIdentifier","src":"11582:5:36"},{"name":"value3","nativeSrc":"11589:6:36","nodeType":"YulIdentifier","src":"11589:6:36"}],"functionName":{"name":"mstore","nativeSrc":"11575:6:36","nodeType":"YulIdentifier","src":"11575:6:36"},"nativeSrc":"11575:21:36","nodeType":"YulFunctionCall","src":"11575:21:36"},"nativeSrc":"11575:21:36","nodeType":"YulExpressionStatement","src":"11575:21:36"},{"expression":{"arguments":[{"arguments":[{"name":"pos_1","nativeSrc":"11616:5:36","nodeType":"YulIdentifier","src":"11616:5:36"},{"kind":"number","nativeSrc":"11623:2:36","nodeType":"YulLiteral","src":"11623:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11612:3:36","nodeType":"YulIdentifier","src":"11612:3:36"},"nativeSrc":"11612:14:36","nodeType":"YulFunctionCall","src":"11612:14:36"},{"name":"value4","nativeSrc":"11628:6:36","nodeType":"YulIdentifier","src":"11628:6:36"}],"functionName":{"name":"mstore","nativeSrc":"11605:6:36","nodeType":"YulIdentifier","src":"11605:6:36"},"nativeSrc":"11605:30:36","nodeType":"YulFunctionCall","src":"11605:30:36"},"nativeSrc":"11605:30:36","nodeType":"YulExpressionStatement","src":"11605:30:36"},{"nativeSrc":"11644:21:36","nodeType":"YulAssignment","src":"11644:21:36","value":{"arguments":[{"name":"pos_1","nativeSrc":"11655:5:36","nodeType":"YulIdentifier","src":"11655:5:36"},{"kind":"number","nativeSrc":"11662:2:36","nodeType":"YulLiteral","src":"11662:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11651:3:36","nodeType":"YulIdentifier","src":"11651:3:36"},"nativeSrc":"11651:14:36","nodeType":"YulFunctionCall","src":"11651:14:36"},"variableNames":[{"name":"end","nativeSrc":"11644:3:36","nodeType":"YulIdentifier","src":"11644:3:36"}]}]},"name":"abi_encode_tuple_packed_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__nonPadded_inplace_fromStack_reversed","nativeSrc":"11014:657:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"11289:3:36","nodeType":"YulTypedName","src":"11289:3:36","type":""},{"name":"value4","nativeSrc":"11294:6:36","nodeType":"YulTypedName","src":"11294:6:36","type":""},{"name":"value3","nativeSrc":"11302:6:36","nodeType":"YulTypedName","src":"11302:6:36","type":""},{"name":"value2","nativeSrc":"11310:6:36","nodeType":"YulTypedName","src":"11310:6:36","type":""},{"name":"value1","nativeSrc":"11318:6:36","nodeType":"YulTypedName","src":"11318:6:36","type":""},{"name":"value0","nativeSrc":"11326:6:36","nodeType":"YulTypedName","src":"11326:6:36","type":""}],"returnVariables":[{"name":"end","nativeSrc":"11337:3:36","nodeType":"YulTypedName","src":"11337:3:36","type":""}],"src":"11014:657:36"},{"body":{"nativeSrc":"11748:378:36","nodeType":"YulBlock","src":"11748:378:36","statements":[{"nativeSrc":"11758:26:36","nodeType":"YulVariableDeclaration","src":"11758:26:36","value":{"arguments":[{"name":"value","nativeSrc":"11778:5:36","nodeType":"YulIdentifier","src":"11778:5:36"}],"functionName":{"name":"mload","nativeSrc":"11772:5:36","nodeType":"YulIdentifier","src":"11772:5:36"},"nativeSrc":"11772:12:36","nodeType":"YulFunctionCall","src":"11772:12:36"},"variables":[{"name":"length","nativeSrc":"11762:6:36","nodeType":"YulTypedName","src":"11762:6:36","type":""}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"11800:3:36","nodeType":"YulIdentifier","src":"11800:3:36"},{"name":"length","nativeSrc":"11805:6:36","nodeType":"YulIdentifier","src":"11805:6:36"}],"functionName":{"name":"mstore","nativeSrc":"11793:6:36","nodeType":"YulIdentifier","src":"11793:6:36"},"nativeSrc":"11793:19:36","nodeType":"YulFunctionCall","src":"11793:19:36"},"nativeSrc":"11793:19:36","nodeType":"YulExpressionStatement","src":"11793:19:36"},{"nativeSrc":"11821:14:36","nodeType":"YulVariableDeclaration","src":"11821:14:36","value":{"kind":"number","nativeSrc":"11831:4:36","nodeType":"YulLiteral","src":"11831:4:36","type":"","value":"0x20"},"variables":[{"name":"_1","nativeSrc":"11825:2:36","nodeType":"YulTypedName","src":"11825:2:36","type":""}]},{"nativeSrc":"11844:21:36","nodeType":"YulAssignment","src":"11844:21:36","value":{"arguments":[{"name":"pos","nativeSrc":"11855:3:36","nodeType":"YulIdentifier","src":"11855:3:36"},{"kind":"number","nativeSrc":"11860:4:36","nodeType":"YulLiteral","src":"11860:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"11851:3:36","nodeType":"YulIdentifier","src":"11851:3:36"},"nativeSrc":"11851:14:36","nodeType":"YulFunctionCall","src":"11851:14:36"},"variableNames":[{"name":"pos","nativeSrc":"11844:3:36","nodeType":"YulIdentifier","src":"11844:3:36"}]},{"nativeSrc":"11874:30:36","nodeType":"YulVariableDeclaration","src":"11874:30:36","value":{"arguments":[{"name":"value","nativeSrc":"11892:5:36","nodeType":"YulIdentifier","src":"11892:5:36"},{"kind":"number","nativeSrc":"11899:4:36","nodeType":"YulLiteral","src":"11899:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"11888:3:36","nodeType":"YulIdentifier","src":"11888:3:36"},"nativeSrc":"11888:16:36","nodeType":"YulFunctionCall","src":"11888:16:36"},"variables":[{"name":"srcPtr","nativeSrc":"11878:6:36","nodeType":"YulTypedName","src":"11878:6:36","type":""}]},{"nativeSrc":"11913:10:36","nodeType":"YulVariableDeclaration","src":"11913:10:36","value":{"kind":"number","nativeSrc":"11922:1:36","nodeType":"YulLiteral","src":"11922:1:36","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"11917:1:36","nodeType":"YulTypedName","src":"11917:1:36","type":""}]},{"body":{"nativeSrc":"11981:120:36","nodeType":"YulBlock","src":"11981:120:36","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"12002:3:36","nodeType":"YulIdentifier","src":"12002:3:36"},{"arguments":[{"name":"srcPtr","nativeSrc":"12013:6:36","nodeType":"YulIdentifier","src":"12013:6:36"}],"functionName":{"name":"mload","nativeSrc":"12007:5:36","nodeType":"YulIdentifier","src":"12007:5:36"},"nativeSrc":"12007:13:36","nodeType":"YulFunctionCall","src":"12007:13:36"}],"functionName":{"name":"mstore","nativeSrc":"11995:6:36","nodeType":"YulIdentifier","src":"11995:6:36"},"nativeSrc":"11995:26:36","nodeType":"YulFunctionCall","src":"11995:26:36"},"nativeSrc":"11995:26:36","nodeType":"YulExpressionStatement","src":"11995:26:36"},{"nativeSrc":"12034:19:36","nodeType":"YulAssignment","src":"12034:19:36","value":{"arguments":[{"name":"pos","nativeSrc":"12045:3:36","nodeType":"YulIdentifier","src":"12045:3:36"},{"name":"_1","nativeSrc":"12050:2:36","nodeType":"YulIdentifier","src":"12050:2:36"}],"functionName":{"name":"add","nativeSrc":"12041:3:36","nodeType":"YulIdentifier","src":"12041:3:36"},"nativeSrc":"12041:12:36","nodeType":"YulFunctionCall","src":"12041:12:36"},"variableNames":[{"name":"pos","nativeSrc":"12034:3:36","nodeType":"YulIdentifier","src":"12034:3:36"}]},{"nativeSrc":"12066:25:36","nodeType":"YulAssignment","src":"12066:25:36","value":{"arguments":[{"name":"srcPtr","nativeSrc":"12080:6:36","nodeType":"YulIdentifier","src":"12080:6:36"},{"name":"_1","nativeSrc":"12088:2:36","nodeType":"YulIdentifier","src":"12088:2:36"}],"functionName":{"name":"add","nativeSrc":"12076:3:36","nodeType":"YulIdentifier","src":"12076:3:36"},"nativeSrc":"12076:15:36","nodeType":"YulFunctionCall","src":"12076:15:36"},"variableNames":[{"name":"srcPtr","nativeSrc":"12066:6:36","nodeType":"YulIdentifier","src":"12066:6:36"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"11943:1:36","nodeType":"YulIdentifier","src":"11943:1:36"},{"name":"length","nativeSrc":"11946:6:36","nodeType":"YulIdentifier","src":"11946:6:36"}],"functionName":{"name":"lt","nativeSrc":"11940:2:36","nodeType":"YulIdentifier","src":"11940:2:36"},"nativeSrc":"11940:13:36","nodeType":"YulFunctionCall","src":"11940:13:36"},"nativeSrc":"11932:169:36","nodeType":"YulForLoop","post":{"nativeSrc":"11954:18:36","nodeType":"YulBlock","src":"11954:18:36","statements":[{"nativeSrc":"11956:14:36","nodeType":"YulAssignment","src":"11956:14:36","value":{"arguments":[{"name":"i","nativeSrc":"11965:1:36","nodeType":"YulIdentifier","src":"11965:1:36"},{"kind":"number","nativeSrc":"11968:1:36","nodeType":"YulLiteral","src":"11968:1:36","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"11961:3:36","nodeType":"YulIdentifier","src":"11961:3:36"},"nativeSrc":"11961:9:36","nodeType":"YulFunctionCall","src":"11961:9:36"},"variableNames":[{"name":"i","nativeSrc":"11956:1:36","nodeType":"YulIdentifier","src":"11956:1:36"}]}]},"pre":{"nativeSrc":"11936:3:36","nodeType":"YulBlock","src":"11936:3:36","statements":[]},"src":"11932:169:36"},{"nativeSrc":"12110:10:36","nodeType":"YulAssignment","src":"12110:10:36","value":{"name":"pos","nativeSrc":"12117:3:36","nodeType":"YulIdentifier","src":"12117:3:36"},"variableNames":[{"name":"end","nativeSrc":"12110:3:36","nodeType":"YulIdentifier","src":"12110:3:36"}]}]},"name":"abi_encode_array_uint256_dyn_memory_ptr","nativeSrc":"11676:450:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"11725:5:36","nodeType":"YulTypedName","src":"11725:5:36","type":""},{"name":"pos","nativeSrc":"11732:3:36","nodeType":"YulTypedName","src":"11732:3:36","type":""}],"returnVariables":[{"name":"end","nativeSrc":"11740:3:36","nodeType":"YulTypedName","src":"11740:3:36","type":""}],"src":"11676:450:36"},{"body":{"nativeSrc":"12444:439:36","nodeType":"YulBlock","src":"12444:439:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12461:9:36","nodeType":"YulIdentifier","src":"12461:9:36"},{"arguments":[{"name":"value0","nativeSrc":"12476:6:36","nodeType":"YulIdentifier","src":"12476:6:36"},{"kind":"number","nativeSrc":"12484:42:36","nodeType":"YulLiteral","src":"12484:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"12472:3:36","nodeType":"YulIdentifier","src":"12472:3:36"},"nativeSrc":"12472:55:36","nodeType":"YulFunctionCall","src":"12472:55:36"}],"functionName":{"name":"mstore","nativeSrc":"12454:6:36","nodeType":"YulIdentifier","src":"12454:6:36"},"nativeSrc":"12454:74:36","nodeType":"YulFunctionCall","src":"12454:74:36"},"nativeSrc":"12454:74:36","nodeType":"YulExpressionStatement","src":"12454:74:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12548:9:36","nodeType":"YulIdentifier","src":"12548:9:36"},{"kind":"number","nativeSrc":"12559:2:36","nodeType":"YulLiteral","src":"12559:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12544:3:36","nodeType":"YulIdentifier","src":"12544:3:36"},"nativeSrc":"12544:18:36","nodeType":"YulFunctionCall","src":"12544:18:36"},{"kind":"number","nativeSrc":"12564:3:36","nodeType":"YulLiteral","src":"12564:3:36","type":"","value":"160"}],"functionName":{"name":"mstore","nativeSrc":"12537:6:36","nodeType":"YulIdentifier","src":"12537:6:36"},"nativeSrc":"12537:31:36","nodeType":"YulFunctionCall","src":"12537:31:36"},"nativeSrc":"12537:31:36","nodeType":"YulExpressionStatement","src":"12537:31:36"},{"nativeSrc":"12577:82:36","nodeType":"YulVariableDeclaration","src":"12577:82:36","value":{"arguments":[{"name":"value1","nativeSrc":"12631:6:36","nodeType":"YulIdentifier","src":"12631:6:36"},{"arguments":[{"name":"headStart","nativeSrc":"12643:9:36","nodeType":"YulIdentifier","src":"12643:9:36"},{"kind":"number","nativeSrc":"12654:3:36","nodeType":"YulLiteral","src":"12654:3:36","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"12639:3:36","nodeType":"YulIdentifier","src":"12639:3:36"},"nativeSrc":"12639:19:36","nodeType":"YulFunctionCall","src":"12639:19:36"}],"functionName":{"name":"abi_encode_array_uint256_dyn_memory_ptr","nativeSrc":"12591:39:36","nodeType":"YulIdentifier","src":"12591:39:36"},"nativeSrc":"12591:68:36","nodeType":"YulFunctionCall","src":"12591:68:36"},"variables":[{"name":"tail_1","nativeSrc":"12581:6:36","nodeType":"YulTypedName","src":"12581:6:36","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12679:9:36","nodeType":"YulIdentifier","src":"12679:9:36"},{"kind":"number","nativeSrc":"12690:2:36","nodeType":"YulLiteral","src":"12690:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12675:3:36","nodeType":"YulIdentifier","src":"12675:3:36"},"nativeSrc":"12675:18:36","nodeType":"YulFunctionCall","src":"12675:18:36"},{"arguments":[{"name":"tail_1","nativeSrc":"12699:6:36","nodeType":"YulIdentifier","src":"12699:6:36"},{"name":"headStart","nativeSrc":"12707:9:36","nodeType":"YulIdentifier","src":"12707:9:36"}],"functionName":{"name":"sub","nativeSrc":"12695:3:36","nodeType":"YulIdentifier","src":"12695:3:36"},"nativeSrc":"12695:22:36","nodeType":"YulFunctionCall","src":"12695:22:36"}],"functionName":{"name":"mstore","nativeSrc":"12668:6:36","nodeType":"YulIdentifier","src":"12668:6:36"},"nativeSrc":"12668:50:36","nodeType":"YulFunctionCall","src":"12668:50:36"},"nativeSrc":"12668:50:36","nodeType":"YulExpressionStatement","src":"12668:50:36"},{"nativeSrc":"12727:63:36","nodeType":"YulAssignment","src":"12727:63:36","value":{"arguments":[{"name":"value2","nativeSrc":"12775:6:36","nodeType":"YulIdentifier","src":"12775:6:36"},{"name":"tail_1","nativeSrc":"12783:6:36","nodeType":"YulIdentifier","src":"12783:6:36"}],"functionName":{"name":"abi_encode_array_uint256_dyn_memory_ptr","nativeSrc":"12735:39:36","nodeType":"YulIdentifier","src":"12735:39:36"},"nativeSrc":"12735:55:36","nodeType":"YulFunctionCall","src":"12735:55:36"},"variableNames":[{"name":"tail","nativeSrc":"12727:4:36","nodeType":"YulIdentifier","src":"12727:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12810:9:36","nodeType":"YulIdentifier","src":"12810:9:36"},{"kind":"number","nativeSrc":"12821:2:36","nodeType":"YulLiteral","src":"12821:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"12806:3:36","nodeType":"YulIdentifier","src":"12806:3:36"},"nativeSrc":"12806:18:36","nodeType":"YulFunctionCall","src":"12806:18:36"},{"name":"value3","nativeSrc":"12826:6:36","nodeType":"YulIdentifier","src":"12826:6:36"}],"functionName":{"name":"mstore","nativeSrc":"12799:6:36","nodeType":"YulIdentifier","src":"12799:6:36"},"nativeSrc":"12799:34:36","nodeType":"YulFunctionCall","src":"12799:34:36"},"nativeSrc":"12799:34:36","nodeType":"YulExpressionStatement","src":"12799:34:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12853:9:36","nodeType":"YulIdentifier","src":"12853:9:36"},{"kind":"number","nativeSrc":"12864:3:36","nodeType":"YulLiteral","src":"12864:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"12849:3:36","nodeType":"YulIdentifier","src":"12849:3:36"},"nativeSrc":"12849:19:36","nodeType":"YulFunctionCall","src":"12849:19:36"},{"name":"value4","nativeSrc":"12870:6:36","nodeType":"YulIdentifier","src":"12870:6:36"}],"functionName":{"name":"mstore","nativeSrc":"12842:6:36","nodeType":"YulIdentifier","src":"12842:6:36"},"nativeSrc":"12842:35:36","nodeType":"YulFunctionCall","src":"12842:35:36"},"nativeSrc":"12842:35:36","nodeType":"YulExpressionStatement","src":"12842:35:36"}]},"name":"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__fromStack_reversed","nativeSrc":"12131:752:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12381:9:36","nodeType":"YulTypedName","src":"12381:9:36","type":""},{"name":"value4","nativeSrc":"12392:6:36","nodeType":"YulTypedName","src":"12392:6:36","type":""},{"name":"value3","nativeSrc":"12400:6:36","nodeType":"YulTypedName","src":"12400:6:36","type":""},{"name":"value2","nativeSrc":"12408:6:36","nodeType":"YulTypedName","src":"12408:6:36","type":""},{"name":"value1","nativeSrc":"12416:6:36","nodeType":"YulTypedName","src":"12416:6:36","type":""},{"name":"value0","nativeSrc":"12424:6:36","nodeType":"YulTypedName","src":"12424:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12435:4:36","nodeType":"YulTypedName","src":"12435:4:36","type":""}],"src":"12131:752:36"},{"body":{"nativeSrc":"13125:246:36","nodeType":"YulBlock","src":"13125:246:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13142:9:36","nodeType":"YulIdentifier","src":"13142:9:36"},{"arguments":[{"name":"value0","nativeSrc":"13157:6:36","nodeType":"YulIdentifier","src":"13157:6:36"},{"kind":"number","nativeSrc":"13165:42:36","nodeType":"YulLiteral","src":"13165:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"13153:3:36","nodeType":"YulIdentifier","src":"13153:3:36"},"nativeSrc":"13153:55:36","nodeType":"YulFunctionCall","src":"13153:55:36"}],"functionName":{"name":"mstore","nativeSrc":"13135:6:36","nodeType":"YulIdentifier","src":"13135:6:36"},"nativeSrc":"13135:74:36","nodeType":"YulFunctionCall","src":"13135:74:36"},"nativeSrc":"13135:74:36","nodeType":"YulExpressionStatement","src":"13135:74:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13229:9:36","nodeType":"YulIdentifier","src":"13229:9:36"},{"kind":"number","nativeSrc":"13240:2:36","nodeType":"YulLiteral","src":"13240:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13225:3:36","nodeType":"YulIdentifier","src":"13225:3:36"},"nativeSrc":"13225:18:36","nodeType":"YulFunctionCall","src":"13225:18:36"},{"name":"value1","nativeSrc":"13245:6:36","nodeType":"YulIdentifier","src":"13245:6:36"}],"functionName":{"name":"mstore","nativeSrc":"13218:6:36","nodeType":"YulIdentifier","src":"13218:6:36"},"nativeSrc":"13218:34:36","nodeType":"YulFunctionCall","src":"13218:34:36"},"nativeSrc":"13218:34:36","nodeType":"YulExpressionStatement","src":"13218:34:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13272:9:36","nodeType":"YulIdentifier","src":"13272:9:36"},{"kind":"number","nativeSrc":"13283:2:36","nodeType":"YulLiteral","src":"13283:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13268:3:36","nodeType":"YulIdentifier","src":"13268:3:36"},"nativeSrc":"13268:18:36","nodeType":"YulFunctionCall","src":"13268:18:36"},{"kind":"number","nativeSrc":"13288:2:36","nodeType":"YulLiteral","src":"13288:2:36","type":"","value":"96"}],"functionName":{"name":"mstore","nativeSrc":"13261:6:36","nodeType":"YulIdentifier","src":"13261:6:36"},"nativeSrc":"13261:30:36","nodeType":"YulFunctionCall","src":"13261:30:36"},"nativeSrc":"13261:30:36","nodeType":"YulExpressionStatement","src":"13261:30:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13311:9:36","nodeType":"YulIdentifier","src":"13311:9:36"},{"kind":"number","nativeSrc":"13322:2:36","nodeType":"YulLiteral","src":"13322:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"13307:3:36","nodeType":"YulIdentifier","src":"13307:3:36"},"nativeSrc":"13307:18:36","nodeType":"YulFunctionCall","src":"13307:18:36"},{"kind":"number","nativeSrc":"13327:1:36","nodeType":"YulLiteral","src":"13327:1:36","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"13300:6:36","nodeType":"YulIdentifier","src":"13300:6:36"},"nativeSrc":"13300:29:36","nodeType":"YulFunctionCall","src":"13300:29:36"},"nativeSrc":"13300:29:36","nodeType":"YulExpressionStatement","src":"13300:29:36"},{"nativeSrc":"13338:27:36","nodeType":"YulAssignment","src":"13338:27:36","value":{"arguments":[{"name":"headStart","nativeSrc":"13350:9:36","nodeType":"YulIdentifier","src":"13350:9:36"},{"kind":"number","nativeSrc":"13361:3:36","nodeType":"YulLiteral","src":"13361:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"13346:3:36","nodeType":"YulIdentifier","src":"13346:3:36"},"nativeSrc":"13346:19:36","nodeType":"YulFunctionCall","src":"13346:19:36"},"variableNames":[{"name":"tail","nativeSrc":"13338:4:36","nodeType":"YulIdentifier","src":"13338:4:36"}]}]},"name":"abi_encode_tuple_t_address_payable_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"12888:483:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13086:9:36","nodeType":"YulTypedName","src":"13086:9:36","type":""},{"name":"value1","nativeSrc":"13097:6:36","nodeType":"YulTypedName","src":"13097:6:36","type":""},{"name":"value0","nativeSrc":"13105:6:36","nodeType":"YulTypedName","src":"13105:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13116:4:36","nodeType":"YulTypedName","src":"13116:4:36","type":""}],"src":"12888:483:36"},{"body":{"nativeSrc":"13454:199:36","nodeType":"YulBlock","src":"13454:199:36","statements":[{"body":{"nativeSrc":"13500:16:36","nodeType":"YulBlock","src":"13500:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"13509:1:36","nodeType":"YulLiteral","src":"13509:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"13512:1:36","nodeType":"YulLiteral","src":"13512:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"13502:6:36","nodeType":"YulIdentifier","src":"13502:6:36"},"nativeSrc":"13502:12:36","nodeType":"YulFunctionCall","src":"13502:12:36"},"nativeSrc":"13502:12:36","nodeType":"YulExpressionStatement","src":"13502:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"13475:7:36","nodeType":"YulIdentifier","src":"13475:7:36"},{"name":"headStart","nativeSrc":"13484:9:36","nodeType":"YulIdentifier","src":"13484:9:36"}],"functionName":{"name":"sub","nativeSrc":"13471:3:36","nodeType":"YulIdentifier","src":"13471:3:36"},"nativeSrc":"13471:23:36","nodeType":"YulFunctionCall","src":"13471:23:36"},{"kind":"number","nativeSrc":"13496:2:36","nodeType":"YulLiteral","src":"13496:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"13467:3:36","nodeType":"YulIdentifier","src":"13467:3:36"},"nativeSrc":"13467:32:36","nodeType":"YulFunctionCall","src":"13467:32:36"},"nativeSrc":"13464:52:36","nodeType":"YulIf","src":"13464:52:36"},{"nativeSrc":"13525:29:36","nodeType":"YulVariableDeclaration","src":"13525:29:36","value":{"arguments":[{"name":"headStart","nativeSrc":"13544:9:36","nodeType":"YulIdentifier","src":"13544:9:36"}],"functionName":{"name":"mload","nativeSrc":"13538:5:36","nodeType":"YulIdentifier","src":"13538:5:36"},"nativeSrc":"13538:16:36","nodeType":"YulFunctionCall","src":"13538:16:36"},"variables":[{"name":"value","nativeSrc":"13529:5:36","nodeType":"YulTypedName","src":"13529:5:36","type":""}]},{"body":{"nativeSrc":"13607:16:36","nodeType":"YulBlock","src":"13607:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"13616:1:36","nodeType":"YulLiteral","src":"13616:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"13619:1:36","nodeType":"YulLiteral","src":"13619:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"13609:6:36","nodeType":"YulIdentifier","src":"13609:6:36"},"nativeSrc":"13609:12:36","nodeType":"YulFunctionCall","src":"13609:12:36"},"nativeSrc":"13609:12:36","nodeType":"YulExpressionStatement","src":"13609:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"13576:5:36","nodeType":"YulIdentifier","src":"13576:5:36"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"13597:5:36","nodeType":"YulIdentifier","src":"13597:5:36"}],"functionName":{"name":"iszero","nativeSrc":"13590:6:36","nodeType":"YulIdentifier","src":"13590:6:36"},"nativeSrc":"13590:13:36","nodeType":"YulFunctionCall","src":"13590:13:36"}],"functionName":{"name":"iszero","nativeSrc":"13583:6:36","nodeType":"YulIdentifier","src":"13583:6:36"},"nativeSrc":"13583:21:36","nodeType":"YulFunctionCall","src":"13583:21:36"}],"functionName":{"name":"eq","nativeSrc":"13573:2:36","nodeType":"YulIdentifier","src":"13573:2:36"},"nativeSrc":"13573:32:36","nodeType":"YulFunctionCall","src":"13573:32:36"}],"functionName":{"name":"iszero","nativeSrc":"13566:6:36","nodeType":"YulIdentifier","src":"13566:6:36"},"nativeSrc":"13566:40:36","nodeType":"YulFunctionCall","src":"13566:40:36"},"nativeSrc":"13563:60:36","nodeType":"YulIf","src":"13563:60:36"},{"nativeSrc":"13632:15:36","nodeType":"YulAssignment","src":"13632:15:36","value":{"name":"value","nativeSrc":"13642:5:36","nodeType":"YulIdentifier","src":"13642:5:36"},"variableNames":[{"name":"value0","nativeSrc":"13632:6:36","nodeType":"YulIdentifier","src":"13632:6:36"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"13376:277:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13420:9:36","nodeType":"YulTypedName","src":"13420:9:36","type":""},{"name":"dataEnd","nativeSrc":"13431:7:36","nodeType":"YulTypedName","src":"13431:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"13443:6:36","nodeType":"YulTypedName","src":"13443:6:36","type":""}],"src":"13376:277:36"},{"body":{"nativeSrc":"14015:475:36","nodeType":"YulBlock","src":"14015:475:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"14032:9:36","nodeType":"YulIdentifier","src":"14032:9:36"},{"arguments":[{"name":"value0","nativeSrc":"14047:6:36","nodeType":"YulIdentifier","src":"14047:6:36"},{"kind":"number","nativeSrc":"14055:42:36","nodeType":"YulLiteral","src":"14055:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"14043:3:36","nodeType":"YulIdentifier","src":"14043:3:36"},"nativeSrc":"14043:55:36","nodeType":"YulFunctionCall","src":"14043:55:36"}],"functionName":{"name":"mstore","nativeSrc":"14025:6:36","nodeType":"YulIdentifier","src":"14025:6:36"},"nativeSrc":"14025:74:36","nodeType":"YulFunctionCall","src":"14025:74:36"},"nativeSrc":"14025:74:36","nodeType":"YulExpressionStatement","src":"14025:74:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14119:9:36","nodeType":"YulIdentifier","src":"14119:9:36"},{"kind":"number","nativeSrc":"14130:2:36","nodeType":"YulLiteral","src":"14130:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14115:3:36","nodeType":"YulIdentifier","src":"14115:3:36"},"nativeSrc":"14115:18:36","nodeType":"YulFunctionCall","src":"14115:18:36"},{"kind":"number","nativeSrc":"14135:3:36","nodeType":"YulLiteral","src":"14135:3:36","type":"","value":"128"}],"functionName":{"name":"mstore","nativeSrc":"14108:6:36","nodeType":"YulIdentifier","src":"14108:6:36"},"nativeSrc":"14108:31:36","nodeType":"YulFunctionCall","src":"14108:31:36"},"nativeSrc":"14108:31:36","nodeType":"YulExpressionStatement","src":"14108:31:36"},{"nativeSrc":"14148:82:36","nodeType":"YulVariableDeclaration","src":"14148:82:36","value":{"arguments":[{"name":"value1","nativeSrc":"14202:6:36","nodeType":"YulIdentifier","src":"14202:6:36"},{"arguments":[{"name":"headStart","nativeSrc":"14214:9:36","nodeType":"YulIdentifier","src":"14214:9:36"},{"kind":"number","nativeSrc":"14225:3:36","nodeType":"YulLiteral","src":"14225:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"14210:3:36","nodeType":"YulIdentifier","src":"14210:3:36"},"nativeSrc":"14210:19:36","nodeType":"YulFunctionCall","src":"14210:19:36"}],"functionName":{"name":"abi_encode_array_uint256_dyn_memory_ptr","nativeSrc":"14162:39:36","nodeType":"YulIdentifier","src":"14162:39:36"},"nativeSrc":"14162:68:36","nodeType":"YulFunctionCall","src":"14162:68:36"},"variables":[{"name":"tail_1","nativeSrc":"14152:6:36","nodeType":"YulTypedName","src":"14152:6:36","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14250:9:36","nodeType":"YulIdentifier","src":"14250:9:36"},{"kind":"number","nativeSrc":"14261:2:36","nodeType":"YulLiteral","src":"14261:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"14246:3:36","nodeType":"YulIdentifier","src":"14246:3:36"},"nativeSrc":"14246:18:36","nodeType":"YulFunctionCall","src":"14246:18:36"},{"arguments":[{"name":"tail_1","nativeSrc":"14270:6:36","nodeType":"YulIdentifier","src":"14270:6:36"},{"name":"headStart","nativeSrc":"14278:9:36","nodeType":"YulIdentifier","src":"14278:9:36"}],"functionName":{"name":"sub","nativeSrc":"14266:3:36","nodeType":"YulIdentifier","src":"14266:3:36"},"nativeSrc":"14266:22:36","nodeType":"YulFunctionCall","src":"14266:22:36"}],"functionName":{"name":"mstore","nativeSrc":"14239:6:36","nodeType":"YulIdentifier","src":"14239:6:36"},"nativeSrc":"14239:50:36","nodeType":"YulFunctionCall","src":"14239:50:36"},"nativeSrc":"14239:50:36","nodeType":"YulExpressionStatement","src":"14239:50:36"},{"nativeSrc":"14298:69:36","nodeType":"YulVariableDeclaration","src":"14298:69:36","value":{"arguments":[{"name":"value2","nativeSrc":"14352:6:36","nodeType":"YulIdentifier","src":"14352:6:36"},{"name":"tail_1","nativeSrc":"14360:6:36","nodeType":"YulIdentifier","src":"14360:6:36"}],"functionName":{"name":"abi_encode_array_uint256_dyn_memory_ptr","nativeSrc":"14312:39:36","nodeType":"YulIdentifier","src":"14312:39:36"},"nativeSrc":"14312:55:36","nodeType":"YulFunctionCall","src":"14312:55:36"},"variables":[{"name":"tail_2","nativeSrc":"14302:6:36","nodeType":"YulTypedName","src":"14302:6:36","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14387:9:36","nodeType":"YulIdentifier","src":"14387:9:36"},{"kind":"number","nativeSrc":"14398:2:36","nodeType":"YulLiteral","src":"14398:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"14383:3:36","nodeType":"YulIdentifier","src":"14383:3:36"},"nativeSrc":"14383:18:36","nodeType":"YulFunctionCall","src":"14383:18:36"},{"arguments":[{"name":"tail_2","nativeSrc":"14407:6:36","nodeType":"YulIdentifier","src":"14407:6:36"},{"name":"headStart","nativeSrc":"14415:9:36","nodeType":"YulIdentifier","src":"14415:9:36"}],"functionName":{"name":"sub","nativeSrc":"14403:3:36","nodeType":"YulIdentifier","src":"14403:3:36"},"nativeSrc":"14403:22:36","nodeType":"YulFunctionCall","src":"14403:22:36"}],"functionName":{"name":"mstore","nativeSrc":"14376:6:36","nodeType":"YulIdentifier","src":"14376:6:36"},"nativeSrc":"14376:50:36","nodeType":"YulFunctionCall","src":"14376:50:36"},"nativeSrc":"14376:50:36","nodeType":"YulExpressionStatement","src":"14376:50:36"},{"expression":{"arguments":[{"name":"tail_2","nativeSrc":"14442:6:36","nodeType":"YulIdentifier","src":"14442:6:36"},{"kind":"number","nativeSrc":"14450:1:36","nodeType":"YulLiteral","src":"14450:1:36","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"14435:6:36","nodeType":"YulIdentifier","src":"14435:6:36"},"nativeSrc":"14435:17:36","nodeType":"YulFunctionCall","src":"14435:17:36"},"nativeSrc":"14435:17:36","nodeType":"YulExpressionStatement","src":"14435:17:36"},{"nativeSrc":"14461:23:36","nodeType":"YulAssignment","src":"14461:23:36","value":{"arguments":[{"name":"tail_2","nativeSrc":"14473:6:36","nodeType":"YulIdentifier","src":"14473:6:36"},{"kind":"number","nativeSrc":"14481:2:36","nodeType":"YulLiteral","src":"14481:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14469:3:36","nodeType":"YulIdentifier","src":"14469:3:36"},"nativeSrc":"14469:15:36","nodeType":"YulFunctionCall","src":"14469:15:36"},"variableNames":[{"name":"tail","nativeSrc":"14461:4:36","nodeType":"YulIdentifier","src":"14461:4:36"}]}]},"name":"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"13658:832:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13968:9:36","nodeType":"YulTypedName","src":"13968:9:36","type":""},{"name":"value2","nativeSrc":"13979:6:36","nodeType":"YulTypedName","src":"13979:6:36","type":""},{"name":"value1","nativeSrc":"13987:6:36","nodeType":"YulTypedName","src":"13987:6:36","type":""},{"name":"value0","nativeSrc":"13995:6:36","nodeType":"YulTypedName","src":"13995:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"14006:4:36","nodeType":"YulTypedName","src":"14006:4:36","type":""}],"src":"13658:832:36"},{"body":{"nativeSrc":"14752:301:36","nodeType":"YulBlock","src":"14752:301:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"14769:9:36","nodeType":"YulIdentifier","src":"14769:9:36"},{"name":"value0","nativeSrc":"14780:6:36","nodeType":"YulIdentifier","src":"14780:6:36"}],"functionName":{"name":"mstore","nativeSrc":"14762:6:36","nodeType":"YulIdentifier","src":"14762:6:36"},"nativeSrc":"14762:25:36","nodeType":"YulFunctionCall","src":"14762:25:36"},"nativeSrc":"14762:25:36","nodeType":"YulExpressionStatement","src":"14762:25:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14807:9:36","nodeType":"YulIdentifier","src":"14807:9:36"},{"kind":"number","nativeSrc":"14818:2:36","nodeType":"YulLiteral","src":"14818:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14803:3:36","nodeType":"YulIdentifier","src":"14803:3:36"},"nativeSrc":"14803:18:36","nodeType":"YulFunctionCall","src":"14803:18:36"},{"kind":"number","nativeSrc":"14823:2:36","nodeType":"YulLiteral","src":"14823:2:36","type":"","value":"96"}],"functionName":{"name":"mstore","nativeSrc":"14796:6:36","nodeType":"YulIdentifier","src":"14796:6:36"},"nativeSrc":"14796:30:36","nodeType":"YulFunctionCall","src":"14796:30:36"},"nativeSrc":"14796:30:36","nodeType":"YulExpressionStatement","src":"14796:30:36"},{"nativeSrc":"14835:81:36","nodeType":"YulVariableDeclaration","src":"14835:81:36","value":{"arguments":[{"name":"value1","nativeSrc":"14889:6:36","nodeType":"YulIdentifier","src":"14889:6:36"},{"arguments":[{"name":"headStart","nativeSrc":"14901:9:36","nodeType":"YulIdentifier","src":"14901:9:36"},{"kind":"number","nativeSrc":"14912:2:36","nodeType":"YulLiteral","src":"14912:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"14897:3:36","nodeType":"YulIdentifier","src":"14897:3:36"},"nativeSrc":"14897:18:36","nodeType":"YulFunctionCall","src":"14897:18:36"}],"functionName":{"name":"abi_encode_array_uint256_dyn_memory_ptr","nativeSrc":"14849:39:36","nodeType":"YulIdentifier","src":"14849:39:36"},"nativeSrc":"14849:67:36","nodeType":"YulFunctionCall","src":"14849:67:36"},"variables":[{"name":"tail_1","nativeSrc":"14839:6:36","nodeType":"YulTypedName","src":"14839:6:36","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14936:9:36","nodeType":"YulIdentifier","src":"14936:9:36"},{"kind":"number","nativeSrc":"14947:2:36","nodeType":"YulLiteral","src":"14947:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"14932:3:36","nodeType":"YulIdentifier","src":"14932:3:36"},"nativeSrc":"14932:18:36","nodeType":"YulFunctionCall","src":"14932:18:36"},{"arguments":[{"name":"tail_1","nativeSrc":"14956:6:36","nodeType":"YulIdentifier","src":"14956:6:36"},{"name":"headStart","nativeSrc":"14964:9:36","nodeType":"YulIdentifier","src":"14964:9:36"}],"functionName":{"name":"sub","nativeSrc":"14952:3:36","nodeType":"YulIdentifier","src":"14952:3:36"},"nativeSrc":"14952:22:36","nodeType":"YulFunctionCall","src":"14952:22:36"}],"functionName":{"name":"mstore","nativeSrc":"14925:6:36","nodeType":"YulIdentifier","src":"14925:6:36"},"nativeSrc":"14925:50:36","nodeType":"YulFunctionCall","src":"14925:50:36"},"nativeSrc":"14925:50:36","nodeType":"YulExpressionStatement","src":"14925:50:36"},{"nativeSrc":"14984:63:36","nodeType":"YulAssignment","src":"14984:63:36","value":{"arguments":[{"name":"value2","nativeSrc":"15032:6:36","nodeType":"YulIdentifier","src":"15032:6:36"},{"name":"tail_1","nativeSrc":"15040:6:36","nodeType":"YulIdentifier","src":"15040:6:36"}],"functionName":{"name":"abi_encode_array_uint256_dyn_memory_ptr","nativeSrc":"14992:39:36","nodeType":"YulIdentifier","src":"14992:39:36"},"nativeSrc":"14992:55:36","nodeType":"YulFunctionCall","src":"14992:55:36"},"variableNames":[{"name":"tail","nativeSrc":"14984:4:36","nodeType":"YulIdentifier","src":"14984:4:36"}]}]},"name":"abi_encode_tuple_t_uint256_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_uint256_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"14495:558:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14705:9:36","nodeType":"YulTypedName","src":"14705:9:36","type":""},{"name":"value2","nativeSrc":"14716:6:36","nodeType":"YulTypedName","src":"14716:6:36","type":""},{"name":"value1","nativeSrc":"14724:6:36","nodeType":"YulTypedName","src":"14724:6:36","type":""},{"name":"value0","nativeSrc":"14732:6:36","nodeType":"YulTypedName","src":"14732:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"14743:4:36","nodeType":"YulTypedName","src":"14743:4:36","type":""}],"src":"14495:558:36"},{"body":{"nativeSrc":"15090:152:36","nodeType":"YulBlock","src":"15090:152:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"15107:1:36","nodeType":"YulLiteral","src":"15107:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"15110:77:36","nodeType":"YulLiteral","src":"15110:77:36","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"15100:6:36","nodeType":"YulIdentifier","src":"15100:6:36"},"nativeSrc":"15100:88:36","nodeType":"YulFunctionCall","src":"15100:88:36"},"nativeSrc":"15100:88:36","nodeType":"YulExpressionStatement","src":"15100:88:36"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"15204:1:36","nodeType":"YulLiteral","src":"15204:1:36","type":"","value":"4"},{"kind":"number","nativeSrc":"15207:4:36","nodeType":"YulLiteral","src":"15207:4:36","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"15197:6:36","nodeType":"YulIdentifier","src":"15197:6:36"},"nativeSrc":"15197:15:36","nodeType":"YulFunctionCall","src":"15197:15:36"},"nativeSrc":"15197:15:36","nodeType":"YulExpressionStatement","src":"15197:15:36"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"15228:1:36","nodeType":"YulLiteral","src":"15228:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"15231:4:36","nodeType":"YulLiteral","src":"15231:4:36","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"15221:6:36","nodeType":"YulIdentifier","src":"15221:6:36"},"nativeSrc":"15221:15:36","nodeType":"YulFunctionCall","src":"15221:15:36"},"nativeSrc":"15221:15:36","nodeType":"YulExpressionStatement","src":"15221:15:36"}]},"name":"panic_error_0x32","nativeSrc":"15058:184:36","nodeType":"YulFunctionDefinition","src":"15058:184:36"},{"body":{"nativeSrc":"15332:177:36","nodeType":"YulBlock","src":"15332:177:36","statements":[{"body":{"nativeSrc":"15378:16:36","nodeType":"YulBlock","src":"15378:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"15387:1:36","nodeType":"YulLiteral","src":"15387:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"15390:1:36","nodeType":"YulLiteral","src":"15390:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"15380:6:36","nodeType":"YulIdentifier","src":"15380:6:36"},"nativeSrc":"15380:12:36","nodeType":"YulFunctionCall","src":"15380:12:36"},"nativeSrc":"15380:12:36","nodeType":"YulExpressionStatement","src":"15380:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"15353:7:36","nodeType":"YulIdentifier","src":"15353:7:36"},{"name":"headStart","nativeSrc":"15362:9:36","nodeType":"YulIdentifier","src":"15362:9:36"}],"functionName":{"name":"sub","nativeSrc":"15349:3:36","nodeType":"YulIdentifier","src":"15349:3:36"},"nativeSrc":"15349:23:36","nodeType":"YulFunctionCall","src":"15349:23:36"},{"kind":"number","nativeSrc":"15374:2:36","nodeType":"YulLiteral","src":"15374:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"15345:3:36","nodeType":"YulIdentifier","src":"15345:3:36"},"nativeSrc":"15345:32:36","nodeType":"YulFunctionCall","src":"15345:32:36"},"nativeSrc":"15342:52:36","nodeType":"YulIf","src":"15342:52:36"},{"nativeSrc":"15403:36:36","nodeType":"YulVariableDeclaration","src":"15403:36:36","value":{"arguments":[{"name":"headStart","nativeSrc":"15429:9:36","nodeType":"YulIdentifier","src":"15429:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"15416:12:36","nodeType":"YulIdentifier","src":"15416:12:36"},"nativeSrc":"15416:23:36","nodeType":"YulFunctionCall","src":"15416:23:36"},"variables":[{"name":"value","nativeSrc":"15407:5:36","nodeType":"YulTypedName","src":"15407:5:36","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"15473:5:36","nodeType":"YulIdentifier","src":"15473:5:36"}],"functionName":{"name":"validator_revert_address","nativeSrc":"15448:24:36","nodeType":"YulIdentifier","src":"15448:24:36"},"nativeSrc":"15448:31:36","nodeType":"YulFunctionCall","src":"15448:31:36"},"nativeSrc":"15448:31:36","nodeType":"YulExpressionStatement","src":"15448:31:36"},{"nativeSrc":"15488:15:36","nodeType":"YulAssignment","src":"15488:15:36","value":{"name":"value","nativeSrc":"15498:5:36","nodeType":"YulIdentifier","src":"15498:5:36"},"variableNames":[{"name":"value0","nativeSrc":"15488:6:36","nodeType":"YulIdentifier","src":"15488:6:36"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20_$1361","nativeSrc":"15247:262:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15298:9:36","nodeType":"YulTypedName","src":"15298:9:36","type":""},{"name":"dataEnd","nativeSrc":"15309:7:36","nodeType":"YulTypedName","src":"15309:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"15321:6:36","nodeType":"YulTypedName","src":"15321:6:36","type":""}],"src":"15247:262:36"},{"body":{"nativeSrc":"15600:177:36","nodeType":"YulBlock","src":"15600:177:36","statements":[{"body":{"nativeSrc":"15646:16:36","nodeType":"YulBlock","src":"15646:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"15655:1:36","nodeType":"YulLiteral","src":"15655:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"15658:1:36","nodeType":"YulLiteral","src":"15658:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"15648:6:36","nodeType":"YulIdentifier","src":"15648:6:36"},"nativeSrc":"15648:12:36","nodeType":"YulFunctionCall","src":"15648:12:36"},"nativeSrc":"15648:12:36","nodeType":"YulExpressionStatement","src":"15648:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"15621:7:36","nodeType":"YulIdentifier","src":"15621:7:36"},{"name":"headStart","nativeSrc":"15630:9:36","nodeType":"YulIdentifier","src":"15630:9:36"}],"functionName":{"name":"sub","nativeSrc":"15617:3:36","nodeType":"YulIdentifier","src":"15617:3:36"},"nativeSrc":"15617:23:36","nodeType":"YulFunctionCall","src":"15617:23:36"},{"kind":"number","nativeSrc":"15642:2:36","nodeType":"YulLiteral","src":"15642:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"15613:3:36","nodeType":"YulIdentifier","src":"15613:3:36"},"nativeSrc":"15613:32:36","nodeType":"YulFunctionCall","src":"15613:32:36"},"nativeSrc":"15610:52:36","nodeType":"YulIf","src":"15610:52:36"},{"nativeSrc":"15671:36:36","nodeType":"YulVariableDeclaration","src":"15671:36:36","value":{"arguments":[{"name":"headStart","nativeSrc":"15697:9:36","nodeType":"YulIdentifier","src":"15697:9:36"}],"functionName":{"name":"calldataload","nativeSrc":"15684:12:36","nodeType":"YulIdentifier","src":"15684:12:36"},"nativeSrc":"15684:23:36","nodeType":"YulFunctionCall","src":"15684:23:36"},"variables":[{"name":"value","nativeSrc":"15675:5:36","nodeType":"YulTypedName","src":"15675:5:36","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"15741:5:36","nodeType":"YulIdentifier","src":"15741:5:36"}],"functionName":{"name":"validator_revert_address","nativeSrc":"15716:24:36","nodeType":"YulIdentifier","src":"15716:24:36"},"nativeSrc":"15716:31:36","nodeType":"YulFunctionCall","src":"15716:31:36"},"nativeSrc":"15716:31:36","nodeType":"YulExpressionStatement","src":"15716:31:36"},{"nativeSrc":"15756:15:36","nodeType":"YulAssignment","src":"15756:15:36","value":{"name":"value","nativeSrc":"15766:5:36","nodeType":"YulIdentifier","src":"15766:5:36"},"variableNames":[{"name":"value0","nativeSrc":"15756:6:36","nodeType":"YulIdentifier","src":"15756:6:36"}]}]},"name":"abi_decode_tuple_t_contract$_IERC721_$1280","nativeSrc":"15514:263:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15566:9:36","nodeType":"YulTypedName","src":"15566:9:36","type":""},{"name":"dataEnd","nativeSrc":"15577:7:36","nodeType":"YulTypedName","src":"15577:7:36","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"15589:6:36","nodeType":"YulTypedName","src":"15589:6:36","type":""}],"src":"15514:263:36"},{"body":{"nativeSrc":"15939:241:36","nodeType":"YulBlock","src":"15939:241:36","statements":[{"nativeSrc":"15949:26:36","nodeType":"YulAssignment","src":"15949:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"15961:9:36","nodeType":"YulIdentifier","src":"15961:9:36"},{"kind":"number","nativeSrc":"15972:2:36","nodeType":"YulLiteral","src":"15972:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"15957:3:36","nodeType":"YulIdentifier","src":"15957:3:36"},"nativeSrc":"15957:18:36","nodeType":"YulFunctionCall","src":"15957:18:36"},"variableNames":[{"name":"tail","nativeSrc":"15949:4:36","nodeType":"YulIdentifier","src":"15949:4:36"}]},{"nativeSrc":"15984:52:36","nodeType":"YulVariableDeclaration","src":"15984:52:36","value":{"kind":"number","nativeSrc":"15994:42:36","nodeType":"YulLiteral","src":"15994:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"15988:2:36","nodeType":"YulTypedName","src":"15988:2:36","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"16052:9:36","nodeType":"YulIdentifier","src":"16052:9:36"},{"arguments":[{"name":"value0","nativeSrc":"16067:6:36","nodeType":"YulIdentifier","src":"16067:6:36"},{"name":"_1","nativeSrc":"16075:2:36","nodeType":"YulIdentifier","src":"16075:2:36"}],"functionName":{"name":"and","nativeSrc":"16063:3:36","nodeType":"YulIdentifier","src":"16063:3:36"},"nativeSrc":"16063:15:36","nodeType":"YulFunctionCall","src":"16063:15:36"}],"functionName":{"name":"mstore","nativeSrc":"16045:6:36","nodeType":"YulIdentifier","src":"16045:6:36"},"nativeSrc":"16045:34:36","nodeType":"YulFunctionCall","src":"16045:34:36"},"nativeSrc":"16045:34:36","nodeType":"YulExpressionStatement","src":"16045:34:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16099:9:36","nodeType":"YulIdentifier","src":"16099:9:36"},{"kind":"number","nativeSrc":"16110:2:36","nodeType":"YulLiteral","src":"16110:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16095:3:36","nodeType":"YulIdentifier","src":"16095:3:36"},"nativeSrc":"16095:18:36","nodeType":"YulFunctionCall","src":"16095:18:36"},{"arguments":[{"name":"value1","nativeSrc":"16119:6:36","nodeType":"YulIdentifier","src":"16119:6:36"},{"name":"_1","nativeSrc":"16127:2:36","nodeType":"YulIdentifier","src":"16127:2:36"}],"functionName":{"name":"and","nativeSrc":"16115:3:36","nodeType":"YulIdentifier","src":"16115:3:36"},"nativeSrc":"16115:15:36","nodeType":"YulFunctionCall","src":"16115:15:36"}],"functionName":{"name":"mstore","nativeSrc":"16088:6:36","nodeType":"YulIdentifier","src":"16088:6:36"},"nativeSrc":"16088:43:36","nodeType":"YulFunctionCall","src":"16088:43:36"},"nativeSrc":"16088:43:36","nodeType":"YulExpressionStatement","src":"16088:43:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16151:9:36","nodeType":"YulIdentifier","src":"16151:9:36"},{"kind":"number","nativeSrc":"16162:2:36","nodeType":"YulLiteral","src":"16162:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"16147:3:36","nodeType":"YulIdentifier","src":"16147:3:36"},"nativeSrc":"16147:18:36","nodeType":"YulFunctionCall","src":"16147:18:36"},{"name":"value2","nativeSrc":"16167:6:36","nodeType":"YulIdentifier","src":"16167:6:36"}],"functionName":{"name":"mstore","nativeSrc":"16140:6:36","nodeType":"YulIdentifier","src":"16140:6:36"},"nativeSrc":"16140:34:36","nodeType":"YulFunctionCall","src":"16140:34:36"},"nativeSrc":"16140:34:36","nodeType":"YulExpressionStatement","src":"16140:34:36"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nativeSrc":"15782:398:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15892:9:36","nodeType":"YulTypedName","src":"15892:9:36","type":""},{"name":"value2","nativeSrc":"15903:6:36","nodeType":"YulTypedName","src":"15903:6:36","type":""},{"name":"value1","nativeSrc":"15911:6:36","nodeType":"YulTypedName","src":"15911:6:36","type":""},{"name":"value0","nativeSrc":"15919:6:36","nodeType":"YulTypedName","src":"15919:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"15930:4:36","nodeType":"YulTypedName","src":"15930:4:36","type":""}],"src":"15782:398:36"},{"body":{"nativeSrc":"16234:233:36","nodeType":"YulBlock","src":"16234:233:36","statements":[{"nativeSrc":"16244:17:36","nodeType":"YulAssignment","src":"16244:17:36","value":{"arguments":[{"name":"x","nativeSrc":"16256:1:36","nodeType":"YulIdentifier","src":"16256:1:36"},{"name":"y","nativeSrc":"16259:1:36","nodeType":"YulIdentifier","src":"16259:1:36"}],"functionName":{"name":"sub","nativeSrc":"16252:3:36","nodeType":"YulIdentifier","src":"16252:3:36"},"nativeSrc":"16252:9:36","nodeType":"YulFunctionCall","src":"16252:9:36"},"variableNames":[{"name":"diff","nativeSrc":"16244:4:36","nodeType":"YulIdentifier","src":"16244:4:36"}]},{"body":{"nativeSrc":"16293:168:36","nodeType":"YulBlock","src":"16293:168:36","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"16314:1:36","nodeType":"YulLiteral","src":"16314:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"16317:77:36","nodeType":"YulLiteral","src":"16317:77:36","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"16307:6:36","nodeType":"YulIdentifier","src":"16307:6:36"},"nativeSrc":"16307:88:36","nodeType":"YulFunctionCall","src":"16307:88:36"},"nativeSrc":"16307:88:36","nodeType":"YulExpressionStatement","src":"16307:88:36"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"16415:1:36","nodeType":"YulLiteral","src":"16415:1:36","type":"","value":"4"},{"kind":"number","nativeSrc":"16418:4:36","nodeType":"YulLiteral","src":"16418:4:36","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"16408:6:36","nodeType":"YulIdentifier","src":"16408:6:36"},"nativeSrc":"16408:15:36","nodeType":"YulFunctionCall","src":"16408:15:36"},"nativeSrc":"16408:15:36","nodeType":"YulExpressionStatement","src":"16408:15:36"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"16443:1:36","nodeType":"YulLiteral","src":"16443:1:36","type":"","value":"0"},{"kind":"number","nativeSrc":"16446:4:36","nodeType":"YulLiteral","src":"16446:4:36","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"16436:6:36","nodeType":"YulIdentifier","src":"16436:6:36"},"nativeSrc":"16436:15:36","nodeType":"YulFunctionCall","src":"16436:15:36"},"nativeSrc":"16436:15:36","nodeType":"YulExpressionStatement","src":"16436:15:36"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"16276:4:36","nodeType":"YulIdentifier","src":"16276:4:36"},{"name":"x","nativeSrc":"16282:1:36","nodeType":"YulIdentifier","src":"16282:1:36"}],"functionName":{"name":"gt","nativeSrc":"16273:2:36","nodeType":"YulIdentifier","src":"16273:2:36"},"nativeSrc":"16273:11:36","nodeType":"YulFunctionCall","src":"16273:11:36"},"nativeSrc":"16270:191:36","nodeType":"YulIf","src":"16270:191:36"}]},"name":"checked_sub_t_uint256","nativeSrc":"16185:282:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"16216:1:36","nodeType":"YulTypedName","src":"16216:1:36","type":""},{"name":"y","nativeSrc":"16219:1:36","nodeType":"YulTypedName","src":"16219:1:36","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"16225:4:36","nodeType":"YulTypedName","src":"16225:4:36","type":""}],"src":"16185:282:36"},{"body":{"nativeSrc":"16581:125:36","nodeType":"YulBlock","src":"16581:125:36","statements":[{"nativeSrc":"16591:26:36","nodeType":"YulAssignment","src":"16591:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"16603:9:36","nodeType":"YulIdentifier","src":"16603:9:36"},{"kind":"number","nativeSrc":"16614:2:36","nodeType":"YulLiteral","src":"16614:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16599:3:36","nodeType":"YulIdentifier","src":"16599:3:36"},"nativeSrc":"16599:18:36","nodeType":"YulFunctionCall","src":"16599:18:36"},"variableNames":[{"name":"tail","nativeSrc":"16591:4:36","nodeType":"YulIdentifier","src":"16591:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"16633:9:36","nodeType":"YulIdentifier","src":"16633:9:36"},{"arguments":[{"name":"value0","nativeSrc":"16648:6:36","nodeType":"YulIdentifier","src":"16648:6:36"},{"kind":"number","nativeSrc":"16656:42:36","nodeType":"YulLiteral","src":"16656:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"16644:3:36","nodeType":"YulIdentifier","src":"16644:3:36"},"nativeSrc":"16644:55:36","nodeType":"YulFunctionCall","src":"16644:55:36"}],"functionName":{"name":"mstore","nativeSrc":"16626:6:36","nodeType":"YulIdentifier","src":"16626:6:36"},"nativeSrc":"16626:74:36","nodeType":"YulFunctionCall","src":"16626:74:36"},"nativeSrc":"16626:74:36","nodeType":"YulExpressionStatement","src":"16626:74:36"}]},"name":"abi_encode_tuple_t_address_payable__to_t_address__fromStack_reversed","nativeSrc":"16472:234:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16550:9:36","nodeType":"YulTypedName","src":"16550:9:36","type":""},{"name":"value0","nativeSrc":"16561:6:36","nodeType":"YulTypedName","src":"16561:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16572:4:36","nodeType":"YulTypedName","src":"16572:4:36","type":""}],"src":"16472:234:36"},{"body":{"nativeSrc":"16840:168:36","nodeType":"YulBlock","src":"16840:168:36","statements":[{"nativeSrc":"16850:26:36","nodeType":"YulAssignment","src":"16850:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"16862:9:36","nodeType":"YulIdentifier","src":"16862:9:36"},{"kind":"number","nativeSrc":"16873:2:36","nodeType":"YulLiteral","src":"16873:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"16858:3:36","nodeType":"YulIdentifier","src":"16858:3:36"},"nativeSrc":"16858:18:36","nodeType":"YulFunctionCall","src":"16858:18:36"},"variableNames":[{"name":"tail","nativeSrc":"16850:4:36","nodeType":"YulIdentifier","src":"16850:4:36"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"16892:9:36","nodeType":"YulIdentifier","src":"16892:9:36"},{"arguments":[{"name":"value0","nativeSrc":"16907:6:36","nodeType":"YulIdentifier","src":"16907:6:36"},{"kind":"number","nativeSrc":"16915:42:36","nodeType":"YulLiteral","src":"16915:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"16903:3:36","nodeType":"YulIdentifier","src":"16903:3:36"},"nativeSrc":"16903:55:36","nodeType":"YulFunctionCall","src":"16903:55:36"}],"functionName":{"name":"mstore","nativeSrc":"16885:6:36","nodeType":"YulIdentifier","src":"16885:6:36"},"nativeSrc":"16885:74:36","nodeType":"YulFunctionCall","src":"16885:74:36"},"nativeSrc":"16885:74:36","nodeType":"YulExpressionStatement","src":"16885:74:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16979:9:36","nodeType":"YulIdentifier","src":"16979:9:36"},{"kind":"number","nativeSrc":"16990:2:36","nodeType":"YulLiteral","src":"16990:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16975:3:36","nodeType":"YulIdentifier","src":"16975:3:36"},"nativeSrc":"16975:18:36","nodeType":"YulFunctionCall","src":"16975:18:36"},{"name":"value1","nativeSrc":"16995:6:36","nodeType":"YulIdentifier","src":"16995:6:36"}],"functionName":{"name":"mstore","nativeSrc":"16968:6:36","nodeType":"YulIdentifier","src":"16968:6:36"},"nativeSrc":"16968:34:36","nodeType":"YulFunctionCall","src":"16968:34:36"},"nativeSrc":"16968:34:36","nodeType":"YulExpressionStatement","src":"16968:34:36"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"16711:297:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16801:9:36","nodeType":"YulTypedName","src":"16801:9:36","type":""},{"name":"value1","nativeSrc":"16812:6:36","nodeType":"YulTypedName","src":"16812:6:36","type":""},{"name":"value0","nativeSrc":"16820:6:36","nodeType":"YulTypedName","src":"16820:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16831:4:36","nodeType":"YulTypedName","src":"16831:4:36","type":""}],"src":"16711:297:36"},{"body":{"nativeSrc":"17187:179:36","nodeType":"YulBlock","src":"17187:179:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"17204:9:36","nodeType":"YulIdentifier","src":"17204:9:36"},{"kind":"number","nativeSrc":"17215:2:36","nodeType":"YulLiteral","src":"17215:2:36","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"17197:6:36","nodeType":"YulIdentifier","src":"17197:6:36"},"nativeSrc":"17197:21:36","nodeType":"YulFunctionCall","src":"17197:21:36"},"nativeSrc":"17197:21:36","nodeType":"YulExpressionStatement","src":"17197:21:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17238:9:36","nodeType":"YulIdentifier","src":"17238:9:36"},{"kind":"number","nativeSrc":"17249:2:36","nodeType":"YulLiteral","src":"17249:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17234:3:36","nodeType":"YulIdentifier","src":"17234:3:36"},"nativeSrc":"17234:18:36","nodeType":"YulFunctionCall","src":"17234:18:36"},{"kind":"number","nativeSrc":"17254:2:36","nodeType":"YulLiteral","src":"17254:2:36","type":"","value":"29"}],"functionName":{"name":"mstore","nativeSrc":"17227:6:36","nodeType":"YulIdentifier","src":"17227:6:36"},"nativeSrc":"17227:30:36","nodeType":"YulFunctionCall","src":"17227:30:36"},"nativeSrc":"17227:30:36","nodeType":"YulExpressionStatement","src":"17227:30:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17277:9:36","nodeType":"YulIdentifier","src":"17277:9:36"},{"kind":"number","nativeSrc":"17288:2:36","nodeType":"YulLiteral","src":"17288:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17273:3:36","nodeType":"YulIdentifier","src":"17273:3:36"},"nativeSrc":"17273:18:36","nodeType":"YulFunctionCall","src":"17273:18:36"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","kind":"string","nativeSrc":"17293:31:36","nodeType":"YulLiteral","src":"17293:31:36","type":"","value":"Address: insufficient balance"}],"functionName":{"name":"mstore","nativeSrc":"17266:6:36","nodeType":"YulIdentifier","src":"17266:6:36"},"nativeSrc":"17266:59:36","nodeType":"YulFunctionCall","src":"17266:59:36"},"nativeSrc":"17266:59:36","nodeType":"YulExpressionStatement","src":"17266:59:36"},{"nativeSrc":"17334:26:36","nodeType":"YulAssignment","src":"17334:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"17346:9:36","nodeType":"YulIdentifier","src":"17346:9:36"},{"kind":"number","nativeSrc":"17357:2:36","nodeType":"YulLiteral","src":"17357:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"17342:3:36","nodeType":"YulIdentifier","src":"17342:3:36"},"nativeSrc":"17342:18:36","nodeType":"YulFunctionCall","src":"17342:18:36"},"variableNames":[{"name":"tail","nativeSrc":"17334:4:36","nodeType":"YulIdentifier","src":"17334:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"17013:353:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17164:9:36","nodeType":"YulTypedName","src":"17164:9:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"17178:4:36","nodeType":"YulTypedName","src":"17178:4:36","type":""}],"src":"17013:353:36"},{"body":{"nativeSrc":"17562:14:36","nodeType":"YulBlock","src":"17562:14:36","statements":[{"nativeSrc":"17564:10:36","nodeType":"YulAssignment","src":"17564:10:36","value":{"name":"pos","nativeSrc":"17571:3:36","nodeType":"YulIdentifier","src":"17571:3:36"},"variableNames":[{"name":"end","nativeSrc":"17564:3:36","nodeType":"YulIdentifier","src":"17564:3:36"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"17371:205:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"17546:3:36","nodeType":"YulTypedName","src":"17546:3:36","type":""}],"returnVariables":[{"name":"end","nativeSrc":"17554:3:36","nodeType":"YulTypedName","src":"17554:3:36","type":""}],"src":"17371:205:36"},{"body":{"nativeSrc":"17755:248:36","nodeType":"YulBlock","src":"17755:248:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"17772:9:36","nodeType":"YulIdentifier","src":"17772:9:36"},{"kind":"number","nativeSrc":"17783:2:36","nodeType":"YulLiteral","src":"17783:2:36","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"17765:6:36","nodeType":"YulIdentifier","src":"17765:6:36"},"nativeSrc":"17765:21:36","nodeType":"YulFunctionCall","src":"17765:21:36"},"nativeSrc":"17765:21:36","nodeType":"YulExpressionStatement","src":"17765:21:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17806:9:36","nodeType":"YulIdentifier","src":"17806:9:36"},{"kind":"number","nativeSrc":"17817:2:36","nodeType":"YulLiteral","src":"17817:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17802:3:36","nodeType":"YulIdentifier","src":"17802:3:36"},"nativeSrc":"17802:18:36","nodeType":"YulFunctionCall","src":"17802:18:36"},{"kind":"number","nativeSrc":"17822:2:36","nodeType":"YulLiteral","src":"17822:2:36","type":"","value":"58"}],"functionName":{"name":"mstore","nativeSrc":"17795:6:36","nodeType":"YulIdentifier","src":"17795:6:36"},"nativeSrc":"17795:30:36","nodeType":"YulFunctionCall","src":"17795:30:36"},"nativeSrc":"17795:30:36","nodeType":"YulExpressionStatement","src":"17795:30:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17845:9:36","nodeType":"YulIdentifier","src":"17845:9:36"},{"kind":"number","nativeSrc":"17856:2:36","nodeType":"YulLiteral","src":"17856:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17841:3:36","nodeType":"YulIdentifier","src":"17841:3:36"},"nativeSrc":"17841:18:36","nodeType":"YulFunctionCall","src":"17841:18:36"},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c2072","kind":"string","nativeSrc":"17861:34:36","nodeType":"YulLiteral","src":"17861:34:36","type":"","value":"Address: unable to send value, r"}],"functionName":{"name":"mstore","nativeSrc":"17834:6:36","nodeType":"YulIdentifier","src":"17834:6:36"},"nativeSrc":"17834:62:36","nodeType":"YulFunctionCall","src":"17834:62:36"},"nativeSrc":"17834:62:36","nodeType":"YulExpressionStatement","src":"17834:62:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17916:9:36","nodeType":"YulIdentifier","src":"17916:9:36"},{"kind":"number","nativeSrc":"17927:2:36","nodeType":"YulLiteral","src":"17927:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"17912:3:36","nodeType":"YulIdentifier","src":"17912:3:36"},"nativeSrc":"17912:18:36","nodeType":"YulFunctionCall","src":"17912:18:36"},{"hexValue":"6563697069656e74206d61792068617665207265766572746564","kind":"string","nativeSrc":"17932:28:36","nodeType":"YulLiteral","src":"17932:28:36","type":"","value":"ecipient may have reverted"}],"functionName":{"name":"mstore","nativeSrc":"17905:6:36","nodeType":"YulIdentifier","src":"17905:6:36"},"nativeSrc":"17905:56:36","nodeType":"YulFunctionCall","src":"17905:56:36"},"nativeSrc":"17905:56:36","nodeType":"YulExpressionStatement","src":"17905:56:36"},{"nativeSrc":"17970:27:36","nodeType":"YulAssignment","src":"17970:27:36","value":{"arguments":[{"name":"headStart","nativeSrc":"17982:9:36","nodeType":"YulIdentifier","src":"17982:9:36"},{"kind":"number","nativeSrc":"17993:3:36","nodeType":"YulLiteral","src":"17993:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"17978:3:36","nodeType":"YulIdentifier","src":"17978:3:36"},"nativeSrc":"17978:19:36","nodeType":"YulFunctionCall","src":"17978:19:36"},"variableNames":[{"name":"tail","nativeSrc":"17970:4:36","nodeType":"YulIdentifier","src":"17970:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"17581:422:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17732:9:36","nodeType":"YulTypedName","src":"17732:9:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"17746:4:36","nodeType":"YulTypedName","src":"17746:4:36","type":""}],"src":"17581:422:36"},{"body":{"nativeSrc":"18182:232:36","nodeType":"YulBlock","src":"18182:232:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"18199:9:36","nodeType":"YulIdentifier","src":"18199:9:36"},{"kind":"number","nativeSrc":"18210:2:36","nodeType":"YulLiteral","src":"18210:2:36","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"18192:6:36","nodeType":"YulIdentifier","src":"18192:6:36"},"nativeSrc":"18192:21:36","nodeType":"YulFunctionCall","src":"18192:21:36"},"nativeSrc":"18192:21:36","nodeType":"YulExpressionStatement","src":"18192:21:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18233:9:36","nodeType":"YulIdentifier","src":"18233:9:36"},{"kind":"number","nativeSrc":"18244:2:36","nodeType":"YulLiteral","src":"18244:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18229:3:36","nodeType":"YulIdentifier","src":"18229:3:36"},"nativeSrc":"18229:18:36","nodeType":"YulFunctionCall","src":"18229:18:36"},{"kind":"number","nativeSrc":"18249:2:36","nodeType":"YulLiteral","src":"18249:2:36","type":"","value":"42"}],"functionName":{"name":"mstore","nativeSrc":"18222:6:36","nodeType":"YulIdentifier","src":"18222:6:36"},"nativeSrc":"18222:30:36","nodeType":"YulFunctionCall","src":"18222:30:36"},"nativeSrc":"18222:30:36","nodeType":"YulExpressionStatement","src":"18222:30:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18272:9:36","nodeType":"YulIdentifier","src":"18272:9:36"},{"kind":"number","nativeSrc":"18283:2:36","nodeType":"YulLiteral","src":"18283:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"18268:3:36","nodeType":"YulIdentifier","src":"18268:3:36"},"nativeSrc":"18268:18:36","nodeType":"YulFunctionCall","src":"18268:18:36"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nativeSrc":"18288:34:36","nodeType":"YulLiteral","src":"18288:34:36","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nativeSrc":"18261:6:36","nodeType":"YulIdentifier","src":"18261:6:36"},"nativeSrc":"18261:62:36","nodeType":"YulFunctionCall","src":"18261:62:36"},"nativeSrc":"18261:62:36","nodeType":"YulExpressionStatement","src":"18261:62:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18343:9:36","nodeType":"YulIdentifier","src":"18343:9:36"},{"kind":"number","nativeSrc":"18354:2:36","nodeType":"YulLiteral","src":"18354:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"18339:3:36","nodeType":"YulIdentifier","src":"18339:3:36"},"nativeSrc":"18339:18:36","nodeType":"YulFunctionCall","src":"18339:18:36"},{"hexValue":"6f742073756363656564","kind":"string","nativeSrc":"18359:12:36","nodeType":"YulLiteral","src":"18359:12:36","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nativeSrc":"18332:6:36","nodeType":"YulIdentifier","src":"18332:6:36"},"nativeSrc":"18332:40:36","nodeType":"YulFunctionCall","src":"18332:40:36"},"nativeSrc":"18332:40:36","nodeType":"YulExpressionStatement","src":"18332:40:36"},{"nativeSrc":"18381:27:36","nodeType":"YulAssignment","src":"18381:27:36","value":{"arguments":[{"name":"headStart","nativeSrc":"18393:9:36","nodeType":"YulIdentifier","src":"18393:9:36"},{"kind":"number","nativeSrc":"18404:3:36","nodeType":"YulLiteral","src":"18404:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"18389:3:36","nodeType":"YulIdentifier","src":"18389:3:36"},"nativeSrc":"18389:19:36","nodeType":"YulFunctionCall","src":"18389:19:36"},"variableNames":[{"name":"tail","nativeSrc":"18381:4:36","nodeType":"YulIdentifier","src":"18381:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"18008:406:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18159:9:36","nodeType":"YulTypedName","src":"18159:9:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"18173:4:36","nodeType":"YulTypedName","src":"18173:4:36","type":""}],"src":"18008:406:36"},{"body":{"nativeSrc":"18593:228:36","nodeType":"YulBlock","src":"18593:228:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"18610:9:36","nodeType":"YulIdentifier","src":"18610:9:36"},{"kind":"number","nativeSrc":"18621:2:36","nodeType":"YulLiteral","src":"18621:2:36","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"18603:6:36","nodeType":"YulIdentifier","src":"18603:6:36"},"nativeSrc":"18603:21:36","nodeType":"YulFunctionCall","src":"18603:21:36"},"nativeSrc":"18603:21:36","nodeType":"YulExpressionStatement","src":"18603:21:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18644:9:36","nodeType":"YulIdentifier","src":"18644:9:36"},{"kind":"number","nativeSrc":"18655:2:36","nodeType":"YulLiteral","src":"18655:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18640:3:36","nodeType":"YulIdentifier","src":"18640:3:36"},"nativeSrc":"18640:18:36","nodeType":"YulFunctionCall","src":"18640:18:36"},{"kind":"number","nativeSrc":"18660:2:36","nodeType":"YulLiteral","src":"18660:2:36","type":"","value":"38"}],"functionName":{"name":"mstore","nativeSrc":"18633:6:36","nodeType":"YulIdentifier","src":"18633:6:36"},"nativeSrc":"18633:30:36","nodeType":"YulFunctionCall","src":"18633:30:36"},"nativeSrc":"18633:30:36","nodeType":"YulExpressionStatement","src":"18633:30:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18683:9:36","nodeType":"YulIdentifier","src":"18683:9:36"},{"kind":"number","nativeSrc":"18694:2:36","nodeType":"YulLiteral","src":"18694:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"18679:3:36","nodeType":"YulIdentifier","src":"18679:3:36"},"nativeSrc":"18679:18:36","nodeType":"YulFunctionCall","src":"18679:18:36"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nativeSrc":"18699:34:36","nodeType":"YulLiteral","src":"18699:34:36","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nativeSrc":"18672:6:36","nodeType":"YulIdentifier","src":"18672:6:36"},"nativeSrc":"18672:62:36","nodeType":"YulFunctionCall","src":"18672:62:36"},"nativeSrc":"18672:62:36","nodeType":"YulExpressionStatement","src":"18672:62:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18754:9:36","nodeType":"YulIdentifier","src":"18754:9:36"},{"kind":"number","nativeSrc":"18765:2:36","nodeType":"YulLiteral","src":"18765:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"18750:3:36","nodeType":"YulIdentifier","src":"18750:3:36"},"nativeSrc":"18750:18:36","nodeType":"YulFunctionCall","src":"18750:18:36"},{"hexValue":"722063616c6c","kind":"string","nativeSrc":"18770:8:36","nodeType":"YulLiteral","src":"18770:8:36","type":"","value":"r call"}],"functionName":{"name":"mstore","nativeSrc":"18743:6:36","nodeType":"YulIdentifier","src":"18743:6:36"},"nativeSrc":"18743:36:36","nodeType":"YulFunctionCall","src":"18743:36:36"},"nativeSrc":"18743:36:36","nodeType":"YulExpressionStatement","src":"18743:36:36"},{"nativeSrc":"18788:27:36","nodeType":"YulAssignment","src":"18788:27:36","value":{"arguments":[{"name":"headStart","nativeSrc":"18800:9:36","nodeType":"YulIdentifier","src":"18800:9:36"},{"kind":"number","nativeSrc":"18811:3:36","nodeType":"YulLiteral","src":"18811:3:36","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"18796:3:36","nodeType":"YulIdentifier","src":"18796:3:36"},"nativeSrc":"18796:19:36","nodeType":"YulFunctionCall","src":"18796:19:36"},"variableNames":[{"name":"tail","nativeSrc":"18788:4:36","nodeType":"YulIdentifier","src":"18788:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"18419:402:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18570:9:36","nodeType":"YulTypedName","src":"18570:9:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"18584:4:36","nodeType":"YulTypedName","src":"18584:4:36","type":""}],"src":"18419:402:36"},{"body":{"nativeSrc":"18892:184:36","nodeType":"YulBlock","src":"18892:184:36","statements":[{"nativeSrc":"18902:10:36","nodeType":"YulVariableDeclaration","src":"18902:10:36","value":{"kind":"number","nativeSrc":"18911:1:36","nodeType":"YulLiteral","src":"18911:1:36","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"18906:1:36","nodeType":"YulTypedName","src":"18906:1:36","type":""}]},{"body":{"nativeSrc":"18971:63:36","nodeType":"YulBlock","src":"18971:63:36","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"18996:3:36","nodeType":"YulIdentifier","src":"18996:3:36"},{"name":"i","nativeSrc":"19001:1:36","nodeType":"YulIdentifier","src":"19001:1:36"}],"functionName":{"name":"add","nativeSrc":"18992:3:36","nodeType":"YulIdentifier","src":"18992:3:36"},"nativeSrc":"18992:11:36","nodeType":"YulFunctionCall","src":"18992:11:36"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"19015:3:36","nodeType":"YulIdentifier","src":"19015:3:36"},{"name":"i","nativeSrc":"19020:1:36","nodeType":"YulIdentifier","src":"19020:1:36"}],"functionName":{"name":"add","nativeSrc":"19011:3:36","nodeType":"YulIdentifier","src":"19011:3:36"},"nativeSrc":"19011:11:36","nodeType":"YulFunctionCall","src":"19011:11:36"}],"functionName":{"name":"mload","nativeSrc":"19005:5:36","nodeType":"YulIdentifier","src":"19005:5:36"},"nativeSrc":"19005:18:36","nodeType":"YulFunctionCall","src":"19005:18:36"}],"functionName":{"name":"mstore","nativeSrc":"18985:6:36","nodeType":"YulIdentifier","src":"18985:6:36"},"nativeSrc":"18985:39:36","nodeType":"YulFunctionCall","src":"18985:39:36"},"nativeSrc":"18985:39:36","nodeType":"YulExpressionStatement","src":"18985:39:36"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"18932:1:36","nodeType":"YulIdentifier","src":"18932:1:36"},{"name":"length","nativeSrc":"18935:6:36","nodeType":"YulIdentifier","src":"18935:6:36"}],"functionName":{"name":"lt","nativeSrc":"18929:2:36","nodeType":"YulIdentifier","src":"18929:2:36"},"nativeSrc":"18929:13:36","nodeType":"YulFunctionCall","src":"18929:13:36"},"nativeSrc":"18921:113:36","nodeType":"YulForLoop","post":{"nativeSrc":"18943:19:36","nodeType":"YulBlock","src":"18943:19:36","statements":[{"nativeSrc":"18945:15:36","nodeType":"YulAssignment","src":"18945:15:36","value":{"arguments":[{"name":"i","nativeSrc":"18954:1:36","nodeType":"YulIdentifier","src":"18954:1:36"},{"kind":"number","nativeSrc":"18957:2:36","nodeType":"YulLiteral","src":"18957:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18950:3:36","nodeType":"YulIdentifier","src":"18950:3:36"},"nativeSrc":"18950:10:36","nodeType":"YulFunctionCall","src":"18950:10:36"},"variableNames":[{"name":"i","nativeSrc":"18945:1:36","nodeType":"YulIdentifier","src":"18945:1:36"}]}]},"pre":{"nativeSrc":"18925:3:36","nodeType":"YulBlock","src":"18925:3:36","statements":[]},"src":"18921:113:36"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"19054:3:36","nodeType":"YulIdentifier","src":"19054:3:36"},{"name":"length","nativeSrc":"19059:6:36","nodeType":"YulIdentifier","src":"19059:6:36"}],"functionName":{"name":"add","nativeSrc":"19050:3:36","nodeType":"YulIdentifier","src":"19050:3:36"},"nativeSrc":"19050:16:36","nodeType":"YulFunctionCall","src":"19050:16:36"},{"kind":"number","nativeSrc":"19068:1:36","nodeType":"YulLiteral","src":"19068:1:36","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"19043:6:36","nodeType":"YulIdentifier","src":"19043:6:36"},"nativeSrc":"19043:27:36","nodeType":"YulFunctionCall","src":"19043:27:36"},"nativeSrc":"19043:27:36","nodeType":"YulExpressionStatement","src":"19043:27:36"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"18826:250:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"18870:3:36","nodeType":"YulTypedName","src":"18870:3:36","type":""},{"name":"dst","nativeSrc":"18875:3:36","nodeType":"YulTypedName","src":"18875:3:36","type":""},{"name":"length","nativeSrc":"18880:6:36","nodeType":"YulTypedName","src":"18880:6:36","type":""}],"src":"18826:250:36"},{"body":{"nativeSrc":"19218:150:36","nodeType":"YulBlock","src":"19218:150:36","statements":[{"nativeSrc":"19228:27:36","nodeType":"YulVariableDeclaration","src":"19228:27:36","value":{"arguments":[{"name":"value0","nativeSrc":"19248:6:36","nodeType":"YulIdentifier","src":"19248:6:36"}],"functionName":{"name":"mload","nativeSrc":"19242:5:36","nodeType":"YulIdentifier","src":"19242:5:36"},"nativeSrc":"19242:13:36","nodeType":"YulFunctionCall","src":"19242:13:36"},"variables":[{"name":"length","nativeSrc":"19232:6:36","nodeType":"YulTypedName","src":"19232:6:36","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"19303:6:36","nodeType":"YulIdentifier","src":"19303:6:36"},{"kind":"number","nativeSrc":"19311:4:36","nodeType":"YulLiteral","src":"19311:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"19299:3:36","nodeType":"YulIdentifier","src":"19299:3:36"},"nativeSrc":"19299:17:36","nodeType":"YulFunctionCall","src":"19299:17:36"},{"name":"pos","nativeSrc":"19318:3:36","nodeType":"YulIdentifier","src":"19318:3:36"},{"name":"length","nativeSrc":"19323:6:36","nodeType":"YulIdentifier","src":"19323:6:36"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"19264:34:36","nodeType":"YulIdentifier","src":"19264:34:36"},"nativeSrc":"19264:66:36","nodeType":"YulFunctionCall","src":"19264:66:36"},"nativeSrc":"19264:66:36","nodeType":"YulExpressionStatement","src":"19264:66:36"},{"nativeSrc":"19339:23:36","nodeType":"YulAssignment","src":"19339:23:36","value":{"arguments":[{"name":"pos","nativeSrc":"19350:3:36","nodeType":"YulIdentifier","src":"19350:3:36"},{"name":"length","nativeSrc":"19355:6:36","nodeType":"YulIdentifier","src":"19355:6:36"}],"functionName":{"name":"add","nativeSrc":"19346:3:36","nodeType":"YulIdentifier","src":"19346:3:36"},"nativeSrc":"19346:16:36","nodeType":"YulFunctionCall","src":"19346:16:36"},"variableNames":[{"name":"end","nativeSrc":"19339:3:36","nodeType":"YulIdentifier","src":"19339:3:36"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"19081:287:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"19194:3:36","nodeType":"YulTypedName","src":"19194:3:36","type":""},{"name":"value0","nativeSrc":"19199:6:36","nodeType":"YulTypedName","src":"19199:6:36","type":""}],"returnVariables":[{"name":"end","nativeSrc":"19210:3:36","nodeType":"YulTypedName","src":"19210:3:36","type":""}],"src":"19081:287:36"},{"body":{"nativeSrc":"19547:179:36","nodeType":"YulBlock","src":"19547:179:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"19564:9:36","nodeType":"YulIdentifier","src":"19564:9:36"},{"kind":"number","nativeSrc":"19575:2:36","nodeType":"YulLiteral","src":"19575:2:36","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"19557:6:36","nodeType":"YulIdentifier","src":"19557:6:36"},"nativeSrc":"19557:21:36","nodeType":"YulFunctionCall","src":"19557:21:36"},"nativeSrc":"19557:21:36","nodeType":"YulExpressionStatement","src":"19557:21:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19598:9:36","nodeType":"YulIdentifier","src":"19598:9:36"},{"kind":"number","nativeSrc":"19609:2:36","nodeType":"YulLiteral","src":"19609:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19594:3:36","nodeType":"YulIdentifier","src":"19594:3:36"},"nativeSrc":"19594:18:36","nodeType":"YulFunctionCall","src":"19594:18:36"},{"kind":"number","nativeSrc":"19614:2:36","nodeType":"YulLiteral","src":"19614:2:36","type":"","value":"29"}],"functionName":{"name":"mstore","nativeSrc":"19587:6:36","nodeType":"YulIdentifier","src":"19587:6:36"},"nativeSrc":"19587:30:36","nodeType":"YulFunctionCall","src":"19587:30:36"},"nativeSrc":"19587:30:36","nodeType":"YulExpressionStatement","src":"19587:30:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19637:9:36","nodeType":"YulIdentifier","src":"19637:9:36"},{"kind":"number","nativeSrc":"19648:2:36","nodeType":"YulLiteral","src":"19648:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"19633:3:36","nodeType":"YulIdentifier","src":"19633:3:36"},"nativeSrc":"19633:18:36","nodeType":"YulFunctionCall","src":"19633:18:36"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nativeSrc":"19653:31:36","nodeType":"YulLiteral","src":"19653:31:36","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nativeSrc":"19626:6:36","nodeType":"YulIdentifier","src":"19626:6:36"},"nativeSrc":"19626:59:36","nodeType":"YulFunctionCall","src":"19626:59:36"},"nativeSrc":"19626:59:36","nodeType":"YulExpressionStatement","src":"19626:59:36"},{"nativeSrc":"19694:26:36","nodeType":"YulAssignment","src":"19694:26:36","value":{"arguments":[{"name":"headStart","nativeSrc":"19706:9:36","nodeType":"YulIdentifier","src":"19706:9:36"},{"kind":"number","nativeSrc":"19717:2:36","nodeType":"YulLiteral","src":"19717:2:36","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"19702:3:36","nodeType":"YulIdentifier","src":"19702:3:36"},"nativeSrc":"19702:18:36","nodeType":"YulFunctionCall","src":"19702:18:36"},"variableNames":[{"name":"tail","nativeSrc":"19694:4:36","nodeType":"YulIdentifier","src":"19694:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"19373:353:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"19524:9:36","nodeType":"YulTypedName","src":"19524:9:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"19538:4:36","nodeType":"YulTypedName","src":"19538:4:36","type":""}],"src":"19373:353:36"},{"body":{"nativeSrc":"19852:334:36","nodeType":"YulBlock","src":"19852:334:36","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"19869:9:36","nodeType":"YulIdentifier","src":"19869:9:36"},{"kind":"number","nativeSrc":"19880:2:36","nodeType":"YulLiteral","src":"19880:2:36","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"19862:6:36","nodeType":"YulIdentifier","src":"19862:6:36"},"nativeSrc":"19862:21:36","nodeType":"YulFunctionCall","src":"19862:21:36"},"nativeSrc":"19862:21:36","nodeType":"YulExpressionStatement","src":"19862:21:36"},{"nativeSrc":"19892:27:36","nodeType":"YulVariableDeclaration","src":"19892:27:36","value":{"arguments":[{"name":"value0","nativeSrc":"19912:6:36","nodeType":"YulIdentifier","src":"19912:6:36"}],"functionName":{"name":"mload","nativeSrc":"19906:5:36","nodeType":"YulIdentifier","src":"19906:5:36"},"nativeSrc":"19906:13:36","nodeType":"YulFunctionCall","src":"19906:13:36"},"variables":[{"name":"length","nativeSrc":"19896:6:36","nodeType":"YulTypedName","src":"19896:6:36","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19939:9:36","nodeType":"YulIdentifier","src":"19939:9:36"},{"kind":"number","nativeSrc":"19950:2:36","nodeType":"YulLiteral","src":"19950:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19935:3:36","nodeType":"YulIdentifier","src":"19935:3:36"},"nativeSrc":"19935:18:36","nodeType":"YulFunctionCall","src":"19935:18:36"},{"name":"length","nativeSrc":"19955:6:36","nodeType":"YulIdentifier","src":"19955:6:36"}],"functionName":{"name":"mstore","nativeSrc":"19928:6:36","nodeType":"YulIdentifier","src":"19928:6:36"},"nativeSrc":"19928:34:36","nodeType":"YulFunctionCall","src":"19928:34:36"},"nativeSrc":"19928:34:36","nodeType":"YulExpressionStatement","src":"19928:34:36"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"20010:6:36","nodeType":"YulIdentifier","src":"20010:6:36"},{"kind":"number","nativeSrc":"20018:2:36","nodeType":"YulLiteral","src":"20018:2:36","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"20006:3:36","nodeType":"YulIdentifier","src":"20006:3:36"},"nativeSrc":"20006:15:36","nodeType":"YulFunctionCall","src":"20006:15:36"},{"arguments":[{"name":"headStart","nativeSrc":"20027:9:36","nodeType":"YulIdentifier","src":"20027:9:36"},{"kind":"number","nativeSrc":"20038:2:36","nodeType":"YulLiteral","src":"20038:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"20023:3:36","nodeType":"YulIdentifier","src":"20023:3:36"},"nativeSrc":"20023:18:36","nodeType":"YulFunctionCall","src":"20023:18:36"},{"name":"length","nativeSrc":"20043:6:36","nodeType":"YulIdentifier","src":"20043:6:36"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"19971:34:36","nodeType":"YulIdentifier","src":"19971:34:36"},"nativeSrc":"19971:79:36","nodeType":"YulFunctionCall","src":"19971:79:36"},"nativeSrc":"19971:79:36","nodeType":"YulExpressionStatement","src":"19971:79:36"},{"nativeSrc":"20059:121:36","nodeType":"YulAssignment","src":"20059:121:36","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20075:9:36","nodeType":"YulIdentifier","src":"20075:9:36"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"20094:6:36","nodeType":"YulIdentifier","src":"20094:6:36"},{"kind":"number","nativeSrc":"20102:2:36","nodeType":"YulLiteral","src":"20102:2:36","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"20090:3:36","nodeType":"YulIdentifier","src":"20090:3:36"},"nativeSrc":"20090:15:36","nodeType":"YulFunctionCall","src":"20090:15:36"},{"kind":"number","nativeSrc":"20107:66:36","nodeType":"YulLiteral","src":"20107:66:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"20086:3:36","nodeType":"YulIdentifier","src":"20086:3:36"},"nativeSrc":"20086:88:36","nodeType":"YulFunctionCall","src":"20086:88:36"}],"functionName":{"name":"add","nativeSrc":"20071:3:36","nodeType":"YulIdentifier","src":"20071:3:36"},"nativeSrc":"20071:104:36","nodeType":"YulFunctionCall","src":"20071:104:36"},{"kind":"number","nativeSrc":"20177:2:36","nodeType":"YulLiteral","src":"20177:2:36","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"20067:3:36","nodeType":"YulIdentifier","src":"20067:3:36"},"nativeSrc":"20067:113:36","nodeType":"YulFunctionCall","src":"20067:113:36"},"variableNames":[{"name":"tail","nativeSrc":"20059:4:36","nodeType":"YulIdentifier","src":"20059:4:36"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"19731:455:36","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"19821:9:36","nodeType":"YulTypedName","src":"19821:9:36","type":""},{"name":"value0","nativeSrc":"19832:6:36","nodeType":"YulTypedName","src":"19832:6:36","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"19843:4:36","nodeType":"YulTypedName","src":"19843:4:36","type":""}],"src":"19731:455:36"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_IERC20SafeTransfers_$1194__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_contract$_IERC1155Mintable_$1111__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(0, 0) }\n        value3 := add(_2, 32)\n        value4 := length\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff00000000000000000000000000000000000000000000000000000000))\n    }\n    function abi_decode_address_payable(offset) -> value\n    {\n        value := calldataload(offset)\n        validator_revert_address(value)\n    }\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_array_address_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$1361_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$1280_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_bytes32_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_bytes32_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, 0x20)\n        let srcEnd := add(add(offset, shl(5, _1)), 0x20)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, 0x20)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_bytes32t_bytes32t_array$_t_bytes32_$dyn_memory_ptrt_address_payablet_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let _1 := 32\n        value1 := calldataload(add(headStart, _1))\n        let offset := calldataload(add(headStart, 64))\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := calldataload(_3)\n        let dst := allocate_memory(array_allocation_size_array_bytes32_dyn(_4))\n        let dst_1 := dst\n        mstore(dst, _4)\n        dst := add(dst, _1)\n        let srcEnd := add(add(_3, shl(5, _4)), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _1)\n        }\n        value2 := dst_1\n        value3 := abi_decode_address_payable(add(headStart, 96))\n        let offset_1 := calldataload(add(headStart, 128))\n        if gt(offset_1, _2) { revert(0, 0) }\n        value4 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 160))\n        if gt(offset_2, _2) { revert(0, 0) }\n        value5 := abi_decode_array_uint256_dyn(add(headStart, offset_2), dataEnd)\n    }\n    function abi_encode_array_uint256_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        pos := pos\n        let _1 := 0x20\n        let srcPtr := add(value, 0x20)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_packed_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value4, value3, value2, value1, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        let pos_1 := abi_encode_array_uint256_dyn(value2, abi_encode_array_uint256_dyn(value1, add(pos, 20)))\n        mstore(pos_1, value3)\n        mstore(add(pos_1, 32), value4)\n        end := add(pos_1, 64)\n    }\n    function abi_encode_array_uint256_dyn_memory_ptr(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, 0x20)\n        let srcPtr := add(value, 0x20)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_bytes32__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), 160)\n        let tail_1 := abi_encode_array_uint256_dyn_memory_ptr(value1, add(headStart, 160))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn_memory_ptr(value2, tail_1)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_encode_tuple_t_address_payable_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), 96)\n        mstore(add(headStart, 96), 0)\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), 128)\n        let tail_1 := abi_encode_array_uint256_dyn_memory_ptr(value1, add(headStart, 128))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn_memory_ptr(value2, tail_1)\n        mstore(add(headStart, 96), sub(tail_2, headStart))\n        mstore(tail_2, 0)\n        tail := add(tail_2, 32)\n    }\n    function abi_encode_tuple_t_uint256_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_uint256_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), 96)\n        let tail_1 := abi_encode_array_uint256_dyn_memory_ptr(value1, add(headStart, 96))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn_memory_ptr(value2, tail_1)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$1361(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_contract$_IERC721_$1280(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_address_payable__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: insufficient balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 58)\n        mstore(add(headStart, 64), \"Address: unable to send value, r\")\n        mstore(add(headStart, 96), \"ecipient may have reverted\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n}","id":36,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"2818":[{"length":32,"start":411},{"length":32,"start":1982}],"2821":[{"length":32,"start":295},{"length":32,"start":1099},{"length":32,"start":1225},{"length":32,"start":1752}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100f55760003560e01c806373c8a95811610097578063c3666c3611610066578063c3666c361461025a578063cc3c0f061461026d578063f2fde38b14610290578063f7ba94bd146102a357600080fd5b806373c8a958146102145780638488bb4e146102275780638da5cb5b1461022f578063ae6dead71461023757600080fd5b80633572aa8d116100d35780633572aa8d146101835780633a5af339146101965780634fc35859146101bd5780636b8f9c431461020157600080fd5b806301ffc9a7146100fa5780631352acac146101225780633323c8071461016e575b600080fd5b61010d610108366004611569565b6102b6565b60405190151581526020015b60405180910390f35b6101497f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610119565b61018161017c3660046115ab565b6102d0565b005b6101816101913660046115ab565b610395565b6101497f000000000000000000000000000000000000000000000000000000000000000081565b6101d06101cb3660046115e6565b610447565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610119565b61018161020f366004611695565b6108b0565b6101816102223660046116fe565b6108ce565b6101496109c2565b6101496109d4565b61010d6102453660046115ab565b60006020819052908152604090205460ff1681565b6101816102683660046116fe565b6109e1565b61010d61027b3660046115ab565b60016020526000908152604090205460ff1681565b61018161029e366004611695565b610b57565b6101816102b1366004611798565b610b6b565b60006102ca826102c4610c28565b90610c56565b92915050565b6102e3335b6102dd610d30565b90610d5e565b60008181526020819052604090205460ff1615610334576040517f5d35de37000000000000000000000000000000000000000000000000000000008152600481018290526024015b60405180910390fd5b60008181526020819052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555182917fbdd203dd78bf49cf79e4db0ecdf7d27adc380fb1f33beef2667a50db9d2a0e0491a250565b61039e336102d5565b60008181526020819052604090205460ff166103e9576040517f6d8257430000000000000000000000000000000000000000000000000000000081526004810182905260240161032b565b60008181526020819052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555182917f578eab65d47cffa57066b105301289ff86bfdc0adc2a701c3356d2a6eb6a612391a250565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633146104f6576040517f01db090900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016602482015260440161032b565b60008080808080610509888a018a611915565b600086815260208190526040902054959b5093995091975095509350915060ff16610563576040517f6d8257430000000000000000000000000000000000000000000000000000000081526004810187905260240161032b565b60008383838d8960405160200161057e959493929190611a4b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805160209091012090506105c1858883610dcd565b610601578383838d896040517fdbf2ac7c00000000000000000000000000000000000000000000000000000000815260040161032b959493929190611acc565b60008181526001602052604090205460ff1615610654578383838d896040517ff048f37a00000000000000000000000000000000000000000000000000000000815260040161032b959493929190611acc565b600061067b610661610de3565b5473ffffffffffffffffffffffffffffffffffffffff1690565b6040517feb79554900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8281166004830152602482018f905260606044830152600060648301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063eb795549906084016020604051808303816000875af1158015610723573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107479190611b22565b5060008281526001602081905260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055517f0d6a5bbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690630d6a5bbb906107f790889088908890600401611b44565b600060405180830381600087803b15801561081157600080fd5b505af1158015610825573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff1687897fbf561a0ae8123352abf33f8f113e6b265c2e7fe7ba9b4d450750454bcbb7233a8f888860405161087593929190611ba1565b60405180910390a4507f4fc35859000000000000000000000000000000000000000000000000000000009d9c50505050505050505050505050565b6108b9336102d5565b6108cb816108c5610de3565b90610e11565b50565b6108d7336102d5565b8483811415806108e75750808214155b1561091e576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156109b8576109b088888381811061093e5761093e611bd6565b90506020020160208101906109539190611695565b85858481811061096557610965611bd6565b9050602002013588888581811061097e5761097e611bd6565b90506020020160208101906109939190611695565b73ffffffffffffffffffffffffffffffffffffffff169190610ed5565b600101610921565b5050505050505050565b60006109cf610661610de3565b905090565b60006109cf610661610d30565b6109ea336102d5565b8483811415806109fa5750808214155b15610a31576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156109b857858582818110610a4e57610a4e611bd6565b9050602002016020810190610a639190611695565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd308a8a85818110610a9157610a91611bd6565b9050602002016020810190610aa69190611695565b878786818110610ab857610ab8611bd6565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b158015610b3457600080fd5b505af1158015610b48573d6000803e3d6000fd5b50505050806001019050610a34565b6108cb3382610b64610d30565b9190610f67565b610b74336102d5565b82818114610bae576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81811015610c2057610c18848483818110610bce57610bce611bd6565b90506020020135878784818110610be757610be7611bd6565b9050602002016020810190610bfc9190611695565b73ffffffffffffffffffffffffffffffffffffffff169061107c565b600101610bb1565b505050505050565b6000806102ca60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611c05565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610ca6575060006102ca565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610cf7575060016102ca565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6000806102ca60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd611c05565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610dc9576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260240161032b565b5050565b600082610dda85846111d6565b14949350505050565b6000806102ca60017f4fb5f8cdfbce77f22b0931a39e9f476a60a0f66524b2f379e96485471eb700ae611c05565b73ffffffffffffffffffffffffffffffffffffffff8116610e5e576040517f40b539cf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff821690811783556040519081527fdd880d24a789958a6398c99c2e54ce31bc10a638cbc42f7dd34285479ae0f8559060200160405180910390a15050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610f62908490611219565b505050565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610fd4576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161032b565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146110765783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b804710156110e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161032b565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114611140576040519150601f19603f3d011682016040523d82523d6000602084013e611145565b606091505b5050905080610f62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161032b565b600081815b845181101561121157611207828683815181106111fa576111fa611bd6565b6020026020010151611328565b91506001016111db565b509392505050565b600061127b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661135a9092919063ffffffff16565b905080516000148061129c57508080602001905181019061129c9190611b22565b610f62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161032b565b6000818310611344576000828152602084905260409020611353565b60008381526020839052604090205b9392505050565b60606113698484600085611371565b949350505050565b606082471015611403576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161032b565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161142c9190611c63565b60006040518083038185875af1925050503d8060008114611469576040519150601f19603f3d011682016040523d82523d6000602084013e61146e565b606091505b509150915061147f8783838761148a565b979650505050505050565b606083156115205782516000036115195773ffffffffffffffffffffffffffffffffffffffff85163b611519576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161032b565b5081611369565b61136983838151156115355781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032b9190611c7f565b60006020828403121561157b57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461135357600080fd5b6000602082840312156115bd57600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff811681146108cb57600080fd5b6000806000806000608086880312156115fe57600080fd5b8535611609816115c4565b94506020860135611619816115c4565b935060408601359250606086013567ffffffffffffffff8082111561163d57600080fd5b818801915088601f83011261165157600080fd5b81358181111561166057600080fd5b89602082850101111561167257600080fd5b9699959850939650602001949392505050565b8035611690816115c4565b919050565b6000602082840312156116a757600080fd5b8135611353816115c4565b60008083601f8401126116c457600080fd5b50813567ffffffffffffffff8111156116dc57600080fd5b6020830191508360208260051b85010111156116f757600080fd5b9250929050565b6000806000806000806060878903121561171757600080fd5b863567ffffffffffffffff8082111561172f57600080fd5b61173b8a838b016116b2565b9098509650602089013591508082111561175457600080fd5b6117608a838b016116b2565b9096509450604089013591508082111561177957600080fd5b5061178689828a016116b2565b979a9699509497509295939492505050565b600080600080604085870312156117ae57600080fd5b843567ffffffffffffffff808211156117c657600080fd5b6117d2888389016116b2565b909650945060208701359150808211156117eb57600080fd5b506117f8878288016116b2565b95989497509550505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561187a5761187a611804565b604052919050565b600067ffffffffffffffff82111561189c5761189c611804565b5060051b60200190565b600082601f8301126118b757600080fd5b813560206118cc6118c783611882565b611833565b8083825260208201915060208460051b8701019350868411156118ee57600080fd5b602086015b8481101561190a57803583529183019183016118f3565b509695505050505050565b60008060008060008060c0878903121561192e57600080fd5b863595506020808801359550604088013567ffffffffffffffff8082111561195557600080fd5b818a0191508a601f83011261196957600080fd5b81356119776118c782611882565b81815260059190911b8301840190848101908d83111561199657600080fd5b938501935b828510156119b45784358252938501939085019061199b565b98506119c591505060608b01611685565b955060808a01359250808311156119db57600080fd5b6119e78b848c016118a6565b945060a08a01359250808311156119fd57600080fd5b5050611a0b89828a016118a6565b9150509295509295509295565b60008151602080840160005b83811015611a4057815187529582019590820190600101611a24565b509495945050505050565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008660601b1681526000611a8b611a856014840188611a18565b86611a18565b938452505060208201526040019392505050565b805180835260209283019260009190808401838315611a4057815187529582019590820190600101611a24565b73ffffffffffffffffffffffffffffffffffffffff8616815260a060208201526000611afb60a0830187611a9f565b8281036040840152611b0d8187611a9f565b60608401959095525050608001529392505050565b600060208284031215611b3457600080fd5b8151801515811461135357600080fd5b73ffffffffffffffffffffffffffffffffffffffff84168152608060208201526000611b736080830185611a9f565b8281036040840152611b858185611a9f565b8381036060909401939093525050600081526020019392505050565b838152606060208201526000611bba6060830185611a9f565b8281036040840152611bcc8185611a9f565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b818103818111156102ca577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60005b83811015611c5a578181015183820152602001611c42565b50506000910152565b60008251611c75818460208701611c3f565b9190910192915050565b6020815260008251806020840152611c9e816040850160208701611c3f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220d4a604ba2f0ae8ee109caeaf7edbe78b377cd20857f27e00a5d78ff712b35c1e64736f6c63430008160033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x73C8A958 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xC3666C36 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x25A JUMPI DUP1 PUSH4 0xCC3C0F06 EQ PUSH2 0x26D JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x290 JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x2A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x214 JUMPI DUP1 PUSH4 0x8488BB4E EQ PUSH2 0x227 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x22F JUMPI DUP1 PUSH4 0xAE6DEAD7 EQ PUSH2 0x237 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3572AA8D GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x3572AA8D EQ PUSH2 0x183 JUMPI DUP1 PUSH4 0x3A5AF339 EQ PUSH2 0x196 JUMPI DUP1 PUSH4 0x4FC35859 EQ PUSH2 0x1BD JUMPI DUP1 PUSH4 0x6B8F9C43 EQ PUSH2 0x201 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x1352ACAC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x3323C807 EQ PUSH2 0x16E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10D PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0x1569 JUMP JUMPDEST PUSH2 0x2B6 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x149 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x119 JUMP JUMPDEST PUSH2 0x181 PUSH2 0x17C CALLDATASIZE PUSH1 0x4 PUSH2 0x15AB JUMP JUMPDEST PUSH2 0x2D0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x181 PUSH2 0x191 CALLDATASIZE PUSH1 0x4 PUSH2 0x15AB JUMP JUMPDEST PUSH2 0x395 JUMP JUMPDEST PUSH2 0x149 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1D0 PUSH2 0x1CB CALLDATASIZE PUSH1 0x4 PUSH2 0x15E6 JUMP JUMPDEST PUSH2 0x447 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x119 JUMP JUMPDEST PUSH2 0x181 PUSH2 0x20F CALLDATASIZE PUSH1 0x4 PUSH2 0x1695 JUMP JUMPDEST PUSH2 0x8B0 JUMP JUMPDEST PUSH2 0x181 PUSH2 0x222 CALLDATASIZE PUSH1 0x4 PUSH2 0x16FE JUMP JUMPDEST PUSH2 0x8CE JUMP JUMPDEST PUSH2 0x149 PUSH2 0x9C2 JUMP JUMPDEST PUSH2 0x149 PUSH2 0x9D4 JUMP JUMPDEST PUSH2 0x10D PUSH2 0x245 CALLDATASIZE PUSH1 0x4 PUSH2 0x15AB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x181 PUSH2 0x268 CALLDATASIZE PUSH1 0x4 PUSH2 0x16FE JUMP JUMPDEST PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0x10D PUSH2 0x27B CALLDATASIZE PUSH1 0x4 PUSH2 0x15AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x181 PUSH2 0x29E CALLDATASIZE PUSH1 0x4 PUSH2 0x1695 JUMP JUMPDEST PUSH2 0xB57 JUMP JUMPDEST PUSH2 0x181 PUSH2 0x2B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1798 JUMP JUMPDEST PUSH2 0xB6B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CA DUP3 PUSH2 0x2C4 PUSH2 0xC28 JUMP JUMPDEST SWAP1 PUSH2 0xC56 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2E3 CALLER JUMPDEST PUSH2 0x2DD PUSH2 0xD30 JUMP JUMPDEST SWAP1 PUSH2 0xD5E JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x334 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5D35DE3700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD DUP3 SWAP2 PUSH32 0xBDD203DD78BF49CF79E4DB0ECDF7D27ADC380FB1F33BEEF2667A50DB9D2A0E04 SWAP2 LOG2 POP JUMP JUMPDEST PUSH2 0x39E CALLER PUSH2 0x2D5 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x3E9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6D82574300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x32B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE MLOAD DUP3 SWAP2 PUSH32 0x578EAB65D47CFFA57066B105301289FF86BFDC0ADC2A701C3356D2A6EB6A6123 SWAP2 LOG2 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x4F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1DB090900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x32B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x509 DUP9 DUP11 ADD DUP11 PUSH2 0x1915 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP6 SWAP12 POP SWAP4 SWAP10 POP SWAP2 SWAP8 POP SWAP6 POP SWAP4 POP SWAP2 POP PUSH1 0xFF AND PUSH2 0x563 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6D82574300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x32B JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP4 DUP14 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x57E SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A4B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH2 0x5C1 DUP6 DUP9 DUP4 PUSH2 0xDCD JUMP JUMPDEST PUSH2 0x601 JUMPI DUP4 DUP4 DUP4 DUP14 DUP10 PUSH1 0x40 MLOAD PUSH32 0xDBF2AC7C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32B SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1ACC JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x654 JUMPI DUP4 DUP4 DUP4 DUP14 DUP10 PUSH1 0x40 MLOAD PUSH32 0xF048F37A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32B SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1ACC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x67B PUSH2 0x661 PUSH2 0xDE3 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xEB79554900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP16 SWAP1 MSTORE PUSH1 0x60 PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x64 DUP4 ADD MSTORE SWAP2 SWAP3 POP PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0xEB795549 SWAP1 PUSH1 0x84 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x723 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x747 SWAP2 SWAP1 PUSH2 0x1B22 JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SWAP2 OR SWAP1 SSTORE MLOAD PUSH32 0xD6A5BBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xD6A5BBB SWAP1 PUSH2 0x7F7 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1B44 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x811 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x825 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 DUP10 PUSH32 0xBF561A0AE8123352ABF33F8F113E6B265C2E7FE7BA9B4D450750454BCBB7233A DUP16 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH2 0x875 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1BA1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH32 0x4FC3585900000000000000000000000000000000000000000000000000000000 SWAP14 SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x8B9 CALLER PUSH2 0x2D5 JUMP JUMPDEST PUSH2 0x8CB DUP2 PUSH2 0x8C5 PUSH2 0xDE3 JUMP JUMPDEST SWAP1 PUSH2 0xE11 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x8D7 CALLER PUSH2 0x2D5 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x8E7 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x91E JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9B8 JUMPI PUSH2 0x9B0 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x93E JUMPI PUSH2 0x93E PUSH2 0x1BD6 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x953 SWAP2 SWAP1 PUSH2 0x1695 JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x965 JUMPI PUSH2 0x965 PUSH2 0x1BD6 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x97E JUMPI PUSH2 0x97E PUSH2 0x1BD6 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x993 SWAP2 SWAP1 PUSH2 0x1695 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0xED5 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x921 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9CF PUSH2 0x661 PUSH2 0xDE3 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9CF PUSH2 0x661 PUSH2 0xD30 JUMP JUMPDEST PUSH2 0x9EA CALLER PUSH2 0x2D5 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x9FA JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0xA31 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9B8 JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0xA4E JUMPI PUSH2 0xA4E PUSH2 0x1BD6 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xA63 SWAP2 SWAP1 PUSH2 0x1695 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD ADDRESS DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0xA91 JUMPI PUSH2 0xA91 PUSH2 0x1BD6 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xAA6 SWAP2 SWAP1 PUSH2 0x1695 JUMP JUMPDEST DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0xAB8 JUMPI PUSH2 0xAB8 PUSH2 0x1BD6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB48 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0xA34 JUMP JUMPDEST PUSH2 0x8CB CALLER DUP3 PUSH2 0xB64 PUSH2 0xD30 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xF67 JUMP JUMPDEST PUSH2 0xB74 CALLER PUSH2 0x2D5 JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0xBAE JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xC20 JUMPI PUSH2 0xC18 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0xBCE JUMPI PUSH2 0xBCE PUSH2 0x1BD6 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0xBE7 JUMPI PUSH2 0xBE7 PUSH2 0x1BD6 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xBFC SWAP2 SWAP1 PUSH2 0x1695 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x107C JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xBB1 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2CA PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1C05 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xCA6 JUMPI POP PUSH1 0x0 PUSH2 0x2CA JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xCF7 JUMPI POP PUSH1 0x1 PUSH2 0x2CA JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2CA PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x1C05 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xDC9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x32B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xDDA DUP6 DUP5 PUSH2 0x11D6 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2CA PUSH1 0x1 PUSH32 0x4FB5F8CDFBCE77F22B0931A39E9F476A60A0F66524B2F379E96485471EB700AE PUSH2 0x1C05 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xE5E JUMPI PUSH1 0x40 MLOAD PUSH32 0x40B539CF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xDD880D24A789958A6398C99C2E54CE31BC10A638CBC42F7DD34285479AE0F855 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0xF62 SWAP1 DUP5 SWAP1 PUSH2 0x1219 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xFD4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x32B JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1076 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x10E6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x32B JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1140 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1145 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xF62 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x32B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x1211 JUMPI PUSH2 0x1207 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x11FA JUMPI PUSH2 0x11FA PUSH2 0x1BD6 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1328 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x11DB JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x127B DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x135A SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x129C JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x129C SWAP2 SWAP1 PUSH2 0x1B22 JUMP JUMPDEST PUSH2 0xF62 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x32B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x1344 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x1353 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1369 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1371 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1403 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x32B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x142C SWAP2 SWAP1 PUSH2 0x1C63 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1469 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x146E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x147F DUP8 DUP4 DUP4 DUP8 PUSH2 0x148A JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1520 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x1519 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x1519 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x32B JUMP JUMPDEST POP DUP2 PUSH2 0x1369 JUMP JUMPDEST PUSH2 0x1369 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x1535 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32B SWAP2 SWAP1 PUSH2 0x1C7F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x157B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x1353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x8CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x15FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1609 DUP2 PUSH2 0x15C4 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x1619 DUP2 PUSH2 0x15C4 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x163D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1660 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1672 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH1 0x20 ADD SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1690 DUP2 PUSH2 0x15C4 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1353 DUP2 PUSH2 0x15C4 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x16C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x16DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x16F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1717 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x172F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x173B DUP11 DUP4 DUP12 ADD PUSH2 0x16B2 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1754 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1760 DUP11 DUP4 DUP12 ADD PUSH2 0x16B2 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1779 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1786 DUP10 DUP3 DUP11 ADD PUSH2 0x16B2 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x17AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x17C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17D2 DUP9 DUP4 DUP10 ADD PUSH2 0x16B2 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x17EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17F8 DUP8 DUP3 DUP9 ADD PUSH2 0x16B2 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x187A JUMPI PUSH2 0x187A PUSH2 0x1804 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x189C JUMPI PUSH2 0x189C PUSH2 0x1804 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x18B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x18CC PUSH2 0x18C7 DUP4 PUSH2 0x1882 JUMP JUMPDEST PUSH2 0x1833 JUMP JUMPDEST DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP5 PUSH1 0x5 SHL DUP8 ADD ADD SWAP4 POP DUP7 DUP5 GT ISZERO PUSH2 0x18EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x190A JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x18F3 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x192E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP1 DUP9 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1955 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP11 ADD SWAP2 POP DUP11 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1969 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1977 PUSH2 0x18C7 DUP3 PUSH2 0x1882 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP4 ADD DUP5 ADD SWAP1 DUP5 DUP2 ADD SWAP1 DUP14 DUP4 GT ISZERO PUSH2 0x1996 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x19B4 JUMPI DUP5 CALLDATALOAD DUP3 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP1 DUP6 ADD SWAP1 PUSH2 0x199B JUMP JUMPDEST SWAP9 POP PUSH2 0x19C5 SWAP2 POP POP PUSH1 0x60 DUP12 ADD PUSH2 0x1685 JUMP JUMPDEST SWAP6 POP PUSH1 0x80 DUP11 ADD CALLDATALOAD SWAP3 POP DUP1 DUP4 GT ISZERO PUSH2 0x19DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19E7 DUP12 DUP5 DUP13 ADD PUSH2 0x18A6 JUMP JUMPDEST SWAP5 POP PUSH1 0xA0 DUP11 ADD CALLDATALOAD SWAP3 POP DUP1 DUP4 GT ISZERO PUSH2 0x19FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH2 0x1A0B DUP10 DUP3 DUP11 ADD PUSH2 0x18A6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x20 DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1A40 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1A24 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP7 PUSH1 0x60 SHL AND DUP2 MSTORE PUSH1 0x0 PUSH2 0x1A8B PUSH2 0x1A85 PUSH1 0x14 DUP5 ADD DUP9 PUSH2 0x1A18 JUMP JUMPDEST DUP7 PUSH2 0x1A18 JUMP JUMPDEST SWAP4 DUP5 MSTORE POP POP PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD DUP1 DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 PUSH1 0x0 SWAP2 SWAP1 DUP1 DUP5 ADD DUP4 DUP4 ISZERO PUSH2 0x1A40 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1A24 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0xA0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1AFB PUSH1 0xA0 DUP4 ADD DUP8 PUSH2 0x1A9F JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1B0D DUP2 DUP8 PUSH2 0x1A9F JUMP JUMPDEST PUSH1 0x60 DUP5 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP PUSH1 0x80 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1B73 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x1A9F JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1B85 DUP2 DUP6 PUSH2 0x1A9F JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x60 SWAP1 SWAP5 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1BBA PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x1A9F JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1BCC DUP2 DUP6 PUSH2 0x1A9F JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x2CA JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1C5A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1C42 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1C75 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1C3F JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1C9E DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1C3F JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD4 0xA6 DIV 0xBA 0x2F EXP 0xE8 0xEE LT SWAP13 0xAE 0xAF PUSH31 0xDBE78B377CD20857F27E00A5D78FF712B35C1E64736F6C6343000816003300 ","sourceMap":"1198:3247:35:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:8;;;;;;:::i;:::-;;:::i;:::-;;;516:14:36;;509:22;491:41;;479:2;464:18;542:165:8;;;;;;;;1621:49:35;;;;;;;;747:42:36;735:55;;;717:74;;705:2;690:18;1621:49:35;543:254:36;3852:289:35;;;;;;:::i;:::-;;:::i;:::-;;4147:296;;;;;;:::i;:::-;;:::i;1566:49::-;;;;;2619:1227;;;;;;:::i;:::-;;:::i;:::-;;;2517:66:36;2505:79;;;2487:98;;2475:2;2460:18;2619:1227:35;2343:248:36;1085:225:13;;;;;;:::i;:::-;;:::i;3113:464:21:-;;;;;;:::i;:::-;;:::i;1398:138:13:-;;;:::i;710:120:2:-;;;:::i;1477:37:35:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;4355:493:21;;;;;;:::i;:::-;;:::i;1520:39:35:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;864:152:2;;;;;;:::i;:::-;;:::i;1942:402:21:-;;;;;;:::i;:::-;;:::i;542:165:8:-;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:8:o;3852:289:35:-;3912:70;719:10:32;3969:12:35;3912:33;:31;:33::i;:::-;:56;;:70::i;:::-;3996:5;:17;;;;;;;;;;;;;3992:65;;;4022:35;;;;;;;;7254:25:36;;;7227:18;;4022:35:35;;;;;;;;3992:65;4068:5;:17;;;;;;;;;;;:24;;;;4088:4;4068:24;;;4107:27;4074:10;;4107:27;;;3852:289;:::o;4147:296::-;4213:70;719:10:32;4270:12:35;640:96:32;4213:70:35;4298:5;:17;;;;;;;;;;;;;4293:60;;4324:29;;;;;;;;7254:25:36;;;7227:18;;4324:29:35;7108:177:36;4293:60:35;4384:5;4364:17;;;;;;;;;;;:25;;;;;;4404:32;4370:10;;4404:32;;;4147:296;:::o;2619:1227::-;2725:17;2766:12;2758:35;;2783:10;2758:35;2754:101;;2802:53;;;;;2821:10;2802:53;;;7525:34:36;7474:42;2841:12:35;7595:15:36;7575:18;;;7568:43;7437:18;;2802:53:35;7290:327:36;2754:101:35;2867:18;;;;;;2998:91;;;;3022:4;2998:91;:::i;:::-;3105:5;:17;;;;;;;;;;;2866:223;;-1:-1:-1;2866:223:35;;-1:-1:-1;2866:223:35;;-1:-1:-1;2866:223:35;-1:-1:-1;2866:223:35;-1:-1:-1;2866:223:35;-1:-1:-1;3105:17:35;;3100:60;;3131:29;;;;;;;;7254:25:36;;;7227:18;;3131:29:35;7108:177:36;3100:60:35;3171:12;3213:9;3224:4;3230:7;3239:5;3246:7;3196:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;3186:69;;3196:58;3186:69;;;;;-1:-1:-1;3271:30:35;:5;3284:10;3186:69;3271:12;:30::i;:::-;3266:98;;3323:9;3334:4;3340:7;3349:5;3356:7;3310:54;;;;;;;;;;;;;;;:::i;3266:98::-;3378:13;;;;:7;:13;;;;;;;;3374:82;;;3415:9;3426:4;3432:7;3441:5;3448:7;3400:56;;;;;;;;;;;;;;;:::i;3374:82::-;3467:28;3498:43;:28;:26;:28::i;:::-;2715:8:17;;;;2618:112;3498:43:35;3551:50;;;;;:25;13153:55:36;;;3551:50:35;;;13135:74:36;13225:18;;;13218:34;;;13288:2;13268:18;;;13261:30;-1:-1:-1;13307:18:36;;;13300:29;13153:55;;-1:-1:-1;3551:12:35;:25;;;;;;13346:19:36;;3551:50:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;3611:13:35;;;;3627:4;3611:13;;;;;;;;;:20;;;;;;;;;3641:59;;;;:29;:15;:29;;;;:59;;3671:9;;3682:4;;3688:7;;3641:59;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3757:9;3715:67;;3741:7;3729:10;3715:67;3750:5;3768:4;3774:7;3715:67;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;3800:39:35;;2619:1227;-1:-1:-1;;;;;;;;;;;;;2619:1227:35:o;1085:225:13:-;1162:70;719:10:32;1219:12:13;640:96:32;1162:70:13;1242:61;1287:15;1242:28;:26;:28::i;:::-;:44;;:61::i;:::-;1085:225;:::o;3113:464:21:-;3244:70;719:10:32;3301:12:21;640:96:32;3244:70:21;3341:8;3370:23;;;;;:51;;-1:-1:-1;3397:24:21;;;;3370:51;3366:90;;;3430:26;;;;;;;;;;;;;;3366:90;3471:9;3466:105;3486:6;3482:1;:10;3466:105;;;3513:47;3536:8;;3545:1;3536:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;3549:7;;3557:1;3549:10;;;;;;;:::i;:::-;;;;;;;3513:6;;3520:1;3513:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:22;;;:47;:22;:47::i;:::-;3494:3;;3466:105;;;;3234:343;3113:464;;;;;;:::o;1398:138:13:-;1445:22;1486:43;:28;:26;:28::i;:43::-;1479:50;;1398:138;:::o;710:120:2:-;756:7;782:41;:33;:31;:33::i;4355:493:21:-;4492:70;719:10:32;4549:12:21;640:96:32;4492:70:21;4589:8;4618:26;;;;;:55;;-1:-1:-1;4648:25:21;;;;4618:55;4614:94;;;4682:26;;;;;;;;;;;;;;4614:94;4723:9;4718:124;4738:6;4734:1;:10;4718:124;;;4765:9;;4775:1;4765:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:25;;;4799:4;4806:8;;4815:1;4806:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;4819:8;;4828:1;4819:11;;;;;;;:::i;:::-;4765:66;;;;;;;;;;15994:42:36;16063:15;;;4765:66:21;;;16045:34:36;16115:15;;;;16095:18;;;16088:43;-1:-1:-1;4819:11:21;;;;;;16147:18:36;;;16140:34;15957:18;;4765:66:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4746:3;;;;;4718:124;;864:152:2;934:75;719:10:32;1000:8:2;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;1942:402:21:-;2052:70;719:10:32;2109:12:21;640:96:32;2052:70:21;2149:8;2178:24;;;2174:63;;2211:26;;;;;;;;;;;;;;2174:63;2252:9;2247:91;2267:6;2263:1;:10;2247:91;;;2294:33;2316:7;;2324:1;2316:10;;;;;;;:::i;:::-;;;;;;;2294:8;;2303:1;2294:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:21;;;;:33::i;:::-;2275:3;;2247:91;;;;2042:302;1942:402;;;;:::o;1705:174:11:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:11;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:11;1620:11;;1560:82;-1:-1:-1;1658:34:11;;:21;:34;;;;;;;;;;;;;;;1359:340::o;5065:174:7:-;5106:16;;926:71;996:1;934:58;926:71;:::i;4413:162::-;4519:15;;;4508:26;;;4519:15;;4508:26;4504:64;;4543:25;;;;;747:42:36;735:55;;4543:25:7;;;717:74:36;690:18;;4543:25:7;543:254:36;4504:64:7;4413:162;;:::o;1156:154:34:-;1247:4;1299;1270:25;1283:5;1290:4;1270:12;:25::i;:::-;:33;;1156:154;-1:-1:-1;;;;1156:154:34:o;2736:174:17:-;2777:16;;500:67;566:1;508:54;500:67;:::i;2278:252::-;2377:29;;;2373:67;;2415:25;;;;;;;;;;;;;;2373:67;2450:26;;;;;;;;;;;;2491:32;;717:74:36;;;2491:32:17;;705:2:36;690:18;2491:32:17;;;;;;;2278:252;;:::o;941:175:30:-;1050:58;;;16915:42:36;16903:55;;1050:58:30;;;16885:74:36;16975:18;;;;16968:34;;;1050:58:30;;;;;;;;;;16858:18:36;;;;1050:58:30;;;;;;;;;;1073:23;1050:58;;;1023:86;;1043:5;;1023:19;:86::i;:::-;941:175;;;:::o;3060:369:7:-;3182:15;;;;;;;3211:23;;;;3207:60;;3243:24;;;;;747:42:36;735:55;;3243:24:7;;;717:74:36;690:18;;3243:24:7;543:254:36;3207:60:7;3298:8;3281:25;;:13;:25;;;3277:146;;3322:26;;;;;;;;;;;;;3367:45;;;;;;;;-1:-1:-1;;3367:45:7;3277:146;3148:281;3060:369;;;:::o;2647:312:31:-;2761:6;2736:21;:31;;2728:73;;;;;;;17215:2:36;2728:73:31;;;17197:21:36;17254:2;17234:18;;;17227:30;17293:31;17273:18;;;17266:59;17342:18;;2728:73:31;17013:353:36;2728:73:31;2813:12;2831:9;:14;;2853:6;2831:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2812:52;;;2882:7;2874:78;;;;;;;17783:2:36;2874:78:31;;;17765:21:36;17822:2;17802:18;;;17795:30;17861:34;17841:18;;;17834:62;17932:28;17912:18;;;17905:56;17978:19;;2874:78:31;17581:422:36;1934:290:34;2017:7;2059:4;2017:7;2073:116;2097:5;:12;2093:1;:16;2073:116;;;2145:33;2155:12;2169:5;2175:1;2169:8;;;;;;;;:::i;:::-;;;;;;;2145:9;:33::i;:::-;2130:48;-1:-1:-1;2111:3:34;;2073:116;;;-1:-1:-1;2205:12:34;1934:290;-1:-1:-1;;;1934:290:34:o;5196:642:30:-;5615:23;5641:69;5669:4;5641:69;;;;;;;;;;;;;;;;;5649:5;5641:27;;;;:69;;;;;:::i;:::-;5615:95;;5728:10;:17;5749:1;5728:22;:56;;;;5765:10;5754:30;;;;;;;;;;;;:::i;:::-;5720:111;;;;;;;18210:2:36;5720:111:30;;;18192:21:36;18249:2;18229:18;;;18222:30;18288:34;18268:18;;;18261:62;18359:12;18339:18;;;18332:40;18389:19;;5720:111:30;18008:406:36;9205:147:34;9268:7;9298:1;9294;:5;:51;;9426:13;9517:15;;;9552:4;9545:15;;;9598:4;9582:21;;9294:51;;;9426:13;9517:15;;;9552:4;9545:15;;;9598:4;9582:21;;9302:20;9287:58;9205:147;-1:-1:-1;;;9205:147:34:o;4108:223:31:-;4241:12;4272:52;4294:6;4302:4;4308:1;4311:12;4272:21;:52::i;:::-;4265:59;4108:223;-1:-1:-1;;;;4108:223:31:o;5165:446::-;5330:12;5387:5;5362:21;:30;;5354:81;;;;;;;18621:2:36;5354:81:31;;;18603:21:36;18660:2;18640:18;;;18633:30;18699:34;18679:18;;;18672:62;18770:8;18750:18;;;18743:36;18796:19;;5354:81:31;18419:402:36;5354:81:31;5446:12;5460:23;5487:6;:11;;5506:5;5513:4;5487:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5445:73;;;;5535:69;5562:6;5570:7;5579:10;5591:12;5535:26;:69::i;:::-;5528:76;5165:446;-1:-1:-1;;;;;;;5165:446:31:o;7671:628::-;7851:12;7879:7;7875:418;;;7906:10;:17;7927:1;7906:22;7902:286;;1702:19;;;;8113:60;;;;;;;19575:2:36;8113:60:31;;;19557:21:36;19614:2;19594:18;;;19587:30;19653:31;19633:18;;;19626:59;19702:18;;8113:60:31;19373:353:36;8113:60:31;-1:-1:-1;8208:10:31;8201:17;;7875:418;8249:33;8257:10;8269:12;8980:17;;:21;8976:379;;9208:10;9202:17;9264:15;9251:10;9247:2;9243:19;9236:44;8976:379;9331:12;9324:20;;;;;;;;;;;:::i;14:332:36:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;802:180;861:6;914:2;902:9;893:7;889:23;885:32;882:52;;;930:1;927;920:12;882:52;-1:-1:-1;953:23:36;;802:180;-1:-1:-1;802:180:36:o;1243:154::-;1329:42;1322:5;1318:54;1311:5;1308:65;1298:93;;1387:1;1384;1377:12;1402:936;1499:6;1507;1515;1523;1531;1584:3;1572:9;1563:7;1559:23;1555:33;1552:53;;;1601:1;1598;1591:12;1552:53;1640:9;1627:23;1659:31;1684:5;1659:31;:::i;:::-;1709:5;-1:-1:-1;1766:2:36;1751:18;;1738:32;1779:33;1738:32;1779:33;:::i;:::-;1831:7;-1:-1:-1;1885:2:36;1870:18;;1857:32;;-1:-1:-1;1940:2:36;1925:18;;1912:32;1963:18;1993:14;;;1990:34;;;2020:1;2017;2010:12;1990:34;2058:6;2047:9;2043:22;2033:32;;2103:7;2096:4;2092:2;2088:13;2084:27;2074:55;;2125:1;2122;2115:12;2074:55;2165:2;2152:16;2191:2;2183:6;2180:14;2177:34;;;2207:1;2204;2197:12;2177:34;2252:7;2247:2;2238:6;2234:2;2230:15;2226:24;2223:37;2220:57;;;2273:1;2270;2263:12;2220:57;1402:936;;;;-1:-1:-1;1402:936:36;;-1:-1:-1;2304:2:36;2296:11;;2326:6;1402:936;-1:-1:-1;;;1402:936:36:o;2596:142::-;2672:20;;2701:31;2672:20;2701:31;:::i;:::-;2596:142;;;:::o;2743:255::-;2810:6;2863:2;2851:9;2842:7;2838:23;2834:32;2831:52;;;2879:1;2876;2869:12;2831:52;2918:9;2905:23;2937:31;2962:5;2937:31;:::i;3003:367::-;3066:8;3076:6;3130:3;3123:4;3115:6;3111:17;3107:27;3097:55;;3148:1;3145;3138:12;3097:55;-1:-1:-1;3171:20:36;;3214:18;3203:30;;3200:50;;;3246:1;3243;3236:12;3200:50;3283:4;3275:6;3271:17;3259:29;;3343:3;3336:4;3326:6;3323:1;3319:14;3311:6;3307:27;3303:38;3300:47;3297:67;;;3360:1;3357;3350:12;3297:67;3003:367;;;;;:::o;3375:1103::-;3548:6;3556;3564;3572;3580;3588;3641:2;3629:9;3620:7;3616:23;3612:32;3609:52;;;3657:1;3654;3647:12;3609:52;3697:9;3684:23;3726:18;3767:2;3759:6;3756:14;3753:34;;;3783:1;3780;3773:12;3753:34;3822:70;3884:7;3875:6;3864:9;3860:22;3822:70;:::i;:::-;3911:8;;-1:-1:-1;3796:96:36;-1:-1:-1;3999:2:36;3984:18;;3971:32;;-1:-1:-1;4015:16:36;;;4012:36;;;4044:1;4041;4034:12;4012:36;4083:72;4147:7;4136:8;4125:9;4121:24;4083:72;:::i;:::-;4174:8;;-1:-1:-1;4057:98:36;-1:-1:-1;4262:2:36;4247:18;;4234:32;;-1:-1:-1;4278:16:36;;;4275:36;;;4307:1;4304;4297:12;4275:36;;4346:72;4410:7;4399:8;4388:9;4384:24;4346:72;:::i;:::-;3375:1103;;;;-1:-1:-1;3375:1103:36;;-1:-1:-1;3375:1103:36;;4437:8;;3375:1103;-1:-1:-1;;;3375:1103:36:o;6322:781::-;6452:6;6460;6468;6476;6529:2;6517:9;6508:7;6504:23;6500:32;6497:52;;;6545:1;6542;6535:12;6497:52;6585:9;6572:23;6614:18;6655:2;6647:6;6644:14;6641:34;;;6671:1;6668;6661:12;6641:34;6710:70;6772:7;6763:6;6752:9;6748:22;6710:70;:::i;:::-;6799:8;;-1:-1:-1;6684:96:36;-1:-1:-1;6887:2:36;6872:18;;6859:32;;-1:-1:-1;6903:16:36;;;6900:36;;;6932:1;6929;6922:12;6900:36;;6971:72;7035:7;7024:8;7013:9;7009:24;6971:72;:::i;:::-;6322:781;;;;-1:-1:-1;7062:8:36;-1:-1:-1;;;;6322:781:36:o;7622:184::-;7674:77;7671:1;7664:88;7771:4;7768:1;7761:15;7795:4;7792:1;7785:15;7811:334;7882:2;7876:9;7938:2;7928:13;;7943:66;7924:86;7912:99;;8041:18;8026:34;;8062:22;;;8023:62;8020:88;;;8088:18;;:::i;:::-;8124:2;8117:22;7811:334;;-1:-1:-1;7811:334:36:o;8150:183::-;8210:4;8243:18;8235:6;8232:30;8229:56;;;8265:18;;:::i;:::-;-1:-1:-1;8310:1:36;8306:14;8322:4;8302:25;;8150:183::o;8338:668::-;8392:5;8445:3;8438:4;8430:6;8426:17;8422:27;8412:55;;8463:1;8460;8453:12;8412:55;8499:6;8486:20;8525:4;8549:60;8565:43;8605:2;8565:43;:::i;:::-;8549:60;:::i;:::-;8631:3;8655:2;8650:3;8643:15;8683:4;8678:3;8674:14;8667:21;;8740:4;8734:2;8731:1;8727:10;8719:6;8715:23;8711:34;8697:48;;8768:3;8760:6;8757:15;8754:35;;;8785:1;8782;8775:12;8754:35;8821:4;8813:6;8809:17;8835:142;8851:6;8846:3;8843:15;8835:142;;;8917:17;;8905:30;;8955:12;;;;8868;;8835:142;;;-1:-1:-1;8995:5:36;8338:668;-1:-1:-1;;;;;;8338:668:36:o;9011:1593::-;9198:6;9206;9214;9222;9230;9238;9291:3;9279:9;9270:7;9266:23;9262:33;9259:53;;;9308:1;9305;9298:12;9259:53;9344:9;9331:23;9321:33;;9373:2;9422;9411:9;9407:18;9394:32;9384:42;;9477:2;9466:9;9462:18;9449:32;9500:18;9541:2;9533:6;9530:14;9527:34;;;9557:1;9554;9547:12;9527:34;9595:6;9584:9;9580:22;9570:32;;9640:7;9633:4;9629:2;9625:13;9621:27;9611:55;;9662:1;9659;9652:12;9611:55;9698:2;9685:16;9721:60;9737:43;9777:2;9737:43;:::i;9721:60::-;9815:15;;;9897:1;9893:10;;;;9885:19;;9881:28;;;9846:12;;;;9921:19;;;9918:39;;;9953:1;9950;9943:12;9918:39;9977:11;;;;9997:142;10013:6;10008:3;10005:15;9997:142;;;10079:17;;10067:30;;10030:12;;;;10117;;;;9997:142;;;10158:5;-1:-1:-1;10182:46:36;;-1:-1:-1;;10224:2:36;10209:18;;10182:46;:::i;:::-;10172:56;;10281:3;10270:9;10266:19;10253:33;10237:49;;10311:2;10301:8;10298:16;10295:36;;;10327:1;10324;10317:12;10295:36;10350:63;10405:7;10394:8;10383:9;10379:24;10350:63;:::i;:::-;10340:73;;10466:3;10455:9;10451:19;10438:33;10422:49;;10496:2;10486:8;10483:16;10480:36;;;10512:1;10509;10502:12;10480:36;;;10535:63;10590:7;10579:8;10568:9;10564:24;10535:63;:::i;:::-;10525:73;;;9011:1593;;;;;;;;:::o;10609:400::-;10662:3;10700:5;10694:12;10744:4;10782;10775:5;10771:16;10805:1;10815:169;10829:6;10826:1;10823:13;10815:169;;;10890:13;;10878:26;;10924:12;;;;10959:15;;;;10851:1;10844:9;10815:169;;;-1:-1:-1;11000:3:36;;10609:400;-1:-1:-1;;;;;10609:400:36:o;11014:657::-;11388:66;11379:6;11375:2;11371:15;11367:88;11362:3;11355:101;11337:3;11478:88;11515:50;11561:2;11556:3;11552:12;11544:6;11515:50;:::i;:::-;11507:6;11478:88;:::i;:::-;11575:21;;;-1:-1:-1;;11623:2:36;11612:14;;11605:30;11662:2;11651:14;;11014:657;-1:-1:-1;;;11014:657:36:o;11676:450::-;11772:12;;11793:19;;;11831:4;11851:14;;;;11740:3;;11772:12;11888:16;;;11740:3;11940:13;;11932:169;;12007:13;;11995:26;;12041:12;;;;12076:15;;;;11968:1;11961:9;11932:169;;12131:752;12484:42;12476:6;12472:55;12461:9;12454:74;12564:3;12559:2;12548:9;12544:18;12537:31;12435:4;12591:68;12654:3;12643:9;12639:19;12631:6;12591:68;:::i;:::-;12707:9;12699:6;12695:22;12690:2;12679:9;12675:18;12668:50;12735:55;12783:6;12775;12735:55;:::i;:::-;12821:2;12806:18;;12799:34;;;;-1:-1:-1;;12864:3:36;12849:19;12842:35;12727:63;12131:752;-1:-1:-1;;;12131:752:36:o;13376:277::-;13443:6;13496:2;13484:9;13475:7;13471:23;13467:32;13464:52;;;13512:1;13509;13502:12;13464:52;13544:9;13538:16;13597:5;13590:13;13583:21;13576:5;13573:32;13563:60;;13619:1;13616;13609:12;13658:832;14055:42;14047:6;14043:55;14032:9;14025:74;14135:3;14130:2;14119:9;14115:18;14108:31;14006:4;14162:68;14225:3;14214:9;14210:19;14202:6;14162:68;:::i;:::-;14278:9;14270:6;14266:22;14261:2;14250:9;14246:18;14239:50;14312:55;14360:6;14352;14312:55;:::i;:::-;14403:22;;;14398:2;14383:18;;;14376:50;;;;-1:-1:-1;;14450:1:36;14435:17;;14481:2;14469:15;;13658:832;-1:-1:-1;;;13658:832:36:o;14495:558::-;14780:6;14769:9;14762:25;14823:2;14818;14807:9;14803:18;14796:30;14743:4;14849:67;14912:2;14901:9;14897:18;14889:6;14849:67;:::i;:::-;14964:9;14956:6;14952:22;14947:2;14936:9;14932:18;14925:50;14992:55;15040:6;15032;14992:55;:::i;:::-;14984:63;14495:558;-1:-1:-1;;;;;;14495:558:36:o;15058:184::-;15110:77;15107:1;15100:88;15207:4;15204:1;15197:15;15231:4;15228:1;15221:15;16185:282;16252:9;;;16273:11;;;16270:191;;;16317:77;16314:1;16307:88;16418:4;16415:1;16408:15;16446:4;16443:1;16436:15;18826:250;18911:1;18921:113;18935:6;18932:1;18929:13;18921:113;;;19011:11;;;19005:18;18992:11;;;18985:39;18957:2;18950:10;18921:113;;;-1:-1:-1;;19068:1:36;19050:16;;19043:27;18826:250::o;19081:287::-;19210:3;19248:6;19242:13;19264:66;19323:6;19318:3;19311:4;19303:6;19299:17;19264:66;:::i;:::-;19346:16;;;;;19081:287;-1:-1:-1;;19081:287:36:o;19731:455::-;19880:2;19869:9;19862:21;19843:4;19912:6;19906:13;19955:6;19950:2;19939:9;19935:18;19928:34;19971:79;20043:6;20038:2;20027:9;20023:18;20018:2;20010:6;20006:15;19971:79;:::i;:::-;20102:2;20090:15;20107:66;20086:88;20071:104;;;;20177:2;20067:113;;19731:455;-1:-1:-1;;19731:455:36:o"},"gasEstimates":{"creation":{"codeDepositCost":"1486000","executionCost":"infinite","totalCost":"infinite"},"external":{"FEE_CONTRACT()":"infinite","REWARD_CONTRACT()":"infinite","addMerkleRoot(bytes32)":"infinite","claimed(bytes32)":"2483","deprecateMerkleRoot(bytes32)":"infinite","onERC20Received(address,address,uint256,bytes)":"infinite","owner()":"infinite","payoutWallet()":"infinite","recoverERC20s(address[],address[],uint256[])":"infinite","recoverERC721s(address[],address[],uint256[])":"infinite","recoverETH(address[],uint256[])":"infinite","roots(bytes32)":"2531","setPayoutWallet(address)":"infinite","supportsInterface(bytes4)":"infinite","transferOwnership(address)":"infinite"}},"methodIdentifiers":{"FEE_CONTRACT()":"1352acac","REWARD_CONTRACT()":"3a5af339","addMerkleRoot(bytes32)":"3323c807","claimed(bytes32)":"cc3c0f06","deprecateMerkleRoot(bytes32)":"3572aa8d","onERC20Received(address,address,uint256,bytes)":"4fc35859","owner()":"8da5cb5b","payoutWallet()":"8488bb4e","recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd","roots(bytes32)":"ae6dead7","setPayoutWallet(address)":"6b8f9c43","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20SafeTransfers\",\"name\":\"feeContract\",\"type\":\"address\"},{\"internalType\":\"contract IERC1155Mintable\",\"name\":\"rewardContract\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"payoutWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"}],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrayLengths\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receivedContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expectedContract\",\"type\":\"address\"}],\"name\":\"InvalidFeeContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"InvalidMerkleRoot\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"}],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"MerkleRootAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressPayoutWallet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"MerkleRootAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"MerkleRootDeprecated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"PayoutClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payoutWallet\",\"type\":\"address\"}],\"name\":\"PayoutWalletSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IERC20SafeTransfers\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IERC1155Mintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"addMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"deprecateMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC20Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"roots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPayoutWallet\",\"type\":\"address\"}],\"name\":\"setPayoutWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"PayoutWalletSet(address)\":{\"params\":{\"payoutWallet\":\"the new payout wallet address.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"payoutWallet()\":{\"returns\":{\"wallet\":\"The payout wallet.\"}},\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}},\"setPayoutWallet(address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.Emits a {PayoutWalletSet} event.\",\"params\":{\"newPayoutWallet\":\"The payout wallet.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InconsistentArrayLengths()\":[{\"notice\":\"Thrown when the multiple related arrays have different lengths.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"ZeroAddressPayoutWallet()\":[{\"notice\":\"Thrown when setting the zero address as the payout wallet.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"PayoutWalletSet(address)\":{\"notice\":\"Emitted when the payout wallet address changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"payoutWallet()\":{\"notice\":\"Gets the payout wallet.\"},\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"},\"setPayoutWallet(address)\":{\"notice\":\"Sets the payout wallet.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/payment/ChaosKingdomResourcesClaim.sol\":\"ChaosKingdomResourcesClaim\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0xe1641af73913734b212608859490f9ed908e05b496b93f91394ef68b05149da7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/PayoutWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {PayoutWalletStorage} from \\\"./libraries/PayoutWalletStorage.sol\\\";\\nimport {PayoutWalletBase} from \\\"./base/PayoutWalletBase.sol\\\";\\nimport {ContractOwnership} from \\\"../access/ContractOwnership.sol\\\";\\n\\n/// @title Payout wallet (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract PayoutWallet is PayoutWalletBase, ContractOwnership {\\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial payout wallet.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param initialPayoutWallet The initial payout wallet.\\n    constructor(address payable initialPayoutWallet) {\\n        PayoutWalletStorage.layout().constructorInit(initialPayoutWallet);\\n    }\\n}\\n\",\"keccak256\":\"0xe797f1f4f3c20e6fe6cae385d6b9a03063dfde54eb0d0575dda40e17a1297440\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/base/PayoutWalletBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IPayoutWallet} from \\\"./../interfaces/IPayoutWallet.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {PayoutWalletStorage} from \\\"./../libraries/PayoutWalletStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Payout wallet (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract PayoutWalletBase is IPayoutWallet, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\\n\\n    /// @notice Sets the payout wallet.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param newPayoutWallet The payout wallet.\\n    function setPayoutWallet(address payable newPayoutWallet) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        PayoutWalletStorage.layout().setPayoutWallet(newPayoutWallet);\\n    }\\n\\n    /// @notice Gets the payout wallet.\\n    /// @return wallet The payout wallet.\\n    function payoutWallet() external view returns (address payable wallet) {\\n        return PayoutWalletStorage.layout().payoutWallet();\\n    }\\n}\\n\",\"keccak256\":\"0xea9da06443741180f98144af17add47f0be7928db0188bd3a93200f70d4485c1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/errors/PayoutWalletErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the zero address as the payout wallet.\\nerror ZeroAddressPayoutWallet();\\n\",\"keccak256\":\"0x7780c2ef6cbd256df977985f4ed68a81d2b3f225379cab902fe76c5c892091b9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/events/PayoutWalletEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the payout wallet address changes.\\n/// @param payoutWallet the new payout wallet address.\\nevent PayoutWalletSet(address payoutWallet);\\n\",\"keccak256\":\"0x615f558fdc9544e5d2f0cd360ba35d8219b9ccc5f7545200c6fc3856be286ea4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/interfaces/IPayoutWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Payout wallet (functions)\\ninterface IPayoutWallet {\\n    /// @notice Gets the payout wallet.\\n    /// @return wallet The payout wallet.\\n    function payoutWallet() external view returns (address payable wallet);\\n}\\n\",\"keccak256\":\"0x3c2a1c03b8245bbb7bf6e215a4b8d2171cc942494a08b38d3992e234b2e3a1c8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ZeroAddressPayoutWallet} from \\\"./../errors/PayoutWalletErrors.sol\\\";\\nimport {PayoutWalletSet} from \\\"./../events/PayoutWalletEvents.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary PayoutWalletStorage {\\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\\n\\n    struct Layout {\\n        address payable wallet;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.payment.PayoutWallet.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.payment.PayoutWallet.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial payout wallet (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param initialPayoutWallet The initial payout wallet.\\n    function constructorInit(Layout storage s, address payable initialPayoutWallet) internal {\\n        s.setPayoutWallet(initialPayoutWallet);\\n    }\\n\\n    /// @notice Initializes the storage with an initial payout wallet (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param initialPayoutWallet The initial payout wallet.\\n    function proxyInit(Layout storage s, address payable initialPayoutWallet) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.setPayoutWallet(initialPayoutWallet);\\n    }\\n\\n    /// @notice Sets the payout wallet.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param newPayoutWallet The payout wallet.\\n    function setPayoutWallet(Layout storage s, address payable newPayoutWallet) internal {\\n        if (newPayoutWallet == address(0)) revert ZeroAddressPayoutWallet();\\n        s.wallet = newPayoutWallet;\\n        emit PayoutWalletSet(newPayoutWallet);\\n    }\\n\\n    /// @notice Gets the payout wallet.\\n    /// @return wallet The payout wallet.\\n    function payoutWallet(Layout storage s) internal view returns (address payable) {\\n        return s.wallet;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98c2fc2788c86d400490bb74c74be6cb4901a97dc885c15844fdc7867dd0eff8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {TokenRecoveryBase} from \\\"./base/TokenRecoveryBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../access/ContractOwnership.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0x1bc6bfe11425d5f150d4c1f3c333ecea34e6ce0f262fb74c1754d80f4ac2339f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InconsistentArrayLengths} from \\\"./../../CommonErrors.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract TokenRecoveryBase is Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            accounts[i].sendValue(amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            tokens[i].safeTransfer(accounts[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x93fcfd049c5a3c644cf65da5397ff4ec99e2f4dce32490513fa6439ee669ee34\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\\ninterface IERC1155Mintable {\\n    /// @notice Safely mints some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely mints a batch of tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xe7b1645bd7a2745c96cece104c3ef4ef07552b5ad35b2cbbf6926f85885a409f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC20Receiver} from \\\"./interfaces/IERC20Receiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20Receiver is IERC20Receiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Receiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Receiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0xa251f9496fb7e6034f007615a9882f1bbb1c3b8fa79f8eacde92549a92fe9ac4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xde544cd110ba40b2e9dad7ae46d2764be54ae09028f32bb45893f64f25f9282d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(address to, uint256 value, bytes calldata data) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(address from, address to, uint256 value, bytes calldata data) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xc9399f37c845bce36c42eb3fbbdf7e6d10e25389d9ba5262302f8e6ab7bafeda\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xb3e4a62f3cd743d7bc3b1483cbcf73d3f97b711ed707fcc833dcfb46a3bd883c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf688741f79f4838d5301dcf72d0af9eff11bbab6ab0bb112ad144c7fb672dac\",\"license\":\"MIT\"},\"contracts/payment/ChaosKingdomResourcesClaim.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {IERC20SafeTransfers} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\\\";\\nimport {IERC20Receiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\\\";\\nimport {ERC20Receiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\\\";\\nimport {IERC1155Mintable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {TokenRecovery} from \\\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\\\";\\nimport {PayoutWalletStorage} from \\\"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol\\\";\\nimport {PayoutWallet} from \\\"@animoca/ethereum-contracts/contracts/payment/PayoutWallet.sol\\\";\\n\\ncontract ChaosKingdomResourcesClaim is ContractOwnership, ERC20Receiver, TokenRecovery, PayoutWallet {\\n    using MerkleProof for bytes32[];\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\\n\\n    mapping(bytes32 => bool) public roots;\\n    mapping(bytes32 => bool) public claimed;\\n\\n    IERC1155Mintable public immutable REWARD_CONTRACT;\\n    IERC20SafeTransfers public immutable FEE_CONTRACT;\\n\\n    event MerkleRootAdded(bytes32 indexed root);\\n\\n    event MerkleRootDeprecated(bytes32 indexed root);\\n\\n    event PayoutClaimed(bytes32 indexed root, bytes32 indexed epochId, uint256 fee, address indexed recipient, uint256[] ids, uint256[] values);\\n\\n    error MerkleRootAlreadyExists(bytes32 merkleRoot);\\n\\n    error InvalidMerkleRoot(bytes32 merkleRoot);\\n\\n    error AlreadyClaimed(address recipient, uint256[] ids, uint256[] values, uint256 fee, bytes32 epochId);\\n\\n    error InvalidProof(address recipient, uint256[] ids, uint256[] values, uint256 fee, bytes32 epochId);\\n\\n    error InvalidFeeContract(address receivedContract, address expectedContract);\\n\\n    constructor(\\n        IERC20SafeTransfers feeContract,\\n        IERC1155Mintable rewardContract,\\n        address payable payoutWallet\\n    ) ContractOwnership(msg.sender) PayoutWallet(payoutWallet) {\\n        FEE_CONTRACT = feeContract;\\n        REWARD_CONTRACT = rewardContract;\\n    }\\n\\n    function onERC20Received(address, address, uint256 value, bytes calldata data) external override returns (bytes4 magicValue) {\\n        if (address(FEE_CONTRACT) != msg.sender) revert InvalidFeeContract(msg.sender, address(FEE_CONTRACT));\\n\\n        (bytes32 merkleRoot, bytes32 epochId, bytes32[] memory proof, address recipient, uint256[] memory _ids, uint256[] memory _values) = abi\\n            .decode(data, (bytes32, bytes32, bytes32[], address, uint256[], uint256[]));\\n\\n        if (!roots[merkleRoot]) revert InvalidMerkleRoot(merkleRoot);\\n\\n        bytes32 leaf = keccak256(abi.encodePacked(recipient, _ids, _values, value, epochId));\\n\\n        if (!proof.verify(merkleRoot, leaf)) revert InvalidProof(recipient, _ids, _values, value, epochId);\\n        if (claimed[leaf]) revert AlreadyClaimed(recipient, _ids, _values, value, epochId);\\n\\n        address payable payoutWallet = PayoutWalletStorage.layout().payoutWallet();\\n        FEE_CONTRACT.safeTransfer(payoutWallet, value, \\\"\\\");\\n        claimed[leaf] = true;\\n        REWARD_CONTRACT.safeBatchMint(recipient, _ids, _values, \\\"\\\");\\n        emit PayoutClaimed(merkleRoot, epochId, value, recipient, _ids, _values);\\n\\n        return IERC20Receiver.onERC20Received.selector;\\n    }\\n\\n    function addMerkleRoot(bytes32 merkleRoot) public {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        if (roots[merkleRoot]) revert MerkleRootAlreadyExists(merkleRoot);\\n\\n        roots[merkleRoot] = true;\\n        emit MerkleRootAdded(merkleRoot);\\n    }\\n\\n    function deprecateMerkleRoot(bytes32 merkleRoot) public {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        if (!roots[merkleRoot]) revert InvalidMerkleRoot(merkleRoot);\\n\\n        roots[merkleRoot] = false;\\n        emit MerkleRootDeprecated(merkleRoot);\\n    }\\n}\\n\",\"keccak256\":\"0x65b3af257d8a862b40a430c45eebc3482323afdacafc8b793bc183fe5d159f58\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2811,"contract":"contracts/payment/ChaosKingdomResourcesClaim.sol:ChaosKingdomResourcesClaim","label":"roots","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_bool)"},{"astId":2815,"contract":"contracts/payment/ChaosKingdomResourcesClaim.sol:ChaosKingdomResourcesClaim","label":"claimed","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_bool)"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"}}},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InconsistentArrayLengths()":[{"notice":"Thrown when the multiple related arrays have different lengths."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"ZeroAddressPayoutWallet()":[{"notice":"Thrown when setting the zero address as the payout wallet."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"PayoutWalletSet(address)":{"notice":"Emitted when the payout wallet address changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"payoutWallet()":{"notice":"Gets the payout wallet."},"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."},"setPayoutWallet(address)":{"notice":"Sets the payout wallet."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}}}}}